(() => {
  // ../../node_modules/custom-media-element/dist/custom-media-element.js
  var Events = [
    "abort",
    "canplay",
    "canplaythrough",
    "durationchange",
    "emptied",
    "encrypted",
    "ended",
    "error",
    "loadeddata",
    "loadedmetadata",
    "loadstart",
    "pause",
    "play",
    "playing",
    "progress",
    "ratechange",
    "seeked",
    "seeking",
    "stalled",
    "suspend",
    "timeupdate",
    "volumechange",
    "waiting",
    "waitingforkey",
    "resize",
    "enterpictureinpicture",
    "leavepictureinpicture",
    "webkitbeginfullscreen",
    "webkitendfullscreen",
    "webkitpresentationmodechanged"
  ];
  function getAudioTemplateHTML(attrs) {
    return (
      /*html*/
      `
    <style>
      :host {
        display: inline-flex;
        line-height: 0;
        flex-direction: column;
        justify-content: end;
      }

      audio {
        width: 100%;
      }
    </style>
    <slot name="media">
      <audio${serializeAttributes(attrs)}></audio>
    </slot>
    <slot></slot>
  `
    );
  }
  function getVideoTemplateHTML(attrs) {
    return (
      /*html*/
      `
    <style>
      :host {
        display: inline-block;
        line-height: 0;
      }

      video {
        max-width: 100%;
        max-height: 100%;
        min-width: 100%;
        min-height: 100%;
        object-fit: var(--media-object-fit, contain);
        object-position: var(--media-object-position, 50% 50%);
      }

      video::-webkit-media-text-track-container {
        transform: var(--media-webkit-text-track-transform);
        transition: var(--media-webkit-text-track-transition);
      }
    </style>
    <slot name="media">
      <video${serializeAttributes(attrs)}></video>
    </slot>
    <slot></slot>
  `
    );
  }
  function CustomMediaMixin(superclass, { tag, is }) {
    const nativeElTest = globalThis.document?.createElement?.(tag, { is });
    const nativeElProps = nativeElTest ? getNativeElProps(nativeElTest) : [];
    return class CustomMedia extends superclass {
      static getTemplateHTML = tag.endsWith("audio") ? getAudioTemplateHTML : getVideoTemplateHTML;
      static shadowRootOptions = { mode: "open" };
      static Events = Events;
      static #isDefined = false;
      static get observedAttributes() {
        CustomMedia.#define();
        const natAttrs = nativeElTest?.constructor?.observedAttributes ?? [];
        return [
          ...natAttrs,
          "autopictureinpicture",
          "disablepictureinpicture",
          "disableremoteplayback",
          "autoplay",
          "controls",
          "controlslist",
          "crossorigin",
          "loop",
          "muted",
          "playsinline",
          "poster",
          "preload",
          "src"
        ];
      }
      static #define() {
        if (this.#isDefined) return;
        this.#isDefined = true;
        const propsToAttrs = new Set(this.observedAttributes);
        propsToAttrs.delete("muted");
        for (const prop of nativeElProps) {
          if (prop in this.prototype) continue;
          if (typeof nativeElTest[prop] === "function") {
            this.prototype[prop] = function(...args) {
              this.#init();
              const fn = () => {
                if (this.call) return this.call(prop, ...args);
                const nativeFn = this.nativeEl?.[prop];
                return nativeFn?.apply(this.nativeEl, args);
              };
              return fn();
            };
          } else {
            const config = {
              get() {
                this.#init();
                const attr = prop.toLowerCase();
                if (propsToAttrs.has(attr)) {
                  const val = this.getAttribute(attr);
                  return val === null ? false : val === "" ? true : val;
                }
                return this.get?.(prop) ?? this.nativeEl?.[prop];
              }
            };
            if (prop !== prop.toUpperCase()) {
              config.set = function(val) {
                this.#init();
                const attr = prop.toLowerCase();
                if (propsToAttrs.has(attr)) {
                  if (val === true || val === false || val == null) {
                    this.toggleAttribute(attr, Boolean(val));
                  } else {
                    this.setAttribute(attr, val);
                  }
                  return;
                }
                if (this.set) {
                  this.set(prop, val);
                  return;
                }
                if (this.nativeEl) {
                  this.nativeEl[prop] = val;
                }
              };
            }
            Object.defineProperty(this.prototype, prop, config);
          }
        }
      }
      // Private fields
      #isInit = false;
      #nativeEl = null;
      #childMap = /* @__PURE__ */ new Map();
      #childObserver;
      get;
      set;
      call;
      // If the custom element is defined before the custom element's HTML is parsed
      // no attributes will be available in the constructor (construction process).
      // Wait until initializing in the attributeChangedCallback or
      // connectedCallback or accessing any properties.
      get nativeEl() {
        this.#init();
        return this.#nativeEl ?? this.querySelector(":scope > [slot=media]") ?? this.querySelector(tag) ?? this.shadowRoot?.querySelector(tag) ?? null;
      }
      set nativeEl(val) {
        this.#nativeEl = val;
      }
      get defaultMuted() {
        return this.hasAttribute("muted");
      }
      set defaultMuted(val) {
        this.toggleAttribute("muted", val);
      }
      get src() {
        return this.getAttribute("src");
      }
      set src(val) {
        this.setAttribute("src", `${val}`);
      }
      get preload() {
        return this.getAttribute("preload") ?? this.nativeEl?.preload;
      }
      set preload(val) {
        this.setAttribute("preload", `${val}`);
      }
      #init() {
        if (this.#isInit) return;
        this.#isInit = true;
        this.init();
      }
      init() {
        if (!this.shadowRoot) {
          this.attachShadow({ mode: "open" });
          const attrs = namedNodeMapToObject(this.attributes);
          if (is) attrs.is = is;
          if (tag) attrs.part = tag;
          this.shadowRoot.innerHTML = this.constructor.getTemplateHTML(attrs);
        }
        this.nativeEl.muted = this.hasAttribute("muted");
        for (const prop of nativeElProps) {
          this.#upgradeProperty(prop);
        }
        this.#childObserver = new MutationObserver(this.#syncMediaChildAttribute.bind(this));
        this.shadowRoot.addEventListener("slotchange", this);
        this.#syncMediaChildren();
        for (const type of this.constructor.Events) {
          this.shadowRoot?.addEventListener(type, this, true);
        }
      }
      handleEvent(event) {
        if (event.type === "slotchange") {
          this.#syncMediaChildren();
          return;
        }
        if (event.target === this.nativeEl) {
          this.dispatchEvent(new CustomEvent(event.type, { detail: event.detail }));
        }
      }
      #syncMediaChildren() {
        const removeNativeChildren = new Map(this.#childMap);
        const defaultSlot = this.shadowRoot?.querySelector("slot:not([name])");
        const mediaChildren = defaultSlot?.assignedElements({ flatten: true }).filter((el) => ["track", "source"].includes(el.localName));
        mediaChildren.forEach((el) => {
          removeNativeChildren.delete(el);
          let clone = this.#childMap.get(el);
          if (!clone) {
            clone = el.cloneNode();
            this.#childMap.set(el, clone);
            this.#childObserver?.observe(el, { attributes: true });
          }
          this.nativeEl?.append(clone);
          this.#enableDefaultTrack(clone);
        });
        removeNativeChildren.forEach((clone, el) => {
          clone.remove();
          this.#childMap.delete(el);
        });
      }
      #syncMediaChildAttribute(mutations) {
        for (const mutation of mutations) {
          if (mutation.type === "attributes") {
            const { target, attributeName } = mutation;
            const clone = this.#childMap.get(target);
            if (clone && attributeName) {
              clone.setAttribute(attributeName, target.getAttribute(attributeName) ?? "");
              this.#enableDefaultTrack(clone);
            }
          }
        }
      }
      #enableDefaultTrack(trackEl) {
        if (trackEl && trackEl.localName === "track" && trackEl.default && (trackEl.kind === "chapters" || trackEl.kind === "metadata") && trackEl.track.mode === "disabled") {
          trackEl.track.mode = "hidden";
        }
      }
      #upgradeProperty(prop) {
        if (Object.prototype.hasOwnProperty.call(this, prop)) {
          const value = this[prop];
          delete this[prop];
          this[prop] = value;
        }
      }
      attributeChangedCallback(attrName, oldValue, newValue) {
        this.#init();
        this.#forwardAttribute(attrName, oldValue, newValue);
      }
      #forwardAttribute(attrName, oldValue, newValue) {
        if (["id", "class"].includes(attrName)) return;
        if (!CustomMedia.observedAttributes.includes(attrName) && this.constructor.observedAttributes.includes(attrName)) {
          return;
        }
        if (newValue === null) {
          this.nativeEl?.removeAttribute(attrName);
        } else if (this.nativeEl?.getAttribute(attrName) !== newValue) {
          this.nativeEl?.setAttribute(attrName, newValue);
        }
      }
      connectedCallback() {
        this.#init();
      }
    };
  }
  function getNativeElProps(nativeElTest) {
    const nativeElProps = [];
    for (let proto = Object.getPrototypeOf(nativeElTest); proto && proto !== HTMLElement.prototype; proto = Object.getPrototypeOf(proto)) {
      const props = Object.getOwnPropertyNames(proto);
      nativeElProps.push(...props);
    }
    return nativeElProps;
  }
  function serializeAttributes(attrs) {
    let html = "";
    for (const key in attrs) {
      const value = attrs[key];
      if (value === "") html += ` ${key}`;
      else html += ` ${key}="${value}"`;
    }
    return html;
  }
  function namedNodeMapToObject(namedNodeMap) {
    const obj = {};
    for (const attr of namedNodeMap) {
      obj[attr.name] = attr.value;
    }
    return obj;
  }
  var CustomVideoElement = CustomMediaMixin(globalThis.HTMLElement ?? class {
  }, {
    tag: "video"
  });
  var CustomAudioElement = CustomMediaMixin(globalThis.HTMLElement ?? class {
  }, {
    tag: "audio"
  });

  // ../../node_modules/media-tracks/dist/track-event.js
  var TrackEvent = class extends Event {
    track;
    constructor(type, init) {
      super(type);
      this.track = init.track;
    }
  };

  // ../../node_modules/media-tracks/dist/utils.js
  var privateProps = /* @__PURE__ */ new WeakMap();
  function getPrivate(instance) {
    return privateProps.get(instance) ?? setPrivate(instance, {});
  }
  function setPrivate(instance, props) {
    let saved = privateProps.get(instance);
    if (!saved) privateProps.set(instance, saved = {});
    return Object.assign(saved, props);
  }

  // ../../node_modules/media-tracks/dist/video-track-list.js
  function addVideoTrack(media, track) {
    const trackList = media.videoTracks;
    getPrivate(track).media = media;
    if (!getPrivate(track).renditionSet) {
      getPrivate(track).renditionSet = /* @__PURE__ */ new Set();
    }
    const trackSet = getPrivate(trackList).trackSet;
    trackSet.add(track);
    const index = trackSet.size - 1;
    if (!(index in VideoTrackList.prototype)) {
      Object.defineProperty(VideoTrackList.prototype, index, {
        get() {
          return [...getPrivate(this).trackSet][index];
        }
      });
    }
    queueMicrotask(() => {
      trackList.dispatchEvent(new TrackEvent("addtrack", { track }));
    });
  }
  function removeVideoTrack(track) {
    const trackList = getPrivate(track).media?.videoTracks;
    if (!trackList) return;
    const trackSet = getPrivate(trackList).trackSet;
    trackSet.delete(track);
    queueMicrotask(() => {
      trackList.dispatchEvent(new TrackEvent("removetrack", { track }));
    });
  }
  function selectedChanged(selected) {
    const trackList = getPrivate(selected).media.videoTracks ?? [];
    let hasUnselected = false;
    for (const track of trackList) {
      if (track === selected) continue;
      track.selected = false;
      hasUnselected = true;
    }
    if (hasUnselected) {
      if (getPrivate(trackList).changeRequested) return;
      getPrivate(trackList).changeRequested = true;
      queueMicrotask(() => {
        delete getPrivate(trackList).changeRequested;
        trackList.dispatchEvent(new Event("change"));
      });
    }
  }
  var VideoTrackList = class extends EventTarget {
    #addTrackCallback;
    #removeTrackCallback;
    #changeCallback;
    constructor() {
      super();
      getPrivate(this).trackSet = /* @__PURE__ */ new Set();
    }
    get #tracks() {
      return getPrivate(this).trackSet;
    }
    [Symbol.iterator]() {
      return this.#tracks.values();
    }
    get length() {
      return this.#tracks.size;
    }
    getTrackById(id) {
      return [...this.#tracks].find((track) => track.id === id) ?? null;
    }
    get selectedIndex() {
      return [...this.#tracks].findIndex((track) => track.selected);
    }
    get onaddtrack() {
      return this.#addTrackCallback;
    }
    set onaddtrack(callback) {
      if (this.#addTrackCallback) {
        this.removeEventListener("addtrack", this.#addTrackCallback);
        this.#addTrackCallback = void 0;
      }
      if (typeof callback == "function") {
        this.#addTrackCallback = callback;
        this.addEventListener("addtrack", callback);
      }
    }
    get onremovetrack() {
      return this.#removeTrackCallback;
    }
    set onremovetrack(callback) {
      if (this.#removeTrackCallback) {
        this.removeEventListener("removetrack", this.#removeTrackCallback);
        this.#removeTrackCallback = void 0;
      }
      if (typeof callback == "function") {
        this.#removeTrackCallback = callback;
        this.addEventListener("removetrack", callback);
      }
    }
    get onchange() {
      return this.#changeCallback;
    }
    set onchange(callback) {
      if (this.#changeCallback) {
        this.removeEventListener("change", this.#changeCallback);
        this.#changeCallback = void 0;
      }
      if (typeof callback == "function") {
        this.#changeCallback = callback;
        this.addEventListener("change", callback);
      }
    }
  };

  // ../../node_modules/media-tracks/dist/rendition-event.js
  var RenditionEvent = class extends Event {
    rendition;
    constructor(type, init) {
      super(type);
      this.rendition = init.rendition;
    }
  };

  // ../../node_modules/media-tracks/dist/video-rendition-list.js
  function addRendition(track, rendition) {
    const renditionList = getPrivate(track).media.videoRenditions;
    getPrivate(rendition).media = getPrivate(track).media;
    getPrivate(rendition).track = track;
    const renditionSet = getPrivate(track).renditionSet;
    renditionSet.add(rendition);
    const index = renditionSet.size - 1;
    if (!(index in VideoRenditionList.prototype)) {
      Object.defineProperty(VideoRenditionList.prototype, index, {
        get() {
          return getCurrentRenditions(this)[index];
        }
      });
    }
    queueMicrotask(() => {
      if (!track.selected) return;
      renditionList.dispatchEvent(new RenditionEvent("addrendition", { rendition }));
    });
  }
  function removeRendition(rendition) {
    const renditionList = getPrivate(rendition).media.videoRenditions;
    const track = getPrivate(rendition).track;
    const renditionSet = getPrivate(track).renditionSet;
    renditionSet.delete(rendition);
    queueMicrotask(() => {
      const track2 = getPrivate(rendition).track;
      if (!track2.selected) return;
      renditionList.dispatchEvent(new RenditionEvent("removerendition", { rendition }));
    });
  }
  function selectedChanged2(rendition) {
    const renditionList = getPrivate(rendition).media.videoRenditions;
    if (!renditionList || getPrivate(renditionList).changeRequested) return;
    getPrivate(renditionList).changeRequested = true;
    queueMicrotask(() => {
      delete getPrivate(renditionList).changeRequested;
      const track = getPrivate(rendition).track;
      if (!track.selected) return;
      renditionList.dispatchEvent(new Event("change"));
    });
  }
  function getCurrentRenditions(renditionList) {
    const media = getPrivate(renditionList).media;
    return [...media.videoTracks].filter((track) => track.selected).flatMap((track) => [...getPrivate(track).renditionSet]);
  }
  var VideoRenditionList = class extends EventTarget {
    #addRenditionCallback;
    #removeRenditionCallback;
    #changeCallback;
    [Symbol.iterator]() {
      return getCurrentRenditions(this).values();
    }
    get length() {
      return getCurrentRenditions(this).length;
    }
    getRenditionById(id) {
      return getCurrentRenditions(this).find((rendition) => `${rendition.id}` === `${id}`) ?? null;
    }
    get selectedIndex() {
      return getCurrentRenditions(this).findIndex((rendition) => rendition.selected);
    }
    set selectedIndex(index) {
      for (const [i, rendition] of getCurrentRenditions(this).entries()) {
        rendition.selected = i === index;
      }
    }
    get onaddrendition() {
      return this.#addRenditionCallback;
    }
    set onaddrendition(callback) {
      if (this.#addRenditionCallback) {
        this.removeEventListener("addrendition", this.#addRenditionCallback);
        this.#addRenditionCallback = void 0;
      }
      if (typeof callback == "function") {
        this.#addRenditionCallback = callback;
        this.addEventListener("addrendition", callback);
      }
    }
    get onremoverendition() {
      return this.#removeRenditionCallback;
    }
    set onremoverendition(callback) {
      if (this.#removeRenditionCallback) {
        this.removeEventListener("removerendition", this.#removeRenditionCallback);
        this.#removeRenditionCallback = void 0;
      }
      if (typeof callback == "function") {
        this.#removeRenditionCallback = callback;
        this.addEventListener("removerendition", callback);
      }
    }
    get onchange() {
      return this.#changeCallback;
    }
    set onchange(callback) {
      if (this.#changeCallback) {
        this.removeEventListener("change", this.#changeCallback);
        this.#changeCallback = void 0;
      }
      if (typeof callback == "function") {
        this.#changeCallback = callback;
        this.addEventListener("change", callback);
      }
    }
  };

  // ../../node_modules/media-tracks/dist/video-rendition.js
  var VideoRendition = class {
    src;
    id;
    width;
    height;
    bitrate;
    frameRate;
    codec;
    #selected = false;
    get selected() {
      return this.#selected;
    }
    set selected(val) {
      if (this.#selected === val) return;
      this.#selected = val;
      selectedChanged2(this);
    }
  };

  // ../../node_modules/media-tracks/dist/video-track.js
  var VideoTrack = class {
    id;
    kind;
    label = "";
    language = "";
    sourceBuffer;
    #selected = false;
    addRendition(src, width, height, codec, bitrate, frameRate) {
      const rendition = new VideoRendition();
      rendition.src = src;
      rendition.width = width;
      rendition.height = height;
      rendition.frameRate = frameRate;
      rendition.bitrate = bitrate;
      rendition.codec = codec;
      addRendition(this, rendition);
      return rendition;
    }
    removeRendition(rendition) {
      removeRendition(rendition);
    }
    get selected() {
      return this.#selected;
    }
    set selected(val) {
      if (this.#selected === val) return;
      this.#selected = val;
      if (val !== true) return;
      selectedChanged(this);
    }
  };

  // ../../node_modules/media-tracks/dist/audio-rendition-list.js
  function addRendition2(track, rendition) {
    const renditionList = getPrivate(track).media.audioRenditions;
    getPrivate(rendition).media = getPrivate(track).media;
    getPrivate(rendition).track = track;
    const renditionSet = getPrivate(track).renditionSet;
    renditionSet.add(rendition);
    const index = renditionSet.size - 1;
    if (!(index in AudioRenditionList.prototype)) {
      Object.defineProperty(AudioRenditionList.prototype, index, {
        get() {
          return getCurrentRenditions2(this)[index];
        }
      });
    }
    queueMicrotask(() => {
      if (!track.enabled) return;
      renditionList.dispatchEvent(new RenditionEvent("addrendition", { rendition }));
    });
  }
  function removeRendition2(rendition) {
    const renditionList = getPrivate(rendition).media.audioRenditions;
    const track = getPrivate(rendition).track;
    const renditionSet = getPrivate(track).renditionSet;
    renditionSet.delete(rendition);
    queueMicrotask(() => {
      const track2 = getPrivate(rendition).track;
      if (!track2.enabled) return;
      renditionList.dispatchEvent(new RenditionEvent("removerendition", { rendition }));
    });
  }
  function selectedChanged3(rendition) {
    const renditionList = getPrivate(rendition).media.audioRenditions;
    if (!renditionList || getPrivate(renditionList).changeRequested) return;
    getPrivate(renditionList).changeRequested = true;
    queueMicrotask(() => {
      delete getPrivate(renditionList).changeRequested;
      const track = getPrivate(rendition).track;
      if (!track.enabled) return;
      renditionList.dispatchEvent(new Event("change"));
    });
  }
  function getCurrentRenditions2(renditionList) {
    const media = getPrivate(renditionList).media;
    return [...media.audioTracks].filter((track) => track.enabled).flatMap((track) => [...getPrivate(track).renditionSet]);
  }
  var AudioRenditionList = class extends EventTarget {
    #addRenditionCallback;
    #removeRenditionCallback;
    #changeCallback;
    [Symbol.iterator]() {
      return getCurrentRenditions2(this).values();
    }
    get length() {
      return getCurrentRenditions2(this).length;
    }
    getRenditionById(id) {
      return getCurrentRenditions2(this).find((rendition) => `${rendition.id}` === `${id}`) ?? null;
    }
    get selectedIndex() {
      return getCurrentRenditions2(this).findIndex((rendition) => rendition.selected);
    }
    set selectedIndex(index) {
      for (const [i, rendition] of getCurrentRenditions2(this).entries()) {
        rendition.selected = i === index;
      }
    }
    get onaddrendition() {
      return this.#addRenditionCallback;
    }
    set onaddrendition(callback) {
      if (this.#addRenditionCallback) {
        this.removeEventListener("addrendition", this.#addRenditionCallback);
        this.#addRenditionCallback = void 0;
      }
      if (typeof callback == "function") {
        this.#addRenditionCallback = callback;
        this.addEventListener("addrendition", callback);
      }
    }
    get onremoverendition() {
      return this.#removeRenditionCallback;
    }
    set onremoverendition(callback) {
      if (this.#removeRenditionCallback) {
        this.removeEventListener("removerendition", this.#removeRenditionCallback);
        this.#removeRenditionCallback = void 0;
      }
      if (typeof callback == "function") {
        this.#removeRenditionCallback = callback;
        this.addEventListener("removerendition", callback);
      }
    }
    get onchange() {
      return this.#changeCallback;
    }
    set onchange(callback) {
      if (this.#changeCallback) {
        this.removeEventListener("change", this.#changeCallback);
        this.#changeCallback = void 0;
      }
      if (typeof callback == "function") {
        this.#changeCallback = callback;
        this.addEventListener("change", callback);
      }
    }
  };

  // ../../node_modules/media-tracks/dist/audio-rendition.js
  var AudioRendition = class {
    src;
    id;
    bitrate;
    codec;
    #selected = false;
    get selected() {
      return this.#selected;
    }
    set selected(val) {
      if (this.#selected === val) return;
      this.#selected = val;
      selectedChanged3(this);
    }
  };

  // ../../node_modules/media-tracks/dist/audio-track-list.js
  function addAudioTrack(media, track) {
    const trackList = media.audioTracks;
    getPrivate(track).media = media;
    if (!getPrivate(track).renditionSet) {
      getPrivate(track).renditionSet = /* @__PURE__ */ new Set();
    }
    const trackSet = getPrivate(trackList).trackSet;
    trackSet.add(track);
    const index = trackSet.size - 1;
    if (!(index in AudioTrackList.prototype)) {
      Object.defineProperty(AudioTrackList.prototype, index, {
        get() {
          return [...getPrivate(this).trackSet][index];
        }
      });
    }
    queueMicrotask(() => {
      trackList.dispatchEvent(new TrackEvent("addtrack", { track }));
    });
  }
  function removeAudioTrack(track) {
    const trackList = getPrivate(track).media?.audioTracks;
    if (!trackList) return;
    const trackSet = getPrivate(trackList).trackSet;
    trackSet.delete(track);
    queueMicrotask(() => {
      trackList.dispatchEvent(new TrackEvent("removetrack", { track }));
    });
  }
  function enabledChanged(track) {
    const trackList = getPrivate(track).media.audioTracks;
    if (!trackList || getPrivate(trackList).changeRequested) return;
    getPrivate(trackList).changeRequested = true;
    queueMicrotask(() => {
      delete getPrivate(trackList).changeRequested;
      trackList.dispatchEvent(new Event("change"));
    });
  }
  var AudioTrackList = class extends EventTarget {
    #addTrackCallback;
    #removeTrackCallback;
    #changeCallback;
    constructor() {
      super();
      getPrivate(this).trackSet = /* @__PURE__ */ new Set();
    }
    get #tracks() {
      return getPrivate(this).trackSet;
    }
    [Symbol.iterator]() {
      return this.#tracks.values();
    }
    get length() {
      return this.#tracks.size;
    }
    getTrackById(id) {
      return [...this.#tracks].find((track) => track.id === id) ?? null;
    }
    get onaddtrack() {
      return this.#addTrackCallback;
    }
    set onaddtrack(callback) {
      if (this.#addTrackCallback) {
        this.removeEventListener("addtrack", this.#addTrackCallback);
        this.#addTrackCallback = void 0;
      }
      if (typeof callback == "function") {
        this.#addTrackCallback = callback;
        this.addEventListener("addtrack", callback);
      }
    }
    get onremovetrack() {
      return this.#removeTrackCallback;
    }
    set onremovetrack(callback) {
      if (this.#removeTrackCallback) {
        this.removeEventListener("removetrack", this.#removeTrackCallback);
        this.#removeTrackCallback = void 0;
      }
      if (typeof callback == "function") {
        this.#removeTrackCallback = callback;
        this.addEventListener("removetrack", callback);
      }
    }
    get onchange() {
      return this.#changeCallback;
    }
    set onchange(callback) {
      if (this.#changeCallback) {
        this.removeEventListener("change", this.#changeCallback);
        this.#changeCallback = void 0;
      }
      if (typeof callback == "function") {
        this.#changeCallback = callback;
        this.addEventListener("change", callback);
      }
    }
  };

  // ../../node_modules/media-tracks/dist/audio-track.js
  var AudioTrack = class {
    id;
    kind;
    label = "";
    language = "";
    sourceBuffer;
    #enabled = false;
    addRendition(src, codec, bitrate) {
      const rendition = new AudioRendition();
      rendition.src = src;
      rendition.codec = codec;
      rendition.bitrate = bitrate;
      addRendition2(this, rendition);
      return rendition;
    }
    removeRendition(rendition) {
      removeRendition2(rendition);
    }
    get enabled() {
      return this.#enabled;
    }
    set enabled(val) {
      if (this.#enabled === val) return;
      this.#enabled = val;
      enabledChanged(this);
    }
  };

  // ../../node_modules/media-tracks/dist/mixin.js
  var nativeVideoTracksFn = getBaseMediaTracksFn(globalThis.HTMLMediaElement, "video");
  var nativeAudioTracksFn = getBaseMediaTracksFn(globalThis.HTMLMediaElement, "audio");
  function MediaTracksMixin(MediaElementClass) {
    if (!MediaElementClass?.prototype) return MediaElementClass;
    const videoTracksFn = getBaseMediaTracksFn(MediaElementClass, "video");
    if (!videoTracksFn || `${videoTracksFn}`.includes("[native code]")) {
      Object.defineProperty(MediaElementClass.prototype, "videoTracks", {
        get() {
          return getVideoTracks(this);
        }
      });
    }
    const audioTracksFn = getBaseMediaTracksFn(MediaElementClass, "audio");
    if (!audioTracksFn || `${audioTracksFn}`.includes("[native code]")) {
      Object.defineProperty(MediaElementClass.prototype, "audioTracks", {
        get() {
          return getAudioTracks(this);
        }
      });
    }
    if (!("addVideoTrack" in MediaElementClass.prototype)) {
      MediaElementClass.prototype.addVideoTrack = function(kind, label = "", language = "") {
        const track = new VideoTrack();
        track.kind = kind;
        track.label = label;
        track.language = language;
        addVideoTrack(this, track);
        return track;
      };
    }
    if (!("removeVideoTrack" in MediaElementClass.prototype)) {
      MediaElementClass.prototype.removeVideoTrack = removeVideoTrack;
    }
    if (!("addAudioTrack" in MediaElementClass.prototype)) {
      MediaElementClass.prototype.addAudioTrack = function(kind, label = "", language = "") {
        const track = new AudioTrack();
        track.kind = kind;
        track.label = label;
        track.language = language;
        addAudioTrack(this, track);
        return track;
      };
    }
    if (!("removeAudioTrack" in MediaElementClass.prototype)) {
      MediaElementClass.prototype.removeAudioTrack = removeAudioTrack;
    }
    if (!("videoRenditions" in MediaElementClass.prototype)) {
      Object.defineProperty(MediaElementClass.prototype, "videoRenditions", {
        get() {
          return initVideoRenditions(this);
        }
      });
    }
    const initVideoRenditions = (media) => {
      let renditions = getPrivate(media).videoRenditions;
      if (!renditions) {
        renditions = new VideoRenditionList();
        getPrivate(renditions).media = media;
        getPrivate(media).videoRenditions = renditions;
      }
      return renditions;
    };
    if (!("audioRenditions" in MediaElementClass.prototype)) {
      Object.defineProperty(MediaElementClass.prototype, "audioRenditions", {
        get() {
          return initAudioRenditions(this);
        }
      });
    }
    const initAudioRenditions = (media) => {
      let renditions = getPrivate(media).audioRenditions;
      if (!renditions) {
        renditions = new AudioRenditionList();
        getPrivate(renditions).media = media;
        getPrivate(media).audioRenditions = renditions;
      }
      return renditions;
    };
    return MediaElementClass;
  }
  function getBaseMediaTracksFn(MediaElementClass, type) {
    if (MediaElementClass?.prototype) {
      return Object.getOwnPropertyDescriptor(MediaElementClass.prototype, `${type}Tracks`)?.get;
    }
  }
  function getVideoTracks(media) {
    let tracks = getPrivate(media).videoTracks;
    if (!tracks) {
      tracks = new VideoTrackList();
      getPrivate(media).videoTracks = tracks;
      if (nativeVideoTracksFn) {
        const nativeTracks = nativeVideoTracksFn.call(media.nativeEl ?? media);
        for (const nativeTrack of nativeTracks) {
          addVideoTrack(media, nativeTrack);
        }
        nativeTracks.addEventListener("change", () => {
          tracks.dispatchEvent(new Event("change"));
        });
        nativeTracks.addEventListener("addtrack", (event) => {
          if ([...tracks].some((t2) => t2 instanceof VideoTrack)) {
            for (const nativeTrack of nativeTracks) {
              removeVideoTrack(nativeTrack);
            }
            return;
          }
          addVideoTrack(media, event.track);
        });
        nativeTracks.addEventListener("removetrack", (event) => {
          removeVideoTrack(event.track);
        });
      }
    }
    return tracks;
  }
  function getAudioTracks(media) {
    let tracks = getPrivate(media).audioTracks;
    if (!tracks) {
      tracks = new AudioTrackList();
      getPrivate(media).audioTracks = tracks;
      if (nativeAudioTracksFn) {
        const nativeTracks = nativeAudioTracksFn.call(media.nativeEl ?? media);
        for (const nativeTrack of nativeTracks) {
          addAudioTrack(media, nativeTrack);
        }
        nativeTracks.addEventListener("change", () => {
          tracks.dispatchEvent(new Event("change"));
        });
        nativeTracks.addEventListener("addtrack", (event) => {
          if ([...tracks].some((t2) => t2 instanceof AudioTrack)) {
            for (const nativeTrack of nativeTracks) {
              removeAudioTrack(nativeTrack);
            }
            return;
          }
          addAudioTrack(media, event.track);
        });
        nativeTracks.addEventListener("removetrack", (event) => {
          removeAudioTrack(event.track);
        });
      }
    }
    return tracks;
  }

  // ../../node_modules/hls.js/dist/hls.mjs
  function getDefaultExportFromCjs(x) {
    return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
  }
  var urlToolkit = { exports: {} };
  (function(module, exports) {
    (function(root) {
      var URL_REGEX = /^(?=((?:[a-zA-Z0-9+\-.]+:)?))\1(?=((?:\/\/[^\/?#]*)?))\2(?=((?:(?:[^?#\/]*\/)*[^;?#\/]*)?))\3((?:;[^?#]*)?)(\?[^#]*)?(#[^]*)?$/;
      var FIRST_SEGMENT_REGEX = /^(?=([^\/?#]*))\1([^]*)$/;
      var SLASH_DOT_REGEX = /(?:\/|^)\.(?=\/)/g;
      var SLASH_DOT_DOT_REGEX = /(?:\/|^)\.\.\/(?!\.\.\/)[^\/]*(?=\/)/g;
      var URLToolkit = {
        // If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //
        // E.g
        // With opts.alwaysNormalize = false (default, spec compliant)
        // http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g
        // With opts.alwaysNormalize = true (not spec compliant)
        // http://a.com/b/cd + /e/f/../g => http://a.com/e/g
        buildAbsoluteURL: function(baseURL, relativeURL, opts) {
          opts = opts || {};
          baseURL = baseURL.trim();
          relativeURL = relativeURL.trim();
          if (!relativeURL) {
            if (!opts.alwaysNormalize) {
              return baseURL;
            }
            var basePartsForNormalise = URLToolkit.parseURL(baseURL);
            if (!basePartsForNormalise) {
              throw new Error("Error trying to parse base URL.");
            }
            basePartsForNormalise.path = URLToolkit.normalizePath(
              basePartsForNormalise.path
            );
            return URLToolkit.buildURLFromParts(basePartsForNormalise);
          }
          var relativeParts = URLToolkit.parseURL(relativeURL);
          if (!relativeParts) {
            throw new Error("Error trying to parse relative URL.");
          }
          if (relativeParts.scheme) {
            if (!opts.alwaysNormalize) {
              return relativeURL;
            }
            relativeParts.path = URLToolkit.normalizePath(relativeParts.path);
            return URLToolkit.buildURLFromParts(relativeParts);
          }
          var baseParts = URLToolkit.parseURL(baseURL);
          if (!baseParts) {
            throw new Error("Error trying to parse base URL.");
          }
          if (!baseParts.netLoc && baseParts.path && baseParts.path[0] !== "/") {
            var pathParts = FIRST_SEGMENT_REGEX.exec(baseParts.path);
            baseParts.netLoc = pathParts[1];
            baseParts.path = pathParts[2];
          }
          if (baseParts.netLoc && !baseParts.path) {
            baseParts.path = "/";
          }
          var builtParts = {
            // 2c) Otherwise, the embedded URL inherits the scheme of
            // the base URL.
            scheme: baseParts.scheme,
            netLoc: relativeParts.netLoc,
            path: null,
            params: relativeParts.params,
            query: relativeParts.query,
            fragment: relativeParts.fragment
          };
          if (!relativeParts.netLoc) {
            builtParts.netLoc = baseParts.netLoc;
            if (relativeParts.path[0] !== "/") {
              if (!relativeParts.path) {
                builtParts.path = baseParts.path;
                if (!relativeParts.params) {
                  builtParts.params = baseParts.params;
                  if (!relativeParts.query) {
                    builtParts.query = baseParts.query;
                  }
                }
              } else {
                var baseURLPath = baseParts.path;
                var newPath = baseURLPath.substring(0, baseURLPath.lastIndexOf("/") + 1) + relativeParts.path;
                builtParts.path = URLToolkit.normalizePath(newPath);
              }
            }
          }
          if (builtParts.path === null) {
            builtParts.path = opts.alwaysNormalize ? URLToolkit.normalizePath(relativeParts.path) : relativeParts.path;
          }
          return URLToolkit.buildURLFromParts(builtParts);
        },
        parseURL: function(url) {
          var parts = URL_REGEX.exec(url);
          if (!parts) {
            return null;
          }
          return {
            scheme: parts[1] || "",
            netLoc: parts[2] || "",
            path: parts[3] || "",
            params: parts[4] || "",
            query: parts[5] || "",
            fragment: parts[6] || ""
          };
        },
        normalizePath: function(path) {
          path = path.split("").reverse().join("").replace(SLASH_DOT_REGEX, "");
          while (path.length !== (path = path.replace(SLASH_DOT_DOT_REGEX, "")).length) {
          }
          return path.split("").reverse().join("");
        },
        buildURLFromParts: function(parts) {
          return parts.scheme + parts.netLoc + parts.path + parts.params + parts.query + parts.fragment;
        }
      };
      module.exports = URLToolkit;
    })();
  })(urlToolkit);
  var urlToolkitExports = urlToolkit.exports;
  function ownKeys(e, r) {
    var t2 = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e, r2).enumerable;
      })), t2.push.apply(t2, o);
    }
    return t2;
  }
  function _objectSpread2(e) {
    for (var r = 1; r < arguments.length; r++) {
      var t2 = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys(Object(t2), true).forEach(function(r2) {
        _defineProperty(e, r2, t2[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t2)) : ownKeys(Object(t2)).forEach(function(r2) {
        Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t2, r2));
      });
    }
    return e;
  }
  function _toPrimitive(t2, r) {
    if ("object" != typeof t2 || !t2) return t2;
    var e = t2[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t2, r || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }
  function _toPropertyKey(t2) {
    var i = _toPrimitive(t2, "string");
    return "symbol" == typeof i ? i : String(i);
  }
  function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  var isFiniteNumber = Number.isFinite || function(value) {
    return typeof value === "number" && isFinite(value);
  };
  var isSafeInteger = Number.isSafeInteger || function(value) {
    return typeof value === "number" && Math.abs(value) <= MAX_SAFE_INTEGER;
  };
  var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
  var Events2 = /* @__PURE__ */ function(Events3) {
    Events3["MEDIA_ATTACHING"] = "hlsMediaAttaching";
    Events3["MEDIA_ATTACHED"] = "hlsMediaAttached";
    Events3["MEDIA_DETACHING"] = "hlsMediaDetaching";
    Events3["MEDIA_DETACHED"] = "hlsMediaDetached";
    Events3["BUFFER_RESET"] = "hlsBufferReset";
    Events3["BUFFER_CODECS"] = "hlsBufferCodecs";
    Events3["BUFFER_CREATED"] = "hlsBufferCreated";
    Events3["BUFFER_APPENDING"] = "hlsBufferAppending";
    Events3["BUFFER_APPENDED"] = "hlsBufferAppended";
    Events3["BUFFER_EOS"] = "hlsBufferEos";
    Events3["BUFFER_FLUSHING"] = "hlsBufferFlushing";
    Events3["BUFFER_FLUSHED"] = "hlsBufferFlushed";
    Events3["MANIFEST_LOADING"] = "hlsManifestLoading";
    Events3["MANIFEST_LOADED"] = "hlsManifestLoaded";
    Events3["MANIFEST_PARSED"] = "hlsManifestParsed";
    Events3["LEVEL_SWITCHING"] = "hlsLevelSwitching";
    Events3["LEVEL_SWITCHED"] = "hlsLevelSwitched";
    Events3["LEVEL_LOADING"] = "hlsLevelLoading";
    Events3["LEVEL_LOADED"] = "hlsLevelLoaded";
    Events3["LEVEL_UPDATED"] = "hlsLevelUpdated";
    Events3["LEVEL_PTS_UPDATED"] = "hlsLevelPtsUpdated";
    Events3["LEVELS_UPDATED"] = "hlsLevelsUpdated";
    Events3["AUDIO_TRACKS_UPDATED"] = "hlsAudioTracksUpdated";
    Events3["AUDIO_TRACK_SWITCHING"] = "hlsAudioTrackSwitching";
    Events3["AUDIO_TRACK_SWITCHED"] = "hlsAudioTrackSwitched";
    Events3["AUDIO_TRACK_LOADING"] = "hlsAudioTrackLoading";
    Events3["AUDIO_TRACK_LOADED"] = "hlsAudioTrackLoaded";
    Events3["SUBTITLE_TRACKS_UPDATED"] = "hlsSubtitleTracksUpdated";
    Events3["SUBTITLE_TRACKS_CLEARED"] = "hlsSubtitleTracksCleared";
    Events3["SUBTITLE_TRACK_SWITCH"] = "hlsSubtitleTrackSwitch";
    Events3["SUBTITLE_TRACK_LOADING"] = "hlsSubtitleTrackLoading";
    Events3["SUBTITLE_TRACK_LOADED"] = "hlsSubtitleTrackLoaded";
    Events3["SUBTITLE_FRAG_PROCESSED"] = "hlsSubtitleFragProcessed";
    Events3["CUES_PARSED"] = "hlsCuesParsed";
    Events3["NON_NATIVE_TEXT_TRACKS_FOUND"] = "hlsNonNativeTextTracksFound";
    Events3["INIT_PTS_FOUND"] = "hlsInitPtsFound";
    Events3["FRAG_LOADING"] = "hlsFragLoading";
    Events3["FRAG_LOAD_EMERGENCY_ABORTED"] = "hlsFragLoadEmergencyAborted";
    Events3["FRAG_LOADED"] = "hlsFragLoaded";
    Events3["FRAG_DECRYPTED"] = "hlsFragDecrypted";
    Events3["FRAG_PARSING_INIT_SEGMENT"] = "hlsFragParsingInitSegment";
    Events3["FRAG_PARSING_USERDATA"] = "hlsFragParsingUserdata";
    Events3["FRAG_PARSING_METADATA"] = "hlsFragParsingMetadata";
    Events3["FRAG_PARSED"] = "hlsFragParsed";
    Events3["FRAG_BUFFERED"] = "hlsFragBuffered";
    Events3["FRAG_CHANGED"] = "hlsFragChanged";
    Events3["FPS_DROP"] = "hlsFpsDrop";
    Events3["FPS_DROP_LEVEL_CAPPING"] = "hlsFpsDropLevelCapping";
    Events3["MAX_AUTO_LEVEL_UPDATED"] = "hlsMaxAutoLevelUpdated";
    Events3["ERROR"] = "hlsError";
    Events3["DESTROYING"] = "hlsDestroying";
    Events3["KEY_LOADING"] = "hlsKeyLoading";
    Events3["KEY_LOADED"] = "hlsKeyLoaded";
    Events3["LIVE_BACK_BUFFER_REACHED"] = "hlsLiveBackBufferReached";
    Events3["BACK_BUFFER_REACHED"] = "hlsBackBufferReached";
    Events3["STEERING_MANIFEST_LOADED"] = "hlsSteeringManifestLoaded";
    return Events3;
  }({});
  var ErrorTypes = /* @__PURE__ */ function(ErrorTypes2) {
    ErrorTypes2["NETWORK_ERROR"] = "networkError";
    ErrorTypes2["MEDIA_ERROR"] = "mediaError";
    ErrorTypes2["KEY_SYSTEM_ERROR"] = "keySystemError";
    ErrorTypes2["MUX_ERROR"] = "muxError";
    ErrorTypes2["OTHER_ERROR"] = "otherError";
    return ErrorTypes2;
  }({});
  var ErrorDetails = /* @__PURE__ */ function(ErrorDetails2) {
    ErrorDetails2["KEY_SYSTEM_NO_KEYS"] = "keySystemNoKeys";
    ErrorDetails2["KEY_SYSTEM_NO_ACCESS"] = "keySystemNoAccess";
    ErrorDetails2["KEY_SYSTEM_NO_SESSION"] = "keySystemNoSession";
    ErrorDetails2["KEY_SYSTEM_NO_CONFIGURED_LICENSE"] = "keySystemNoConfiguredLicense";
    ErrorDetails2["KEY_SYSTEM_LICENSE_REQUEST_FAILED"] = "keySystemLicenseRequestFailed";
    ErrorDetails2["KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED"] = "keySystemServerCertificateRequestFailed";
    ErrorDetails2["KEY_SYSTEM_SERVER_CERTIFICATE_UPDATE_FAILED"] = "keySystemServerCertificateUpdateFailed";
    ErrorDetails2["KEY_SYSTEM_SESSION_UPDATE_FAILED"] = "keySystemSessionUpdateFailed";
    ErrorDetails2["KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED"] = "keySystemStatusOutputRestricted";
    ErrorDetails2["KEY_SYSTEM_STATUS_INTERNAL_ERROR"] = "keySystemStatusInternalError";
    ErrorDetails2["MANIFEST_LOAD_ERROR"] = "manifestLoadError";
    ErrorDetails2["MANIFEST_LOAD_TIMEOUT"] = "manifestLoadTimeOut";
    ErrorDetails2["MANIFEST_PARSING_ERROR"] = "manifestParsingError";
    ErrorDetails2["MANIFEST_INCOMPATIBLE_CODECS_ERROR"] = "manifestIncompatibleCodecsError";
    ErrorDetails2["LEVEL_EMPTY_ERROR"] = "levelEmptyError";
    ErrorDetails2["LEVEL_LOAD_ERROR"] = "levelLoadError";
    ErrorDetails2["LEVEL_LOAD_TIMEOUT"] = "levelLoadTimeOut";
    ErrorDetails2["LEVEL_PARSING_ERROR"] = "levelParsingError";
    ErrorDetails2["LEVEL_SWITCH_ERROR"] = "levelSwitchError";
    ErrorDetails2["AUDIO_TRACK_LOAD_ERROR"] = "audioTrackLoadError";
    ErrorDetails2["AUDIO_TRACK_LOAD_TIMEOUT"] = "audioTrackLoadTimeOut";
    ErrorDetails2["SUBTITLE_LOAD_ERROR"] = "subtitleTrackLoadError";
    ErrorDetails2["SUBTITLE_TRACK_LOAD_TIMEOUT"] = "subtitleTrackLoadTimeOut";
    ErrorDetails2["FRAG_LOAD_ERROR"] = "fragLoadError";
    ErrorDetails2["FRAG_LOAD_TIMEOUT"] = "fragLoadTimeOut";
    ErrorDetails2["FRAG_DECRYPT_ERROR"] = "fragDecryptError";
    ErrorDetails2["FRAG_PARSING_ERROR"] = "fragParsingError";
    ErrorDetails2["FRAG_GAP"] = "fragGap";
    ErrorDetails2["REMUX_ALLOC_ERROR"] = "remuxAllocError";
    ErrorDetails2["KEY_LOAD_ERROR"] = "keyLoadError";
    ErrorDetails2["KEY_LOAD_TIMEOUT"] = "keyLoadTimeOut";
    ErrorDetails2["BUFFER_ADD_CODEC_ERROR"] = "bufferAddCodecError";
    ErrorDetails2["BUFFER_INCOMPATIBLE_CODECS_ERROR"] = "bufferIncompatibleCodecsError";
    ErrorDetails2["BUFFER_APPEND_ERROR"] = "bufferAppendError";
    ErrorDetails2["BUFFER_APPENDING_ERROR"] = "bufferAppendingError";
    ErrorDetails2["BUFFER_STALLED_ERROR"] = "bufferStalledError";
    ErrorDetails2["BUFFER_FULL_ERROR"] = "bufferFullError";
    ErrorDetails2["BUFFER_SEEK_OVER_HOLE"] = "bufferSeekOverHole";
    ErrorDetails2["BUFFER_NUDGE_ON_STALL"] = "bufferNudgeOnStall";
    ErrorDetails2["INTERNAL_EXCEPTION"] = "internalException";
    ErrorDetails2["INTERNAL_ABORTED"] = "aborted";
    ErrorDetails2["UNKNOWN"] = "unknown";
    return ErrorDetails2;
  }({});
  var noop = function noop2() {
  };
  var fakeLogger = {
    trace: noop,
    debug: noop,
    log: noop,
    warn: noop,
    info: noop,
    error: noop
  };
  var exportedLogger = fakeLogger;
  function consolePrintFn(type) {
    const func = self.console[type];
    if (func) {
      return func.bind(self.console, `[${type}] >`);
    }
    return noop;
  }
  function exportLoggerFunctions(debugConfig, ...functions) {
    functions.forEach(function(type) {
      exportedLogger[type] = debugConfig[type] ? debugConfig[type].bind(debugConfig) : consolePrintFn(type);
    });
  }
  function enableLogs(debugConfig, id) {
    if (typeof console === "object" && debugConfig === true || typeof debugConfig === "object") {
      exportLoggerFunctions(
        debugConfig,
        // Remove out from list here to hard-disable a log-level
        // 'trace',
        "debug",
        "log",
        "info",
        "warn",
        "error"
      );
      try {
        exportedLogger.log(`Debug logs enabled for "${id}" in hls.js version ${"1.5.18"}`);
      } catch (e) {
        exportedLogger = fakeLogger;
      }
    } else {
      exportedLogger = fakeLogger;
    }
  }
  var logger = exportedLogger;
  var DECIMAL_RESOLUTION_REGEX = /^(\d+)x(\d+)$/;
  var ATTR_LIST_REGEX = /(.+?)=(".*?"|.*?)(?:,|$)/g;
  var AttrList = class _AttrList {
    constructor(attrs) {
      if (typeof attrs === "string") {
        attrs = _AttrList.parseAttrList(attrs);
      }
      _extends(this, attrs);
    }
    get clientAttrs() {
      return Object.keys(this).filter((attr) => attr.substring(0, 2) === "X-");
    }
    decimalInteger(attrName) {
      const intValue = parseInt(this[attrName], 10);
      if (intValue > Number.MAX_SAFE_INTEGER) {
        return Infinity;
      }
      return intValue;
    }
    hexadecimalInteger(attrName) {
      if (this[attrName]) {
        let stringValue = (this[attrName] || "0x").slice(2);
        stringValue = (stringValue.length & 1 ? "0" : "") + stringValue;
        const value = new Uint8Array(stringValue.length / 2);
        for (let i = 0; i < stringValue.length / 2; i++) {
          value[i] = parseInt(stringValue.slice(i * 2, i * 2 + 2), 16);
        }
        return value;
      } else {
        return null;
      }
    }
    hexadecimalIntegerAsNumber(attrName) {
      const intValue = parseInt(this[attrName], 16);
      if (intValue > Number.MAX_SAFE_INTEGER) {
        return Infinity;
      }
      return intValue;
    }
    decimalFloatingPoint(attrName) {
      return parseFloat(this[attrName]);
    }
    optionalFloat(attrName, defaultValue) {
      const value = this[attrName];
      return value ? parseFloat(value) : defaultValue;
    }
    enumeratedString(attrName) {
      return this[attrName];
    }
    bool(attrName) {
      return this[attrName] === "YES";
    }
    decimalResolution(attrName) {
      const res = DECIMAL_RESOLUTION_REGEX.exec(this[attrName]);
      if (res === null) {
        return void 0;
      }
      return {
        width: parseInt(res[1], 10),
        height: parseInt(res[2], 10)
      };
    }
    static parseAttrList(input) {
      let match;
      const attrs = {};
      const quote = '"';
      ATTR_LIST_REGEX.lastIndex = 0;
      while ((match = ATTR_LIST_REGEX.exec(input)) !== null) {
        let value = match[2];
        if (value.indexOf(quote) === 0 && value.lastIndexOf(quote) === value.length - 1) {
          value = value.slice(1, -1);
        }
        const name = match[1].trim();
        attrs[name] = value;
      }
      return attrs;
    }
  };
  function isDateRangeCueAttribute(attrName) {
    return attrName !== "ID" && attrName !== "CLASS" && attrName !== "START-DATE" && attrName !== "DURATION" && attrName !== "END-DATE" && attrName !== "END-ON-NEXT";
  }
  function isSCTE35Attribute(attrName) {
    return attrName === "SCTE35-OUT" || attrName === "SCTE35-IN";
  }
  var DateRange = class {
    constructor(dateRangeAttr, dateRangeWithSameId) {
      this.attr = void 0;
      this._startDate = void 0;
      this._endDate = void 0;
      this._badValueForSameId = void 0;
      if (dateRangeWithSameId) {
        const previousAttr = dateRangeWithSameId.attr;
        for (const key in previousAttr) {
          if (Object.prototype.hasOwnProperty.call(dateRangeAttr, key) && dateRangeAttr[key] !== previousAttr[key]) {
            logger.warn(`DATERANGE tag attribute: "${key}" does not match for tags with ID: "${dateRangeAttr.ID}"`);
            this._badValueForSameId = key;
            break;
          }
        }
        dateRangeAttr = _extends(new AttrList({}), previousAttr, dateRangeAttr);
      }
      this.attr = dateRangeAttr;
      this._startDate = new Date(dateRangeAttr["START-DATE"]);
      if ("END-DATE" in this.attr) {
        const endDate = new Date(this.attr["END-DATE"]);
        if (isFiniteNumber(endDate.getTime())) {
          this._endDate = endDate;
        }
      }
    }
    get id() {
      return this.attr.ID;
    }
    get class() {
      return this.attr.CLASS;
    }
    get startDate() {
      return this._startDate;
    }
    get endDate() {
      if (this._endDate) {
        return this._endDate;
      }
      const duration = this.duration;
      if (duration !== null) {
        return new Date(this._startDate.getTime() + duration * 1e3);
      }
      return null;
    }
    get duration() {
      if ("DURATION" in this.attr) {
        const duration = this.attr.decimalFloatingPoint("DURATION");
        if (isFiniteNumber(duration)) {
          return duration;
        }
      } else if (this._endDate) {
        return (this._endDate.getTime() - this._startDate.getTime()) / 1e3;
      }
      return null;
    }
    get plannedDuration() {
      if ("PLANNED-DURATION" in this.attr) {
        return this.attr.decimalFloatingPoint("PLANNED-DURATION");
      }
      return null;
    }
    get endOnNext() {
      return this.attr.bool("END-ON-NEXT");
    }
    get isValid() {
      return !!this.id && !this._badValueForSameId && isFiniteNumber(this.startDate.getTime()) && (this.duration === null || this.duration >= 0) && (!this.endOnNext || !!this.class);
    }
  };
  var LoadStats = class {
    constructor() {
      this.aborted = false;
      this.loaded = 0;
      this.retry = 0;
      this.total = 0;
      this.chunkCount = 0;
      this.bwEstimate = 0;
      this.loading = {
        start: 0,
        first: 0,
        end: 0
      };
      this.parsing = {
        start: 0,
        end: 0
      };
      this.buffering = {
        start: 0,
        first: 0,
        end: 0
      };
    }
  };
  var ElementaryStreamTypes = {
    AUDIO: "audio",
    VIDEO: "video",
    AUDIOVIDEO: "audiovideo"
  };
  var BaseSegment = class {
    constructor(baseurl) {
      this._byteRange = null;
      this._url = null;
      this.baseurl = void 0;
      this.relurl = void 0;
      this.elementaryStreams = {
        [ElementaryStreamTypes.AUDIO]: null,
        [ElementaryStreamTypes.VIDEO]: null,
        [ElementaryStreamTypes.AUDIOVIDEO]: null
      };
      this.baseurl = baseurl;
    }
    // setByteRange converts a EXT-X-BYTERANGE attribute into a two element array
    setByteRange(value, previous) {
      const params = value.split("@", 2);
      let start;
      if (params.length === 1) {
        start = (previous == null ? void 0 : previous.byteRangeEndOffset) || 0;
      } else {
        start = parseInt(params[1]);
      }
      this._byteRange = [start, parseInt(params[0]) + start];
    }
    get byteRange() {
      if (!this._byteRange) {
        return [];
      }
      return this._byteRange;
    }
    get byteRangeStartOffset() {
      return this.byteRange[0];
    }
    get byteRangeEndOffset() {
      return this.byteRange[1];
    }
    get url() {
      if (!this._url && this.baseurl && this.relurl) {
        this._url = urlToolkitExports.buildAbsoluteURL(this.baseurl, this.relurl, {
          alwaysNormalize: true
        });
      }
      return this._url || "";
    }
    set url(value) {
      this._url = value;
    }
  };
  var Fragment = class extends BaseSegment {
    constructor(type, baseurl) {
      super(baseurl);
      this._decryptdata = null;
      this.rawProgramDateTime = null;
      this.programDateTime = null;
      this.tagList = [];
      this.duration = 0;
      this.sn = 0;
      this.levelkeys = void 0;
      this.type = void 0;
      this.loader = null;
      this.keyLoader = null;
      this.level = -1;
      this.cc = 0;
      this.startPTS = void 0;
      this.endPTS = void 0;
      this.startDTS = void 0;
      this.endDTS = void 0;
      this.start = 0;
      this.deltaPTS = void 0;
      this.maxStartPTS = void 0;
      this.minEndPTS = void 0;
      this.stats = new LoadStats();
      this.data = void 0;
      this.bitrateTest = false;
      this.title = null;
      this.initSegment = null;
      this.endList = void 0;
      this.gap = void 0;
      this.urlId = 0;
      this.type = type;
    }
    get decryptdata() {
      const {
        levelkeys
      } = this;
      if (!levelkeys && !this._decryptdata) {
        return null;
      }
      if (!this._decryptdata && this.levelkeys && !this.levelkeys.NONE) {
        const key = this.levelkeys.identity;
        if (key) {
          this._decryptdata = key.getDecryptData(this.sn);
        } else {
          const keyFormats = Object.keys(this.levelkeys);
          if (keyFormats.length === 1) {
            return this._decryptdata = this.levelkeys[keyFormats[0]].getDecryptData(this.sn);
          }
        }
      }
      return this._decryptdata;
    }
    get end() {
      return this.start + this.duration;
    }
    get endProgramDateTime() {
      if (this.programDateTime === null) {
        return null;
      }
      if (!isFiniteNumber(this.programDateTime)) {
        return null;
      }
      const duration = !isFiniteNumber(this.duration) ? 0 : this.duration;
      return this.programDateTime + duration * 1e3;
    }
    get encrypted() {
      var _this$_decryptdata;
      if ((_this$_decryptdata = this._decryptdata) != null && _this$_decryptdata.encrypted) {
        return true;
      } else if (this.levelkeys) {
        const keyFormats = Object.keys(this.levelkeys);
        const len = keyFormats.length;
        if (len > 1 || len === 1 && this.levelkeys[keyFormats[0]].encrypted) {
          return true;
        }
      }
      return false;
    }
    setKeyFormat(keyFormat) {
      if (this.levelkeys) {
        const key = this.levelkeys[keyFormat];
        if (key && !this._decryptdata) {
          this._decryptdata = key.getDecryptData(this.sn);
        }
      }
    }
    abortRequests() {
      var _this$loader, _this$keyLoader;
      (_this$loader = this.loader) == null ? void 0 : _this$loader.abort();
      (_this$keyLoader = this.keyLoader) == null ? void 0 : _this$keyLoader.abort();
    }
    setElementaryStreamInfo(type, startPTS, endPTS, startDTS, endDTS, partial = false) {
      const {
        elementaryStreams
      } = this;
      const info = elementaryStreams[type];
      if (!info) {
        elementaryStreams[type] = {
          startPTS,
          endPTS,
          startDTS,
          endDTS,
          partial
        };
        return;
      }
      info.startPTS = Math.min(info.startPTS, startPTS);
      info.endPTS = Math.max(info.endPTS, endPTS);
      info.startDTS = Math.min(info.startDTS, startDTS);
      info.endDTS = Math.max(info.endDTS, endDTS);
    }
    clearElementaryStreamInfo() {
      const {
        elementaryStreams
      } = this;
      elementaryStreams[ElementaryStreamTypes.AUDIO] = null;
      elementaryStreams[ElementaryStreamTypes.VIDEO] = null;
      elementaryStreams[ElementaryStreamTypes.AUDIOVIDEO] = null;
    }
  };
  var Part = class extends BaseSegment {
    constructor(partAttrs, frag, baseurl, index, previous) {
      super(baseurl);
      this.fragOffset = 0;
      this.duration = 0;
      this.gap = false;
      this.independent = false;
      this.relurl = void 0;
      this.fragment = void 0;
      this.index = void 0;
      this.stats = new LoadStats();
      this.duration = partAttrs.decimalFloatingPoint("DURATION");
      this.gap = partAttrs.bool("GAP");
      this.independent = partAttrs.bool("INDEPENDENT");
      this.relurl = partAttrs.enumeratedString("URI");
      this.fragment = frag;
      this.index = index;
      const byteRange = partAttrs.enumeratedString("BYTERANGE");
      if (byteRange) {
        this.setByteRange(byteRange, previous);
      }
      if (previous) {
        this.fragOffset = previous.fragOffset + previous.duration;
      }
    }
    get start() {
      return this.fragment.start + this.fragOffset;
    }
    get end() {
      return this.start + this.duration;
    }
    get loaded() {
      const {
        elementaryStreams
      } = this;
      return !!(elementaryStreams.audio || elementaryStreams.video || elementaryStreams.audiovideo);
    }
  };
  var DEFAULT_TARGET_DURATION = 10;
  var LevelDetails = class {
    constructor(baseUrl) {
      this.PTSKnown = false;
      this.alignedSliding = false;
      this.averagetargetduration = void 0;
      this.endCC = 0;
      this.endSN = 0;
      this.fragments = void 0;
      this.fragmentHint = void 0;
      this.partList = null;
      this.dateRanges = void 0;
      this.live = true;
      this.ageHeader = 0;
      this.advancedDateTime = void 0;
      this.updated = true;
      this.advanced = true;
      this.availabilityDelay = void 0;
      this.misses = 0;
      this.startCC = 0;
      this.startSN = 0;
      this.startTimeOffset = null;
      this.targetduration = 0;
      this.totalduration = 0;
      this.type = null;
      this.url = void 0;
      this.m3u8 = "";
      this.version = null;
      this.canBlockReload = false;
      this.canSkipUntil = 0;
      this.canSkipDateRanges = false;
      this.skippedSegments = 0;
      this.recentlyRemovedDateranges = void 0;
      this.partHoldBack = 0;
      this.holdBack = 0;
      this.partTarget = 0;
      this.preloadHint = void 0;
      this.renditionReports = void 0;
      this.tuneInGoal = 0;
      this.deltaUpdateFailed = void 0;
      this.driftStartTime = 0;
      this.driftEndTime = 0;
      this.driftStart = 0;
      this.driftEnd = 0;
      this.encryptedFragments = void 0;
      this.playlistParsingError = null;
      this.variableList = null;
      this.hasVariableRefs = false;
      this.fragments = [];
      this.encryptedFragments = [];
      this.dateRanges = {};
      this.url = baseUrl;
    }
    reloaded(previous) {
      if (!previous) {
        this.advanced = true;
        this.updated = true;
        return;
      }
      const partSnDiff = this.lastPartSn - previous.lastPartSn;
      const partIndexDiff = this.lastPartIndex - previous.lastPartIndex;
      this.updated = this.endSN !== previous.endSN || !!partIndexDiff || !!partSnDiff || !this.live;
      this.advanced = this.endSN > previous.endSN || partSnDiff > 0 || partSnDiff === 0 && partIndexDiff > 0;
      if (this.updated || this.advanced) {
        this.misses = Math.floor(previous.misses * 0.6);
      } else {
        this.misses = previous.misses + 1;
      }
      this.availabilityDelay = previous.availabilityDelay;
    }
    get hasProgramDateTime() {
      if (this.fragments.length) {
        return isFiniteNumber(this.fragments[this.fragments.length - 1].programDateTime);
      }
      return false;
    }
    get levelTargetDuration() {
      return this.averagetargetduration || this.targetduration || DEFAULT_TARGET_DURATION;
    }
    get drift() {
      const runTime = this.driftEndTime - this.driftStartTime;
      if (runTime > 0) {
        const runDuration = this.driftEnd - this.driftStart;
        return runDuration * 1e3 / runTime;
      }
      return 1;
    }
    get edge() {
      return this.partEnd || this.fragmentEnd;
    }
    get partEnd() {
      var _this$partList;
      if ((_this$partList = this.partList) != null && _this$partList.length) {
        return this.partList[this.partList.length - 1].end;
      }
      return this.fragmentEnd;
    }
    get fragmentEnd() {
      var _this$fragments;
      if ((_this$fragments = this.fragments) != null && _this$fragments.length) {
        return this.fragments[this.fragments.length - 1].end;
      }
      return 0;
    }
    get age() {
      if (this.advancedDateTime) {
        return Math.max(Date.now() - this.advancedDateTime, 0) / 1e3;
      }
      return 0;
    }
    get lastPartIndex() {
      var _this$partList2;
      if ((_this$partList2 = this.partList) != null && _this$partList2.length) {
        return this.partList[this.partList.length - 1].index;
      }
      return -1;
    }
    get lastPartSn() {
      var _this$partList3;
      if ((_this$partList3 = this.partList) != null && _this$partList3.length) {
        return this.partList[this.partList.length - 1].fragment.sn;
      }
      return this.endSN;
    }
  };
  function base64Decode(base64encodedStr) {
    return Uint8Array.from(atob(base64encodedStr), (c) => c.charCodeAt(0));
  }
  function getKeyIdBytes(str) {
    const keyIdbytes = strToUtf8array(str).subarray(0, 16);
    const paddedkeyIdbytes = new Uint8Array(16);
    paddedkeyIdbytes.set(keyIdbytes, 16 - keyIdbytes.length);
    return paddedkeyIdbytes;
  }
  function changeEndianness(keyId) {
    const swap = function swap2(array, from, to) {
      const cur = array[from];
      array[from] = array[to];
      array[to] = cur;
    };
    swap(keyId, 0, 3);
    swap(keyId, 1, 2);
    swap(keyId, 4, 5);
    swap(keyId, 6, 7);
  }
  function convertDataUriToArrayBytes(uri) {
    const colonsplit = uri.split(":");
    let keydata = null;
    if (colonsplit[0] === "data" && colonsplit.length === 2) {
      const semicolonsplit = colonsplit[1].split(";");
      const commasplit = semicolonsplit[semicolonsplit.length - 1].split(",");
      if (commasplit.length === 2) {
        const isbase64 = commasplit[0] === "base64";
        const data = commasplit[1];
        if (isbase64) {
          semicolonsplit.splice(-1, 1);
          keydata = base64Decode(data);
        } else {
          keydata = getKeyIdBytes(data);
        }
      }
    }
    return keydata;
  }
  function strToUtf8array(str) {
    return Uint8Array.from(unescape(encodeURIComponent(str)), (c) => c.charCodeAt(0));
  }
  var optionalSelf = typeof self !== "undefined" ? self : void 0;
  var KeySystems = {
    CLEARKEY: "org.w3.clearkey",
    FAIRPLAY: "com.apple.fps",
    PLAYREADY: "com.microsoft.playready",
    WIDEVINE: "com.widevine.alpha"
  };
  var KeySystemFormats = {
    CLEARKEY: "org.w3.clearkey",
    FAIRPLAY: "com.apple.streamingkeydelivery",
    PLAYREADY: "com.microsoft.playready",
    WIDEVINE: "urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed"
  };
  function keySystemFormatToKeySystemDomain(format2) {
    switch (format2) {
      case KeySystemFormats.FAIRPLAY:
        return KeySystems.FAIRPLAY;
      case KeySystemFormats.PLAYREADY:
        return KeySystems.PLAYREADY;
      case KeySystemFormats.WIDEVINE:
        return KeySystems.WIDEVINE;
      case KeySystemFormats.CLEARKEY:
        return KeySystems.CLEARKEY;
    }
  }
  var KeySystemIds = {
    CENC: "1077efecc0b24d02ace33c1e52e2fb4b",
    CLEARKEY: "e2719d58a985b3c9781ab030af78d30e",
    FAIRPLAY: "94ce86fb07ff4f43adb893d2fa968ca2",
    PLAYREADY: "9a04f07998404286ab92e65be0885f95",
    WIDEVINE: "edef8ba979d64acea3c827dcd51d21ed"
  };
  function keySystemIdToKeySystemDomain(systemId) {
    if (systemId === KeySystemIds.WIDEVINE) {
      return KeySystems.WIDEVINE;
    } else if (systemId === KeySystemIds.PLAYREADY) {
      return KeySystems.PLAYREADY;
    } else if (systemId === KeySystemIds.CENC || systemId === KeySystemIds.CLEARKEY) {
      return KeySystems.CLEARKEY;
    }
  }
  function keySystemDomainToKeySystemFormat(keySystem) {
    switch (keySystem) {
      case KeySystems.FAIRPLAY:
        return KeySystemFormats.FAIRPLAY;
      case KeySystems.PLAYREADY:
        return KeySystemFormats.PLAYREADY;
      case KeySystems.WIDEVINE:
        return KeySystemFormats.WIDEVINE;
      case KeySystems.CLEARKEY:
        return KeySystemFormats.CLEARKEY;
    }
  }
  function getKeySystemsForConfig(config) {
    const {
      drmSystems,
      widevineLicenseUrl
    } = config;
    const keySystemsToAttempt = drmSystems ? [KeySystems.FAIRPLAY, KeySystems.WIDEVINE, KeySystems.PLAYREADY, KeySystems.CLEARKEY].filter((keySystem) => !!drmSystems[keySystem]) : [];
    if (!keySystemsToAttempt[KeySystems.WIDEVINE] && widevineLicenseUrl) {
      keySystemsToAttempt.push(KeySystems.WIDEVINE);
    }
    return keySystemsToAttempt;
  }
  var requestMediaKeySystemAccess = function(_optionalSelf$navigat) {
    if (optionalSelf != null && (_optionalSelf$navigat = optionalSelf.navigator) != null && _optionalSelf$navigat.requestMediaKeySystemAccess) {
      return self.navigator.requestMediaKeySystemAccess.bind(self.navigator);
    } else {
      return null;
    }
  }();
  function getSupportedMediaKeySystemConfigurations(keySystem, audioCodecs, videoCodecs, drmSystemOptions) {
    let initDataTypes;
    switch (keySystem) {
      case KeySystems.FAIRPLAY:
        initDataTypes = ["cenc", "sinf"];
        break;
      case KeySystems.WIDEVINE:
      case KeySystems.PLAYREADY:
        initDataTypes = ["cenc"];
        break;
      case KeySystems.CLEARKEY:
        initDataTypes = ["cenc", "keyids"];
        break;
      default:
        throw new Error(`Unknown key-system: ${keySystem}`);
    }
    return createMediaKeySystemConfigurations(initDataTypes, audioCodecs, videoCodecs, drmSystemOptions);
  }
  function createMediaKeySystemConfigurations(initDataTypes, audioCodecs, videoCodecs, drmSystemOptions) {
    const baseConfig = {
      initDataTypes,
      persistentState: drmSystemOptions.persistentState || "optional",
      distinctiveIdentifier: drmSystemOptions.distinctiveIdentifier || "optional",
      sessionTypes: drmSystemOptions.sessionTypes || [drmSystemOptions.sessionType || "temporary"],
      audioCapabilities: audioCodecs.map((codec) => ({
        contentType: `audio/mp4; codecs="${codec}"`,
        robustness: drmSystemOptions.audioRobustness || "",
        encryptionScheme: drmSystemOptions.audioEncryptionScheme || null
      })),
      videoCapabilities: videoCodecs.map((codec) => ({
        contentType: `video/mp4; codecs="${codec}"`,
        robustness: drmSystemOptions.videoRobustness || "",
        encryptionScheme: drmSystemOptions.videoEncryptionScheme || null
      }))
    };
    return [baseConfig];
  }
  function sliceUint8(array, start, end) {
    return Uint8Array.prototype.slice ? array.slice(start, end) : new Uint8Array(Array.prototype.slice.call(array, start, end));
  }
  var isHeader$2 = (data, offset) => {
    if (offset + 10 <= data.length) {
      if (data[offset] === 73 && data[offset + 1] === 68 && data[offset + 2] === 51) {
        if (data[offset + 3] < 255 && data[offset + 4] < 255) {
          if (data[offset + 6] < 128 && data[offset + 7] < 128 && data[offset + 8] < 128 && data[offset + 9] < 128) {
            return true;
          }
        }
      }
    }
    return false;
  };
  var isFooter = (data, offset) => {
    if (offset + 10 <= data.length) {
      if (data[offset] === 51 && data[offset + 1] === 68 && data[offset + 2] === 73) {
        if (data[offset + 3] < 255 && data[offset + 4] < 255) {
          if (data[offset + 6] < 128 && data[offset + 7] < 128 && data[offset + 8] < 128 && data[offset + 9] < 128) {
            return true;
          }
        }
      }
    }
    return false;
  };
  var getID3Data = (data, offset) => {
    const front = offset;
    let length = 0;
    while (isHeader$2(data, offset)) {
      length += 10;
      const size = readSize(data, offset + 6);
      length += size;
      if (isFooter(data, offset + 10)) {
        length += 10;
      }
      offset += length;
    }
    if (length > 0) {
      return data.subarray(front, front + length);
    }
    return void 0;
  };
  var readSize = (data, offset) => {
    let size = 0;
    size = (data[offset] & 127) << 21;
    size |= (data[offset + 1] & 127) << 14;
    size |= (data[offset + 2] & 127) << 7;
    size |= data[offset + 3] & 127;
    return size;
  };
  var canParse$2 = (data, offset) => {
    return isHeader$2(data, offset) && readSize(data, offset + 6) + 10 <= data.length - offset;
  };
  var getTimeStamp = (data) => {
    const frames = getID3Frames(data);
    for (let i = 0; i < frames.length; i++) {
      const frame = frames[i];
      if (isTimeStampFrame(frame)) {
        return readTimeStamp(frame);
      }
    }
    return void 0;
  };
  var isTimeStampFrame = (frame) => {
    return frame && frame.key === "PRIV" && frame.info === "com.apple.streaming.transportStreamTimestamp";
  };
  var getFrameData = (data) => {
    const type = String.fromCharCode(data[0], data[1], data[2], data[3]);
    const size = readSize(data, 4);
    const offset = 10;
    return {
      type,
      size,
      data: data.subarray(offset, offset + size)
    };
  };
  var getID3Frames = (id3Data) => {
    let offset = 0;
    const frames = [];
    while (isHeader$2(id3Data, offset)) {
      const size = readSize(id3Data, offset + 6);
      offset += 10;
      const end = offset + size;
      while (offset + 8 < end) {
        const frameData = getFrameData(id3Data.subarray(offset));
        const frame = decodeFrame(frameData);
        if (frame) {
          frames.push(frame);
        }
        offset += frameData.size + 10;
      }
      if (isFooter(id3Data, offset)) {
        offset += 10;
      }
    }
    return frames;
  };
  var decodeFrame = (frame) => {
    if (frame.type === "PRIV") {
      return decodePrivFrame(frame);
    } else if (frame.type[0] === "W") {
      return decodeURLFrame(frame);
    }
    return decodeTextFrame(frame);
  };
  var decodePrivFrame = (frame) => {
    if (frame.size < 2) {
      return void 0;
    }
    const owner = utf8ArrayToStr(frame.data, true);
    const privateData = new Uint8Array(frame.data.subarray(owner.length + 1));
    return {
      key: frame.type,
      info: owner,
      data: privateData.buffer
    };
  };
  var decodeTextFrame = (frame) => {
    if (frame.size < 2) {
      return void 0;
    }
    if (frame.type === "TXXX") {
      let index = 1;
      const description = utf8ArrayToStr(frame.data.subarray(index), true);
      index += description.length + 1;
      const value = utf8ArrayToStr(frame.data.subarray(index));
      return {
        key: frame.type,
        info: description,
        data: value
      };
    }
    const text = utf8ArrayToStr(frame.data.subarray(1));
    return {
      key: frame.type,
      data: text
    };
  };
  var decodeURLFrame = (frame) => {
    if (frame.type === "WXXX") {
      if (frame.size < 2) {
        return void 0;
      }
      let index = 1;
      const description = utf8ArrayToStr(frame.data.subarray(index), true);
      index += description.length + 1;
      const value = utf8ArrayToStr(frame.data.subarray(index));
      return {
        key: frame.type,
        info: description,
        data: value
      };
    }
    const url = utf8ArrayToStr(frame.data);
    return {
      key: frame.type,
      data: url
    };
  };
  var readTimeStamp = (timeStampFrame) => {
    if (timeStampFrame.data.byteLength === 8) {
      const data = new Uint8Array(timeStampFrame.data);
      const pts33Bit = data[3] & 1;
      let timestamp = (data[4] << 23) + (data[5] << 15) + (data[6] << 7) + data[7];
      timestamp /= 45;
      if (pts33Bit) {
        timestamp += 4772185884e-2;
      }
      return Math.round(timestamp);
    }
    return void 0;
  };
  var utf8ArrayToStr = (array, exitOnNull = false) => {
    const decoder2 = getTextDecoder();
    if (decoder2) {
      const decoded = decoder2.decode(array);
      if (exitOnNull) {
        const idx = decoded.indexOf("\0");
        return idx !== -1 ? decoded.substring(0, idx) : decoded;
      }
      return decoded.replace(/\0/g, "");
    }
    const len = array.length;
    let c;
    let char2;
    let char3;
    let out = "";
    let i = 0;
    while (i < len) {
      c = array[i++];
      if (c === 0 && exitOnNull) {
        return out;
      } else if (c === 0 || c === 3) {
        continue;
      }
      switch (c >> 4) {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          out += String.fromCharCode(c);
          break;
        case 12:
        case 13:
          char2 = array[i++];
          out += String.fromCharCode((c & 31) << 6 | char2 & 63);
          break;
        case 14:
          char2 = array[i++];
          char3 = array[i++];
          out += String.fromCharCode((c & 15) << 12 | (char2 & 63) << 6 | (char3 & 63) << 0);
          break;
      }
    }
    return out;
  };
  var decoder;
  function getTextDecoder() {
    if (navigator.userAgent.includes("PlayStation 4")) {
      return;
    }
    if (!decoder && typeof self.TextDecoder !== "undefined") {
      decoder = new self.TextDecoder("utf-8");
    }
    return decoder;
  }
  var Hex = {
    hexDump: function(array) {
      let str = "";
      for (let i = 0; i < array.length; i++) {
        let h = array[i].toString(16);
        if (h.length < 2) {
          h = "0" + h;
        }
        str += h;
      }
      return str;
    }
  };
  var UINT32_MAX$1 = Math.pow(2, 32) - 1;
  var push = [].push;
  var RemuxerTrackIdConfig = {
    video: 1,
    audio: 2,
    id3: 3,
    text: 4
  };
  function bin2str(data) {
    return String.fromCharCode.apply(null, data);
  }
  function readUint16(buffer, offset) {
    const val = buffer[offset] << 8 | buffer[offset + 1];
    return val < 0 ? 65536 + val : val;
  }
  function readUint32(buffer, offset) {
    const val = readSint32(buffer, offset);
    return val < 0 ? 4294967296 + val : val;
  }
  function readUint64(buffer, offset) {
    let result = readUint32(buffer, offset);
    result *= Math.pow(2, 32);
    result += readUint32(buffer, offset + 4);
    return result;
  }
  function readSint32(buffer, offset) {
    return buffer[offset] << 24 | buffer[offset + 1] << 16 | buffer[offset + 2] << 8 | buffer[offset + 3];
  }
  function writeUint32(buffer, offset, value) {
    buffer[offset] = value >> 24;
    buffer[offset + 1] = value >> 16 & 255;
    buffer[offset + 2] = value >> 8 & 255;
    buffer[offset + 3] = value & 255;
  }
  function hasMoofData(data) {
    const end = data.byteLength;
    for (let i = 0; i < end; ) {
      const size = readUint32(data, i);
      if (size > 8 && data[i + 4] === 109 && data[i + 5] === 111 && data[i + 6] === 111 && data[i + 7] === 102) {
        return true;
      }
      i = size > 1 ? i + size : end;
    }
    return false;
  }
  function findBox(data, path) {
    const results = [];
    if (!path.length) {
      return results;
    }
    const end = data.byteLength;
    for (let i = 0; i < end; ) {
      const size = readUint32(data, i);
      const type = bin2str(data.subarray(i + 4, i + 8));
      const endbox = size > 1 ? i + size : end;
      if (type === path[0]) {
        if (path.length === 1) {
          results.push(data.subarray(i + 8, endbox));
        } else {
          const subresults = findBox(data.subarray(i + 8, endbox), path.slice(1));
          if (subresults.length) {
            push.apply(results, subresults);
          }
        }
      }
      i = endbox;
    }
    return results;
  }
  function parseSegmentIndex(sidx) {
    const references = [];
    const version = sidx[0];
    let index = 8;
    const timescale = readUint32(sidx, index);
    index += 4;
    let earliestPresentationTime = 0;
    let firstOffset = 0;
    if (version === 0) {
      earliestPresentationTime = readUint32(sidx, index);
      firstOffset = readUint32(sidx, index + 4);
      index += 8;
    } else {
      earliestPresentationTime = readUint64(sidx, index);
      firstOffset = readUint64(sidx, index + 8);
      index += 16;
    }
    index += 2;
    let startByte = sidx.length + firstOffset;
    const referencesCount = readUint16(sidx, index);
    index += 2;
    for (let i = 0; i < referencesCount; i++) {
      let referenceIndex = index;
      const referenceInfo = readUint32(sidx, referenceIndex);
      referenceIndex += 4;
      const referenceSize = referenceInfo & 2147483647;
      const referenceType = (referenceInfo & 2147483648) >>> 31;
      if (referenceType === 1) {
        logger.warn("SIDX has hierarchical references (not supported)");
        return null;
      }
      const subsegmentDuration = readUint32(sidx, referenceIndex);
      referenceIndex += 4;
      references.push({
        referenceSize,
        subsegmentDuration,
        // unscaled
        info: {
          duration: subsegmentDuration / timescale,
          start: startByte,
          end: startByte + referenceSize - 1
        }
      });
      startByte += referenceSize;
      referenceIndex += 4;
      index = referenceIndex;
    }
    return {
      earliestPresentationTime,
      timescale,
      version,
      referencesCount,
      references
    };
  }
  function parseInitSegment(initSegment) {
    const result = [];
    const traks = findBox(initSegment, ["moov", "trak"]);
    for (let i = 0; i < traks.length; i++) {
      const trak = traks[i];
      const tkhd = findBox(trak, ["tkhd"])[0];
      if (tkhd) {
        let version = tkhd[0];
        const trackId = readUint32(tkhd, version === 0 ? 12 : 20);
        const mdhd = findBox(trak, ["mdia", "mdhd"])[0];
        if (mdhd) {
          version = mdhd[0];
          const timescale = readUint32(mdhd, version === 0 ? 12 : 20);
          const hdlr = findBox(trak, ["mdia", "hdlr"])[0];
          if (hdlr) {
            const hdlrType = bin2str(hdlr.subarray(8, 12));
            const type = {
              soun: ElementaryStreamTypes.AUDIO,
              vide: ElementaryStreamTypes.VIDEO
            }[hdlrType];
            if (type) {
              const stsd = findBox(trak, ["mdia", "minf", "stbl", "stsd"])[0];
              const stsdData = parseStsd(stsd);
              result[trackId] = {
                timescale,
                type
              };
              result[type] = _objectSpread2({
                timescale,
                id: trackId
              }, stsdData);
            }
          }
        }
      }
    }
    const trex = findBox(initSegment, ["moov", "mvex", "trex"]);
    trex.forEach((trex2) => {
      const trackId = readUint32(trex2, 4);
      const track = result[trackId];
      if (track) {
        track.default = {
          duration: readUint32(trex2, 12),
          flags: readUint32(trex2, 20)
        };
      }
    });
    return result;
  }
  function parseStsd(stsd) {
    const sampleEntries = stsd.subarray(8);
    const sampleEntriesEnd = sampleEntries.subarray(8 + 78);
    const fourCC = bin2str(sampleEntries.subarray(4, 8));
    let codec = fourCC;
    const encrypted = fourCC === "enca" || fourCC === "encv";
    if (encrypted) {
      const encBox = findBox(sampleEntries, [fourCC])[0];
      const encBoxChildren = encBox.subarray(fourCC === "enca" ? 28 : 78);
      const sinfs = findBox(encBoxChildren, ["sinf"]);
      sinfs.forEach((sinf) => {
        const schm = findBox(sinf, ["schm"])[0];
        if (schm) {
          const scheme = bin2str(schm.subarray(4, 8));
          if (scheme === "cbcs" || scheme === "cenc") {
            const frma = findBox(sinf, ["frma"])[0];
            if (frma) {
              codec = bin2str(frma);
            }
          }
        }
      });
    }
    switch (codec) {
      case "avc1":
      case "avc2":
      case "avc3":
      case "avc4": {
        const avcCBox = findBox(sampleEntriesEnd, ["avcC"])[0];
        codec += "." + toHex(avcCBox[1]) + toHex(avcCBox[2]) + toHex(avcCBox[3]);
        break;
      }
      case "mp4a": {
        const codecBox = findBox(sampleEntries, [fourCC])[0];
        const esdsBox = findBox(codecBox.subarray(28), ["esds"])[0];
        if (esdsBox && esdsBox.length > 12) {
          let i = 4;
          if (esdsBox[i++] !== 3) {
            break;
          }
          i = skipBERInteger(esdsBox, i);
          i += 2;
          const flags = esdsBox[i++];
          if (flags & 128) {
            i += 2;
          }
          if (flags & 64) {
            i += esdsBox[i++];
          }
          if (esdsBox[i++] !== 4) {
            break;
          }
          i = skipBERInteger(esdsBox, i);
          const objectType = esdsBox[i++];
          if (objectType === 64) {
            codec += "." + toHex(objectType);
          } else {
            break;
          }
          i += 12;
          if (esdsBox[i++] !== 5) {
            break;
          }
          i = skipBERInteger(esdsBox, i);
          const firstByte = esdsBox[i++];
          let audioObjectType = (firstByte & 248) >> 3;
          if (audioObjectType === 31) {
            audioObjectType += 1 + ((firstByte & 7) << 3) + ((esdsBox[i] & 224) >> 5);
          }
          codec += "." + audioObjectType;
        }
        break;
      }
      case "hvc1":
      case "hev1": {
        const hvcCBox = findBox(sampleEntriesEnd, ["hvcC"])[0];
        const profileByte = hvcCBox[1];
        const profileSpace = ["", "A", "B", "C"][profileByte >> 6];
        const generalProfileIdc = profileByte & 31;
        const profileCompat = readUint32(hvcCBox, 2);
        const tierFlag = (profileByte & 32) >> 5 ? "H" : "L";
        const levelIDC = hvcCBox[12];
        const constraintIndicator = hvcCBox.subarray(6, 12);
        codec += "." + profileSpace + generalProfileIdc;
        codec += "." + profileCompat.toString(16).toUpperCase();
        codec += "." + tierFlag + levelIDC;
        let constraintString = "";
        for (let i = constraintIndicator.length; i--; ) {
          const byte = constraintIndicator[i];
          if (byte || constraintString) {
            const encodedByte = byte.toString(16).toUpperCase();
            constraintString = "." + encodedByte + constraintString;
          }
        }
        codec += constraintString;
        break;
      }
      case "dvh1":
      case "dvhe": {
        const dvcCBox = findBox(sampleEntriesEnd, ["dvcC"])[0];
        const profile = dvcCBox[2] >> 1 & 127;
        const level = dvcCBox[2] << 5 & 32 | dvcCBox[3] >> 3 & 31;
        codec += "." + addLeadingZero(profile) + "." + addLeadingZero(level);
        break;
      }
      case "vp09": {
        const vpcCBox = findBox(sampleEntriesEnd, ["vpcC"])[0];
        const profile = vpcCBox[4];
        const level = vpcCBox[5];
        const bitDepth = vpcCBox[6] >> 4 & 15;
        codec += "." + addLeadingZero(profile) + "." + addLeadingZero(level) + "." + addLeadingZero(bitDepth);
        break;
      }
      case "av01": {
        const av1CBox = findBox(sampleEntriesEnd, ["av1C"])[0];
        const profile = av1CBox[1] >>> 5;
        const level = av1CBox[1] & 31;
        const tierFlag = av1CBox[2] >>> 7 ? "H" : "M";
        const highBitDepth = (av1CBox[2] & 64) >> 6;
        const twelveBit = (av1CBox[2] & 32) >> 5;
        const bitDepth = profile === 2 && highBitDepth ? twelveBit ? 12 : 10 : highBitDepth ? 10 : 8;
        const monochrome = (av1CBox[2] & 16) >> 4;
        const chromaSubsamplingX = (av1CBox[2] & 8) >> 3;
        const chromaSubsamplingY = (av1CBox[2] & 4) >> 2;
        const chromaSamplePosition = av1CBox[2] & 3;
        const colorPrimaries = 1;
        const transferCharacteristics = 1;
        const matrixCoefficients = 1;
        const videoFullRangeFlag = 0;
        codec += "." + profile + "." + addLeadingZero(level) + tierFlag + "." + addLeadingZero(bitDepth) + "." + monochrome + "." + chromaSubsamplingX + chromaSubsamplingY + chromaSamplePosition + "." + addLeadingZero(colorPrimaries) + "." + addLeadingZero(transferCharacteristics) + "." + addLeadingZero(matrixCoefficients) + "." + videoFullRangeFlag;
        break;
      }
    }
    return {
      codec,
      encrypted
    };
  }
  function skipBERInteger(bytes, i) {
    const limit = i + 5;
    while (bytes[i++] & 128 && i < limit) {
    }
    return i;
  }
  function toHex(x) {
    return ("0" + x.toString(16).toUpperCase()).slice(-2);
  }
  function addLeadingZero(num) {
    return (num < 10 ? "0" : "") + num;
  }
  function patchEncyptionData(initSegment, decryptdata) {
    if (!initSegment || !decryptdata) {
      return initSegment;
    }
    const keyId = decryptdata.keyId;
    if (keyId && decryptdata.isCommonEncryption) {
      const traks = findBox(initSegment, ["moov", "trak"]);
      traks.forEach((trak) => {
        const stsd = findBox(trak, ["mdia", "minf", "stbl", "stsd"])[0];
        const sampleEntries = stsd.subarray(8);
        let encBoxes = findBox(sampleEntries, ["enca"]);
        const isAudio = encBoxes.length > 0;
        if (!isAudio) {
          encBoxes = findBox(sampleEntries, ["encv"]);
        }
        encBoxes.forEach((enc) => {
          const encBoxChildren = isAudio ? enc.subarray(28) : enc.subarray(78);
          const sinfBoxes = findBox(encBoxChildren, ["sinf"]);
          sinfBoxes.forEach((sinf) => {
            const tenc = parseSinf(sinf);
            if (tenc) {
              const tencKeyId = tenc.subarray(8, 24);
              if (!tencKeyId.some((b) => b !== 0)) {
                logger.log(`[eme] Patching keyId in 'enc${isAudio ? "a" : "v"}>sinf>>tenc' box: ${Hex.hexDump(tencKeyId)} -> ${Hex.hexDump(keyId)}`);
                tenc.set(keyId, 8);
              }
            }
          });
        });
      });
    }
    return initSegment;
  }
  function parseSinf(sinf) {
    const schm = findBox(sinf, ["schm"])[0];
    if (schm) {
      const scheme = bin2str(schm.subarray(4, 8));
      if (scheme === "cbcs" || scheme === "cenc") {
        return findBox(sinf, ["schi", "tenc"])[0];
      }
    }
    return null;
  }
  function getStartDTS(initData, fmp4) {
    return findBox(fmp4, ["moof", "traf"]).reduce((result, traf) => {
      const tfdt = findBox(traf, ["tfdt"])[0];
      const version = tfdt[0];
      const start = findBox(traf, ["tfhd"]).reduce((result2, tfhd) => {
        const id = readUint32(tfhd, 4);
        const track = initData[id];
        if (track) {
          let baseTime = readUint32(tfdt, 4);
          if (version === 1) {
            if (baseTime === UINT32_MAX$1) {
              logger.warn(`[mp4-demuxer]: Ignoring assumed invalid signed 64-bit track fragment decode time`);
              return result2;
            }
            baseTime *= UINT32_MAX$1 + 1;
            baseTime += readUint32(tfdt, 8);
          }
          const scale = track.timescale || 9e4;
          const startTime = baseTime / scale;
          if (isFiniteNumber(startTime) && (result2 === null || startTime < result2)) {
            return startTime;
          }
        }
        return result2;
      }, null);
      if (start !== null && isFiniteNumber(start) && (result === null || start < result)) {
        return start;
      }
      return result;
    }, null);
  }
  function getDuration(data, initData) {
    let rawDuration = 0;
    let videoDuration = 0;
    let audioDuration = 0;
    const trafs = findBox(data, ["moof", "traf"]);
    for (let i = 0; i < trafs.length; i++) {
      const traf = trafs[i];
      const tfhd = findBox(traf, ["tfhd"])[0];
      const id = readUint32(tfhd, 4);
      const track = initData[id];
      if (!track) {
        continue;
      }
      const trackDefault = track.default;
      const tfhdFlags = readUint32(tfhd, 0) | (trackDefault == null ? void 0 : trackDefault.flags);
      let sampleDuration = trackDefault == null ? void 0 : trackDefault.duration;
      if (tfhdFlags & 8) {
        if (tfhdFlags & 2) {
          sampleDuration = readUint32(tfhd, 12);
        } else {
          sampleDuration = readUint32(tfhd, 8);
        }
      }
      const timescale = track.timescale || 9e4;
      const truns = findBox(traf, ["trun"]);
      for (let j = 0; j < truns.length; j++) {
        rawDuration = computeRawDurationFromSamples(truns[j]);
        if (!rawDuration && sampleDuration) {
          const sampleCount = readUint32(truns[j], 4);
          rawDuration = sampleDuration * sampleCount;
        }
        if (track.type === ElementaryStreamTypes.VIDEO) {
          videoDuration += rawDuration / timescale;
        } else if (track.type === ElementaryStreamTypes.AUDIO) {
          audioDuration += rawDuration / timescale;
        }
      }
    }
    if (videoDuration === 0 && audioDuration === 0) {
      let sidxMinStart = Infinity;
      let sidxMaxEnd = 0;
      let sidxDuration = 0;
      const sidxs = findBox(data, ["sidx"]);
      for (let i = 0; i < sidxs.length; i++) {
        const sidx = parseSegmentIndex(sidxs[i]);
        if (sidx != null && sidx.references) {
          sidxMinStart = Math.min(sidxMinStart, sidx.earliestPresentationTime / sidx.timescale);
          const subSegmentDuration = sidx.references.reduce((dur, ref) => dur + ref.info.duration || 0, 0);
          sidxMaxEnd = Math.max(sidxMaxEnd, subSegmentDuration + sidx.earliestPresentationTime / sidx.timescale);
          sidxDuration = sidxMaxEnd - sidxMinStart;
        }
      }
      if (sidxDuration && isFiniteNumber(sidxDuration)) {
        return sidxDuration;
      }
    }
    if (videoDuration) {
      return videoDuration;
    }
    return audioDuration;
  }
  function computeRawDurationFromSamples(trun) {
    const flags = readUint32(trun, 0);
    let offset = 8;
    if (flags & 1) {
      offset += 4;
    }
    if (flags & 4) {
      offset += 4;
    }
    let duration = 0;
    const sampleCount = readUint32(trun, 4);
    for (let i = 0; i < sampleCount; i++) {
      if (flags & 256) {
        const sampleDuration = readUint32(trun, offset);
        duration += sampleDuration;
        offset += 4;
      }
      if (flags & 512) {
        offset += 4;
      }
      if (flags & 1024) {
        offset += 4;
      }
      if (flags & 2048) {
        offset += 4;
      }
    }
    return duration;
  }
  function offsetStartDTS(initData, fmp4, timeOffset) {
    findBox(fmp4, ["moof", "traf"]).forEach((traf) => {
      findBox(traf, ["tfhd"]).forEach((tfhd) => {
        const id = readUint32(tfhd, 4);
        const track = initData[id];
        if (!track) {
          return;
        }
        const timescale = track.timescale || 9e4;
        findBox(traf, ["tfdt"]).forEach((tfdt) => {
          const version = tfdt[0];
          const offset = timeOffset * timescale;
          if (offset) {
            let baseMediaDecodeTime = readUint32(tfdt, 4);
            if (version === 0) {
              baseMediaDecodeTime -= offset;
              baseMediaDecodeTime = Math.max(baseMediaDecodeTime, 0);
              writeUint32(tfdt, 4, baseMediaDecodeTime);
            } else {
              baseMediaDecodeTime *= Math.pow(2, 32);
              baseMediaDecodeTime += readUint32(tfdt, 8);
              baseMediaDecodeTime -= offset;
              baseMediaDecodeTime = Math.max(baseMediaDecodeTime, 0);
              const upper = Math.floor(baseMediaDecodeTime / (UINT32_MAX$1 + 1));
              const lower = Math.floor(baseMediaDecodeTime % (UINT32_MAX$1 + 1));
              writeUint32(tfdt, 4, upper);
              writeUint32(tfdt, 8, lower);
            }
          }
        });
      });
    });
  }
  function segmentValidRange(data) {
    const segmentedRange = {
      valid: null,
      remainder: null
    };
    const moofs = findBox(data, ["moof"]);
    if (moofs.length < 2) {
      segmentedRange.remainder = data;
      return segmentedRange;
    }
    const last = moofs[moofs.length - 1];
    segmentedRange.valid = sliceUint8(data, 0, last.byteOffset - 8);
    segmentedRange.remainder = sliceUint8(data, last.byteOffset - 8);
    return segmentedRange;
  }
  function appendUint8Array(data1, data2) {
    const temp = new Uint8Array(data1.length + data2.length);
    temp.set(data1);
    temp.set(data2, data1.length);
    return temp;
  }
  function parseSamples(timeOffset, track) {
    const seiSamples = [];
    const videoData = track.samples;
    const timescale = track.timescale;
    const trackId = track.id;
    let isHEVCFlavor = false;
    const moofs = findBox(videoData, ["moof"]);
    moofs.map((moof) => {
      const moofOffset = moof.byteOffset - 8;
      const trafs = findBox(moof, ["traf"]);
      trafs.map((traf) => {
        const baseTime = findBox(traf, ["tfdt"]).map((tfdt) => {
          const version = tfdt[0];
          let result = readUint32(tfdt, 4);
          if (version === 1) {
            result *= Math.pow(2, 32);
            result += readUint32(tfdt, 8);
          }
          return result / timescale;
        })[0];
        if (baseTime !== void 0) {
          timeOffset = baseTime;
        }
        return findBox(traf, ["tfhd"]).map((tfhd) => {
          const id = readUint32(tfhd, 4);
          const tfhdFlags = readUint32(tfhd, 0) & 16777215;
          const baseDataOffsetPresent = (tfhdFlags & 1) !== 0;
          const sampleDescriptionIndexPresent = (tfhdFlags & 2) !== 0;
          const defaultSampleDurationPresent = (tfhdFlags & 8) !== 0;
          let defaultSampleDuration = 0;
          const defaultSampleSizePresent = (tfhdFlags & 16) !== 0;
          let defaultSampleSize = 0;
          const defaultSampleFlagsPresent = (tfhdFlags & 32) !== 0;
          let tfhdOffset = 8;
          if (id === trackId) {
            if (baseDataOffsetPresent) {
              tfhdOffset += 8;
            }
            if (sampleDescriptionIndexPresent) {
              tfhdOffset += 4;
            }
            if (defaultSampleDurationPresent) {
              defaultSampleDuration = readUint32(tfhd, tfhdOffset);
              tfhdOffset += 4;
            }
            if (defaultSampleSizePresent) {
              defaultSampleSize = readUint32(tfhd, tfhdOffset);
              tfhdOffset += 4;
            }
            if (defaultSampleFlagsPresent) {
              tfhdOffset += 4;
            }
            if (track.type === "video") {
              isHEVCFlavor = isHEVC(track.codec);
            }
            findBox(traf, ["trun"]).map((trun) => {
              const version = trun[0];
              const flags = readUint32(trun, 0) & 16777215;
              const dataOffsetPresent = (flags & 1) !== 0;
              let dataOffset = 0;
              const firstSampleFlagsPresent = (flags & 4) !== 0;
              const sampleDurationPresent = (flags & 256) !== 0;
              let sampleDuration = 0;
              const sampleSizePresent = (flags & 512) !== 0;
              let sampleSize = 0;
              const sampleFlagsPresent = (flags & 1024) !== 0;
              const sampleCompositionOffsetsPresent = (flags & 2048) !== 0;
              let compositionOffset = 0;
              const sampleCount = readUint32(trun, 4);
              let trunOffset = 8;
              if (dataOffsetPresent) {
                dataOffset = readUint32(trun, trunOffset);
                trunOffset += 4;
              }
              if (firstSampleFlagsPresent) {
                trunOffset += 4;
              }
              let sampleOffset = dataOffset + moofOffset;
              for (let ix = 0; ix < sampleCount; ix++) {
                if (sampleDurationPresent) {
                  sampleDuration = readUint32(trun, trunOffset);
                  trunOffset += 4;
                } else {
                  sampleDuration = defaultSampleDuration;
                }
                if (sampleSizePresent) {
                  sampleSize = readUint32(trun, trunOffset);
                  trunOffset += 4;
                } else {
                  sampleSize = defaultSampleSize;
                }
                if (sampleFlagsPresent) {
                  trunOffset += 4;
                }
                if (sampleCompositionOffsetsPresent) {
                  if (version === 0) {
                    compositionOffset = readUint32(trun, trunOffset);
                  } else {
                    compositionOffset = readSint32(trun, trunOffset);
                  }
                  trunOffset += 4;
                }
                if (track.type === ElementaryStreamTypes.VIDEO) {
                  let naluTotalSize = 0;
                  while (naluTotalSize < sampleSize) {
                    const naluSize = readUint32(videoData, sampleOffset);
                    sampleOffset += 4;
                    if (isSEIMessage(isHEVCFlavor, videoData[sampleOffset])) {
                      const data = videoData.subarray(sampleOffset, sampleOffset + naluSize);
                      parseSEIMessageFromNALu(data, isHEVCFlavor ? 2 : 1, timeOffset + compositionOffset / timescale, seiSamples);
                    }
                    sampleOffset += naluSize;
                    naluTotalSize += naluSize + 4;
                  }
                }
                timeOffset += sampleDuration / timescale;
              }
            });
          }
        });
      });
    });
    return seiSamples;
  }
  function isHEVC(codec) {
    if (!codec) {
      return false;
    }
    const delimit = codec.indexOf(".");
    const baseCodec = delimit < 0 ? codec : codec.substring(0, delimit);
    return baseCodec === "hvc1" || baseCodec === "hev1" || // Dolby Vision
    baseCodec === "dvh1" || baseCodec === "dvhe";
  }
  function isSEIMessage(isHEVCFlavor, naluHeader) {
    if (isHEVCFlavor) {
      const naluType = naluHeader >> 1 & 63;
      return naluType === 39 || naluType === 40;
    } else {
      const naluType = naluHeader & 31;
      return naluType === 6;
    }
  }
  function parseSEIMessageFromNALu(unescapedData, headerSize, pts, samples) {
    const data = discardEPB(unescapedData);
    let seiPtr = 0;
    seiPtr += headerSize;
    let payloadType = 0;
    let payloadSize = 0;
    let b = 0;
    while (seiPtr < data.length) {
      payloadType = 0;
      do {
        if (seiPtr >= data.length) {
          break;
        }
        b = data[seiPtr++];
        payloadType += b;
      } while (b === 255);
      payloadSize = 0;
      do {
        if (seiPtr >= data.length) {
          break;
        }
        b = data[seiPtr++];
        payloadSize += b;
      } while (b === 255);
      const leftOver = data.length - seiPtr;
      let payPtr = seiPtr;
      if (payloadSize < leftOver) {
        seiPtr += payloadSize;
      } else if (payloadSize > leftOver) {
        logger.error(`Malformed SEI payload. ${payloadSize} is too small, only ${leftOver} bytes left to parse.`);
        break;
      }
      if (payloadType === 4) {
        const countryCode = data[payPtr++];
        if (countryCode === 181) {
          const providerCode = readUint16(data, payPtr);
          payPtr += 2;
          if (providerCode === 49) {
            const userStructure = readUint32(data, payPtr);
            payPtr += 4;
            if (userStructure === 1195456820) {
              const userDataType = data[payPtr++];
              if (userDataType === 3) {
                const firstByte = data[payPtr++];
                const totalCCs = 31 & firstByte;
                const enabled = 64 & firstByte;
                const totalBytes = enabled ? 2 + totalCCs * 3 : 0;
                const byteArray = new Uint8Array(totalBytes);
                if (enabled) {
                  byteArray[0] = firstByte;
                  for (let i = 1; i < totalBytes; i++) {
                    byteArray[i] = data[payPtr++];
                  }
                }
                samples.push({
                  type: userDataType,
                  payloadType,
                  pts,
                  bytes: byteArray
                });
              }
            }
          }
        }
      } else if (payloadType === 5) {
        if (payloadSize > 16) {
          const uuidStrArray = [];
          for (let i = 0; i < 16; i++) {
            const _b2 = data[payPtr++].toString(16);
            uuidStrArray.push(_b2.length == 1 ? "0" + _b2 : _b2);
            if (i === 3 || i === 5 || i === 7 || i === 9) {
              uuidStrArray.push("-");
            }
          }
          const length = payloadSize - 16;
          const userDataBytes = new Uint8Array(length);
          for (let i = 0; i < length; i++) {
            userDataBytes[i] = data[payPtr++];
          }
          samples.push({
            payloadType,
            pts,
            uuid: uuidStrArray.join(""),
            userData: utf8ArrayToStr(userDataBytes),
            userDataBytes
          });
        }
      }
    }
  }
  function discardEPB(data) {
    const length = data.byteLength;
    const EPBPositions = [];
    let i = 1;
    while (i < length - 2) {
      if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 3) {
        EPBPositions.push(i + 2);
        i += 2;
      } else {
        i++;
      }
    }
    if (EPBPositions.length === 0) {
      return data;
    }
    const newLength = length - EPBPositions.length;
    const newData = new Uint8Array(newLength);
    let sourceIndex = 0;
    for (i = 0; i < newLength; sourceIndex++, i++) {
      if (sourceIndex === EPBPositions[0]) {
        sourceIndex++;
        EPBPositions.shift();
      }
      newData[i] = data[sourceIndex];
    }
    return newData;
  }
  function parseEmsg(data) {
    const version = data[0];
    let schemeIdUri = "";
    let value = "";
    let timeScale = 0;
    let presentationTimeDelta = 0;
    let presentationTime = 0;
    let eventDuration = 0;
    let id = 0;
    let offset = 0;
    if (version === 0) {
      while (bin2str(data.subarray(offset, offset + 1)) !== "\0") {
        schemeIdUri += bin2str(data.subarray(offset, offset + 1));
        offset += 1;
      }
      schemeIdUri += bin2str(data.subarray(offset, offset + 1));
      offset += 1;
      while (bin2str(data.subarray(offset, offset + 1)) !== "\0") {
        value += bin2str(data.subarray(offset, offset + 1));
        offset += 1;
      }
      value += bin2str(data.subarray(offset, offset + 1));
      offset += 1;
      timeScale = readUint32(data, 12);
      presentationTimeDelta = readUint32(data, 16);
      eventDuration = readUint32(data, 20);
      id = readUint32(data, 24);
      offset = 28;
    } else if (version === 1) {
      offset += 4;
      timeScale = readUint32(data, offset);
      offset += 4;
      const leftPresentationTime = readUint32(data, offset);
      offset += 4;
      const rightPresentationTime = readUint32(data, offset);
      offset += 4;
      presentationTime = 2 ** 32 * leftPresentationTime + rightPresentationTime;
      if (!isSafeInteger(presentationTime)) {
        presentationTime = Number.MAX_SAFE_INTEGER;
        logger.warn("Presentation time exceeds safe integer limit and wrapped to max safe integer in parsing emsg box");
      }
      eventDuration = readUint32(data, offset);
      offset += 4;
      id = readUint32(data, offset);
      offset += 4;
      while (bin2str(data.subarray(offset, offset + 1)) !== "\0") {
        schemeIdUri += bin2str(data.subarray(offset, offset + 1));
        offset += 1;
      }
      schemeIdUri += bin2str(data.subarray(offset, offset + 1));
      offset += 1;
      while (bin2str(data.subarray(offset, offset + 1)) !== "\0") {
        value += bin2str(data.subarray(offset, offset + 1));
        offset += 1;
      }
      value += bin2str(data.subarray(offset, offset + 1));
      offset += 1;
    }
    const payload = data.subarray(offset, data.byteLength);
    return {
      schemeIdUri,
      value,
      timeScale,
      presentationTime,
      presentationTimeDelta,
      eventDuration,
      id,
      payload
    };
  }
  function mp4Box(type, ...payload) {
    const len = payload.length;
    let size = 8;
    let i = len;
    while (i--) {
      size += payload[i].byteLength;
    }
    const result = new Uint8Array(size);
    result[0] = size >> 24 & 255;
    result[1] = size >> 16 & 255;
    result[2] = size >> 8 & 255;
    result[3] = size & 255;
    result.set(type, 4);
    for (i = 0, size = 8; i < len; i++) {
      result.set(payload[i], size);
      size += payload[i].byteLength;
    }
    return result;
  }
  function mp4pssh(systemId, keyids, data) {
    if (systemId.byteLength !== 16) {
      throw new RangeError("Invalid system id");
    }
    let version;
    let kids;
    if (keyids) {
      version = 1;
      kids = new Uint8Array(keyids.length * 16);
      for (let ix = 0; ix < keyids.length; ix++) {
        const k = keyids[ix];
        if (k.byteLength !== 16) {
          throw new RangeError("Invalid key");
        }
        kids.set(k, ix * 16);
      }
    } else {
      version = 0;
      kids = new Uint8Array();
    }
    let kidCount;
    if (version > 0) {
      kidCount = new Uint8Array(4);
      if (keyids.length > 0) {
        new DataView(kidCount.buffer).setUint32(0, keyids.length, false);
      }
    } else {
      kidCount = new Uint8Array();
    }
    const dataSize = new Uint8Array(4);
    if (data && data.byteLength > 0) {
      new DataView(dataSize.buffer).setUint32(0, data.byteLength, false);
    }
    return mp4Box(
      [112, 115, 115, 104],
      new Uint8Array([
        version,
        0,
        0,
        0
        // Flags
      ]),
      systemId,
      // 16 bytes
      kidCount,
      kids,
      dataSize,
      data || new Uint8Array()
    );
  }
  function parseMultiPssh(initData) {
    const results = [];
    if (initData instanceof ArrayBuffer) {
      const length = initData.byteLength;
      let offset = 0;
      while (offset + 32 < length) {
        const view = new DataView(initData, offset);
        const pssh = parsePssh(view);
        results.push(pssh);
        offset += pssh.size;
      }
    }
    return results;
  }
  function parsePssh(view) {
    const size = view.getUint32(0);
    const offset = view.byteOffset;
    const length = view.byteLength;
    if (length < size) {
      return {
        offset,
        size: length
      };
    }
    const type = view.getUint32(4);
    if (type !== 1886614376) {
      return {
        offset,
        size
      };
    }
    const version = view.getUint32(8) >>> 24;
    if (version !== 0 && version !== 1) {
      return {
        offset,
        size
      };
    }
    const buffer = view.buffer;
    const systemId = Hex.hexDump(new Uint8Array(buffer, offset + 12, 16));
    const dataSizeOrKidCount = view.getUint32(28);
    let kids = null;
    let data = null;
    if (version === 0) {
      if (size - 32 < dataSizeOrKidCount || dataSizeOrKidCount < 22) {
        return {
          offset,
          size
        };
      }
      data = new Uint8Array(buffer, offset + 32, dataSizeOrKidCount);
    } else if (version === 1) {
      if (!dataSizeOrKidCount || length < offset + 32 + dataSizeOrKidCount * 16 + 16) {
        return {
          offset,
          size
        };
      }
      kids = [];
      for (let i = 0; i < dataSizeOrKidCount; i++) {
        kids.push(new Uint8Array(buffer, offset + 32 + i * 16, 16));
      }
    }
    return {
      version,
      systemId,
      kids,
      data,
      offset,
      size
    };
  }
  var keyUriToKeyIdMap = {};
  var LevelKey = class _LevelKey {
    static clearKeyUriToKeyIdMap() {
      keyUriToKeyIdMap = {};
    }
    constructor(method, uri, format2, formatversions = [1], iv = null) {
      this.uri = void 0;
      this.method = void 0;
      this.keyFormat = void 0;
      this.keyFormatVersions = void 0;
      this.encrypted = void 0;
      this.isCommonEncryption = void 0;
      this.iv = null;
      this.key = null;
      this.keyId = null;
      this.pssh = null;
      this.method = method;
      this.uri = uri;
      this.keyFormat = format2;
      this.keyFormatVersions = formatversions;
      this.iv = iv;
      this.encrypted = method ? method !== "NONE" : false;
      this.isCommonEncryption = this.encrypted && method !== "AES-128";
    }
    isSupported() {
      if (this.method) {
        if (this.method === "AES-128" || this.method === "NONE") {
          return true;
        }
        if (this.keyFormat === "identity") {
          return this.method === "SAMPLE-AES";
        } else {
          switch (this.keyFormat) {
            case KeySystemFormats.FAIRPLAY:
            case KeySystemFormats.WIDEVINE:
            case KeySystemFormats.PLAYREADY:
            case KeySystemFormats.CLEARKEY:
              return ["ISO-23001-7", "SAMPLE-AES", "SAMPLE-AES-CENC", "SAMPLE-AES-CTR"].indexOf(this.method) !== -1;
          }
        }
      }
      return false;
    }
    getDecryptData(sn) {
      if (!this.encrypted || !this.uri) {
        return null;
      }
      if (this.method === "AES-128" && this.uri && !this.iv) {
        if (typeof sn !== "number") {
          if (this.method === "AES-128" && !this.iv) {
            logger.warn(`missing IV for initialization segment with method="${this.method}" - compliance issue`);
          }
          sn = 0;
        }
        const iv = createInitializationVector(sn);
        const decryptdata = new _LevelKey(this.method, this.uri, "identity", this.keyFormatVersions, iv);
        return decryptdata;
      }
      const keyBytes = convertDataUriToArrayBytes(this.uri);
      if (keyBytes) {
        switch (this.keyFormat) {
          case KeySystemFormats.WIDEVINE:
            this.pssh = keyBytes;
            if (keyBytes.length >= 22) {
              this.keyId = keyBytes.subarray(keyBytes.length - 22, keyBytes.length - 6);
            }
            break;
          case KeySystemFormats.PLAYREADY: {
            const PlayReadyKeySystemUUID = new Uint8Array([154, 4, 240, 121, 152, 64, 66, 134, 171, 146, 230, 91, 224, 136, 95, 149]);
            this.pssh = mp4pssh(PlayReadyKeySystemUUID, null, keyBytes);
            const keyBytesUtf16 = new Uint16Array(keyBytes.buffer, keyBytes.byteOffset, keyBytes.byteLength / 2);
            const keyByteStr = String.fromCharCode.apply(null, Array.from(keyBytesUtf16));
            const xmlKeyBytes = keyByteStr.substring(keyByteStr.indexOf("<"), keyByteStr.length);
            const parser = new DOMParser();
            const xmlDoc = parser.parseFromString(xmlKeyBytes, "text/xml");
            const keyData = xmlDoc.getElementsByTagName("KID")[0];
            if (keyData) {
              const keyId = keyData.childNodes[0] ? keyData.childNodes[0].nodeValue : keyData.getAttribute("VALUE");
              if (keyId) {
                const keyIdArray = base64Decode(keyId).subarray(0, 16);
                changeEndianness(keyIdArray);
                this.keyId = keyIdArray;
              }
            }
            break;
          }
          default: {
            let keydata = keyBytes.subarray(0, 16);
            if (keydata.length !== 16) {
              const padded = new Uint8Array(16);
              padded.set(keydata, 16 - keydata.length);
              keydata = padded;
            }
            this.keyId = keydata;
            break;
          }
        }
      }
      if (!this.keyId || this.keyId.byteLength !== 16) {
        let keyId = keyUriToKeyIdMap[this.uri];
        if (!keyId) {
          const val = Object.keys(keyUriToKeyIdMap).length % Number.MAX_SAFE_INTEGER;
          keyId = new Uint8Array(16);
          const dv = new DataView(keyId.buffer, 12, 4);
          dv.setUint32(0, val);
          keyUriToKeyIdMap[this.uri] = keyId;
        }
        this.keyId = keyId;
      }
      return this;
    }
  };
  function createInitializationVector(segmentNumber) {
    const uint8View = new Uint8Array(16);
    for (let i = 12; i < 16; i++) {
      uint8View[i] = segmentNumber >> 8 * (15 - i) & 255;
    }
    return uint8View;
  }
  var VARIABLE_REPLACEMENT_REGEX = /\{\$([a-zA-Z0-9-_]+)\}/g;
  function hasVariableReferences(str) {
    return VARIABLE_REPLACEMENT_REGEX.test(str);
  }
  function substituteVariablesInAttributes(parsed, attr, attributeNames) {
    if (parsed.variableList !== null || parsed.hasVariableRefs) {
      for (let i = attributeNames.length; i--; ) {
        const name = attributeNames[i];
        const value = attr[name];
        if (value) {
          attr[name] = substituteVariables(parsed, value);
        }
      }
    }
  }
  function substituteVariables(parsed, value) {
    if (parsed.variableList !== null || parsed.hasVariableRefs) {
      const variableList = parsed.variableList;
      return value.replace(VARIABLE_REPLACEMENT_REGEX, (variableReference) => {
        const variableName = variableReference.substring(2, variableReference.length - 1);
        const variableValue = variableList == null ? void 0 : variableList[variableName];
        if (variableValue === void 0) {
          parsed.playlistParsingError || (parsed.playlistParsingError = new Error(`Missing preceding EXT-X-DEFINE tag for Variable Reference: "${variableName}"`));
          return variableReference;
        }
        return variableValue;
      });
    }
    return value;
  }
  function addVariableDefinition(parsed, attr, parentUrl) {
    let variableList = parsed.variableList;
    if (!variableList) {
      parsed.variableList = variableList = {};
    }
    let NAME;
    let VALUE;
    if ("QUERYPARAM" in attr) {
      NAME = attr.QUERYPARAM;
      try {
        const searchParams = new self.URL(parentUrl).searchParams;
        if (searchParams.has(NAME)) {
          VALUE = searchParams.get(NAME);
        } else {
          throw new Error(`"${NAME}" does not match any query parameter in URI: "${parentUrl}"`);
        }
      } catch (error) {
        parsed.playlistParsingError || (parsed.playlistParsingError = new Error(`EXT-X-DEFINE QUERYPARAM: ${error.message}`));
      }
    } else {
      NAME = attr.NAME;
      VALUE = attr.VALUE;
    }
    if (NAME in variableList) {
      parsed.playlistParsingError || (parsed.playlistParsingError = new Error(`EXT-X-DEFINE duplicate Variable Name declarations: "${NAME}"`));
    } else {
      variableList[NAME] = VALUE || "";
    }
  }
  function importVariableDefinition(parsed, attr, sourceVariableList) {
    const IMPORT = attr.IMPORT;
    if (sourceVariableList && IMPORT in sourceVariableList) {
      let variableList = parsed.variableList;
      if (!variableList) {
        parsed.variableList = variableList = {};
      }
      variableList[IMPORT] = sourceVariableList[IMPORT];
    } else {
      parsed.playlistParsingError || (parsed.playlistParsingError = new Error(`EXT-X-DEFINE IMPORT attribute not found in Multivariant Playlist: "${IMPORT}"`));
    }
  }
  function getMediaSource(preferManagedMediaSource = true) {
    if (typeof self === "undefined") return void 0;
    const mms = (preferManagedMediaSource || !self.MediaSource) && self.ManagedMediaSource;
    return mms || self.MediaSource || self.WebKitMediaSource;
  }
  function isManagedMediaSource(source) {
    return typeof self !== "undefined" && source === self.ManagedMediaSource;
  }
  var sampleEntryCodesISO = {
    audio: {
      a3ds: 1,
      "ac-3": 0.95,
      "ac-4": 1,
      alac: 0.9,
      alaw: 1,
      dra1: 1,
      "dts+": 1,
      "dts-": 1,
      dtsc: 1,
      dtse: 1,
      dtsh: 1,
      "ec-3": 0.9,
      enca: 1,
      fLaC: 0.9,
      // MP4-RA listed codec entry for FLAC
      flac: 0.9,
      // legacy browser codec name for FLAC
      FLAC: 0.9,
      // some manifests may list "FLAC" with Apple's tools
      g719: 1,
      g726: 1,
      m4ae: 1,
      mha1: 1,
      mha2: 1,
      mhm1: 1,
      mhm2: 1,
      mlpa: 1,
      mp4a: 1,
      "raw ": 1,
      Opus: 1,
      opus: 1,
      // browsers expect this to be lowercase despite MP4RA says 'Opus'
      samr: 1,
      sawb: 1,
      sawp: 1,
      sevc: 1,
      sqcp: 1,
      ssmv: 1,
      twos: 1,
      ulaw: 1
    },
    video: {
      avc1: 1,
      avc2: 1,
      avc3: 1,
      avc4: 1,
      avcp: 1,
      av01: 0.8,
      drac: 1,
      dva1: 1,
      dvav: 1,
      dvh1: 0.7,
      dvhe: 0.7,
      encv: 1,
      hev1: 0.75,
      hvc1: 0.75,
      mjp2: 1,
      mp4v: 1,
      mvc1: 1,
      mvc2: 1,
      mvc3: 1,
      mvc4: 1,
      resv: 1,
      rv60: 1,
      s263: 1,
      svc1: 1,
      svc2: 1,
      "vc-1": 1,
      vp08: 1,
      vp09: 0.9
    },
    text: {
      stpp: 1,
      wvtt: 1
    }
  };
  function isCodecType(codec, type) {
    const typeCodes = sampleEntryCodesISO[type];
    return !!typeCodes && !!typeCodes[codec.slice(0, 4)];
  }
  function areCodecsMediaSourceSupported(codecs, type, preferManagedMediaSource = true) {
    return !codecs.split(",").some((codec) => !isCodecMediaSourceSupported(codec, type, preferManagedMediaSource));
  }
  function isCodecMediaSourceSupported(codec, type, preferManagedMediaSource = true) {
    var _MediaSource$isTypeSu;
    const MediaSource = getMediaSource(preferManagedMediaSource);
    return (_MediaSource$isTypeSu = MediaSource == null ? void 0 : MediaSource.isTypeSupported(mimeTypeForCodec(codec, type))) != null ? _MediaSource$isTypeSu : false;
  }
  function mimeTypeForCodec(codec, type) {
    return `${type}/mp4;codecs="${codec}"`;
  }
  function videoCodecPreferenceValue(videoCodec) {
    if (videoCodec) {
      const fourCC = videoCodec.substring(0, 4);
      return sampleEntryCodesISO.video[fourCC];
    }
    return 2;
  }
  function codecsSetSelectionPreferenceValue(codecSet) {
    return codecSet.split(",").reduce((num, fourCC) => {
      const preferenceValue = sampleEntryCodesISO.video[fourCC];
      if (preferenceValue) {
        return (preferenceValue * 2 + num) / (num ? 3 : 2);
      }
      return (sampleEntryCodesISO.audio[fourCC] + num) / (num ? 2 : 1);
    }, 0);
  }
  var CODEC_COMPATIBLE_NAMES = {};
  function getCodecCompatibleNameLower(lowerCaseCodec, preferManagedMediaSource = true) {
    if (CODEC_COMPATIBLE_NAMES[lowerCaseCodec]) {
      return CODEC_COMPATIBLE_NAMES[lowerCaseCodec];
    }
    const codecsToCheck = {
      flac: ["flac", "fLaC", "FLAC"],
      opus: ["opus", "Opus"]
    }[lowerCaseCodec];
    for (let i = 0; i < codecsToCheck.length; i++) {
      if (isCodecMediaSourceSupported(codecsToCheck[i], "audio", preferManagedMediaSource)) {
        CODEC_COMPATIBLE_NAMES[lowerCaseCodec] = codecsToCheck[i];
        return codecsToCheck[i];
      }
    }
    return lowerCaseCodec;
  }
  var AUDIO_CODEC_REGEXP = /flac|opus/i;
  function getCodecCompatibleName(codec, preferManagedMediaSource = true) {
    return codec.replace(AUDIO_CODEC_REGEXP, (m) => getCodecCompatibleNameLower(m.toLowerCase(), preferManagedMediaSource));
  }
  function pickMostCompleteCodecName(parsedCodec, levelCodec) {
    if (parsedCodec && parsedCodec !== "mp4a") {
      return parsedCodec;
    }
    return levelCodec ? levelCodec.split(",")[0] : levelCodec;
  }
  function convertAVC1ToAVCOTI(codec) {
    const codecs = codec.split(",");
    for (let i = 0; i < codecs.length; i++) {
      const avcdata = codecs[i].split(".");
      if (avcdata.length > 2) {
        let result = avcdata.shift() + ".";
        result += parseInt(avcdata.shift()).toString(16);
        result += ("000" + parseInt(avcdata.shift()).toString(16)).slice(-4);
        codecs[i] = result;
      }
    }
    return codecs.join(",");
  }
  var MASTER_PLAYLIST_REGEX = /#EXT-X-STREAM-INF:([^\r\n]*)(?:[\r\n](?:#[^\r\n]*)?)*([^\r\n]+)|#EXT-X-(SESSION-DATA|SESSION-KEY|DEFINE|CONTENT-STEERING|START):([^\r\n]*)[\r\n]+/g;
  var MASTER_PLAYLIST_MEDIA_REGEX = /#EXT-X-MEDIA:(.*)/g;
  var IS_MEDIA_PLAYLIST = /^#EXT(?:INF|-X-TARGETDURATION):/m;
  var LEVEL_PLAYLIST_REGEX_FAST = new RegExp([
    /#EXTINF:\s*(\d*(?:\.\d+)?)(?:,(.*)\s+)?/.source,
    // duration (#EXTINF:<duration>,<title>), group 1 => duration, group 2 => title
    /(?!#) *(\S[^\r\n]*)/.source,
    // segment URI, group 3 => the URI (note newline is not eaten)
    /#EXT-X-BYTERANGE:*(.+)/.source,
    // next segment's byterange, group 4 => range spec (x@y)
    /#EXT-X-PROGRAM-DATE-TIME:(.+)/.source,
    // next segment's program date/time group 5 => the datetime spec
    /#.*/.source
    // All other non-segment oriented tags will match with all groups empty
  ].join("|"), "g");
  var LEVEL_PLAYLIST_REGEX_SLOW = new RegExp([/#(EXTM3U)/.source, /#EXT-X-(DATERANGE|DEFINE|KEY|MAP|PART|PART-INF|PLAYLIST-TYPE|PRELOAD-HINT|RENDITION-REPORT|SERVER-CONTROL|SKIP|START):(.+)/.source, /#EXT-X-(BITRATE|DISCONTINUITY-SEQUENCE|MEDIA-SEQUENCE|TARGETDURATION|VERSION): *(\d+)/.source, /#EXT-X-(DISCONTINUITY|ENDLIST|GAP|INDEPENDENT-SEGMENTS)/.source, /(#)([^:]*):(.*)/.source, /(#)(.*)(?:.*)\r?\n?/.source].join("|"));
  var M3U8Parser = class _M3U8Parser {
    static findGroup(groups, mediaGroupId) {
      for (let i = 0; i < groups.length; i++) {
        const group = groups[i];
        if (group.id === mediaGroupId) {
          return group;
        }
      }
    }
    static resolve(url, baseUrl) {
      return urlToolkitExports.buildAbsoluteURL(baseUrl, url, {
        alwaysNormalize: true
      });
    }
    static isMediaPlaylist(str) {
      return IS_MEDIA_PLAYLIST.test(str);
    }
    static parseMasterPlaylist(string, baseurl) {
      const hasVariableRefs = hasVariableReferences(string);
      const parsed = {
        contentSteering: null,
        levels: [],
        playlistParsingError: null,
        sessionData: null,
        sessionKeys: null,
        startTimeOffset: null,
        variableList: null,
        hasVariableRefs
      };
      const levelsWithKnownCodecs = [];
      MASTER_PLAYLIST_REGEX.lastIndex = 0;
      let result;
      while ((result = MASTER_PLAYLIST_REGEX.exec(string)) != null) {
        if (result[1]) {
          var _level$unknownCodecs;
          const attrs = new AttrList(result[1]);
          {
            substituteVariablesInAttributes(parsed, attrs, ["CODECS", "SUPPLEMENTAL-CODECS", "ALLOWED-CPC", "PATHWAY-ID", "STABLE-VARIANT-ID", "AUDIO", "VIDEO", "SUBTITLES", "CLOSED-CAPTIONS", "NAME"]);
          }
          const uri = substituteVariables(parsed, result[2]);
          const level = {
            attrs,
            bitrate: attrs.decimalInteger("BANDWIDTH") || attrs.decimalInteger("AVERAGE-BANDWIDTH"),
            name: attrs.NAME,
            url: _M3U8Parser.resolve(uri, baseurl)
          };
          const resolution = attrs.decimalResolution("RESOLUTION");
          if (resolution) {
            level.width = resolution.width;
            level.height = resolution.height;
          }
          setCodecs(attrs.CODECS, level);
          if (!((_level$unknownCodecs = level.unknownCodecs) != null && _level$unknownCodecs.length)) {
            levelsWithKnownCodecs.push(level);
          }
          parsed.levels.push(level);
        } else if (result[3]) {
          const tag = result[3];
          const attributes = result[4];
          switch (tag) {
            case "SESSION-DATA": {
              const sessionAttrs = new AttrList(attributes);
              {
                substituteVariablesInAttributes(parsed, sessionAttrs, ["DATA-ID", "LANGUAGE", "VALUE", "URI"]);
              }
              const dataId = sessionAttrs["DATA-ID"];
              if (dataId) {
                if (parsed.sessionData === null) {
                  parsed.sessionData = {};
                }
                parsed.sessionData[dataId] = sessionAttrs;
              }
              break;
            }
            case "SESSION-KEY": {
              const sessionKey = parseKey(attributes, baseurl, parsed);
              if (sessionKey.encrypted && sessionKey.isSupported()) {
                if (parsed.sessionKeys === null) {
                  parsed.sessionKeys = [];
                }
                parsed.sessionKeys.push(sessionKey);
              } else {
                logger.warn(`[Keys] Ignoring invalid EXT-X-SESSION-KEY tag: "${attributes}"`);
              }
              break;
            }
            case "DEFINE": {
              {
                const variableAttributes = new AttrList(attributes);
                substituteVariablesInAttributes(parsed, variableAttributes, ["NAME", "VALUE", "QUERYPARAM"]);
                addVariableDefinition(parsed, variableAttributes, baseurl);
              }
              break;
            }
            case "CONTENT-STEERING": {
              const contentSteeringAttributes = new AttrList(attributes);
              {
                substituteVariablesInAttributes(parsed, contentSteeringAttributes, ["SERVER-URI", "PATHWAY-ID"]);
              }
              parsed.contentSteering = {
                uri: _M3U8Parser.resolve(contentSteeringAttributes["SERVER-URI"], baseurl),
                pathwayId: contentSteeringAttributes["PATHWAY-ID"] || "."
              };
              break;
            }
            case "START": {
              parsed.startTimeOffset = parseStartTimeOffset(attributes);
              break;
            }
          }
        }
      }
      const stripUnknownCodecLevels = levelsWithKnownCodecs.length > 0 && levelsWithKnownCodecs.length < parsed.levels.length;
      parsed.levels = stripUnknownCodecLevels ? levelsWithKnownCodecs : parsed.levels;
      if (parsed.levels.length === 0) {
        parsed.playlistParsingError = new Error("no levels found in manifest");
      }
      return parsed;
    }
    static parseMasterPlaylistMedia(string, baseurl, parsed) {
      let result;
      const results = {};
      const levels = parsed.levels;
      const groupsByType = {
        AUDIO: levels.map((level) => ({
          id: level.attrs.AUDIO,
          audioCodec: level.audioCodec
        })),
        SUBTITLES: levels.map((level) => ({
          id: level.attrs.SUBTITLES,
          textCodec: level.textCodec
        })),
        "CLOSED-CAPTIONS": []
      };
      let id = 0;
      MASTER_PLAYLIST_MEDIA_REGEX.lastIndex = 0;
      while ((result = MASTER_PLAYLIST_MEDIA_REGEX.exec(string)) !== null) {
        const attrs = new AttrList(result[1]);
        const type = attrs.TYPE;
        if (type) {
          const groups = groupsByType[type];
          const medias = results[type] || [];
          results[type] = medias;
          {
            substituteVariablesInAttributes(parsed, attrs, ["URI", "GROUP-ID", "LANGUAGE", "ASSOC-LANGUAGE", "STABLE-RENDITION-ID", "NAME", "INSTREAM-ID", "CHARACTERISTICS", "CHANNELS"]);
          }
          const lang = attrs.LANGUAGE;
          const assocLang = attrs["ASSOC-LANGUAGE"];
          const channels = attrs.CHANNELS;
          const characteristics = attrs.CHARACTERISTICS;
          const instreamId = attrs["INSTREAM-ID"];
          const media = {
            attrs,
            bitrate: 0,
            id: id++,
            groupId: attrs["GROUP-ID"] || "",
            name: attrs.NAME || lang || "",
            type,
            default: attrs.bool("DEFAULT"),
            autoselect: attrs.bool("AUTOSELECT"),
            forced: attrs.bool("FORCED"),
            lang,
            url: attrs.URI ? _M3U8Parser.resolve(attrs.URI, baseurl) : ""
          };
          if (assocLang) {
            media.assocLang = assocLang;
          }
          if (channels) {
            media.channels = channels;
          }
          if (characteristics) {
            media.characteristics = characteristics;
          }
          if (instreamId) {
            media.instreamId = instreamId;
          }
          if (groups != null && groups.length) {
            const groupCodec = _M3U8Parser.findGroup(groups, media.groupId) || groups[0];
            assignCodec(media, groupCodec, "audioCodec");
            assignCodec(media, groupCodec, "textCodec");
          }
          medias.push(media);
        }
      }
      return results;
    }
    static parseLevelPlaylist(string, baseurl, id, type, levelUrlId, multivariantVariableList) {
      const level = new LevelDetails(baseurl);
      const fragments = level.fragments;
      let currentInitSegment = null;
      let currentSN = 0;
      let currentPart = 0;
      let totalduration = 0;
      let discontinuityCounter = 0;
      let prevFrag = null;
      let frag = new Fragment(type, baseurl);
      let result;
      let i;
      let levelkeys;
      let firstPdtIndex = -1;
      let createNextFrag = false;
      let nextByteRange = null;
      LEVEL_PLAYLIST_REGEX_FAST.lastIndex = 0;
      level.m3u8 = string;
      level.hasVariableRefs = hasVariableReferences(string);
      while ((result = LEVEL_PLAYLIST_REGEX_FAST.exec(string)) !== null) {
        if (createNextFrag) {
          createNextFrag = false;
          frag = new Fragment(type, baseurl);
          frag.start = totalduration;
          frag.sn = currentSN;
          frag.cc = discontinuityCounter;
          frag.level = id;
          if (currentInitSegment) {
            frag.initSegment = currentInitSegment;
            frag.rawProgramDateTime = currentInitSegment.rawProgramDateTime;
            currentInitSegment.rawProgramDateTime = null;
            if (nextByteRange) {
              frag.setByteRange(nextByteRange);
              nextByteRange = null;
            }
          }
        }
        const duration = result[1];
        if (duration) {
          frag.duration = parseFloat(duration);
          const title = (" " + result[2]).slice(1);
          frag.title = title || null;
          frag.tagList.push(title ? ["INF", duration, title] : ["INF", duration]);
        } else if (result[3]) {
          if (isFiniteNumber(frag.duration)) {
            frag.start = totalduration;
            if (levelkeys) {
              setFragLevelKeys(frag, levelkeys, level);
            }
            frag.sn = currentSN;
            frag.level = id;
            frag.cc = discontinuityCounter;
            fragments.push(frag);
            const uri = (" " + result[3]).slice(1);
            frag.relurl = substituteVariables(level, uri);
            assignProgramDateTime(frag, prevFrag);
            prevFrag = frag;
            totalduration += frag.duration;
            currentSN++;
            currentPart = 0;
            createNextFrag = true;
          }
        } else if (result[4]) {
          const data = (" " + result[4]).slice(1);
          if (prevFrag) {
            frag.setByteRange(data, prevFrag);
          } else {
            frag.setByteRange(data);
          }
        } else if (result[5]) {
          frag.rawProgramDateTime = (" " + result[5]).slice(1);
          frag.tagList.push(["PROGRAM-DATE-TIME", frag.rawProgramDateTime]);
          if (firstPdtIndex === -1) {
            firstPdtIndex = fragments.length;
          }
        } else {
          result = result[0].match(LEVEL_PLAYLIST_REGEX_SLOW);
          if (!result) {
            logger.warn("No matches on slow regex match for level playlist!");
            continue;
          }
          for (i = 1; i < result.length; i++) {
            if (typeof result[i] !== "undefined") {
              break;
            }
          }
          const tag = (" " + result[i]).slice(1);
          const value1 = (" " + result[i + 1]).slice(1);
          const value2 = result[i + 2] ? (" " + result[i + 2]).slice(1) : "";
          switch (tag) {
            case "PLAYLIST-TYPE":
              level.type = value1.toUpperCase();
              break;
            case "MEDIA-SEQUENCE":
              currentSN = level.startSN = parseInt(value1);
              break;
            case "SKIP": {
              const skipAttrs = new AttrList(value1);
              {
                substituteVariablesInAttributes(level, skipAttrs, ["RECENTLY-REMOVED-DATERANGES"]);
              }
              const skippedSegments = skipAttrs.decimalInteger("SKIPPED-SEGMENTS");
              if (isFiniteNumber(skippedSegments)) {
                level.skippedSegments = skippedSegments;
                for (let _i = skippedSegments; _i--; ) {
                  fragments.unshift(null);
                }
                currentSN += skippedSegments;
              }
              const recentlyRemovedDateranges = skipAttrs.enumeratedString("RECENTLY-REMOVED-DATERANGES");
              if (recentlyRemovedDateranges) {
                level.recentlyRemovedDateranges = recentlyRemovedDateranges.split("	");
              }
              break;
            }
            case "TARGETDURATION":
              level.targetduration = Math.max(parseInt(value1), 1);
              break;
            case "VERSION":
              level.version = parseInt(value1);
              break;
            case "INDEPENDENT-SEGMENTS":
            case "EXTM3U":
              break;
            case "ENDLIST":
              level.live = false;
              break;
            case "#":
              if (value1 || value2) {
                frag.tagList.push(value2 ? [value1, value2] : [value1]);
              }
              break;
            case "DISCONTINUITY":
              discontinuityCounter++;
              frag.tagList.push(["DIS"]);
              break;
            case "GAP":
              frag.gap = true;
              frag.tagList.push([tag]);
              break;
            case "BITRATE":
              frag.tagList.push([tag, value1]);
              break;
            case "DATERANGE": {
              const dateRangeAttr = new AttrList(value1);
              {
                substituteVariablesInAttributes(level, dateRangeAttr, ["ID", "CLASS", "START-DATE", "END-DATE", "SCTE35-CMD", "SCTE35-OUT", "SCTE35-IN"]);
                substituteVariablesInAttributes(level, dateRangeAttr, dateRangeAttr.clientAttrs);
              }
              const dateRange = new DateRange(dateRangeAttr, level.dateRanges[dateRangeAttr.ID]);
              if (dateRange.isValid || level.skippedSegments) {
                level.dateRanges[dateRange.id] = dateRange;
              } else {
                logger.warn(`Ignoring invalid DATERANGE tag: "${value1}"`);
              }
              frag.tagList.push(["EXT-X-DATERANGE", value1]);
              break;
            }
            case "DEFINE": {
              {
                const variableAttributes = new AttrList(value1);
                substituteVariablesInAttributes(level, variableAttributes, ["NAME", "VALUE", "IMPORT", "QUERYPARAM"]);
                if ("IMPORT" in variableAttributes) {
                  importVariableDefinition(level, variableAttributes, multivariantVariableList);
                } else {
                  addVariableDefinition(level, variableAttributes, baseurl);
                }
              }
              break;
            }
            case "DISCONTINUITY-SEQUENCE":
              discontinuityCounter = parseInt(value1);
              break;
            case "KEY": {
              const levelKey = parseKey(value1, baseurl, level);
              if (levelKey.isSupported()) {
                if (levelKey.method === "NONE") {
                  levelkeys = void 0;
                  break;
                }
                if (!levelkeys) {
                  levelkeys = {};
                }
                if (levelkeys[levelKey.keyFormat]) {
                  levelkeys = _extends({}, levelkeys);
                }
                levelkeys[levelKey.keyFormat] = levelKey;
              } else {
                logger.warn(`[Keys] Ignoring invalid EXT-X-KEY tag: "${value1}"`);
              }
              break;
            }
            case "START":
              level.startTimeOffset = parseStartTimeOffset(value1);
              break;
            case "MAP": {
              const mapAttrs = new AttrList(value1);
              {
                substituteVariablesInAttributes(level, mapAttrs, ["BYTERANGE", "URI"]);
              }
              if (frag.duration) {
                const init = new Fragment(type, baseurl);
                setInitSegment(init, mapAttrs, id, levelkeys);
                currentInitSegment = init;
                frag.initSegment = currentInitSegment;
                if (currentInitSegment.rawProgramDateTime && !frag.rawProgramDateTime) {
                  frag.rawProgramDateTime = currentInitSegment.rawProgramDateTime;
                }
              } else {
                const end = frag.byteRangeEndOffset;
                if (end) {
                  const start = frag.byteRangeStartOffset;
                  nextByteRange = `${end - start}@${start}`;
                } else {
                  nextByteRange = null;
                }
                setInitSegment(frag, mapAttrs, id, levelkeys);
                currentInitSegment = frag;
                createNextFrag = true;
              }
              break;
            }
            case "SERVER-CONTROL": {
              const serverControlAttrs = new AttrList(value1);
              level.canBlockReload = serverControlAttrs.bool("CAN-BLOCK-RELOAD");
              level.canSkipUntil = serverControlAttrs.optionalFloat("CAN-SKIP-UNTIL", 0);
              level.canSkipDateRanges = level.canSkipUntil > 0 && serverControlAttrs.bool("CAN-SKIP-DATERANGES");
              level.partHoldBack = serverControlAttrs.optionalFloat("PART-HOLD-BACK", 0);
              level.holdBack = serverControlAttrs.optionalFloat("HOLD-BACK", 0);
              break;
            }
            case "PART-INF": {
              const partInfAttrs = new AttrList(value1);
              level.partTarget = partInfAttrs.decimalFloatingPoint("PART-TARGET");
              break;
            }
            case "PART": {
              let partList = level.partList;
              if (!partList) {
                partList = level.partList = [];
              }
              const previousFragmentPart = currentPart > 0 ? partList[partList.length - 1] : void 0;
              const index = currentPart++;
              const partAttrs = new AttrList(value1);
              {
                substituteVariablesInAttributes(level, partAttrs, ["BYTERANGE", "URI"]);
              }
              const part = new Part(partAttrs, frag, baseurl, index, previousFragmentPart);
              partList.push(part);
              frag.duration += part.duration;
              break;
            }
            case "PRELOAD-HINT": {
              const preloadHintAttrs = new AttrList(value1);
              {
                substituteVariablesInAttributes(level, preloadHintAttrs, ["URI"]);
              }
              level.preloadHint = preloadHintAttrs;
              break;
            }
            case "RENDITION-REPORT": {
              const renditionReportAttrs = new AttrList(value1);
              {
                substituteVariablesInAttributes(level, renditionReportAttrs, ["URI"]);
              }
              level.renditionReports = level.renditionReports || [];
              level.renditionReports.push(renditionReportAttrs);
              break;
            }
            default:
              logger.warn(`line parsed but not handled: ${result}`);
              break;
          }
        }
      }
      if (prevFrag && !prevFrag.relurl) {
        fragments.pop();
        totalduration -= prevFrag.duration;
        if (level.partList) {
          level.fragmentHint = prevFrag;
        }
      } else if (level.partList) {
        assignProgramDateTime(frag, prevFrag);
        frag.cc = discontinuityCounter;
        level.fragmentHint = frag;
        if (levelkeys) {
          setFragLevelKeys(frag, levelkeys, level);
        }
      }
      const fragmentLength = fragments.length;
      const firstFragment = fragments[0];
      const lastFragment = fragments[fragmentLength - 1];
      totalduration += level.skippedSegments * level.targetduration;
      if (totalduration > 0 && fragmentLength && lastFragment) {
        level.averagetargetduration = totalduration / fragmentLength;
        const lastSn = lastFragment.sn;
        level.endSN = lastSn !== "initSegment" ? lastSn : 0;
        if (!level.live) {
          lastFragment.endList = true;
        }
        if (firstFragment) {
          level.startCC = firstFragment.cc;
        }
      } else {
        level.endSN = 0;
        level.startCC = 0;
      }
      if (level.fragmentHint) {
        totalduration += level.fragmentHint.duration;
      }
      level.totalduration = totalduration;
      level.endCC = discontinuityCounter;
      if (firstPdtIndex > 0) {
        backfillProgramDateTimes(fragments, firstPdtIndex);
      }
      return level;
    }
  };
  function parseKey(keyTagAttributes, baseurl, parsed) {
    var _keyAttrs$METHOD, _keyAttrs$KEYFORMAT;
    const keyAttrs = new AttrList(keyTagAttributes);
    {
      substituteVariablesInAttributes(parsed, keyAttrs, ["KEYFORMAT", "KEYFORMATVERSIONS", "URI", "IV", "URI"]);
    }
    const decryptmethod = (_keyAttrs$METHOD = keyAttrs.METHOD) != null ? _keyAttrs$METHOD : "";
    const decrypturi = keyAttrs.URI;
    const decryptiv = keyAttrs.hexadecimalInteger("IV");
    const decryptkeyformatversions = keyAttrs.KEYFORMATVERSIONS;
    const decryptkeyformat = (_keyAttrs$KEYFORMAT = keyAttrs.KEYFORMAT) != null ? _keyAttrs$KEYFORMAT : "identity";
    if (decrypturi && keyAttrs.IV && !decryptiv) {
      logger.error(`Invalid IV: ${keyAttrs.IV}`);
    }
    const resolvedUri = decrypturi ? M3U8Parser.resolve(decrypturi, baseurl) : "";
    const keyFormatVersions = (decryptkeyformatversions ? decryptkeyformatversions : "1").split("/").map(Number).filter(Number.isFinite);
    return new LevelKey(decryptmethod, resolvedUri, decryptkeyformat, keyFormatVersions, decryptiv);
  }
  function parseStartTimeOffset(startAttributes) {
    const startAttrs = new AttrList(startAttributes);
    const startTimeOffset = startAttrs.decimalFloatingPoint("TIME-OFFSET");
    if (isFiniteNumber(startTimeOffset)) {
      return startTimeOffset;
    }
    return null;
  }
  function setCodecs(codecsAttributeValue, level) {
    let codecs = (codecsAttributeValue || "").split(/[ ,]+/).filter((c) => c);
    ["video", "audio", "text"].forEach((type) => {
      const filtered = codecs.filter((codec) => isCodecType(codec, type));
      if (filtered.length) {
        level[`${type}Codec`] = filtered.join(",");
        codecs = codecs.filter((codec) => filtered.indexOf(codec) === -1);
      }
    });
    level.unknownCodecs = codecs;
  }
  function assignCodec(media, groupItem, codecProperty) {
    const codecValue = groupItem[codecProperty];
    if (codecValue) {
      media[codecProperty] = codecValue;
    }
  }
  function backfillProgramDateTimes(fragments, firstPdtIndex) {
    let fragPrev = fragments[firstPdtIndex];
    for (let i = firstPdtIndex; i--; ) {
      const frag = fragments[i];
      if (!frag) {
        return;
      }
      frag.programDateTime = fragPrev.programDateTime - frag.duration * 1e3;
      fragPrev = frag;
    }
  }
  function assignProgramDateTime(frag, prevFrag) {
    if (frag.rawProgramDateTime) {
      frag.programDateTime = Date.parse(frag.rawProgramDateTime);
    } else if (prevFrag != null && prevFrag.programDateTime) {
      frag.programDateTime = prevFrag.endProgramDateTime;
    }
    if (!isFiniteNumber(frag.programDateTime)) {
      frag.programDateTime = null;
      frag.rawProgramDateTime = null;
    }
  }
  function setInitSegment(frag, mapAttrs, id, levelkeys) {
    frag.relurl = mapAttrs.URI;
    if (mapAttrs.BYTERANGE) {
      frag.setByteRange(mapAttrs.BYTERANGE);
    }
    frag.level = id;
    frag.sn = "initSegment";
    if (levelkeys) {
      frag.levelkeys = levelkeys;
    }
    frag.initSegment = null;
  }
  function setFragLevelKeys(frag, levelkeys, level) {
    frag.levelkeys = levelkeys;
    const {
      encryptedFragments
    } = level;
    if ((!encryptedFragments.length || encryptedFragments[encryptedFragments.length - 1].levelkeys !== levelkeys) && Object.keys(levelkeys).some((format2) => levelkeys[format2].isCommonEncryption)) {
      encryptedFragments.push(frag);
    }
  }
  var PlaylistContextType = {
    MANIFEST: "manifest",
    LEVEL: "level",
    AUDIO_TRACK: "audioTrack",
    SUBTITLE_TRACK: "subtitleTrack"
  };
  var PlaylistLevelType = {
    MAIN: "main",
    AUDIO: "audio",
    SUBTITLE: "subtitle"
  };
  function mapContextToLevelType(context) {
    const {
      type
    } = context;
    switch (type) {
      case PlaylistContextType.AUDIO_TRACK:
        return PlaylistLevelType.AUDIO;
      case PlaylistContextType.SUBTITLE_TRACK:
        return PlaylistLevelType.SUBTITLE;
      default:
        return PlaylistLevelType.MAIN;
    }
  }
  function getResponseUrl(response, context) {
    let url = response.url;
    if (url === void 0 || url.indexOf("data:") === 0) {
      url = context.url;
    }
    return url;
  }
  var PlaylistLoader = class {
    constructor(hls) {
      this.hls = void 0;
      this.loaders = /* @__PURE__ */ Object.create(null);
      this.variableList = null;
      this.hls = hls;
      this.registerListeners();
    }
    startLoad(startPosition) {
    }
    stopLoad() {
      this.destroyInternalLoaders();
    }
    registerListeners() {
      const {
        hls
      } = this;
      hls.on(Events2.MANIFEST_LOADING, this.onManifestLoading, this);
      hls.on(Events2.LEVEL_LOADING, this.onLevelLoading, this);
      hls.on(Events2.AUDIO_TRACK_LOADING, this.onAudioTrackLoading, this);
      hls.on(Events2.SUBTITLE_TRACK_LOADING, this.onSubtitleTrackLoading, this);
    }
    unregisterListeners() {
      const {
        hls
      } = this;
      hls.off(Events2.MANIFEST_LOADING, this.onManifestLoading, this);
      hls.off(Events2.LEVEL_LOADING, this.onLevelLoading, this);
      hls.off(Events2.AUDIO_TRACK_LOADING, this.onAudioTrackLoading, this);
      hls.off(Events2.SUBTITLE_TRACK_LOADING, this.onSubtitleTrackLoading, this);
    }
    /**
     * Returns defaults or configured loader-type overloads (pLoader and loader config params)
     */
    createInternalLoader(context) {
      const config = this.hls.config;
      const PLoader = config.pLoader;
      const Loader = config.loader;
      const InternalLoader = PLoader || Loader;
      const loader = new InternalLoader(config);
      this.loaders[context.type] = loader;
      return loader;
    }
    getInternalLoader(context) {
      return this.loaders[context.type];
    }
    resetInternalLoader(contextType) {
      if (this.loaders[contextType]) {
        delete this.loaders[contextType];
      }
    }
    /**
     * Call `destroy` on all internal loader instances mapped (one per context type)
     */
    destroyInternalLoaders() {
      for (const contextType in this.loaders) {
        const loader = this.loaders[contextType];
        if (loader) {
          loader.destroy();
        }
        this.resetInternalLoader(contextType);
      }
    }
    destroy() {
      this.variableList = null;
      this.unregisterListeners();
      this.destroyInternalLoaders();
    }
    onManifestLoading(event, data) {
      const {
        url
      } = data;
      this.variableList = null;
      this.load({
        id: null,
        level: 0,
        responseType: "text",
        type: PlaylistContextType.MANIFEST,
        url,
        deliveryDirectives: null
      });
    }
    onLevelLoading(event, data) {
      const {
        id,
        level,
        pathwayId,
        url,
        deliveryDirectives
      } = data;
      this.load({
        id,
        level,
        pathwayId,
        responseType: "text",
        type: PlaylistContextType.LEVEL,
        url,
        deliveryDirectives
      });
    }
    onAudioTrackLoading(event, data) {
      const {
        id,
        groupId,
        url,
        deliveryDirectives
      } = data;
      this.load({
        id,
        groupId,
        level: null,
        responseType: "text",
        type: PlaylistContextType.AUDIO_TRACK,
        url,
        deliveryDirectives
      });
    }
    onSubtitleTrackLoading(event, data) {
      const {
        id,
        groupId,
        url,
        deliveryDirectives
      } = data;
      this.load({
        id,
        groupId,
        level: null,
        responseType: "text",
        type: PlaylistContextType.SUBTITLE_TRACK,
        url,
        deliveryDirectives
      });
    }
    load(context) {
      var _context$deliveryDire;
      const config = this.hls.config;
      let loader = this.getInternalLoader(context);
      if (loader) {
        const loaderContext = loader.context;
        if (loaderContext && loaderContext.url === context.url && loaderContext.level === context.level) {
          logger.trace("[playlist-loader]: playlist request ongoing");
          return;
        }
        logger.log(`[playlist-loader]: aborting previous loader for type: ${context.type}`);
        loader.abort();
      }
      let loadPolicy;
      if (context.type === PlaylistContextType.MANIFEST) {
        loadPolicy = config.manifestLoadPolicy.default;
      } else {
        loadPolicy = _extends({}, config.playlistLoadPolicy.default, {
          timeoutRetry: null,
          errorRetry: null
        });
      }
      loader = this.createInternalLoader(context);
      if (isFiniteNumber((_context$deliveryDire = context.deliveryDirectives) == null ? void 0 : _context$deliveryDire.part)) {
        let levelDetails;
        if (context.type === PlaylistContextType.LEVEL && context.level !== null) {
          levelDetails = this.hls.levels[context.level].details;
        } else if (context.type === PlaylistContextType.AUDIO_TRACK && context.id !== null) {
          levelDetails = this.hls.audioTracks[context.id].details;
        } else if (context.type === PlaylistContextType.SUBTITLE_TRACK && context.id !== null) {
          levelDetails = this.hls.subtitleTracks[context.id].details;
        }
        if (levelDetails) {
          const partTarget = levelDetails.partTarget;
          const targetDuration = levelDetails.targetduration;
          if (partTarget && targetDuration) {
            const maxLowLatencyPlaylistRefresh = Math.max(partTarget * 3, targetDuration * 0.8) * 1e3;
            loadPolicy = _extends({}, loadPolicy, {
              maxTimeToFirstByteMs: Math.min(maxLowLatencyPlaylistRefresh, loadPolicy.maxTimeToFirstByteMs),
              maxLoadTimeMs: Math.min(maxLowLatencyPlaylistRefresh, loadPolicy.maxTimeToFirstByteMs)
            });
          }
        }
      }
      const legacyRetryCompatibility = loadPolicy.errorRetry || loadPolicy.timeoutRetry || {};
      const loaderConfig = {
        loadPolicy,
        timeout: loadPolicy.maxLoadTimeMs,
        maxRetry: legacyRetryCompatibility.maxNumRetry || 0,
        retryDelay: legacyRetryCompatibility.retryDelayMs || 0,
        maxRetryDelay: legacyRetryCompatibility.maxRetryDelayMs || 0
      };
      const loaderCallbacks = {
        onSuccess: (response, stats, context2, networkDetails) => {
          const loader2 = this.getInternalLoader(context2);
          this.resetInternalLoader(context2.type);
          const string = response.data;
          if (string.indexOf("#EXTM3U") !== 0) {
            this.handleManifestParsingError(response, context2, new Error("no EXTM3U delimiter"), networkDetails || null, stats);
            return;
          }
          stats.parsing.start = performance.now();
          if (M3U8Parser.isMediaPlaylist(string)) {
            this.handleTrackOrLevelPlaylist(response, stats, context2, networkDetails || null, loader2);
          } else {
            this.handleMasterPlaylist(response, stats, context2, networkDetails);
          }
        },
        onError: (response, context2, networkDetails, stats) => {
          this.handleNetworkError(context2, networkDetails, false, response, stats);
        },
        onTimeout: (stats, context2, networkDetails) => {
          this.handleNetworkError(context2, networkDetails, true, void 0, stats);
        }
      };
      loader.load(context, loaderConfig, loaderCallbacks);
    }
    handleMasterPlaylist(response, stats, context, networkDetails) {
      const hls = this.hls;
      const string = response.data;
      const url = getResponseUrl(response, context);
      const parsedResult = M3U8Parser.parseMasterPlaylist(string, url);
      if (parsedResult.playlistParsingError) {
        this.handleManifestParsingError(response, context, parsedResult.playlistParsingError, networkDetails, stats);
        return;
      }
      const {
        contentSteering,
        levels,
        sessionData,
        sessionKeys,
        startTimeOffset,
        variableList
      } = parsedResult;
      this.variableList = variableList;
      const {
        AUDIO: audioTracks = [],
        SUBTITLES: subtitles,
        "CLOSED-CAPTIONS": captions
      } = M3U8Parser.parseMasterPlaylistMedia(string, url, parsedResult);
      if (audioTracks.length) {
        const embeddedAudioFound = audioTracks.some((audioTrack) => !audioTrack.url);
        if (!embeddedAudioFound && levels[0].audioCodec && !levels[0].attrs.AUDIO) {
          logger.log("[playlist-loader]: audio codec signaled in quality level, but no embedded audio track signaled, create one");
          audioTracks.unshift({
            type: "main",
            name: "main",
            groupId: "main",
            default: false,
            autoselect: false,
            forced: false,
            id: -1,
            attrs: new AttrList({}),
            bitrate: 0,
            url: ""
          });
        }
      }
      hls.trigger(Events2.MANIFEST_LOADED, {
        levels,
        audioTracks,
        subtitles,
        captions,
        contentSteering,
        url,
        stats,
        networkDetails,
        sessionData,
        sessionKeys,
        startTimeOffset,
        variableList
      });
    }
    handleTrackOrLevelPlaylist(response, stats, context, networkDetails, loader) {
      const hls = this.hls;
      const {
        id,
        level,
        type
      } = context;
      const url = getResponseUrl(response, context);
      const levelUrlId = 0;
      const levelId = isFiniteNumber(level) ? level : isFiniteNumber(id) ? id : 0;
      const levelType = mapContextToLevelType(context);
      const levelDetails = M3U8Parser.parseLevelPlaylist(response.data, url, levelId, levelType, levelUrlId, this.variableList);
      if (type === PlaylistContextType.MANIFEST) {
        const singleLevel = {
          attrs: new AttrList({}),
          bitrate: 0,
          details: levelDetails,
          name: "",
          url
        };
        hls.trigger(Events2.MANIFEST_LOADED, {
          levels: [singleLevel],
          audioTracks: [],
          url,
          stats,
          networkDetails,
          sessionData: null,
          sessionKeys: null,
          contentSteering: null,
          startTimeOffset: null,
          variableList: null
        });
      }
      stats.parsing.end = performance.now();
      context.levelDetails = levelDetails;
      this.handlePlaylistLoaded(levelDetails, response, stats, context, networkDetails, loader);
    }
    handleManifestParsingError(response, context, error, networkDetails, stats) {
      this.hls.trigger(Events2.ERROR, {
        type: ErrorTypes.NETWORK_ERROR,
        details: ErrorDetails.MANIFEST_PARSING_ERROR,
        fatal: context.type === PlaylistContextType.MANIFEST,
        url: response.url,
        err: error,
        error,
        reason: error.message,
        response,
        context,
        networkDetails,
        stats
      });
    }
    handleNetworkError(context, networkDetails, timeout = false, response, stats) {
      let message = `A network ${timeout ? "timeout" : "error" + (response ? " (status " + response.code + ")" : "")} occurred while loading ${context.type}`;
      if (context.type === PlaylistContextType.LEVEL) {
        message += `: ${context.level} id: ${context.id}`;
      } else if (context.type === PlaylistContextType.AUDIO_TRACK || context.type === PlaylistContextType.SUBTITLE_TRACK) {
        message += ` id: ${context.id} group-id: "${context.groupId}"`;
      }
      const error = new Error(message);
      logger.warn(`[playlist-loader]: ${message}`);
      let details = ErrorDetails.UNKNOWN;
      let fatal = false;
      const loader = this.getInternalLoader(context);
      switch (context.type) {
        case PlaylistContextType.MANIFEST:
          details = timeout ? ErrorDetails.MANIFEST_LOAD_TIMEOUT : ErrorDetails.MANIFEST_LOAD_ERROR;
          fatal = true;
          break;
        case PlaylistContextType.LEVEL:
          details = timeout ? ErrorDetails.LEVEL_LOAD_TIMEOUT : ErrorDetails.LEVEL_LOAD_ERROR;
          fatal = false;
          break;
        case PlaylistContextType.AUDIO_TRACK:
          details = timeout ? ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT : ErrorDetails.AUDIO_TRACK_LOAD_ERROR;
          fatal = false;
          break;
        case PlaylistContextType.SUBTITLE_TRACK:
          details = timeout ? ErrorDetails.SUBTITLE_TRACK_LOAD_TIMEOUT : ErrorDetails.SUBTITLE_LOAD_ERROR;
          fatal = false;
          break;
      }
      if (loader) {
        this.resetInternalLoader(context.type);
      }
      const errorData = {
        type: ErrorTypes.NETWORK_ERROR,
        details,
        fatal,
        url: context.url,
        loader,
        context,
        error,
        networkDetails,
        stats
      };
      if (response) {
        const url = (networkDetails == null ? void 0 : networkDetails.url) || context.url;
        errorData.response = _objectSpread2({
          url,
          data: void 0
        }, response);
      }
      this.hls.trigger(Events2.ERROR, errorData);
    }
    handlePlaylistLoaded(levelDetails, response, stats, context, networkDetails, loader) {
      const hls = this.hls;
      const {
        type,
        level,
        id,
        groupId,
        deliveryDirectives
      } = context;
      const url = getResponseUrl(response, context);
      const parent = mapContextToLevelType(context);
      const levelIndex = typeof context.level === "number" && parent === PlaylistLevelType.MAIN ? level : void 0;
      if (!levelDetails.fragments.length) {
        const _error = new Error("No Segments found in Playlist");
        hls.trigger(Events2.ERROR, {
          type: ErrorTypes.NETWORK_ERROR,
          details: ErrorDetails.LEVEL_EMPTY_ERROR,
          fatal: false,
          url,
          error: _error,
          reason: _error.message,
          response,
          context,
          level: levelIndex,
          parent,
          networkDetails,
          stats
        });
        return;
      }
      if (!levelDetails.targetduration) {
        levelDetails.playlistParsingError = new Error("Missing Target Duration");
      }
      const error = levelDetails.playlistParsingError;
      if (error) {
        hls.trigger(Events2.ERROR, {
          type: ErrorTypes.NETWORK_ERROR,
          details: ErrorDetails.LEVEL_PARSING_ERROR,
          fatal: false,
          url,
          error,
          reason: error.message,
          response,
          context,
          level: levelIndex,
          parent,
          networkDetails,
          stats
        });
        return;
      }
      if (levelDetails.live && loader) {
        if (loader.getCacheAge) {
          levelDetails.ageHeader = loader.getCacheAge() || 0;
        }
        if (!loader.getCacheAge || isNaN(levelDetails.ageHeader)) {
          levelDetails.ageHeader = 0;
        }
      }
      switch (type) {
        case PlaylistContextType.MANIFEST:
        case PlaylistContextType.LEVEL:
          hls.trigger(Events2.LEVEL_LOADED, {
            details: levelDetails,
            level: levelIndex || 0,
            id: id || 0,
            stats,
            networkDetails,
            deliveryDirectives
          });
          break;
        case PlaylistContextType.AUDIO_TRACK:
          hls.trigger(Events2.AUDIO_TRACK_LOADED, {
            details: levelDetails,
            id: id || 0,
            groupId: groupId || "",
            stats,
            networkDetails,
            deliveryDirectives
          });
          break;
        case PlaylistContextType.SUBTITLE_TRACK:
          hls.trigger(Events2.SUBTITLE_TRACK_LOADED, {
            details: levelDetails,
            id: id || 0,
            groupId: groupId || "",
            stats,
            networkDetails,
            deliveryDirectives
          });
          break;
      }
    }
  };
  function sendAddTrackEvent(track, videoEl) {
    let event;
    try {
      event = new Event("addtrack");
    } catch (err) {
      event = document.createEvent("Event");
      event.initEvent("addtrack", false, false);
    }
    event.track = track;
    videoEl.dispatchEvent(event);
  }
  function addCueToTrack(track, cue) {
    const mode = track.mode;
    if (mode === "disabled") {
      track.mode = "hidden";
    }
    if (track.cues && !track.cues.getCueById(cue.id)) {
      try {
        track.addCue(cue);
        if (!track.cues.getCueById(cue.id)) {
          throw new Error(`addCue is failed for: ${cue}`);
        }
      } catch (err) {
        logger.debug(`[texttrack-utils]: ${err}`);
        try {
          const textTrackCue = new self.TextTrackCue(cue.startTime, cue.endTime, cue.text);
          textTrackCue.id = cue.id;
          track.addCue(textTrackCue);
        } catch (err2) {
          logger.debug(`[texttrack-utils]: Legacy TextTrackCue fallback failed: ${err2}`);
        }
      }
    }
    if (mode === "disabled") {
      track.mode = mode;
    }
  }
  function clearCurrentCues(track) {
    const mode = track.mode;
    if (mode === "disabled") {
      track.mode = "hidden";
    }
    if (track.cues) {
      for (let i = track.cues.length; i--; ) {
        track.removeCue(track.cues[i]);
      }
    }
    if (mode === "disabled") {
      track.mode = mode;
    }
  }
  function removeCuesInRange(track, start, end, predicate) {
    const mode = track.mode;
    if (mode === "disabled") {
      track.mode = "hidden";
    }
    if (track.cues && track.cues.length > 0) {
      const cues = getCuesInRange(track.cues, start, end);
      for (let i = 0; i < cues.length; i++) {
        if (!predicate || predicate(cues[i])) {
          track.removeCue(cues[i]);
        }
      }
    }
    if (mode === "disabled") {
      track.mode = mode;
    }
  }
  function getFirstCueIndexAfterTime(cues, time) {
    if (time < cues[0].startTime) {
      return 0;
    }
    const len = cues.length - 1;
    if (time > cues[len].endTime) {
      return -1;
    }
    let left = 0;
    let right = len;
    while (left <= right) {
      const mid = Math.floor((right + left) / 2);
      if (time < cues[mid].startTime) {
        right = mid - 1;
      } else if (time > cues[mid].startTime && left < len) {
        left = mid + 1;
      } else {
        return mid;
      }
    }
    return cues[left].startTime - time < time - cues[right].startTime ? left : right;
  }
  function getCuesInRange(cues, start, end) {
    const cuesFound = [];
    const firstCueInRange = getFirstCueIndexAfterTime(cues, start);
    if (firstCueInRange > -1) {
      for (let i = firstCueInRange, len = cues.length; i < len; i++) {
        const cue = cues[i];
        if (cue.startTime >= start && cue.endTime <= end) {
          cuesFound.push(cue);
        } else if (cue.startTime > end) {
          return cuesFound;
        }
      }
    }
    return cuesFound;
  }
  function filterSubtitleTracks(textTrackList) {
    const tracks = [];
    for (let i = 0; i < textTrackList.length; i++) {
      const track = textTrackList[i];
      if ((track.kind === "subtitles" || track.kind === "captions") && track.label) {
        tracks.push(textTrackList[i]);
      }
    }
    return tracks;
  }
  var MetadataSchema = {
    audioId3: "org.id3",
    dateRange: "com.apple.quicktime.HLS",
    emsg: "https://aomedia.org/emsg/ID3"
  };
  var MIN_CUE_DURATION = 0.25;
  function getCueClass() {
    if (typeof self === "undefined") return void 0;
    return self.VTTCue || self.TextTrackCue;
  }
  function createCueWithDataFields(Cue, startTime, endTime, data, type) {
    let cue = new Cue(startTime, endTime, "");
    try {
      cue.value = data;
      if (type) {
        cue.type = type;
      }
    } catch (e) {
      cue = new Cue(startTime, endTime, JSON.stringify(type ? _objectSpread2({
        type
      }, data) : data));
    }
    return cue;
  }
  var MAX_CUE_ENDTIME = (() => {
    const Cue = getCueClass();
    try {
      Cue && new Cue(0, Number.POSITIVE_INFINITY, "");
    } catch (e) {
      return Number.MAX_VALUE;
    }
    return Number.POSITIVE_INFINITY;
  })();
  function dateRangeDateToTimelineSeconds(date, offset) {
    return date.getTime() / 1e3 - offset;
  }
  function hexToArrayBuffer(str) {
    return Uint8Array.from(str.replace(/^0x/, "").replace(/([\da-fA-F]{2}) ?/g, "0x$1 ").replace(/ +$/, "").split(" ")).buffer;
  }
  var ID3TrackController = class {
    constructor(hls) {
      this.hls = void 0;
      this.id3Track = null;
      this.media = null;
      this.dateRangeCuesAppended = {};
      this.hls = hls;
      this._registerListeners();
    }
    destroy() {
      this._unregisterListeners();
      this.id3Track = null;
      this.media = null;
      this.dateRangeCuesAppended = {};
      this.hls = null;
    }
    _registerListeners() {
      const {
        hls
      } = this;
      hls.on(Events2.MEDIA_ATTACHED, this.onMediaAttached, this);
      hls.on(Events2.MEDIA_DETACHING, this.onMediaDetaching, this);
      hls.on(Events2.MANIFEST_LOADING, this.onManifestLoading, this);
      hls.on(Events2.FRAG_PARSING_METADATA, this.onFragParsingMetadata, this);
      hls.on(Events2.BUFFER_FLUSHING, this.onBufferFlushing, this);
      hls.on(Events2.LEVEL_UPDATED, this.onLevelUpdated, this);
    }
    _unregisterListeners() {
      const {
        hls
      } = this;
      hls.off(Events2.MEDIA_ATTACHED, this.onMediaAttached, this);
      hls.off(Events2.MEDIA_DETACHING, this.onMediaDetaching, this);
      hls.off(Events2.MANIFEST_LOADING, this.onManifestLoading, this);
      hls.off(Events2.FRAG_PARSING_METADATA, this.onFragParsingMetadata, this);
      hls.off(Events2.BUFFER_FLUSHING, this.onBufferFlushing, this);
      hls.off(Events2.LEVEL_UPDATED, this.onLevelUpdated, this);
    }
    // Add ID3 metatadata text track.
    onMediaAttached(event, data) {
      this.media = data.media;
    }
    onMediaDetaching() {
      if (!this.id3Track) {
        return;
      }
      clearCurrentCues(this.id3Track);
      this.id3Track = null;
      this.media = null;
      this.dateRangeCuesAppended = {};
    }
    onManifestLoading() {
      this.dateRangeCuesAppended = {};
    }
    createTrack(media) {
      const track = this.getID3Track(media.textTracks);
      track.mode = "hidden";
      return track;
    }
    getID3Track(textTracks) {
      if (!this.media) {
        return;
      }
      for (let i = 0; i < textTracks.length; i++) {
        const textTrack = textTracks[i];
        if (textTrack.kind === "metadata" && textTrack.label === "id3") {
          sendAddTrackEvent(textTrack, this.media);
          return textTrack;
        }
      }
      return this.media.addTextTrack("metadata", "id3");
    }
    onFragParsingMetadata(event, data) {
      if (!this.media) {
        return;
      }
      const {
        hls: {
          config: {
            enableEmsgMetadataCues,
            enableID3MetadataCues
          }
        }
      } = this;
      if (!enableEmsgMetadataCues && !enableID3MetadataCues) {
        return;
      }
      const {
        samples
      } = data;
      if (!this.id3Track) {
        this.id3Track = this.createTrack(this.media);
      }
      const Cue = getCueClass();
      if (!Cue) {
        return;
      }
      for (let i = 0; i < samples.length; i++) {
        const type = samples[i].type;
        if (type === MetadataSchema.emsg && !enableEmsgMetadataCues || !enableID3MetadataCues) {
          continue;
        }
        const frames = getID3Frames(samples[i].data);
        if (frames) {
          const startTime = samples[i].pts;
          let endTime = startTime + samples[i].duration;
          if (endTime > MAX_CUE_ENDTIME) {
            endTime = MAX_CUE_ENDTIME;
          }
          const timeDiff = endTime - startTime;
          if (timeDiff <= 0) {
            endTime = startTime + MIN_CUE_DURATION;
          }
          for (let j = 0; j < frames.length; j++) {
            const frame = frames[j];
            if (!isTimeStampFrame(frame)) {
              this.updateId3CueEnds(startTime, type);
              const cue = createCueWithDataFields(Cue, startTime, endTime, frame, type);
              if (cue) {
                this.id3Track.addCue(cue);
              }
            }
          }
        }
      }
    }
    updateId3CueEnds(startTime, type) {
      var _this$id3Track;
      const cues = (_this$id3Track = this.id3Track) == null ? void 0 : _this$id3Track.cues;
      if (cues) {
        for (let i = cues.length; i--; ) {
          const cue = cues[i];
          if (cue.type === type && cue.startTime < startTime && cue.endTime === MAX_CUE_ENDTIME) {
            cue.endTime = startTime;
          }
        }
      }
    }
    onBufferFlushing(event, {
      startOffset,
      endOffset,
      type
    }) {
      const {
        id3Track,
        hls
      } = this;
      if (!hls) {
        return;
      }
      const {
        config: {
          enableEmsgMetadataCues,
          enableID3MetadataCues
        }
      } = hls;
      if (id3Track && (enableEmsgMetadataCues || enableID3MetadataCues)) {
        let predicate;
        if (type === "audio") {
          predicate = (cue) => cue.type === MetadataSchema.audioId3 && enableID3MetadataCues;
        } else if (type === "video") {
          predicate = (cue) => cue.type === MetadataSchema.emsg && enableEmsgMetadataCues;
        } else {
          predicate = (cue) => cue.type === MetadataSchema.audioId3 && enableID3MetadataCues || cue.type === MetadataSchema.emsg && enableEmsgMetadataCues;
        }
        removeCuesInRange(id3Track, startOffset, endOffset, predicate);
      }
    }
    onLevelUpdated(event, {
      details
    }) {
      if (!this.media || !details.hasProgramDateTime || !this.hls.config.enableDateRangeMetadataCues) {
        return;
      }
      const {
        dateRangeCuesAppended,
        id3Track
      } = this;
      const {
        dateRanges
      } = details;
      const ids = Object.keys(dateRanges);
      if (id3Track) {
        const idsToRemove = Object.keys(dateRangeCuesAppended).filter((id) => !ids.includes(id));
        for (let i = idsToRemove.length; i--; ) {
          const id = idsToRemove[i];
          Object.keys(dateRangeCuesAppended[id].cues).forEach((key) => {
            id3Track.removeCue(dateRangeCuesAppended[id].cues[key]);
          });
          delete dateRangeCuesAppended[id];
        }
      }
      const lastFragment = details.fragments[details.fragments.length - 1];
      if (ids.length === 0 || !isFiniteNumber(lastFragment == null ? void 0 : lastFragment.programDateTime)) {
        return;
      }
      if (!this.id3Track) {
        this.id3Track = this.createTrack(this.media);
      }
      const dateTimeOffset = lastFragment.programDateTime / 1e3 - lastFragment.start;
      const Cue = getCueClass();
      for (let i = 0; i < ids.length; i++) {
        const id = ids[i];
        const dateRange = dateRanges[id];
        const startTime = dateRangeDateToTimelineSeconds(dateRange.startDate, dateTimeOffset);
        const appendedDateRangeCues = dateRangeCuesAppended[id];
        const cues = (appendedDateRangeCues == null ? void 0 : appendedDateRangeCues.cues) || {};
        let durationKnown = (appendedDateRangeCues == null ? void 0 : appendedDateRangeCues.durationKnown) || false;
        let endTime = MAX_CUE_ENDTIME;
        const endDate = dateRange.endDate;
        if (endDate) {
          endTime = dateRangeDateToTimelineSeconds(endDate, dateTimeOffset);
          durationKnown = true;
        } else if (dateRange.endOnNext && !durationKnown) {
          const nextDateRangeWithSameClass = ids.reduce((candidateDateRange, id2) => {
            if (id2 !== dateRange.id) {
              const otherDateRange = dateRanges[id2];
              if (otherDateRange.class === dateRange.class && otherDateRange.startDate > dateRange.startDate && (!candidateDateRange || dateRange.startDate < candidateDateRange.startDate)) {
                return otherDateRange;
              }
            }
            return candidateDateRange;
          }, null);
          if (nextDateRangeWithSameClass) {
            endTime = dateRangeDateToTimelineSeconds(nextDateRangeWithSameClass.startDate, dateTimeOffset);
            durationKnown = true;
          }
        }
        const attributes = Object.keys(dateRange.attr);
        for (let j = 0; j < attributes.length; j++) {
          const key = attributes[j];
          if (!isDateRangeCueAttribute(key)) {
            continue;
          }
          const cue = cues[key];
          if (cue) {
            if (durationKnown && !appendedDateRangeCues.durationKnown) {
              cue.endTime = endTime;
            }
          } else if (Cue) {
            let data = dateRange.attr[key];
            if (isSCTE35Attribute(key)) {
              data = hexToArrayBuffer(data);
            }
            const _cue = createCueWithDataFields(Cue, startTime, endTime, {
              key,
              data
            }, MetadataSchema.dateRange);
            if (_cue) {
              _cue.id = id;
              this.id3Track.addCue(_cue);
              cues[key] = _cue;
            }
          }
        }
        dateRangeCuesAppended[id] = {
          cues,
          dateRange,
          durationKnown
        };
      }
    }
  };
  var LatencyController = class {
    constructor(hls) {
      this.hls = void 0;
      this.config = void 0;
      this.media = null;
      this.levelDetails = null;
      this.currentTime = 0;
      this.stallCount = 0;
      this._latency = null;
      this.timeupdateHandler = () => this.timeupdate();
      this.hls = hls;
      this.config = hls.config;
      this.registerListeners();
    }
    get latency() {
      return this._latency || 0;
    }
    get maxLatency() {
      const {
        config,
        levelDetails
      } = this;
      if (config.liveMaxLatencyDuration !== void 0) {
        return config.liveMaxLatencyDuration;
      }
      return levelDetails ? config.liveMaxLatencyDurationCount * levelDetails.targetduration : 0;
    }
    get targetLatency() {
      const {
        levelDetails
      } = this;
      if (levelDetails === null) {
        return null;
      }
      const {
        holdBack,
        partHoldBack,
        targetduration
      } = levelDetails;
      const {
        liveSyncDuration,
        liveSyncDurationCount,
        lowLatencyMode
      } = this.config;
      const userConfig = this.hls.userConfig;
      let targetLatency = lowLatencyMode ? partHoldBack || holdBack : holdBack;
      if (userConfig.liveSyncDuration || userConfig.liveSyncDurationCount || targetLatency === 0) {
        targetLatency = liveSyncDuration !== void 0 ? liveSyncDuration : liveSyncDurationCount * targetduration;
      }
      const maxLiveSyncOnStallIncrease = targetduration;
      const liveSyncOnStallIncrease = 1;
      return targetLatency + Math.min(this.stallCount * liveSyncOnStallIncrease, maxLiveSyncOnStallIncrease);
    }
    get liveSyncPosition() {
      const liveEdge = this.estimateLiveEdge();
      const targetLatency = this.targetLatency;
      const levelDetails = this.levelDetails;
      if (liveEdge === null || targetLatency === null || levelDetails === null) {
        return null;
      }
      const edge = levelDetails.edge;
      const syncPosition = liveEdge - targetLatency - this.edgeStalled;
      const min = edge - levelDetails.totalduration;
      const max = edge - (this.config.lowLatencyMode && levelDetails.partTarget || levelDetails.targetduration);
      return Math.min(Math.max(min, syncPosition), max);
    }
    get drift() {
      const {
        levelDetails
      } = this;
      if (levelDetails === null) {
        return 1;
      }
      return levelDetails.drift;
    }
    get edgeStalled() {
      const {
        levelDetails
      } = this;
      if (levelDetails === null) {
        return 0;
      }
      const maxLevelUpdateAge = (this.config.lowLatencyMode && levelDetails.partTarget || levelDetails.targetduration) * 3;
      return Math.max(levelDetails.age - maxLevelUpdateAge, 0);
    }
    get forwardBufferLength() {
      const {
        media,
        levelDetails
      } = this;
      if (!media || !levelDetails) {
        return 0;
      }
      const bufferedRanges = media.buffered.length;
      return (bufferedRanges ? media.buffered.end(bufferedRanges - 1) : levelDetails.edge) - this.currentTime;
    }
    destroy() {
      this.unregisterListeners();
      this.onMediaDetaching();
      this.levelDetails = null;
      this.hls = this.timeupdateHandler = null;
    }
    registerListeners() {
      this.hls.on(Events2.MEDIA_ATTACHED, this.onMediaAttached, this);
      this.hls.on(Events2.MEDIA_DETACHING, this.onMediaDetaching, this);
      this.hls.on(Events2.MANIFEST_LOADING, this.onManifestLoading, this);
      this.hls.on(Events2.LEVEL_UPDATED, this.onLevelUpdated, this);
      this.hls.on(Events2.ERROR, this.onError, this);
    }
    unregisterListeners() {
      this.hls.off(Events2.MEDIA_ATTACHED, this.onMediaAttached, this);
      this.hls.off(Events2.MEDIA_DETACHING, this.onMediaDetaching, this);
      this.hls.off(Events2.MANIFEST_LOADING, this.onManifestLoading, this);
      this.hls.off(Events2.LEVEL_UPDATED, this.onLevelUpdated, this);
      this.hls.off(Events2.ERROR, this.onError, this);
    }
    onMediaAttached(event, data) {
      this.media = data.media;
      this.media.addEventListener("timeupdate", this.timeupdateHandler);
    }
    onMediaDetaching() {
      if (this.media) {
        this.media.removeEventListener("timeupdate", this.timeupdateHandler);
        this.media = null;
      }
    }
    onManifestLoading() {
      this.levelDetails = null;
      this._latency = null;
      this.stallCount = 0;
    }
    onLevelUpdated(event, {
      details
    }) {
      this.levelDetails = details;
      if (details.advanced) {
        this.timeupdate();
      }
      if (!details.live && this.media) {
        this.media.removeEventListener("timeupdate", this.timeupdateHandler);
      }
    }
    onError(event, data) {
      var _this$levelDetails;
      if (data.details !== ErrorDetails.BUFFER_STALLED_ERROR) {
        return;
      }
      this.stallCount++;
      if ((_this$levelDetails = this.levelDetails) != null && _this$levelDetails.live) {
        logger.warn("[playback-rate-controller]: Stall detected, adjusting target latency");
      }
    }
    timeupdate() {
      const {
        media,
        levelDetails
      } = this;
      if (!media || !levelDetails) {
        return;
      }
      this.currentTime = media.currentTime;
      const latency = this.computeLatency();
      if (latency === null) {
        return;
      }
      this._latency = latency;
      const {
        lowLatencyMode,
        maxLiveSyncPlaybackRate
      } = this.config;
      if (!lowLatencyMode || maxLiveSyncPlaybackRate === 1 || !levelDetails.live) {
        return;
      }
      const targetLatency = this.targetLatency;
      if (targetLatency === null) {
        return;
      }
      const distanceFromTarget = latency - targetLatency;
      const liveMinLatencyDuration = Math.min(this.maxLatency, targetLatency + levelDetails.targetduration);
      const inLiveRange = distanceFromTarget < liveMinLatencyDuration;
      if (inLiveRange && distanceFromTarget > 0.05 && this.forwardBufferLength > 1) {
        const max = Math.min(2, Math.max(1, maxLiveSyncPlaybackRate));
        const rate = Math.round(2 / (1 + Math.exp(-0.75 * distanceFromTarget - this.edgeStalled)) * 20) / 20;
        media.playbackRate = Math.min(max, Math.max(1, rate));
      } else if (media.playbackRate !== 1 && media.playbackRate !== 0) {
        media.playbackRate = 1;
      }
    }
    estimateLiveEdge() {
      const {
        levelDetails
      } = this;
      if (levelDetails === null) {
        return null;
      }
      return levelDetails.edge + levelDetails.age;
    }
    computeLatency() {
      const liveEdge = this.estimateLiveEdge();
      if (liveEdge === null) {
        return null;
      }
      return liveEdge - this.currentTime;
    }
  };
  var HdcpLevels = ["NONE", "TYPE-0", "TYPE-1", null];
  function isHdcpLevel(value) {
    return HdcpLevels.indexOf(value) > -1;
  }
  var VideoRangeValues = ["SDR", "PQ", "HLG"];
  function isVideoRange(value) {
    return !!value && VideoRangeValues.indexOf(value) > -1;
  }
  var HlsSkip = {
    No: "",
    Yes: "YES",
    v2: "v2"
  };
  function getSkipValue(details) {
    const {
      canSkipUntil,
      canSkipDateRanges,
      age
    } = details;
    const playlistRecentEnough = age < canSkipUntil / 2;
    if (canSkipUntil && playlistRecentEnough) {
      if (canSkipDateRanges) {
        return HlsSkip.v2;
      }
      return HlsSkip.Yes;
    }
    return HlsSkip.No;
  }
  var HlsUrlParameters = class {
    constructor(msn, part, skip) {
      this.msn = void 0;
      this.part = void 0;
      this.skip = void 0;
      this.msn = msn;
      this.part = part;
      this.skip = skip;
    }
    addDirectives(uri) {
      const url = new self.URL(uri);
      if (this.msn !== void 0) {
        url.searchParams.set("_HLS_msn", this.msn.toString());
      }
      if (this.part !== void 0) {
        url.searchParams.set("_HLS_part", this.part.toString());
      }
      if (this.skip) {
        url.searchParams.set("_HLS_skip", this.skip);
      }
      return url.href;
    }
  };
  var Level = class {
    constructor(data) {
      this._attrs = void 0;
      this.audioCodec = void 0;
      this.bitrate = void 0;
      this.codecSet = void 0;
      this.url = void 0;
      this.frameRate = void 0;
      this.height = void 0;
      this.id = void 0;
      this.name = void 0;
      this.videoCodec = void 0;
      this.width = void 0;
      this.details = void 0;
      this.fragmentError = 0;
      this.loadError = 0;
      this.loaded = void 0;
      this.realBitrate = 0;
      this.supportedPromise = void 0;
      this.supportedResult = void 0;
      this._avgBitrate = 0;
      this._audioGroups = void 0;
      this._subtitleGroups = void 0;
      this._urlId = 0;
      this.url = [data.url];
      this._attrs = [data.attrs];
      this.bitrate = data.bitrate;
      if (data.details) {
        this.details = data.details;
      }
      this.id = data.id || 0;
      this.name = data.name;
      this.width = data.width || 0;
      this.height = data.height || 0;
      this.frameRate = data.attrs.optionalFloat("FRAME-RATE", 0);
      this._avgBitrate = data.attrs.decimalInteger("AVERAGE-BANDWIDTH");
      this.audioCodec = data.audioCodec;
      this.videoCodec = data.videoCodec;
      this.codecSet = [data.videoCodec, data.audioCodec].filter((c) => !!c).map((s) => s.substring(0, 4)).join(",");
      this.addGroupId("audio", data.attrs.AUDIO);
      this.addGroupId("text", data.attrs.SUBTITLES);
    }
    get maxBitrate() {
      return Math.max(this.realBitrate, this.bitrate);
    }
    get averageBitrate() {
      return this._avgBitrate || this.realBitrate || this.bitrate;
    }
    get attrs() {
      return this._attrs[0];
    }
    get codecs() {
      return this.attrs.CODECS || "";
    }
    get pathwayId() {
      return this.attrs["PATHWAY-ID"] || ".";
    }
    get videoRange() {
      return this.attrs["VIDEO-RANGE"] || "SDR";
    }
    get score() {
      return this.attrs.optionalFloat("SCORE", 0);
    }
    get uri() {
      return this.url[0] || "";
    }
    hasAudioGroup(groupId) {
      return hasGroup(this._audioGroups, groupId);
    }
    hasSubtitleGroup(groupId) {
      return hasGroup(this._subtitleGroups, groupId);
    }
    get audioGroups() {
      return this._audioGroups;
    }
    get subtitleGroups() {
      return this._subtitleGroups;
    }
    addGroupId(type, groupId) {
      if (!groupId) {
        return;
      }
      if (type === "audio") {
        let audioGroups = this._audioGroups;
        if (!audioGroups) {
          audioGroups = this._audioGroups = [];
        }
        if (audioGroups.indexOf(groupId) === -1) {
          audioGroups.push(groupId);
        }
      } else if (type === "text") {
        let subtitleGroups = this._subtitleGroups;
        if (!subtitleGroups) {
          subtitleGroups = this._subtitleGroups = [];
        }
        if (subtitleGroups.indexOf(groupId) === -1) {
          subtitleGroups.push(groupId);
        }
      }
    }
    // Deprecated methods (retained for backwards compatibility)
    get urlId() {
      return 0;
    }
    set urlId(value) {
    }
    get audioGroupIds() {
      return this.audioGroups ? [this.audioGroupId] : void 0;
    }
    get textGroupIds() {
      return this.subtitleGroups ? [this.textGroupId] : void 0;
    }
    get audioGroupId() {
      var _this$audioGroups;
      return (_this$audioGroups = this.audioGroups) == null ? void 0 : _this$audioGroups[0];
    }
    get textGroupId() {
      var _this$subtitleGroups;
      return (_this$subtitleGroups = this.subtitleGroups) == null ? void 0 : _this$subtitleGroups[0];
    }
    addFallback() {
    }
  };
  function hasGroup(groups, groupId) {
    if (!groupId || !groups) {
      return false;
    }
    return groups.indexOf(groupId) !== -1;
  }
  function updateFromToPTS(fragFrom, fragTo) {
    const fragToPTS = fragTo.startPTS;
    if (isFiniteNumber(fragToPTS)) {
      let duration = 0;
      let frag;
      if (fragTo.sn > fragFrom.sn) {
        duration = fragToPTS - fragFrom.start;
        frag = fragFrom;
      } else {
        duration = fragFrom.start - fragToPTS;
        frag = fragTo;
      }
      if (frag.duration !== duration) {
        frag.duration = duration;
      }
    } else if (fragTo.sn > fragFrom.sn) {
      const contiguous = fragFrom.cc === fragTo.cc;
      if (contiguous && fragFrom.minEndPTS) {
        fragTo.start = fragFrom.start + (fragFrom.minEndPTS - fragFrom.start);
      } else {
        fragTo.start = fragFrom.start + fragFrom.duration;
      }
    } else {
      fragTo.start = Math.max(fragFrom.start - fragTo.duration, 0);
    }
  }
  function updateFragPTSDTS(details, frag, startPTS, endPTS, startDTS, endDTS) {
    const parsedMediaDuration = endPTS - startPTS;
    if (parsedMediaDuration <= 0) {
      logger.warn("Fragment should have a positive duration", frag);
      endPTS = startPTS + frag.duration;
      endDTS = startDTS + frag.duration;
    }
    let maxStartPTS = startPTS;
    let minEndPTS = endPTS;
    const fragStartPts = frag.startPTS;
    const fragEndPts = frag.endPTS;
    if (isFiniteNumber(fragStartPts)) {
      const deltaPTS = Math.abs(fragStartPts - startPTS);
      if (!isFiniteNumber(frag.deltaPTS)) {
        frag.deltaPTS = deltaPTS;
      } else {
        frag.deltaPTS = Math.max(deltaPTS, frag.deltaPTS);
      }
      maxStartPTS = Math.max(startPTS, fragStartPts);
      startPTS = Math.min(startPTS, fragStartPts);
      startDTS = Math.min(startDTS, frag.startDTS);
      minEndPTS = Math.min(endPTS, fragEndPts);
      endPTS = Math.max(endPTS, fragEndPts);
      endDTS = Math.max(endDTS, frag.endDTS);
    }
    const drift = startPTS - frag.start;
    if (frag.start !== 0) {
      frag.start = startPTS;
    }
    frag.duration = endPTS - frag.start;
    frag.startPTS = startPTS;
    frag.maxStartPTS = maxStartPTS;
    frag.startDTS = startDTS;
    frag.endPTS = endPTS;
    frag.minEndPTS = minEndPTS;
    frag.endDTS = endDTS;
    const sn = frag.sn;
    if (!details || sn < details.startSN || sn > details.endSN) {
      return 0;
    }
    let i;
    const fragIdx = sn - details.startSN;
    const fragments = details.fragments;
    fragments[fragIdx] = frag;
    for (i = fragIdx; i > 0; i--) {
      updateFromToPTS(fragments[i], fragments[i - 1]);
    }
    for (i = fragIdx; i < fragments.length - 1; i++) {
      updateFromToPTS(fragments[i], fragments[i + 1]);
    }
    if (details.fragmentHint) {
      updateFromToPTS(fragments[fragments.length - 1], details.fragmentHint);
    }
    details.PTSKnown = details.alignedSliding = true;
    return drift;
  }
  function mergeDetails(oldDetails, newDetails) {
    let currentInitSegment = null;
    const oldFragments = oldDetails.fragments;
    for (let i = oldFragments.length - 1; i >= 0; i--) {
      const oldInit = oldFragments[i].initSegment;
      if (oldInit) {
        currentInitSegment = oldInit;
        break;
      }
    }
    if (oldDetails.fragmentHint) {
      delete oldDetails.fragmentHint.endPTS;
    }
    let ccOffset = 0;
    let PTSFrag;
    mapFragmentIntersection(oldDetails, newDetails, (oldFrag, newFrag) => {
      if (oldFrag.relurl) {
        ccOffset = oldFrag.cc - newFrag.cc;
      }
      if (isFiniteNumber(oldFrag.startPTS) && isFiniteNumber(oldFrag.endPTS)) {
        newFrag.start = newFrag.startPTS = oldFrag.startPTS;
        newFrag.startDTS = oldFrag.startDTS;
        newFrag.maxStartPTS = oldFrag.maxStartPTS;
        newFrag.endPTS = oldFrag.endPTS;
        newFrag.endDTS = oldFrag.endDTS;
        newFrag.minEndPTS = oldFrag.minEndPTS;
        newFrag.duration = oldFrag.endPTS - oldFrag.startPTS;
        if (newFrag.duration) {
          PTSFrag = newFrag;
        }
        newDetails.PTSKnown = newDetails.alignedSliding = true;
      }
      newFrag.elementaryStreams = oldFrag.elementaryStreams;
      newFrag.loader = oldFrag.loader;
      newFrag.stats = oldFrag.stats;
      if (oldFrag.initSegment) {
        newFrag.initSegment = oldFrag.initSegment;
        currentInitSegment = oldFrag.initSegment;
      }
    });
    if (currentInitSegment) {
      const fragmentsToCheck = newDetails.fragmentHint ? newDetails.fragments.concat(newDetails.fragmentHint) : newDetails.fragments;
      fragmentsToCheck.forEach((frag) => {
        var _currentInitSegment;
        if (frag && (!frag.initSegment || frag.initSegment.relurl === ((_currentInitSegment = currentInitSegment) == null ? void 0 : _currentInitSegment.relurl))) {
          frag.initSegment = currentInitSegment;
        }
      });
    }
    if (newDetails.skippedSegments) {
      newDetails.deltaUpdateFailed = newDetails.fragments.some((frag) => !frag);
      if (newDetails.deltaUpdateFailed) {
        logger.warn("[level-helper] Previous playlist missing segments skipped in delta playlist");
        for (let i = newDetails.skippedSegments; i--; ) {
          newDetails.fragments.shift();
        }
        newDetails.startSN = newDetails.fragments[0].sn;
        newDetails.startCC = newDetails.fragments[0].cc;
      } else if (newDetails.canSkipDateRanges) {
        newDetails.dateRanges = mergeDateRanges(oldDetails.dateRanges, newDetails.dateRanges, newDetails.recentlyRemovedDateranges);
      }
    }
    const newFragments = newDetails.fragments;
    if (ccOffset) {
      logger.warn("discontinuity sliding from playlist, take drift into account");
      for (let i = 0; i < newFragments.length; i++) {
        newFragments[i].cc += ccOffset;
      }
    }
    if (newDetails.skippedSegments) {
      newDetails.startCC = newDetails.fragments[0].cc;
    }
    mapPartIntersection(oldDetails.partList, newDetails.partList, (oldPart, newPart) => {
      newPart.elementaryStreams = oldPart.elementaryStreams;
      newPart.stats = oldPart.stats;
    });
    if (PTSFrag) {
      updateFragPTSDTS(newDetails, PTSFrag, PTSFrag.startPTS, PTSFrag.endPTS, PTSFrag.startDTS, PTSFrag.endDTS);
    } else {
      adjustSliding(oldDetails, newDetails);
    }
    if (newFragments.length) {
      newDetails.totalduration = newDetails.edge - newFragments[0].start;
    }
    newDetails.driftStartTime = oldDetails.driftStartTime;
    newDetails.driftStart = oldDetails.driftStart;
    const advancedDateTime = newDetails.advancedDateTime;
    if (newDetails.advanced && advancedDateTime) {
      const edge = newDetails.edge;
      if (!newDetails.driftStart) {
        newDetails.driftStartTime = advancedDateTime;
        newDetails.driftStart = edge;
      }
      newDetails.driftEndTime = advancedDateTime;
      newDetails.driftEnd = edge;
    } else {
      newDetails.driftEndTime = oldDetails.driftEndTime;
      newDetails.driftEnd = oldDetails.driftEnd;
      newDetails.advancedDateTime = oldDetails.advancedDateTime;
    }
  }
  function mergeDateRanges(oldDateRanges, deltaDateRanges, recentlyRemovedDateranges) {
    const dateRanges = _extends({}, oldDateRanges);
    if (recentlyRemovedDateranges) {
      recentlyRemovedDateranges.forEach((id) => {
        delete dateRanges[id];
      });
    }
    Object.keys(deltaDateRanges).forEach((id) => {
      const dateRange = new DateRange(deltaDateRanges[id].attr, dateRanges[id]);
      if (dateRange.isValid) {
        dateRanges[id] = dateRange;
      } else {
        logger.warn(`Ignoring invalid Playlist Delta Update DATERANGE tag: "${JSON.stringify(deltaDateRanges[id].attr)}"`);
      }
    });
    return dateRanges;
  }
  function mapPartIntersection(oldParts, newParts, intersectionFn) {
    if (oldParts && newParts) {
      let delta = 0;
      for (let i = 0, len = oldParts.length; i <= len; i++) {
        const oldPart = oldParts[i];
        const newPart = newParts[i + delta];
        if (oldPart && newPart && oldPart.index === newPart.index && oldPart.fragment.sn === newPart.fragment.sn) {
          intersectionFn(oldPart, newPart);
        } else {
          delta--;
        }
      }
    }
  }
  function mapFragmentIntersection(oldDetails, newDetails, intersectionFn) {
    const skippedSegments = newDetails.skippedSegments;
    const start = Math.max(oldDetails.startSN, newDetails.startSN) - newDetails.startSN;
    const end = (oldDetails.fragmentHint ? 1 : 0) + (skippedSegments ? newDetails.endSN : Math.min(oldDetails.endSN, newDetails.endSN)) - newDetails.startSN;
    const delta = newDetails.startSN - oldDetails.startSN;
    const newFrags = newDetails.fragmentHint ? newDetails.fragments.concat(newDetails.fragmentHint) : newDetails.fragments;
    const oldFrags = oldDetails.fragmentHint ? oldDetails.fragments.concat(oldDetails.fragmentHint) : oldDetails.fragments;
    for (let i = start; i <= end; i++) {
      const oldFrag = oldFrags[delta + i];
      let newFrag = newFrags[i];
      if (skippedSegments && !newFrag && i < skippedSegments) {
        newFrag = newDetails.fragments[i] = oldFrag;
      }
      if (oldFrag && newFrag) {
        intersectionFn(oldFrag, newFrag);
      }
    }
  }
  function adjustSliding(oldDetails, newDetails) {
    const delta = newDetails.startSN + newDetails.skippedSegments - oldDetails.startSN;
    const oldFragments = oldDetails.fragments;
    if (delta < 0 || delta >= oldFragments.length) {
      return;
    }
    addSliding(newDetails, oldFragments[delta].start);
  }
  function addSliding(details, start) {
    if (start) {
      const fragments = details.fragments;
      for (let i = details.skippedSegments; i < fragments.length; i++) {
        fragments[i].start += start;
      }
      if (details.fragmentHint) {
        details.fragmentHint.start += start;
      }
    }
  }
  function computeReloadInterval(newDetails, distanceToLiveEdgeMs = Infinity) {
    let reloadInterval = 1e3 * newDetails.targetduration;
    if (newDetails.updated) {
      const fragments = newDetails.fragments;
      const liveEdgeMaxTargetDurations = 4;
      if (fragments.length && reloadInterval * liveEdgeMaxTargetDurations > distanceToLiveEdgeMs) {
        const lastSegmentDuration = fragments[fragments.length - 1].duration * 1e3;
        if (lastSegmentDuration < reloadInterval) {
          reloadInterval = lastSegmentDuration;
        }
      }
    } else {
      reloadInterval /= 2;
    }
    return Math.round(reloadInterval);
  }
  function getFragmentWithSN(level, sn, fragCurrent) {
    if (!(level != null && level.details)) {
      return null;
    }
    const levelDetails = level.details;
    let fragment = levelDetails.fragments[sn - levelDetails.startSN];
    if (fragment) {
      return fragment;
    }
    fragment = levelDetails.fragmentHint;
    if (fragment && fragment.sn === sn) {
      return fragment;
    }
    if (sn < levelDetails.startSN && fragCurrent && fragCurrent.sn === sn) {
      return fragCurrent;
    }
    return null;
  }
  function getPartWith(level, sn, partIndex) {
    var _level$details;
    if (!(level != null && level.details)) {
      return null;
    }
    return findPart((_level$details = level.details) == null ? void 0 : _level$details.partList, sn, partIndex);
  }
  function findPart(partList, sn, partIndex) {
    if (partList) {
      for (let i = partList.length; i--; ) {
        const part = partList[i];
        if (part.index === partIndex && part.fragment.sn === sn) {
          return part;
        }
      }
    }
    return null;
  }
  function reassignFragmentLevelIndexes(levels) {
    levels.forEach((level, index) => {
      const {
        details
      } = level;
      if (details != null && details.fragments) {
        details.fragments.forEach((fragment) => {
          fragment.level = index;
        });
      }
    });
  }
  function isTimeoutError(error) {
    switch (error.details) {
      case ErrorDetails.FRAG_LOAD_TIMEOUT:
      case ErrorDetails.KEY_LOAD_TIMEOUT:
      case ErrorDetails.LEVEL_LOAD_TIMEOUT:
      case ErrorDetails.MANIFEST_LOAD_TIMEOUT:
        return true;
    }
    return false;
  }
  function getRetryConfig(loadPolicy, error) {
    const isTimeout = isTimeoutError(error);
    return loadPolicy.default[`${isTimeout ? "timeout" : "error"}Retry`];
  }
  function getRetryDelay(retryConfig, retryCount) {
    const backoffFactor = retryConfig.backoff === "linear" ? 1 : Math.pow(2, retryCount);
    return Math.min(backoffFactor * retryConfig.retryDelayMs, retryConfig.maxRetryDelayMs);
  }
  function getLoaderConfigWithoutReties(loderConfig) {
    return _objectSpread2(_objectSpread2({}, loderConfig), {
      errorRetry: null,
      timeoutRetry: null
    });
  }
  function shouldRetry(retryConfig, retryCount, isTimeout, loaderResponse) {
    if (!retryConfig) {
      return false;
    }
    const httpStatus = loaderResponse == null ? void 0 : loaderResponse.code;
    const retry = retryCount < retryConfig.maxNumRetry && (retryForHttpStatus(httpStatus) || !!isTimeout);
    return retryConfig.shouldRetry ? retryConfig.shouldRetry(retryConfig, retryCount, isTimeout, loaderResponse, retry) : retry;
  }
  function retryForHttpStatus(httpStatus) {
    return httpStatus === 0 && navigator.onLine === false || !!httpStatus && (httpStatus < 400 || httpStatus > 499);
  }
  var BinarySearch = {
    /**
     * Searches for an item in an array which matches a certain condition.
     * This requires the condition to only match one item in the array,
     * and for the array to be ordered.
     *
     * @param list The array to search.
     * @param comparisonFn
     *      Called and provided a candidate item as the first argument.
     *      Should return:
     *          > -1 if the item should be located at a lower index than the provided item.
     *          > 1 if the item should be located at a higher index than the provided item.
     *          > 0 if the item is the item you're looking for.
     *
     * @returns the object if found, otherwise returns null
     */
    search: function(list, comparisonFn) {
      let minIndex = 0;
      let maxIndex = list.length - 1;
      let currentIndex = null;
      let currentElement = null;
      while (minIndex <= maxIndex) {
        currentIndex = (minIndex + maxIndex) / 2 | 0;
        currentElement = list[currentIndex];
        const comparisonResult = comparisonFn(currentElement);
        if (comparisonResult > 0) {
          minIndex = currentIndex + 1;
        } else if (comparisonResult < 0) {
          maxIndex = currentIndex - 1;
        } else {
          return currentElement;
        }
      }
      return null;
    }
  };
  function findFragmentByPDT(fragments, PDTValue, maxFragLookUpTolerance) {
    if (PDTValue === null || !Array.isArray(fragments) || !fragments.length || !isFiniteNumber(PDTValue)) {
      return null;
    }
    const startPDT = fragments[0].programDateTime;
    if (PDTValue < (startPDT || 0)) {
      return null;
    }
    const endPDT = fragments[fragments.length - 1].endProgramDateTime;
    if (PDTValue >= (endPDT || 0)) {
      return null;
    }
    maxFragLookUpTolerance = maxFragLookUpTolerance || 0;
    for (let seg = 0; seg < fragments.length; ++seg) {
      const frag = fragments[seg];
      if (pdtWithinToleranceTest(PDTValue, maxFragLookUpTolerance, frag)) {
        return frag;
      }
    }
    return null;
  }
  function findFragmentByPTS(fragPrevious, fragments, bufferEnd = 0, maxFragLookUpTolerance = 0, nextFragLookupTolerance = 5e-3) {
    let fragNext = null;
    if (fragPrevious) {
      fragNext = fragments[fragPrevious.sn - fragments[0].sn + 1] || null;
      const bufferEdgeError = fragPrevious.endDTS - bufferEnd;
      if (bufferEdgeError > 0 && bufferEdgeError < 15e-7) {
        bufferEnd += 15e-7;
      }
    } else if (bufferEnd === 0 && fragments[0].start === 0) {
      fragNext = fragments[0];
    }
    if (fragNext && ((!fragPrevious || fragPrevious.level === fragNext.level) && fragmentWithinToleranceTest(bufferEnd, maxFragLookUpTolerance, fragNext) === 0 || fragmentWithinFastStartSwitch(fragNext, fragPrevious, Math.min(nextFragLookupTolerance, maxFragLookUpTolerance)))) {
      return fragNext;
    }
    const foundFragment = BinarySearch.search(fragments, fragmentWithinToleranceTest.bind(null, bufferEnd, maxFragLookUpTolerance));
    if (foundFragment && (foundFragment !== fragPrevious || !fragNext)) {
      return foundFragment;
    }
    return fragNext;
  }
  function fragmentWithinFastStartSwitch(fragNext, fragPrevious, nextFragLookupTolerance) {
    if (fragPrevious && fragPrevious.start === 0 && fragPrevious.level < fragNext.level && (fragPrevious.endPTS || 0) > 0) {
      const firstDuration = fragPrevious.tagList.reduce((duration, tag) => {
        if (tag[0] === "INF") {
          duration += parseFloat(tag[1]);
        }
        return duration;
      }, nextFragLookupTolerance);
      return fragNext.start <= firstDuration;
    }
    return false;
  }
  function fragmentWithinToleranceTest(bufferEnd = 0, maxFragLookUpTolerance = 0, candidate) {
    if (candidate.start <= bufferEnd && candidate.start + candidate.duration > bufferEnd) {
      return 0;
    }
    const candidateLookupTolerance = Math.min(maxFragLookUpTolerance, candidate.duration + (candidate.deltaPTS ? candidate.deltaPTS : 0));
    if (candidate.start + candidate.duration - candidateLookupTolerance <= bufferEnd) {
      return 1;
    } else if (candidate.start - candidateLookupTolerance > bufferEnd && candidate.start) {
      return -1;
    }
    return 0;
  }
  function pdtWithinToleranceTest(pdtBufferEnd, maxFragLookUpTolerance, candidate) {
    const candidateLookupTolerance = Math.min(maxFragLookUpTolerance, candidate.duration + (candidate.deltaPTS ? candidate.deltaPTS : 0)) * 1e3;
    const endProgramDateTime = candidate.endProgramDateTime || 0;
    return endProgramDateTime - candidateLookupTolerance > pdtBufferEnd;
  }
  function findFragWithCC(fragments, cc) {
    return BinarySearch.search(fragments, (candidate) => {
      if (candidate.cc < cc) {
        return 1;
      } else if (candidate.cc > cc) {
        return -1;
      } else {
        return 0;
      }
    });
  }
  var NetworkErrorAction = {
    DoNothing: 0,
    SendEndCallback: 1,
    SendAlternateToPenaltyBox: 2,
    RemoveAlternatePermanently: 3,
    InsertDiscontinuity: 4,
    RetryRequest: 5
  };
  var ErrorActionFlags = {
    None: 0,
    MoveAllAlternatesMatchingHost: 1,
    MoveAllAlternatesMatchingHDCP: 2,
    SwitchToSDR: 4
  };
  var ErrorController = class {
    constructor(hls) {
      this.hls = void 0;
      this.playlistError = 0;
      this.penalizedRenditions = {};
      this.log = void 0;
      this.warn = void 0;
      this.error = void 0;
      this.hls = hls;
      this.log = logger.log.bind(logger, `[info]:`);
      this.warn = logger.warn.bind(logger, `[warning]:`);
      this.error = logger.error.bind(logger, `[error]:`);
      this.registerListeners();
    }
    registerListeners() {
      const hls = this.hls;
      hls.on(Events2.ERROR, this.onError, this);
      hls.on(Events2.MANIFEST_LOADING, this.onManifestLoading, this);
      hls.on(Events2.LEVEL_UPDATED, this.onLevelUpdated, this);
    }
    unregisterListeners() {
      const hls = this.hls;
      if (!hls) {
        return;
      }
      hls.off(Events2.ERROR, this.onError, this);
      hls.off(Events2.ERROR, this.onErrorOut, this);
      hls.off(Events2.MANIFEST_LOADING, this.onManifestLoading, this);
      hls.off(Events2.LEVEL_UPDATED, this.onLevelUpdated, this);
    }
    destroy() {
      this.unregisterListeners();
      this.hls = null;
      this.penalizedRenditions = {};
    }
    startLoad(startPosition) {
    }
    stopLoad() {
      this.playlistError = 0;
    }
    getVariantLevelIndex(frag) {
      return (frag == null ? void 0 : frag.type) === PlaylistLevelType.MAIN ? frag.level : this.hls.loadLevel;
    }
    onManifestLoading() {
      this.playlistError = 0;
      this.penalizedRenditions = {};
    }
    onLevelUpdated() {
      this.playlistError = 0;
    }
    onError(event, data) {
      var _data$frag, _data$level;
      if (data.fatal) {
        return;
      }
      const hls = this.hls;
      const context = data.context;
      switch (data.details) {
        case ErrorDetails.FRAG_LOAD_ERROR:
        case ErrorDetails.FRAG_LOAD_TIMEOUT:
        case ErrorDetails.KEY_LOAD_ERROR:
        case ErrorDetails.KEY_LOAD_TIMEOUT:
          data.errorAction = this.getFragRetryOrSwitchAction(data);
          return;
        case ErrorDetails.FRAG_PARSING_ERROR:
          if ((_data$frag = data.frag) != null && _data$frag.gap) {
            data.errorAction = {
              action: NetworkErrorAction.DoNothing,
              flags: ErrorActionFlags.None
            };
            return;
          }
        // falls through
        case ErrorDetails.FRAG_GAP:
        case ErrorDetails.FRAG_DECRYPT_ERROR: {
          data.errorAction = this.getFragRetryOrSwitchAction(data);
          data.errorAction.action = NetworkErrorAction.SendAlternateToPenaltyBox;
          return;
        }
        case ErrorDetails.LEVEL_EMPTY_ERROR:
        case ErrorDetails.LEVEL_PARSING_ERROR:
          {
            var _data$context, _data$context$levelDe;
            const levelIndex = data.parent === PlaylistLevelType.MAIN ? data.level : hls.loadLevel;
            if (data.details === ErrorDetails.LEVEL_EMPTY_ERROR && !!((_data$context = data.context) != null && (_data$context$levelDe = _data$context.levelDetails) != null && _data$context$levelDe.live)) {
              data.errorAction = this.getPlaylistRetryOrSwitchAction(data, levelIndex);
            } else {
              data.levelRetry = false;
              data.errorAction = this.getLevelSwitchAction(data, levelIndex);
            }
          }
          return;
        case ErrorDetails.LEVEL_LOAD_ERROR:
        case ErrorDetails.LEVEL_LOAD_TIMEOUT:
          if (typeof (context == null ? void 0 : context.level) === "number") {
            data.errorAction = this.getPlaylistRetryOrSwitchAction(data, context.level);
          }
          return;
        case ErrorDetails.AUDIO_TRACK_LOAD_ERROR:
        case ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT:
        case ErrorDetails.SUBTITLE_LOAD_ERROR:
        case ErrorDetails.SUBTITLE_TRACK_LOAD_TIMEOUT:
          if (context) {
            const level = hls.levels[hls.loadLevel];
            if (level && (context.type === PlaylistContextType.AUDIO_TRACK && level.hasAudioGroup(context.groupId) || context.type === PlaylistContextType.SUBTITLE_TRACK && level.hasSubtitleGroup(context.groupId))) {
              data.errorAction = this.getPlaylistRetryOrSwitchAction(data, hls.loadLevel);
              data.errorAction.action = NetworkErrorAction.SendAlternateToPenaltyBox;
              data.errorAction.flags = ErrorActionFlags.MoveAllAlternatesMatchingHost;
              return;
            }
          }
          return;
        case ErrorDetails.KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED:
          {
            const level = hls.levels[hls.loadLevel];
            const restrictedHdcpLevel = level == null ? void 0 : level.attrs["HDCP-LEVEL"];
            if (restrictedHdcpLevel) {
              data.errorAction = {
                action: NetworkErrorAction.SendAlternateToPenaltyBox,
                flags: ErrorActionFlags.MoveAllAlternatesMatchingHDCP,
                hdcpLevel: restrictedHdcpLevel
              };
            } else {
              this.keySystemError(data);
            }
          }
          return;
        case ErrorDetails.BUFFER_ADD_CODEC_ERROR:
        case ErrorDetails.REMUX_ALLOC_ERROR:
        case ErrorDetails.BUFFER_APPEND_ERROR:
          data.errorAction = this.getLevelSwitchAction(data, (_data$level = data.level) != null ? _data$level : hls.loadLevel);
          return;
        case ErrorDetails.INTERNAL_EXCEPTION:
        case ErrorDetails.BUFFER_APPENDING_ERROR:
        case ErrorDetails.BUFFER_FULL_ERROR:
        case ErrorDetails.LEVEL_SWITCH_ERROR:
        case ErrorDetails.BUFFER_STALLED_ERROR:
        case ErrorDetails.BUFFER_SEEK_OVER_HOLE:
        case ErrorDetails.BUFFER_NUDGE_ON_STALL:
          data.errorAction = {
            action: NetworkErrorAction.DoNothing,
            flags: ErrorActionFlags.None
          };
          return;
      }
      if (data.type === ErrorTypes.KEY_SYSTEM_ERROR) {
        this.keySystemError(data);
      }
    }
    keySystemError(data) {
      const levelIndex = this.getVariantLevelIndex(data.frag);
      data.levelRetry = false;
      data.errorAction = this.getLevelSwitchAction(data, levelIndex);
    }
    getPlaylistRetryOrSwitchAction(data, levelIndex) {
      const hls = this.hls;
      const retryConfig = getRetryConfig(hls.config.playlistLoadPolicy, data);
      const retryCount = this.playlistError++;
      const retry = shouldRetry(retryConfig, retryCount, isTimeoutError(data), data.response);
      if (retry) {
        return {
          action: NetworkErrorAction.RetryRequest,
          flags: ErrorActionFlags.None,
          retryConfig,
          retryCount
        };
      }
      const errorAction = this.getLevelSwitchAction(data, levelIndex);
      if (retryConfig) {
        errorAction.retryConfig = retryConfig;
        errorAction.retryCount = retryCount;
      }
      return errorAction;
    }
    getFragRetryOrSwitchAction(data) {
      const hls = this.hls;
      const variantLevelIndex = this.getVariantLevelIndex(data.frag);
      const level = hls.levels[variantLevelIndex];
      const {
        fragLoadPolicy,
        keyLoadPolicy
      } = hls.config;
      const retryConfig = getRetryConfig(data.details.startsWith("key") ? keyLoadPolicy : fragLoadPolicy, data);
      const fragmentErrors = hls.levels.reduce((acc, level2) => acc + level2.fragmentError, 0);
      if (level) {
        if (data.details !== ErrorDetails.FRAG_GAP) {
          level.fragmentError++;
        }
        const retry = shouldRetry(retryConfig, fragmentErrors, isTimeoutError(data), data.response);
        if (retry) {
          return {
            action: NetworkErrorAction.RetryRequest,
            flags: ErrorActionFlags.None,
            retryConfig,
            retryCount: fragmentErrors
          };
        }
      }
      const errorAction = this.getLevelSwitchAction(data, variantLevelIndex);
      if (retryConfig) {
        errorAction.retryConfig = retryConfig;
        errorAction.retryCount = fragmentErrors;
      }
      return errorAction;
    }
    getLevelSwitchAction(data, levelIndex) {
      const hls = this.hls;
      if (levelIndex === null || levelIndex === void 0) {
        levelIndex = hls.loadLevel;
      }
      const level = this.hls.levels[levelIndex];
      if (level) {
        var _data$frag2, _data$context2;
        const errorDetails = data.details;
        level.loadError++;
        if (errorDetails === ErrorDetails.BUFFER_APPEND_ERROR) {
          level.fragmentError++;
        }
        let nextLevel = -1;
        const {
          levels,
          loadLevel,
          minAutoLevel,
          maxAutoLevel
        } = hls;
        if (!hls.autoLevelEnabled) {
          hls.loadLevel = -1;
        }
        const fragErrorType = (_data$frag2 = data.frag) == null ? void 0 : _data$frag2.type;
        const isAudioCodecError = fragErrorType === PlaylistLevelType.AUDIO && errorDetails === ErrorDetails.FRAG_PARSING_ERROR || data.sourceBufferName === "audio" && (errorDetails === ErrorDetails.BUFFER_ADD_CODEC_ERROR || errorDetails === ErrorDetails.BUFFER_APPEND_ERROR);
        const findAudioCodecAlternate = isAudioCodecError && levels.some(({
          audioCodec
        }) => level.audioCodec !== audioCodec);
        const isVideoCodecError = data.sourceBufferName === "video" && (errorDetails === ErrorDetails.BUFFER_ADD_CODEC_ERROR || errorDetails === ErrorDetails.BUFFER_APPEND_ERROR);
        const findVideoCodecAlternate = isVideoCodecError && levels.some(({
          codecSet,
          audioCodec
        }) => level.codecSet !== codecSet && level.audioCodec === audioCodec);
        const {
          type: playlistErrorType,
          groupId: playlistErrorGroupId
        } = (_data$context2 = data.context) != null ? _data$context2 : {};
        for (let i = levels.length; i--; ) {
          const candidate = (i + loadLevel) % levels.length;
          if (candidate !== loadLevel && candidate >= minAutoLevel && candidate <= maxAutoLevel && levels[candidate].loadError === 0) {
            var _level$audioGroups, _level$subtitleGroups;
            const levelCandidate = levels[candidate];
            if (errorDetails === ErrorDetails.FRAG_GAP && fragErrorType === PlaylistLevelType.MAIN && data.frag) {
              const levelDetails = levels[candidate].details;
              if (levelDetails) {
                const fragCandidate = findFragmentByPTS(data.frag, levelDetails.fragments, data.frag.start);
                if (fragCandidate != null && fragCandidate.gap) {
                  continue;
                }
              }
            } else if (playlistErrorType === PlaylistContextType.AUDIO_TRACK && levelCandidate.hasAudioGroup(playlistErrorGroupId) || playlistErrorType === PlaylistContextType.SUBTITLE_TRACK && levelCandidate.hasSubtitleGroup(playlistErrorGroupId)) {
              continue;
            } else if (fragErrorType === PlaylistLevelType.AUDIO && (_level$audioGroups = level.audioGroups) != null && _level$audioGroups.some((groupId) => levelCandidate.hasAudioGroup(groupId)) || fragErrorType === PlaylistLevelType.SUBTITLE && (_level$subtitleGroups = level.subtitleGroups) != null && _level$subtitleGroups.some((groupId) => levelCandidate.hasSubtitleGroup(groupId)) || findAudioCodecAlternate && level.audioCodec === levelCandidate.audioCodec || !findAudioCodecAlternate && level.audioCodec !== levelCandidate.audioCodec || findVideoCodecAlternate && level.codecSet === levelCandidate.codecSet) {
              continue;
            }
            nextLevel = candidate;
            break;
          }
        }
        if (nextLevel > -1 && hls.loadLevel !== nextLevel) {
          data.levelRetry = true;
          this.playlistError = 0;
          return {
            action: NetworkErrorAction.SendAlternateToPenaltyBox,
            flags: ErrorActionFlags.None,
            nextAutoLevel: nextLevel
          };
        }
      }
      return {
        action: NetworkErrorAction.SendAlternateToPenaltyBox,
        flags: ErrorActionFlags.MoveAllAlternatesMatchingHost
      };
    }
    onErrorOut(event, data) {
      var _data$errorAction;
      switch ((_data$errorAction = data.errorAction) == null ? void 0 : _data$errorAction.action) {
        case NetworkErrorAction.DoNothing:
          break;
        case NetworkErrorAction.SendAlternateToPenaltyBox:
          this.sendAlternateToPenaltyBox(data);
          if (!data.errorAction.resolved && data.details !== ErrorDetails.FRAG_GAP) {
            data.fatal = true;
          } else if (/MediaSource readyState: ended/.test(data.error.message)) {
            this.warn(`MediaSource ended after "${data.sourceBufferName}" sourceBuffer append error. Attempting to recover from media error.`);
            this.hls.recoverMediaError();
          }
          break;
        case NetworkErrorAction.RetryRequest:
          break;
      }
      if (data.fatal) {
        this.hls.stopLoad();
        return;
      }
    }
    sendAlternateToPenaltyBox(data) {
      const hls = this.hls;
      const errorAction = data.errorAction;
      if (!errorAction) {
        return;
      }
      const {
        flags,
        hdcpLevel,
        nextAutoLevel
      } = errorAction;
      switch (flags) {
        case ErrorActionFlags.None:
          this.switchLevel(data, nextAutoLevel);
          break;
        case ErrorActionFlags.MoveAllAlternatesMatchingHDCP:
          if (hdcpLevel) {
            hls.maxHdcpLevel = HdcpLevels[HdcpLevels.indexOf(hdcpLevel) - 1];
            errorAction.resolved = true;
          }
          this.warn(`Restricting playback to HDCP-LEVEL of "${hls.maxHdcpLevel}" or lower`);
          break;
      }
      if (!errorAction.resolved) {
        this.switchLevel(data, nextAutoLevel);
      }
    }
    switchLevel(data, levelIndex) {
      if (levelIndex !== void 0 && data.errorAction) {
        this.warn(`switching to level ${levelIndex} after ${data.details}`);
        this.hls.nextAutoLevel = levelIndex;
        data.errorAction.resolved = true;
        this.hls.nextLoadLevel = this.hls.nextAutoLevel;
      }
    }
  };
  var BasePlaylistController = class {
    constructor(hls, logPrefix) {
      this.hls = void 0;
      this.timer = -1;
      this.requestScheduled = -1;
      this.canLoad = false;
      this.log = void 0;
      this.warn = void 0;
      this.log = logger.log.bind(logger, `${logPrefix}:`);
      this.warn = logger.warn.bind(logger, `${logPrefix}:`);
      this.hls = hls;
    }
    destroy() {
      this.clearTimer();
      this.hls = this.log = this.warn = null;
    }
    clearTimer() {
      if (this.timer !== -1) {
        self.clearTimeout(this.timer);
        this.timer = -1;
      }
    }
    startLoad() {
      this.canLoad = true;
      this.requestScheduled = -1;
      this.loadPlaylist();
    }
    stopLoad() {
      this.canLoad = false;
      this.clearTimer();
    }
    switchParams(playlistUri, previous, current) {
      const renditionReports = previous == null ? void 0 : previous.renditionReports;
      if (renditionReports) {
        let foundIndex = -1;
        for (let i = 0; i < renditionReports.length; i++) {
          const attr = renditionReports[i];
          let uri;
          try {
            uri = new self.URL(attr.URI, previous.url).href;
          } catch (error) {
            logger.warn(`Could not construct new URL for Rendition Report: ${error}`);
            uri = attr.URI || "";
          }
          if (uri === playlistUri) {
            foundIndex = i;
            break;
          } else if (uri === playlistUri.substring(0, uri.length)) {
            foundIndex = i;
          }
        }
        if (foundIndex !== -1) {
          const attr = renditionReports[foundIndex];
          const msn = parseInt(attr["LAST-MSN"]) || (previous == null ? void 0 : previous.lastPartSn);
          let part = parseInt(attr["LAST-PART"]) || (previous == null ? void 0 : previous.lastPartIndex);
          if (this.hls.config.lowLatencyMode) {
            const currentGoal = Math.min(previous.age - previous.partTarget, previous.targetduration);
            if (part >= 0 && currentGoal > previous.partTarget) {
              part += 1;
            }
          }
          const skip = current && getSkipValue(current);
          return new HlsUrlParameters(msn, part >= 0 ? part : void 0, skip);
        }
      }
    }
    loadPlaylist(hlsUrlParameters) {
      if (this.requestScheduled === -1) {
        this.requestScheduled = self.performance.now();
      }
    }
    shouldLoadPlaylist(playlist) {
      return this.canLoad && !!playlist && !!playlist.url && (!playlist.details || playlist.details.live);
    }
    shouldReloadPlaylist(playlist) {
      return this.timer === -1 && this.requestScheduled === -1 && this.shouldLoadPlaylist(playlist);
    }
    playlistLoaded(index, data, previousDetails) {
      const {
        details,
        stats
      } = data;
      const now2 = self.performance.now();
      const elapsed = stats.loading.first ? Math.max(0, now2 - stats.loading.first) : 0;
      details.advancedDateTime = Date.now() - elapsed;
      if (details.live || previousDetails != null && previousDetails.live) {
        details.reloaded(previousDetails);
        if (previousDetails) {
          this.log(`live playlist ${index} ${details.advanced ? "REFRESHED " + details.lastPartSn + "-" + details.lastPartIndex : details.updated ? "UPDATED" : "MISSED"}`);
        }
        if (previousDetails && details.fragments.length > 0) {
          mergeDetails(previousDetails, details);
        }
        if (!this.canLoad || !details.live) {
          return;
        }
        let deliveryDirectives;
        let msn = void 0;
        let part = void 0;
        if (details.canBlockReload && details.endSN && details.advanced) {
          const lowLatencyMode = this.hls.config.lowLatencyMode;
          const lastPartSn = details.lastPartSn;
          const endSn = details.endSN;
          const lastPartIndex = details.lastPartIndex;
          const hasParts = lastPartIndex !== -1;
          const lastPart = lastPartSn === endSn;
          const nextSnStartIndex = lowLatencyMode ? 0 : lastPartIndex;
          if (hasParts) {
            msn = lastPart ? endSn + 1 : lastPartSn;
            part = lastPart ? nextSnStartIndex : lastPartIndex + 1;
          } else {
            msn = endSn + 1;
          }
          const lastAdvanced = details.age;
          const cdnAge = lastAdvanced + details.ageHeader;
          let currentGoal = Math.min(cdnAge - details.partTarget, details.targetduration * 1.5);
          if (currentGoal > 0) {
            if (previousDetails && currentGoal > previousDetails.tuneInGoal) {
              this.warn(`CDN Tune-in goal increased from: ${previousDetails.tuneInGoal} to: ${currentGoal} with playlist age: ${details.age}`);
              currentGoal = 0;
            } else {
              const segments = Math.floor(currentGoal / details.targetduration);
              msn += segments;
              if (part !== void 0) {
                const parts = Math.round(currentGoal % details.targetduration / details.partTarget);
                part += parts;
              }
              this.log(`CDN Tune-in age: ${details.ageHeader}s last advanced ${lastAdvanced.toFixed(2)}s goal: ${currentGoal} skip sn ${segments} to part ${part}`);
            }
            details.tuneInGoal = currentGoal;
          }
          deliveryDirectives = this.getDeliveryDirectives(details, data.deliveryDirectives, msn, part);
          if (lowLatencyMode || !lastPart) {
            this.loadPlaylist(deliveryDirectives);
            return;
          }
        } else if (details.canBlockReload || details.canSkipUntil) {
          deliveryDirectives = this.getDeliveryDirectives(details, data.deliveryDirectives, msn, part);
        }
        const bufferInfo = this.hls.mainForwardBufferInfo;
        const position = bufferInfo ? bufferInfo.end - bufferInfo.len : 0;
        const distanceToLiveEdgeMs = (details.edge - position) * 1e3;
        const reloadInterval = computeReloadInterval(details, distanceToLiveEdgeMs);
        if (details.updated && now2 > this.requestScheduled + reloadInterval) {
          this.requestScheduled = stats.loading.start;
        }
        if (msn !== void 0 && details.canBlockReload) {
          this.requestScheduled = stats.loading.first + reloadInterval - (details.partTarget * 1e3 || 1e3);
        } else if (this.requestScheduled === -1 || this.requestScheduled + reloadInterval < now2) {
          this.requestScheduled = now2;
        } else if (this.requestScheduled - now2 <= 0) {
          this.requestScheduled += reloadInterval;
        }
        let estimatedTimeUntilUpdate = this.requestScheduled - now2;
        estimatedTimeUntilUpdate = Math.max(0, estimatedTimeUntilUpdate);
        this.log(`reload live playlist ${index} in ${Math.round(estimatedTimeUntilUpdate)} ms`);
        this.timer = self.setTimeout(() => this.loadPlaylist(deliveryDirectives), estimatedTimeUntilUpdate);
      } else {
        this.clearTimer();
      }
    }
    getDeliveryDirectives(details, previousDeliveryDirectives, msn, part) {
      let skip = getSkipValue(details);
      if (previousDeliveryDirectives != null && previousDeliveryDirectives.skip && details.deltaUpdateFailed) {
        msn = previousDeliveryDirectives.msn;
        part = previousDeliveryDirectives.part;
        skip = HlsSkip.No;
      }
      return new HlsUrlParameters(msn, part, skip);
    }
    checkRetry(errorEvent) {
      const errorDetails = errorEvent.details;
      const isTimeout = isTimeoutError(errorEvent);
      const errorAction = errorEvent.errorAction;
      const {
        action,
        retryCount = 0,
        retryConfig
      } = errorAction || {};
      const retry = !!errorAction && !!retryConfig && (action === NetworkErrorAction.RetryRequest || !errorAction.resolved && action === NetworkErrorAction.SendAlternateToPenaltyBox);
      if (retry) {
        var _errorEvent$context;
        this.requestScheduled = -1;
        if (retryCount >= retryConfig.maxNumRetry) {
          return false;
        }
        if (isTimeout && (_errorEvent$context = errorEvent.context) != null && _errorEvent$context.deliveryDirectives) {
          this.warn(`Retrying playlist loading ${retryCount + 1}/${retryConfig.maxNumRetry} after "${errorDetails}" without delivery-directives`);
          this.loadPlaylist();
        } else {
          const delay2 = getRetryDelay(retryConfig, retryCount);
          this.timer = self.setTimeout(() => this.loadPlaylist(), delay2);
          this.warn(`Retrying playlist loading ${retryCount + 1}/${retryConfig.maxNumRetry} after "${errorDetails}" in ${delay2}ms`);
        }
        errorEvent.levelRetry = true;
        errorAction.resolved = true;
      }
      return retry;
    }
  };
  var EWMA = class {
    //  About half of the estimated value will be from the last |halfLife| samples by weight.
    constructor(halfLife, estimate = 0, weight = 0) {
      this.halfLife = void 0;
      this.alpha_ = void 0;
      this.estimate_ = void 0;
      this.totalWeight_ = void 0;
      this.halfLife = halfLife;
      this.alpha_ = halfLife ? Math.exp(Math.log(0.5) / halfLife) : 0;
      this.estimate_ = estimate;
      this.totalWeight_ = weight;
    }
    sample(weight, value) {
      const adjAlpha = Math.pow(this.alpha_, weight);
      this.estimate_ = value * (1 - adjAlpha) + adjAlpha * this.estimate_;
      this.totalWeight_ += weight;
    }
    getTotalWeight() {
      return this.totalWeight_;
    }
    getEstimate() {
      if (this.alpha_) {
        const zeroFactor = 1 - Math.pow(this.alpha_, this.totalWeight_);
        if (zeroFactor) {
          return this.estimate_ / zeroFactor;
        }
      }
      return this.estimate_;
    }
  };
  var EwmaBandWidthEstimator = class {
    constructor(slow, fast, defaultEstimate, defaultTTFB = 100) {
      this.defaultEstimate_ = void 0;
      this.minWeight_ = void 0;
      this.minDelayMs_ = void 0;
      this.slow_ = void 0;
      this.fast_ = void 0;
      this.defaultTTFB_ = void 0;
      this.ttfb_ = void 0;
      this.defaultEstimate_ = defaultEstimate;
      this.minWeight_ = 1e-3;
      this.minDelayMs_ = 50;
      this.slow_ = new EWMA(slow);
      this.fast_ = new EWMA(fast);
      this.defaultTTFB_ = defaultTTFB;
      this.ttfb_ = new EWMA(slow);
    }
    update(slow, fast) {
      const {
        slow_,
        fast_,
        ttfb_
      } = this;
      if (slow_.halfLife !== slow) {
        this.slow_ = new EWMA(slow, slow_.getEstimate(), slow_.getTotalWeight());
      }
      if (fast_.halfLife !== fast) {
        this.fast_ = new EWMA(fast, fast_.getEstimate(), fast_.getTotalWeight());
      }
      if (ttfb_.halfLife !== slow) {
        this.ttfb_ = new EWMA(slow, ttfb_.getEstimate(), ttfb_.getTotalWeight());
      }
    }
    sample(durationMs, numBytes) {
      durationMs = Math.max(durationMs, this.minDelayMs_);
      const numBits = 8 * numBytes;
      const durationS = durationMs / 1e3;
      const bandwidthInBps = numBits / durationS;
      this.fast_.sample(durationS, bandwidthInBps);
      this.slow_.sample(durationS, bandwidthInBps);
    }
    sampleTTFB(ttfb) {
      const seconds = ttfb / 1e3;
      const weight = Math.sqrt(2) * Math.exp(-Math.pow(seconds, 2) / 2);
      this.ttfb_.sample(weight, Math.max(ttfb, 5));
    }
    canEstimate() {
      return this.fast_.getTotalWeight() >= this.minWeight_;
    }
    getEstimate() {
      if (this.canEstimate()) {
        return Math.min(this.fast_.getEstimate(), this.slow_.getEstimate());
      } else {
        return this.defaultEstimate_;
      }
    }
    getEstimateTTFB() {
      if (this.ttfb_.getTotalWeight() >= this.minWeight_) {
        return this.ttfb_.getEstimate();
      } else {
        return this.defaultTTFB_;
      }
    }
    destroy() {
    }
  };
  var SUPPORTED_INFO_DEFAULT = {
    supported: true,
    configurations: [],
    decodingInfoResults: [{
      supported: true,
      powerEfficient: true,
      smooth: true
    }]
  };
  var SUPPORTED_INFO_CACHE = {};
  function requiresMediaCapabilitiesDecodingInfo(level, audioTracksByGroup, currentVideoRange, currentFrameRate, currentBw, audioPreference) {
    const audioGroups = level.audioCodec ? level.audioGroups : null;
    const audioCodecPreference = audioPreference == null ? void 0 : audioPreference.audioCodec;
    const channelsPreference = audioPreference == null ? void 0 : audioPreference.channels;
    const maxChannels = channelsPreference ? parseInt(channelsPreference) : audioCodecPreference ? Infinity : 2;
    let audioChannels = null;
    if (audioGroups != null && audioGroups.length) {
      try {
        if (audioGroups.length === 1 && audioGroups[0]) {
          audioChannels = audioTracksByGroup.groups[audioGroups[0]].channels;
        } else {
          audioChannels = audioGroups.reduce((acc, groupId) => {
            if (groupId) {
              const audioTrackGroup = audioTracksByGroup.groups[groupId];
              if (!audioTrackGroup) {
                throw new Error(`Audio track group ${groupId} not found`);
              }
              Object.keys(audioTrackGroup.channels).forEach((key) => {
                acc[key] = (acc[key] || 0) + audioTrackGroup.channels[key];
              });
            }
            return acc;
          }, {
            2: 0
          });
        }
      } catch (error) {
        return true;
      }
    }
    return level.videoCodec !== void 0 && (level.width > 1920 && level.height > 1088 || level.height > 1920 && level.width > 1088 || level.frameRate > Math.max(currentFrameRate, 30) || level.videoRange !== "SDR" && level.videoRange !== currentVideoRange || level.bitrate > Math.max(currentBw, 8e6)) || !!audioChannels && isFiniteNumber(maxChannels) && Object.keys(audioChannels).some((channels) => parseInt(channels) > maxChannels);
  }
  function getMediaDecodingInfoPromise(level, audioTracksByGroup, mediaCapabilities) {
    const videoCodecs = level.videoCodec;
    const audioCodecs = level.audioCodec;
    if (!videoCodecs || !audioCodecs || !mediaCapabilities) {
      return Promise.resolve(SUPPORTED_INFO_DEFAULT);
    }
    const baseVideoConfiguration = {
      width: level.width,
      height: level.height,
      bitrate: Math.ceil(Math.max(level.bitrate * 0.9, level.averageBitrate)),
      // Assume a framerate of 30fps since MediaCapabilities will not accept Level default of 0.
      framerate: level.frameRate || 30
    };
    const videoRange = level.videoRange;
    if (videoRange !== "SDR") {
      baseVideoConfiguration.transferFunction = videoRange.toLowerCase();
    }
    const configurations = videoCodecs.split(",").map((videoCodec) => ({
      type: "media-source",
      video: _objectSpread2(_objectSpread2({}, baseVideoConfiguration), {}, {
        contentType: mimeTypeForCodec(videoCodec, "video")
      })
    }));
    if (audioCodecs && level.audioGroups) {
      level.audioGroups.forEach((audioGroupId) => {
        var _audioTracksByGroup$g;
        if (!audioGroupId) {
          return;
        }
        (_audioTracksByGroup$g = audioTracksByGroup.groups[audioGroupId]) == null ? void 0 : _audioTracksByGroup$g.tracks.forEach((audioTrack) => {
          if (audioTrack.groupId === audioGroupId) {
            const channels = audioTrack.channels || "";
            const channelsNumber = parseFloat(channels);
            if (isFiniteNumber(channelsNumber) && channelsNumber > 2) {
              configurations.push.apply(configurations, audioCodecs.split(",").map((audioCodec) => ({
                type: "media-source",
                audio: {
                  contentType: mimeTypeForCodec(audioCodec, "audio"),
                  channels: "" + channelsNumber
                  // spatialRendering:
                  //   audioCodec === 'ec-3' && channels.indexOf('JOC'),
                }
              })));
            }
          }
        });
      });
    }
    return Promise.all(configurations.map((configuration) => {
      const decodingInfoKey = getMediaDecodingInfoKey(configuration);
      return SUPPORTED_INFO_CACHE[decodingInfoKey] || (SUPPORTED_INFO_CACHE[decodingInfoKey] = mediaCapabilities.decodingInfo(configuration));
    })).then((decodingInfoResults) => ({
      supported: !decodingInfoResults.some((info) => !info.supported),
      configurations,
      decodingInfoResults
    })).catch((error) => ({
      supported: false,
      configurations,
      decodingInfoResults: [],
      error
    }));
  }
  function getMediaDecodingInfoKey(config) {
    const {
      audio,
      video
    } = config;
    const mediaConfig = video || audio;
    if (mediaConfig) {
      const codec = mediaConfig.contentType.split('"')[1];
      if (video) {
        return `r${video.height}x${video.width}f${Math.ceil(video.framerate)}${video.transferFunction || "sd"}_${codec}_${Math.ceil(video.bitrate / 1e5)}`;
      }
      if (audio) {
        return `c${audio.channels}${audio.spatialRendering ? "s" : "n"}_${codec}`;
      }
    }
    return "";
  }
  function isHdrSupported() {
    if (typeof matchMedia === "function") {
      const mediaQueryList = matchMedia("(dynamic-range: high)");
      const badQuery = matchMedia("bad query");
      if (mediaQueryList.media !== badQuery.media) {
        return mediaQueryList.matches === true;
      }
    }
    return false;
  }
  function getVideoSelectionOptions(currentVideoRange, videoPreference) {
    let preferHDR = false;
    let allowedVideoRanges = [];
    if (currentVideoRange) {
      preferHDR = currentVideoRange !== "SDR";
      allowedVideoRanges = [currentVideoRange];
    }
    if (videoPreference) {
      allowedVideoRanges = videoPreference.allowedVideoRanges || VideoRangeValues.slice(0);
      preferHDR = videoPreference.preferHDR !== void 0 ? videoPreference.preferHDR : isHdrSupported();
      if (preferHDR) {
        allowedVideoRanges = allowedVideoRanges.filter((range) => range !== "SDR");
      } else {
        allowedVideoRanges = ["SDR"];
      }
    }
    return {
      preferHDR,
      allowedVideoRanges
    };
  }
  function getStartCodecTier(codecTiers, currentVideoRange, currentBw, audioPreference, videoPreference) {
    const codecSets = Object.keys(codecTiers);
    const channelsPreference = audioPreference == null ? void 0 : audioPreference.channels;
    const audioCodecPreference = audioPreference == null ? void 0 : audioPreference.audioCodec;
    const preferStereo = channelsPreference && parseInt(channelsPreference) === 2;
    let hasStereo = true;
    let hasCurrentVideoRange = false;
    let minHeight = Infinity;
    let minFramerate = Infinity;
    let minBitrate = Infinity;
    let selectedScore = 0;
    let videoRanges = [];
    const {
      preferHDR,
      allowedVideoRanges
    } = getVideoSelectionOptions(currentVideoRange, videoPreference);
    for (let i = codecSets.length; i--; ) {
      const tier = codecTiers[codecSets[i]];
      hasStereo = tier.channels[2] > 0;
      minHeight = Math.min(minHeight, tier.minHeight);
      minFramerate = Math.min(minFramerate, tier.minFramerate);
      minBitrate = Math.min(minBitrate, tier.minBitrate);
      const matchingVideoRanges = allowedVideoRanges.filter((range) => tier.videoRanges[range] > 0);
      if (matchingVideoRanges.length > 0) {
        hasCurrentVideoRange = true;
        videoRanges = matchingVideoRanges;
      }
    }
    minHeight = isFiniteNumber(minHeight) ? minHeight : 0;
    minFramerate = isFiniteNumber(minFramerate) ? minFramerate : 0;
    const maxHeight = Math.max(1080, minHeight);
    const maxFramerate = Math.max(30, minFramerate);
    minBitrate = isFiniteNumber(minBitrate) ? minBitrate : currentBw;
    currentBw = Math.max(minBitrate, currentBw);
    if (!hasCurrentVideoRange) {
      currentVideoRange = void 0;
      videoRanges = [];
    }
    const codecSet = codecSets.reduce((selected, candidate) => {
      const candidateTier = codecTiers[candidate];
      if (candidate === selected) {
        return selected;
      }
      if (candidateTier.minBitrate > currentBw) {
        logStartCodecCandidateIgnored(candidate, `min bitrate of ${candidateTier.minBitrate} > current estimate of ${currentBw}`);
        return selected;
      }
      if (!candidateTier.hasDefaultAudio) {
        logStartCodecCandidateIgnored(candidate, `no renditions with default or auto-select sound found`);
        return selected;
      }
      if (audioCodecPreference && candidate.indexOf(audioCodecPreference.substring(0, 4)) % 5 !== 0) {
        logStartCodecCandidateIgnored(candidate, `audio codec preference "${audioCodecPreference}" not found`);
        return selected;
      }
      if (channelsPreference && !preferStereo) {
        if (!candidateTier.channels[channelsPreference]) {
          logStartCodecCandidateIgnored(candidate, `no renditions with ${channelsPreference} channel sound found (channels options: ${Object.keys(candidateTier.channels)})`);
          return selected;
        }
      } else if ((!audioCodecPreference || preferStereo) && hasStereo && candidateTier.channels["2"] === 0) {
        logStartCodecCandidateIgnored(candidate, `no renditions with stereo sound found`);
        return selected;
      }
      if (candidateTier.minHeight > maxHeight) {
        logStartCodecCandidateIgnored(candidate, `min resolution of ${candidateTier.minHeight} > maximum of ${maxHeight}`);
        return selected;
      }
      if (candidateTier.minFramerate > maxFramerate) {
        logStartCodecCandidateIgnored(candidate, `min framerate of ${candidateTier.minFramerate} > maximum of ${maxFramerate}`);
        return selected;
      }
      if (!videoRanges.some((range) => candidateTier.videoRanges[range] > 0)) {
        logStartCodecCandidateIgnored(candidate, `no variants with VIDEO-RANGE of ${JSON.stringify(videoRanges)} found`);
        return selected;
      }
      if (candidateTier.maxScore < selectedScore) {
        logStartCodecCandidateIgnored(candidate, `max score of ${candidateTier.maxScore} < selected max of ${selectedScore}`);
        return selected;
      }
      if (selected && (codecsSetSelectionPreferenceValue(candidate) >= codecsSetSelectionPreferenceValue(selected) || candidateTier.fragmentError > codecTiers[selected].fragmentError)) {
        return selected;
      }
      selectedScore = candidateTier.maxScore;
      return candidate;
    }, void 0);
    return {
      codecSet,
      videoRanges,
      preferHDR,
      minFramerate,
      minBitrate
    };
  }
  function logStartCodecCandidateIgnored(codeSet, reason) {
    logger.log(`[abr] start candidates with "${codeSet}" ignored because ${reason}`);
  }
  function getAudioTracksByGroup(allAudioTracks) {
    return allAudioTracks.reduce((audioTracksByGroup, track) => {
      let trackGroup = audioTracksByGroup.groups[track.groupId];
      if (!trackGroup) {
        trackGroup = audioTracksByGroup.groups[track.groupId] = {
          tracks: [],
          channels: {
            2: 0
          },
          hasDefault: false,
          hasAutoSelect: false
        };
      }
      trackGroup.tracks.push(track);
      const channelsKey = track.channels || "2";
      trackGroup.channels[channelsKey] = (trackGroup.channels[channelsKey] || 0) + 1;
      trackGroup.hasDefault = trackGroup.hasDefault || track.default;
      trackGroup.hasAutoSelect = trackGroup.hasAutoSelect || track.autoselect;
      if (trackGroup.hasDefault) {
        audioTracksByGroup.hasDefaultAudio = true;
      }
      if (trackGroup.hasAutoSelect) {
        audioTracksByGroup.hasAutoSelectAudio = true;
      }
      return audioTracksByGroup;
    }, {
      hasDefaultAudio: false,
      hasAutoSelectAudio: false,
      groups: {}
    });
  }
  function getCodecTiers(levels, audioTracksByGroup, minAutoLevel, maxAutoLevel) {
    return levels.slice(minAutoLevel, maxAutoLevel + 1).reduce((tiers, level) => {
      if (!level.codecSet) {
        return tiers;
      }
      const audioGroups = level.audioGroups;
      let tier = tiers[level.codecSet];
      if (!tier) {
        tiers[level.codecSet] = tier = {
          minBitrate: Infinity,
          minHeight: Infinity,
          minFramerate: Infinity,
          maxScore: 0,
          videoRanges: {
            SDR: 0
          },
          channels: {
            "2": 0
          },
          hasDefaultAudio: !audioGroups,
          fragmentError: 0
        };
      }
      tier.minBitrate = Math.min(tier.minBitrate, level.bitrate);
      const lesserWidthOrHeight = Math.min(level.height, level.width);
      tier.minHeight = Math.min(tier.minHeight, lesserWidthOrHeight);
      tier.minFramerate = Math.min(tier.minFramerate, level.frameRate);
      tier.maxScore = Math.max(tier.maxScore, level.score);
      tier.fragmentError += level.fragmentError;
      tier.videoRanges[level.videoRange] = (tier.videoRanges[level.videoRange] || 0) + 1;
      if (audioGroups) {
        audioGroups.forEach((audioGroupId) => {
          if (!audioGroupId) {
            return;
          }
          const audioGroup = audioTracksByGroup.groups[audioGroupId];
          if (!audioGroup) {
            return;
          }
          tier.hasDefaultAudio = tier.hasDefaultAudio || audioTracksByGroup.hasDefaultAudio ? audioGroup.hasDefault : audioGroup.hasAutoSelect || !audioTracksByGroup.hasDefaultAudio && !audioTracksByGroup.hasAutoSelectAudio;
          Object.keys(audioGroup.channels).forEach((channels) => {
            tier.channels[channels] = (tier.channels[channels] || 0) + audioGroup.channels[channels];
          });
        });
      }
      return tiers;
    }, {});
  }
  function findMatchingOption(option, tracks, matchPredicate) {
    if ("attrs" in option) {
      const index = tracks.indexOf(option);
      if (index !== -1) {
        return index;
      }
    }
    for (let i = 0; i < tracks.length; i++) {
      const track = tracks[i];
      if (matchesOption(option, track, matchPredicate)) {
        return i;
      }
    }
    return -1;
  }
  function matchesOption(option, track, matchPredicate) {
    const {
      groupId,
      name,
      lang,
      assocLang,
      characteristics,
      default: isDefault
    } = option;
    const forced = option.forced;
    return (groupId === void 0 || track.groupId === groupId) && (name === void 0 || track.name === name) && (lang === void 0 || track.lang === lang) && (lang === void 0 || track.assocLang === assocLang) && (isDefault === void 0 || track.default === isDefault) && (forced === void 0 || track.forced === forced) && (characteristics === void 0 || characteristicsMatch(characteristics, track.characteristics)) && (matchPredicate === void 0 || matchPredicate(option, track));
  }
  function characteristicsMatch(characteristicsA, characteristicsB = "") {
    const arrA = characteristicsA.split(",");
    const arrB = characteristicsB.split(",");
    return arrA.length === arrB.length && !arrA.some((el) => arrB.indexOf(el) === -1);
  }
  function audioMatchPredicate(option, track) {
    const {
      audioCodec,
      channels
    } = option;
    return (audioCodec === void 0 || (track.audioCodec || "").substring(0, 4) === audioCodec.substring(0, 4)) && (channels === void 0 || channels === (track.channels || "2"));
  }
  function findClosestLevelWithAudioGroup(option, levels, allAudioTracks, searchIndex, matchPredicate) {
    const currentLevel = levels[searchIndex];
    const variants = levels.reduce((variantMap, level, index) => {
      const uri = level.uri;
      const renditions2 = variantMap[uri] || (variantMap[uri] = []);
      renditions2.push(index);
      return variantMap;
    }, {});
    const renditions = variants[currentLevel.uri];
    if (renditions.length > 1) {
      searchIndex = Math.max.apply(Math, renditions);
    }
    const currentVideoRange = currentLevel.videoRange;
    const currentFrameRate = currentLevel.frameRate;
    const currentVideoCodec = currentLevel.codecSet.substring(0, 4);
    const matchingVideo = searchDownAndUpList(levels, searchIndex, (level) => {
      if (level.videoRange !== currentVideoRange || level.frameRate !== currentFrameRate || level.codecSet.substring(0, 4) !== currentVideoCodec) {
        return false;
      }
      const audioGroups = level.audioGroups;
      const tracks = allAudioTracks.filter((track) => !audioGroups || audioGroups.indexOf(track.groupId) !== -1);
      return findMatchingOption(option, tracks, matchPredicate) > -1;
    });
    if (matchingVideo > -1) {
      return matchingVideo;
    }
    return searchDownAndUpList(levels, searchIndex, (level) => {
      const audioGroups = level.audioGroups;
      const tracks = allAudioTracks.filter((track) => !audioGroups || audioGroups.indexOf(track.groupId) !== -1);
      return findMatchingOption(option, tracks, matchPredicate) > -1;
    });
  }
  function searchDownAndUpList(arr, searchIndex, predicate) {
    for (let i = searchIndex; i > -1; i--) {
      if (predicate(arr[i])) {
        return i;
      }
    }
    for (let i = searchIndex + 1; i < arr.length; i++) {
      if (predicate(arr[i])) {
        return i;
      }
    }
    return -1;
  }
  var AbrController = class {
    constructor(_hls) {
      this.hls = void 0;
      this.lastLevelLoadSec = 0;
      this.lastLoadedFragLevel = -1;
      this.firstSelection = -1;
      this._nextAutoLevel = -1;
      this.nextAutoLevelKey = "";
      this.audioTracksByGroup = null;
      this.codecTiers = null;
      this.timer = -1;
      this.fragCurrent = null;
      this.partCurrent = null;
      this.bitrateTestDelay = 0;
      this.bwEstimator = void 0;
      this._abandonRulesCheck = () => {
        const {
          fragCurrent: frag,
          partCurrent: part,
          hls
        } = this;
        const {
          autoLevelEnabled,
          media
        } = hls;
        if (!frag || !media) {
          return;
        }
        const now2 = performance.now();
        const stats = part ? part.stats : frag.stats;
        const duration = part ? part.duration : frag.duration;
        const timeLoading = now2 - stats.loading.start;
        const minAutoLevel = hls.minAutoLevel;
        if (stats.aborted || stats.loaded && stats.loaded === stats.total || frag.level <= minAutoLevel) {
          this.clearTimer();
          this._nextAutoLevel = -1;
          return;
        }
        if (!autoLevelEnabled || media.paused || !media.playbackRate || !media.readyState) {
          return;
        }
        const bufferInfo = hls.mainForwardBufferInfo;
        if (bufferInfo === null) {
          return;
        }
        const ttfbEstimate = this.bwEstimator.getEstimateTTFB();
        const playbackRate = Math.abs(media.playbackRate);
        if (timeLoading <= Math.max(ttfbEstimate, 1e3 * (duration / (playbackRate * 2)))) {
          return;
        }
        const bufferStarvationDelay = bufferInfo.len / playbackRate;
        const ttfb = stats.loading.first ? stats.loading.first - stats.loading.start : -1;
        const loadedFirstByte = stats.loaded && ttfb > -1;
        const bwEstimate = this.getBwEstimate();
        const levels = hls.levels;
        const level = levels[frag.level];
        const expectedLen = stats.total || Math.max(stats.loaded, Math.round(duration * level.averageBitrate / 8));
        let timeStreaming = loadedFirstByte ? timeLoading - ttfb : timeLoading;
        if (timeStreaming < 1 && loadedFirstByte) {
          timeStreaming = Math.min(timeLoading, stats.loaded * 8 / bwEstimate);
        }
        const loadRate = loadedFirstByte ? stats.loaded * 1e3 / timeStreaming : 0;
        const fragLoadedDelay = loadRate ? (expectedLen - stats.loaded) / loadRate : expectedLen * 8 / bwEstimate + ttfbEstimate / 1e3;
        if (fragLoadedDelay <= bufferStarvationDelay) {
          return;
        }
        const bwe = loadRate ? loadRate * 8 : bwEstimate;
        let fragLevelNextLoadedDelay = Number.POSITIVE_INFINITY;
        let nextLoadLevel;
        for (nextLoadLevel = frag.level - 1; nextLoadLevel > minAutoLevel; nextLoadLevel--) {
          const levelNextBitrate = levels[nextLoadLevel].maxBitrate;
          fragLevelNextLoadedDelay = this.getTimeToLoadFrag(ttfbEstimate / 1e3, bwe, duration * levelNextBitrate, !levels[nextLoadLevel].details);
          if (fragLevelNextLoadedDelay < bufferStarvationDelay) {
            break;
          }
        }
        if (fragLevelNextLoadedDelay >= fragLoadedDelay) {
          return;
        }
        if (fragLevelNextLoadedDelay > duration * 10) {
          return;
        }
        hls.nextLoadLevel = hls.nextAutoLevel = nextLoadLevel;
        if (loadedFirstByte) {
          this.bwEstimator.sample(timeLoading - Math.min(ttfbEstimate, ttfb), stats.loaded);
        } else {
          this.bwEstimator.sampleTTFB(timeLoading);
        }
        const nextLoadLevelBitrate = levels[nextLoadLevel].maxBitrate;
        if (this.getBwEstimate() * this.hls.config.abrBandWidthUpFactor > nextLoadLevelBitrate) {
          this.resetEstimator(nextLoadLevelBitrate);
        }
        this.clearTimer();
        logger.warn(`[abr] Fragment ${frag.sn}${part ? " part " + part.index : ""} of level ${frag.level} is loading too slowly;
      Time to underbuffer: ${bufferStarvationDelay.toFixed(3)} s
      Estimated load time for current fragment: ${fragLoadedDelay.toFixed(3)} s
      Estimated load time for down switch fragment: ${fragLevelNextLoadedDelay.toFixed(3)} s
      TTFB estimate: ${ttfb | 0} ms
      Current BW estimate: ${isFiniteNumber(bwEstimate) ? bwEstimate | 0 : "Unknown"} bps
      New BW estimate: ${this.getBwEstimate() | 0} bps
      Switching to level ${nextLoadLevel} @ ${nextLoadLevelBitrate | 0} bps`);
        hls.trigger(Events2.FRAG_LOAD_EMERGENCY_ABORTED, {
          frag,
          part,
          stats
        });
      };
      this.hls = _hls;
      this.bwEstimator = this.initEstimator();
      this.registerListeners();
    }
    resetEstimator(abrEwmaDefaultEstimate) {
      if (abrEwmaDefaultEstimate) {
        logger.log(`setting initial bwe to ${abrEwmaDefaultEstimate}`);
        this.hls.config.abrEwmaDefaultEstimate = abrEwmaDefaultEstimate;
      }
      this.firstSelection = -1;
      this.bwEstimator = this.initEstimator();
    }
    initEstimator() {
      const config = this.hls.config;
      return new EwmaBandWidthEstimator(config.abrEwmaSlowVoD, config.abrEwmaFastVoD, config.abrEwmaDefaultEstimate);
    }
    registerListeners() {
      const {
        hls
      } = this;
      hls.on(Events2.MANIFEST_LOADING, this.onManifestLoading, this);
      hls.on(Events2.FRAG_LOADING, this.onFragLoading, this);
      hls.on(Events2.FRAG_LOADED, this.onFragLoaded, this);
      hls.on(Events2.FRAG_BUFFERED, this.onFragBuffered, this);
      hls.on(Events2.LEVEL_SWITCHING, this.onLevelSwitching, this);
      hls.on(Events2.LEVEL_LOADED, this.onLevelLoaded, this);
      hls.on(Events2.LEVELS_UPDATED, this.onLevelsUpdated, this);
      hls.on(Events2.MAX_AUTO_LEVEL_UPDATED, this.onMaxAutoLevelUpdated, this);
      hls.on(Events2.ERROR, this.onError, this);
    }
    unregisterListeners() {
      const {
        hls
      } = this;
      if (!hls) {
        return;
      }
      hls.off(Events2.MANIFEST_LOADING, this.onManifestLoading, this);
      hls.off(Events2.FRAG_LOADING, this.onFragLoading, this);
      hls.off(Events2.FRAG_LOADED, this.onFragLoaded, this);
      hls.off(Events2.FRAG_BUFFERED, this.onFragBuffered, this);
      hls.off(Events2.LEVEL_SWITCHING, this.onLevelSwitching, this);
      hls.off(Events2.LEVEL_LOADED, this.onLevelLoaded, this);
      hls.off(Events2.LEVELS_UPDATED, this.onLevelsUpdated, this);
      hls.off(Events2.MAX_AUTO_LEVEL_UPDATED, this.onMaxAutoLevelUpdated, this);
      hls.off(Events2.ERROR, this.onError, this);
    }
    destroy() {
      this.unregisterListeners();
      this.clearTimer();
      this.hls = this._abandonRulesCheck = null;
      this.fragCurrent = this.partCurrent = null;
    }
    onManifestLoading(event, data) {
      this.lastLoadedFragLevel = -1;
      this.firstSelection = -1;
      this.lastLevelLoadSec = 0;
      this.fragCurrent = this.partCurrent = null;
      this.onLevelsUpdated();
      this.clearTimer();
    }
    onLevelsUpdated() {
      if (this.lastLoadedFragLevel > -1 && this.fragCurrent) {
        this.lastLoadedFragLevel = this.fragCurrent.level;
      }
      this._nextAutoLevel = -1;
      this.onMaxAutoLevelUpdated();
      this.codecTiers = null;
      this.audioTracksByGroup = null;
    }
    onMaxAutoLevelUpdated() {
      this.firstSelection = -1;
      this.nextAutoLevelKey = "";
    }
    onFragLoading(event, data) {
      const frag = data.frag;
      if (this.ignoreFragment(frag)) {
        return;
      }
      if (!frag.bitrateTest) {
        var _data$part;
        this.fragCurrent = frag;
        this.partCurrent = (_data$part = data.part) != null ? _data$part : null;
      }
      this.clearTimer();
      this.timer = self.setInterval(this._abandonRulesCheck, 100);
    }
    onLevelSwitching(event, data) {
      this.clearTimer();
    }
    onError(event, data) {
      if (data.fatal) {
        return;
      }
      switch (data.details) {
        case ErrorDetails.BUFFER_ADD_CODEC_ERROR:
        case ErrorDetails.BUFFER_APPEND_ERROR:
          this.lastLoadedFragLevel = -1;
          this.firstSelection = -1;
          break;
        case ErrorDetails.FRAG_LOAD_TIMEOUT: {
          const frag = data.frag;
          const {
            fragCurrent,
            partCurrent: part
          } = this;
          if (frag && fragCurrent && frag.sn === fragCurrent.sn && frag.level === fragCurrent.level) {
            const now2 = performance.now();
            const stats = part ? part.stats : frag.stats;
            const timeLoading = now2 - stats.loading.start;
            const ttfb = stats.loading.first ? stats.loading.first - stats.loading.start : -1;
            const loadedFirstByte = stats.loaded && ttfb > -1;
            if (loadedFirstByte) {
              const ttfbEstimate = this.bwEstimator.getEstimateTTFB();
              this.bwEstimator.sample(timeLoading - Math.min(ttfbEstimate, ttfb), stats.loaded);
            } else {
              this.bwEstimator.sampleTTFB(timeLoading);
            }
          }
          break;
        }
      }
    }
    getTimeToLoadFrag(timeToFirstByteSec, bandwidth, fragSizeBits, isSwitch) {
      const fragLoadSec = timeToFirstByteSec + fragSizeBits / bandwidth;
      const playlistLoadSec = isSwitch ? this.lastLevelLoadSec : 0;
      return fragLoadSec + playlistLoadSec;
    }
    onLevelLoaded(event, data) {
      const config = this.hls.config;
      const {
        loading
      } = data.stats;
      const timeLoadingMs = loading.end - loading.start;
      if (isFiniteNumber(timeLoadingMs)) {
        this.lastLevelLoadSec = timeLoadingMs / 1e3;
      }
      if (data.details.live) {
        this.bwEstimator.update(config.abrEwmaSlowLive, config.abrEwmaFastLive);
      } else {
        this.bwEstimator.update(config.abrEwmaSlowVoD, config.abrEwmaFastVoD);
      }
    }
    onFragLoaded(event, {
      frag,
      part
    }) {
      const stats = part ? part.stats : frag.stats;
      if (frag.type === PlaylistLevelType.MAIN) {
        this.bwEstimator.sampleTTFB(stats.loading.first - stats.loading.start);
      }
      if (this.ignoreFragment(frag)) {
        return;
      }
      this.clearTimer();
      if (frag.level === this._nextAutoLevel) {
        this._nextAutoLevel = -1;
      }
      this.firstSelection = -1;
      if (this.hls.config.abrMaxWithRealBitrate) {
        const duration = part ? part.duration : frag.duration;
        const level = this.hls.levels[frag.level];
        const loadedBytes = (level.loaded ? level.loaded.bytes : 0) + stats.loaded;
        const loadedDuration = (level.loaded ? level.loaded.duration : 0) + duration;
        level.loaded = {
          bytes: loadedBytes,
          duration: loadedDuration
        };
        level.realBitrate = Math.round(8 * loadedBytes / loadedDuration);
      }
      if (frag.bitrateTest) {
        const fragBufferedData = {
          stats,
          frag,
          part,
          id: frag.type
        };
        this.onFragBuffered(Events2.FRAG_BUFFERED, fragBufferedData);
        frag.bitrateTest = false;
      } else {
        this.lastLoadedFragLevel = frag.level;
      }
    }
    onFragBuffered(event, data) {
      const {
        frag,
        part
      } = data;
      const stats = part != null && part.stats.loaded ? part.stats : frag.stats;
      if (stats.aborted) {
        return;
      }
      if (this.ignoreFragment(frag)) {
        return;
      }
      const processingMs = stats.parsing.end - stats.loading.start - Math.min(stats.loading.first - stats.loading.start, this.bwEstimator.getEstimateTTFB());
      this.bwEstimator.sample(processingMs, stats.loaded);
      stats.bwEstimate = this.getBwEstimate();
      if (frag.bitrateTest) {
        this.bitrateTestDelay = processingMs / 1e3;
      } else {
        this.bitrateTestDelay = 0;
      }
    }
    ignoreFragment(frag) {
      return frag.type !== PlaylistLevelType.MAIN || frag.sn === "initSegment";
    }
    clearTimer() {
      if (this.timer > -1) {
        self.clearInterval(this.timer);
        this.timer = -1;
      }
    }
    get firstAutoLevel() {
      const {
        maxAutoLevel,
        minAutoLevel
      } = this.hls;
      const bwEstimate = this.getBwEstimate();
      const maxStartDelay = this.hls.config.maxStarvationDelay;
      const abrAutoLevel = this.findBestLevel(bwEstimate, minAutoLevel, maxAutoLevel, 0, maxStartDelay, 1, 1);
      if (abrAutoLevel > -1) {
        return abrAutoLevel;
      }
      const firstLevel = this.hls.firstLevel;
      const clamped = Math.min(Math.max(firstLevel, minAutoLevel), maxAutoLevel);
      logger.warn(`[abr] Could not find best starting auto level. Defaulting to first in playlist ${firstLevel} clamped to ${clamped}`);
      return clamped;
    }
    get forcedAutoLevel() {
      if (this.nextAutoLevelKey) {
        return -1;
      }
      return this._nextAutoLevel;
    }
    // return next auto level
    get nextAutoLevel() {
      const forcedAutoLevel = this.forcedAutoLevel;
      const bwEstimator = this.bwEstimator;
      const useEstimate = bwEstimator.canEstimate();
      const loadedFirstFrag = this.lastLoadedFragLevel > -1;
      if (forcedAutoLevel !== -1 && (!useEstimate || !loadedFirstFrag || this.nextAutoLevelKey === this.getAutoLevelKey())) {
        return forcedAutoLevel;
      }
      const nextABRAutoLevel = useEstimate && loadedFirstFrag ? this.getNextABRAutoLevel() : this.firstAutoLevel;
      if (forcedAutoLevel !== -1) {
        const levels = this.hls.levels;
        if (levels.length > Math.max(forcedAutoLevel, nextABRAutoLevel) && levels[forcedAutoLevel].loadError <= levels[nextABRAutoLevel].loadError) {
          return forcedAutoLevel;
        }
      }
      this._nextAutoLevel = nextABRAutoLevel;
      this.nextAutoLevelKey = this.getAutoLevelKey();
      return nextABRAutoLevel;
    }
    getAutoLevelKey() {
      return `${this.getBwEstimate()}_${this.getStarvationDelay().toFixed(2)}`;
    }
    getNextABRAutoLevel() {
      const {
        fragCurrent,
        partCurrent,
        hls
      } = this;
      const {
        maxAutoLevel,
        config,
        minAutoLevel
      } = hls;
      const currentFragDuration = partCurrent ? partCurrent.duration : fragCurrent ? fragCurrent.duration : 0;
      const avgbw = this.getBwEstimate();
      const bufferStarvationDelay = this.getStarvationDelay();
      let bwFactor = config.abrBandWidthFactor;
      let bwUpFactor = config.abrBandWidthUpFactor;
      if (bufferStarvationDelay) {
        const _bestLevel = this.findBestLevel(avgbw, minAutoLevel, maxAutoLevel, bufferStarvationDelay, 0, bwFactor, bwUpFactor);
        if (_bestLevel >= 0) {
          return _bestLevel;
        }
      }
      let maxStarvationDelay = currentFragDuration ? Math.min(currentFragDuration, config.maxStarvationDelay) : config.maxStarvationDelay;
      if (!bufferStarvationDelay) {
        const bitrateTestDelay = this.bitrateTestDelay;
        if (bitrateTestDelay) {
          const maxLoadingDelay = currentFragDuration ? Math.min(currentFragDuration, config.maxLoadingDelay) : config.maxLoadingDelay;
          maxStarvationDelay = maxLoadingDelay - bitrateTestDelay;
          logger.info(`[abr] bitrate test took ${Math.round(1e3 * bitrateTestDelay)}ms, set first fragment max fetchDuration to ${Math.round(1e3 * maxStarvationDelay)} ms`);
          bwFactor = bwUpFactor = 1;
        }
      }
      const bestLevel = this.findBestLevel(avgbw, minAutoLevel, maxAutoLevel, bufferStarvationDelay, maxStarvationDelay, bwFactor, bwUpFactor);
      logger.info(`[abr] ${bufferStarvationDelay ? "rebuffering expected" : "buffer is empty"}, optimal quality level ${bestLevel}`);
      if (bestLevel > -1) {
        return bestLevel;
      }
      const minLevel = hls.levels[minAutoLevel];
      const autoLevel = hls.levels[hls.loadLevel];
      if ((minLevel == null ? void 0 : minLevel.bitrate) < (autoLevel == null ? void 0 : autoLevel.bitrate)) {
        return minAutoLevel;
      }
      return hls.loadLevel;
    }
    getStarvationDelay() {
      const hls = this.hls;
      const media = hls.media;
      if (!media) {
        return Infinity;
      }
      const playbackRate = media && media.playbackRate !== 0 ? Math.abs(media.playbackRate) : 1;
      const bufferInfo = hls.mainForwardBufferInfo;
      return (bufferInfo ? bufferInfo.len : 0) / playbackRate;
    }
    getBwEstimate() {
      return this.bwEstimator.canEstimate() ? this.bwEstimator.getEstimate() : this.hls.config.abrEwmaDefaultEstimate;
    }
    findBestLevel(currentBw, minAutoLevel, maxAutoLevel, bufferStarvationDelay, maxStarvationDelay, bwFactor, bwUpFactor) {
      var _level$details;
      const maxFetchDuration = bufferStarvationDelay + maxStarvationDelay;
      const lastLoadedFragLevel = this.lastLoadedFragLevel;
      const selectionBaseLevel = lastLoadedFragLevel === -1 ? this.hls.firstLevel : lastLoadedFragLevel;
      const {
        fragCurrent,
        partCurrent
      } = this;
      const {
        levels,
        allAudioTracks,
        loadLevel,
        config
      } = this.hls;
      if (levels.length === 1) {
        return 0;
      }
      const level = levels[selectionBaseLevel];
      const live = !!(level != null && (_level$details = level.details) != null && _level$details.live);
      const firstSelection = loadLevel === -1 || lastLoadedFragLevel === -1;
      let currentCodecSet;
      let currentVideoRange = "SDR";
      let currentFrameRate = (level == null ? void 0 : level.frameRate) || 0;
      const {
        audioPreference,
        videoPreference
      } = config;
      const audioTracksByGroup = this.audioTracksByGroup || (this.audioTracksByGroup = getAudioTracksByGroup(allAudioTracks));
      if (firstSelection) {
        if (this.firstSelection !== -1) {
          return this.firstSelection;
        }
        const codecTiers = this.codecTiers || (this.codecTiers = getCodecTiers(levels, audioTracksByGroup, minAutoLevel, maxAutoLevel));
        const startTier = getStartCodecTier(codecTiers, currentVideoRange, currentBw, audioPreference, videoPreference);
        const {
          codecSet,
          videoRanges,
          minFramerate,
          minBitrate,
          preferHDR
        } = startTier;
        currentCodecSet = codecSet;
        currentVideoRange = preferHDR ? videoRanges[videoRanges.length - 1] : videoRanges[0];
        currentFrameRate = minFramerate;
        currentBw = Math.max(currentBw, minBitrate);
        logger.log(`[abr] picked start tier ${JSON.stringify(startTier)}`);
      } else {
        currentCodecSet = level == null ? void 0 : level.codecSet;
        currentVideoRange = level == null ? void 0 : level.videoRange;
      }
      const currentFragDuration = partCurrent ? partCurrent.duration : fragCurrent ? fragCurrent.duration : 0;
      const ttfbEstimateSec = this.bwEstimator.getEstimateTTFB() / 1e3;
      const levelsSkipped = [];
      for (let i = maxAutoLevel; i >= minAutoLevel; i--) {
        var _levelInfo$supportedR;
        const levelInfo = levels[i];
        const upSwitch = i > selectionBaseLevel;
        if (!levelInfo) {
          continue;
        }
        if (config.useMediaCapabilities && !levelInfo.supportedResult && !levelInfo.supportedPromise) {
          const mediaCapabilities = navigator.mediaCapabilities;
          if (typeof (mediaCapabilities == null ? void 0 : mediaCapabilities.decodingInfo) === "function" && requiresMediaCapabilitiesDecodingInfo(levelInfo, audioTracksByGroup, currentVideoRange, currentFrameRate, currentBw, audioPreference)) {
            levelInfo.supportedPromise = getMediaDecodingInfoPromise(levelInfo, audioTracksByGroup, mediaCapabilities);
            levelInfo.supportedPromise.then((decodingInfo) => {
              if (!this.hls) {
                return;
              }
              levelInfo.supportedResult = decodingInfo;
              const levels2 = this.hls.levels;
              const index = levels2.indexOf(levelInfo);
              if (decodingInfo.error) {
                logger.warn(`[abr] MediaCapabilities decodingInfo error: "${decodingInfo.error}" for level ${index} ${JSON.stringify(decodingInfo)}`);
              } else if (!decodingInfo.supported) {
                logger.warn(`[abr] Unsupported MediaCapabilities decodingInfo result for level ${index} ${JSON.stringify(decodingInfo)}`);
                if (index > -1 && levels2.length > 1) {
                  logger.log(`[abr] Removing unsupported level ${index}`);
                  this.hls.removeLevel(index);
                }
              }
            });
          } else {
            levelInfo.supportedResult = SUPPORTED_INFO_DEFAULT;
          }
        }
        if (currentCodecSet && levelInfo.codecSet !== currentCodecSet || currentVideoRange && levelInfo.videoRange !== currentVideoRange || upSwitch && currentFrameRate > levelInfo.frameRate || !upSwitch && currentFrameRate > 0 && currentFrameRate < levelInfo.frameRate || levelInfo.supportedResult && !((_levelInfo$supportedR = levelInfo.supportedResult.decodingInfoResults) != null && _levelInfo$supportedR[0].smooth)) {
          levelsSkipped.push(i);
          continue;
        }
        const levelDetails = levelInfo.details;
        const avgDuration = (partCurrent ? levelDetails == null ? void 0 : levelDetails.partTarget : levelDetails == null ? void 0 : levelDetails.averagetargetduration) || currentFragDuration;
        let adjustedbw;
        if (!upSwitch) {
          adjustedbw = bwFactor * currentBw;
        } else {
          adjustedbw = bwUpFactor * currentBw;
        }
        const bitrate = currentFragDuration && bufferStarvationDelay >= currentFragDuration * 2 && maxStarvationDelay === 0 ? levels[i].averageBitrate : levels[i].maxBitrate;
        const fetchDuration = this.getTimeToLoadFrag(ttfbEstimateSec, adjustedbw, bitrate * avgDuration, levelDetails === void 0);
        const canSwitchWithinTolerance = (
          // if adjusted bw is greater than level bitrate AND
          adjustedbw >= bitrate && // no level change, or new level has no error history
          (i === lastLoadedFragLevel || levelInfo.loadError === 0 && levelInfo.fragmentError === 0) && // fragment fetchDuration unknown OR live stream OR fragment fetchDuration less than max allowed fetch duration, then this level matches
          // we don't account for max Fetch Duration for live streams, this is to avoid switching down when near the edge of live sliding window ...
          // special case to support startLevel = -1 (bitrateTest) on live streams : in that case we should not exit loop so that findBestLevel will return -1
          (fetchDuration <= ttfbEstimateSec || !isFiniteNumber(fetchDuration) || live && !this.bitrateTestDelay || fetchDuration < maxFetchDuration)
        );
        if (canSwitchWithinTolerance) {
          const forcedAutoLevel = this.forcedAutoLevel;
          if (i !== loadLevel && (forcedAutoLevel === -1 || forcedAutoLevel !== loadLevel)) {
            if (levelsSkipped.length) {
              logger.trace(`[abr] Skipped level(s) ${levelsSkipped.join(",")} of ${maxAutoLevel} max with CODECS and VIDEO-RANGE:"${levels[levelsSkipped[0]].codecs}" ${levels[levelsSkipped[0]].videoRange}; not compatible with "${level.codecs}" ${currentVideoRange}`);
            }
            logger.info(`[abr] switch candidate:${selectionBaseLevel}->${i} adjustedbw(${Math.round(adjustedbw)})-bitrate=${Math.round(adjustedbw - bitrate)} ttfb:${ttfbEstimateSec.toFixed(1)} avgDuration:${avgDuration.toFixed(1)} maxFetchDuration:${maxFetchDuration.toFixed(1)} fetchDuration:${fetchDuration.toFixed(1)} firstSelection:${firstSelection} codecSet:${currentCodecSet} videoRange:${currentVideoRange} hls.loadLevel:${loadLevel}`);
          }
          if (firstSelection) {
            this.firstSelection = i;
          }
          return i;
        }
      }
      return -1;
    }
    set nextAutoLevel(nextLevel) {
      const {
        maxAutoLevel,
        minAutoLevel
      } = this.hls;
      const value = Math.min(Math.max(nextLevel, minAutoLevel), maxAutoLevel);
      if (this._nextAutoLevel !== value) {
        this.nextAutoLevelKey = "";
        this._nextAutoLevel = value;
      }
    }
  };
  var TaskLoop = class {
    constructor() {
      this._boundTick = void 0;
      this._tickTimer = null;
      this._tickInterval = null;
      this._tickCallCount = 0;
      this._boundTick = this.tick.bind(this);
    }
    destroy() {
      this.onHandlerDestroying();
      this.onHandlerDestroyed();
    }
    onHandlerDestroying() {
      this.clearNextTick();
      this.clearInterval();
    }
    onHandlerDestroyed() {
    }
    hasInterval() {
      return !!this._tickInterval;
    }
    hasNextTick() {
      return !!this._tickTimer;
    }
    /**
     * @param millis - Interval time (ms)
     * @eturns True when interval has been scheduled, false when already scheduled (no effect)
     */
    setInterval(millis) {
      if (!this._tickInterval) {
        this._tickCallCount = 0;
        this._tickInterval = self.setInterval(this._boundTick, millis);
        return true;
      }
      return false;
    }
    /**
     * @returns True when interval was cleared, false when none was set (no effect)
     */
    clearInterval() {
      if (this._tickInterval) {
        self.clearInterval(this._tickInterval);
        this._tickInterval = null;
        return true;
      }
      return false;
    }
    /**
     * @returns True when timeout was cleared, false when none was set (no effect)
     */
    clearNextTick() {
      if (this._tickTimer) {
        self.clearTimeout(this._tickTimer);
        this._tickTimer = null;
        return true;
      }
      return false;
    }
    /**
     * Will call the subclass doTick implementation in this main loop tick
     * or in the next one (via setTimeout(,0)) in case it has already been called
     * in this tick (in case this is a re-entrant call).
     */
    tick() {
      this._tickCallCount++;
      if (this._tickCallCount === 1) {
        this.doTick();
        if (this._tickCallCount > 1) {
          this.tickImmediate();
        }
        this._tickCallCount = 0;
      }
    }
    tickImmediate() {
      this.clearNextTick();
      this._tickTimer = self.setTimeout(this._boundTick, 0);
    }
    /**
     * For subclass to implement task logic
     * @abstract
     */
    doTick() {
    }
  };
  var FragmentState = {
    NOT_LOADED: "NOT_LOADED",
    APPENDING: "APPENDING",
    PARTIAL: "PARTIAL",
    OK: "OK"
  };
  var FragmentTracker = class {
    constructor(hls) {
      this.activePartLists = /* @__PURE__ */ Object.create(null);
      this.endListFragments = /* @__PURE__ */ Object.create(null);
      this.fragments = /* @__PURE__ */ Object.create(null);
      this.timeRanges = /* @__PURE__ */ Object.create(null);
      this.bufferPadding = 0.2;
      this.hls = void 0;
      this.hasGaps = false;
      this.hls = hls;
      this._registerListeners();
    }
    _registerListeners() {
      const {
        hls
      } = this;
      hls.on(Events2.BUFFER_APPENDED, this.onBufferAppended, this);
      hls.on(Events2.FRAG_BUFFERED, this.onFragBuffered, this);
      hls.on(Events2.FRAG_LOADED, this.onFragLoaded, this);
    }
    _unregisterListeners() {
      const {
        hls
      } = this;
      hls.off(Events2.BUFFER_APPENDED, this.onBufferAppended, this);
      hls.off(Events2.FRAG_BUFFERED, this.onFragBuffered, this);
      hls.off(Events2.FRAG_LOADED, this.onFragLoaded, this);
    }
    destroy() {
      this._unregisterListeners();
      this.fragments = // @ts-ignore
      this.activePartLists = // @ts-ignore
      this.endListFragments = this.timeRanges = null;
    }
    /**
     * Return a Fragment or Part with an appended range that matches the position and levelType
     * Otherwise, return null
     */
    getAppendedFrag(position, levelType) {
      const activeParts = this.activePartLists[levelType];
      if (activeParts) {
        for (let i = activeParts.length; i--; ) {
          const activePart = activeParts[i];
          if (!activePart) {
            break;
          }
          const appendedPTS = activePart.end;
          if (activePart.start <= position && appendedPTS !== null && position <= appendedPTS) {
            return activePart;
          }
        }
      }
      return this.getBufferedFrag(position, levelType);
    }
    /**
     * Return a buffered Fragment that matches the position and levelType.
     * A buffered Fragment is one whose loading, parsing and appending is done (completed or "partial" meaning aborted).
     * If not found any Fragment, return null
     */
    getBufferedFrag(position, levelType) {
      const {
        fragments
      } = this;
      const keys = Object.keys(fragments);
      for (let i = keys.length; i--; ) {
        const fragmentEntity = fragments[keys[i]];
        if ((fragmentEntity == null ? void 0 : fragmentEntity.body.type) === levelType && fragmentEntity.buffered) {
          const frag = fragmentEntity.body;
          if (frag.start <= position && position <= frag.end) {
            return frag;
          }
        }
      }
      return null;
    }
    /**
     * Partial fragments effected by coded frame eviction will be removed
     * The browser will unload parts of the buffer to free up memory for new buffer data
     * Fragments will need to be reloaded when the buffer is freed up, removing partial fragments will allow them to reload(since there might be parts that are still playable)
     */
    detectEvictedFragments(elementaryStream, timeRange, playlistType, appendedPart) {
      if (this.timeRanges) {
        this.timeRanges[elementaryStream] = timeRange;
      }
      const appendedPartSn = (appendedPart == null ? void 0 : appendedPart.fragment.sn) || -1;
      Object.keys(this.fragments).forEach((key) => {
        const fragmentEntity = this.fragments[key];
        if (!fragmentEntity) {
          return;
        }
        if (appendedPartSn >= fragmentEntity.body.sn) {
          return;
        }
        if (!fragmentEntity.buffered && !fragmentEntity.loaded) {
          if (fragmentEntity.body.type === playlistType) {
            this.removeFragment(fragmentEntity.body);
          }
          return;
        }
        const esData = fragmentEntity.range[elementaryStream];
        if (!esData) {
          return;
        }
        esData.time.some((time) => {
          const isNotBuffered = !this.isTimeBuffered(time.startPTS, time.endPTS, timeRange);
          if (isNotBuffered) {
            this.removeFragment(fragmentEntity.body);
          }
          return isNotBuffered;
        });
      });
    }
    /**
     * Checks if the fragment passed in is loaded in the buffer properly
     * Partially loaded fragments will be registered as a partial fragment
     */
    detectPartialFragments(data) {
      const timeRanges = this.timeRanges;
      const {
        frag,
        part
      } = data;
      if (!timeRanges || frag.sn === "initSegment") {
        return;
      }
      const fragKey = getFragmentKey(frag);
      const fragmentEntity = this.fragments[fragKey];
      if (!fragmentEntity || fragmentEntity.buffered && frag.gap) {
        return;
      }
      const isFragHint = !frag.relurl;
      Object.keys(timeRanges).forEach((elementaryStream) => {
        const streamInfo = frag.elementaryStreams[elementaryStream];
        if (!streamInfo) {
          return;
        }
        const timeRange = timeRanges[elementaryStream];
        const partial = isFragHint || streamInfo.partial === true;
        fragmentEntity.range[elementaryStream] = this.getBufferedTimes(frag, part, partial, timeRange);
      });
      fragmentEntity.loaded = null;
      if (Object.keys(fragmentEntity.range).length) {
        fragmentEntity.buffered = true;
        const endList = fragmentEntity.body.endList = frag.endList || fragmentEntity.body.endList;
        if (endList) {
          this.endListFragments[fragmentEntity.body.type] = fragmentEntity;
        }
        if (!isPartial(fragmentEntity)) {
          this.removeParts(frag.sn - 1, frag.type);
        }
      } else {
        this.removeFragment(fragmentEntity.body);
      }
    }
    removeParts(snToKeep, levelType) {
      const activeParts = this.activePartLists[levelType];
      if (!activeParts) {
        return;
      }
      this.activePartLists[levelType] = activeParts.filter((part) => part.fragment.sn >= snToKeep);
    }
    fragBuffered(frag, force) {
      const fragKey = getFragmentKey(frag);
      let fragmentEntity = this.fragments[fragKey];
      if (!fragmentEntity && force) {
        fragmentEntity = this.fragments[fragKey] = {
          body: frag,
          appendedPTS: null,
          loaded: null,
          buffered: false,
          range: /* @__PURE__ */ Object.create(null)
        };
        if (frag.gap) {
          this.hasGaps = true;
        }
      }
      if (fragmentEntity) {
        fragmentEntity.loaded = null;
        fragmentEntity.buffered = true;
      }
    }
    getBufferedTimes(fragment, part, partial, timeRange) {
      const buffered = {
        time: [],
        partial
      };
      const startPTS = fragment.start;
      const endPTS = fragment.end;
      const minEndPTS = fragment.minEndPTS || endPTS;
      const maxStartPTS = fragment.maxStartPTS || startPTS;
      for (let i = 0; i < timeRange.length; i++) {
        const startTime = timeRange.start(i) - this.bufferPadding;
        const endTime = timeRange.end(i) + this.bufferPadding;
        if (maxStartPTS >= startTime && minEndPTS <= endTime) {
          buffered.time.push({
            startPTS: Math.max(startPTS, timeRange.start(i)),
            endPTS: Math.min(endPTS, timeRange.end(i))
          });
          break;
        } else if (startPTS < endTime && endPTS > startTime) {
          const start = Math.max(startPTS, timeRange.start(i));
          const end = Math.min(endPTS, timeRange.end(i));
          if (end > start) {
            buffered.partial = true;
            buffered.time.push({
              startPTS: start,
              endPTS: end
            });
          }
        } else if (endPTS <= startTime) {
          break;
        }
      }
      return buffered;
    }
    /**
     * Gets the partial fragment for a certain time
     */
    getPartialFragment(time) {
      let bestFragment = null;
      let timePadding;
      let startTime;
      let endTime;
      let bestOverlap = 0;
      const {
        bufferPadding,
        fragments
      } = this;
      Object.keys(fragments).forEach((key) => {
        const fragmentEntity = fragments[key];
        if (!fragmentEntity) {
          return;
        }
        if (isPartial(fragmentEntity)) {
          startTime = fragmentEntity.body.start - bufferPadding;
          endTime = fragmentEntity.body.end + bufferPadding;
          if (time >= startTime && time <= endTime) {
            timePadding = Math.min(time - startTime, endTime - time);
            if (bestOverlap <= timePadding) {
              bestFragment = fragmentEntity.body;
              bestOverlap = timePadding;
            }
          }
        }
      });
      return bestFragment;
    }
    isEndListAppended(type) {
      const lastFragmentEntity = this.endListFragments[type];
      return lastFragmentEntity !== void 0 && (lastFragmentEntity.buffered || isPartial(lastFragmentEntity));
    }
    getState(fragment) {
      const fragKey = getFragmentKey(fragment);
      const fragmentEntity = this.fragments[fragKey];
      if (fragmentEntity) {
        if (!fragmentEntity.buffered) {
          return FragmentState.APPENDING;
        } else if (isPartial(fragmentEntity)) {
          return FragmentState.PARTIAL;
        } else {
          return FragmentState.OK;
        }
      }
      return FragmentState.NOT_LOADED;
    }
    isTimeBuffered(startPTS, endPTS, timeRange) {
      let startTime;
      let endTime;
      for (let i = 0; i < timeRange.length; i++) {
        startTime = timeRange.start(i) - this.bufferPadding;
        endTime = timeRange.end(i) + this.bufferPadding;
        if (startPTS >= startTime && endPTS <= endTime) {
          return true;
        }
        if (endPTS <= startTime) {
          return false;
        }
      }
      return false;
    }
    onFragLoaded(event, data) {
      const {
        frag,
        part
      } = data;
      if (frag.sn === "initSegment" || frag.bitrateTest) {
        return;
      }
      const loaded = part ? null : data;
      const fragKey = getFragmentKey(frag);
      this.fragments[fragKey] = {
        body: frag,
        appendedPTS: null,
        loaded,
        buffered: false,
        range: /* @__PURE__ */ Object.create(null)
      };
    }
    onBufferAppended(event, data) {
      const {
        frag,
        part,
        timeRanges
      } = data;
      if (frag.sn === "initSegment") {
        return;
      }
      const playlistType = frag.type;
      if (part) {
        let activeParts = this.activePartLists[playlistType];
        if (!activeParts) {
          this.activePartLists[playlistType] = activeParts = [];
        }
        activeParts.push(part);
      }
      this.timeRanges = timeRanges;
      Object.keys(timeRanges).forEach((elementaryStream) => {
        const timeRange = timeRanges[elementaryStream];
        this.detectEvictedFragments(elementaryStream, timeRange, playlistType, part);
      });
    }
    onFragBuffered(event, data) {
      this.detectPartialFragments(data);
    }
    hasFragment(fragment) {
      const fragKey = getFragmentKey(fragment);
      return !!this.fragments[fragKey];
    }
    hasParts(type) {
      var _this$activePartLists;
      return !!((_this$activePartLists = this.activePartLists[type]) != null && _this$activePartLists.length);
    }
    removeFragmentsInRange(start, end, playlistType, withGapOnly, unbufferedOnly) {
      if (withGapOnly && !this.hasGaps) {
        return;
      }
      Object.keys(this.fragments).forEach((key) => {
        const fragmentEntity = this.fragments[key];
        if (!fragmentEntity) {
          return;
        }
        const frag = fragmentEntity.body;
        if (frag.type !== playlistType || withGapOnly && !frag.gap) {
          return;
        }
        if (frag.start < end && frag.end > start && (fragmentEntity.buffered || unbufferedOnly)) {
          this.removeFragment(frag);
        }
      });
    }
    removeFragment(fragment) {
      const fragKey = getFragmentKey(fragment);
      fragment.stats.loaded = 0;
      fragment.clearElementaryStreamInfo();
      const activeParts = this.activePartLists[fragment.type];
      if (activeParts) {
        const snToRemove = fragment.sn;
        this.activePartLists[fragment.type] = activeParts.filter((part) => part.fragment.sn !== snToRemove);
      }
      delete this.fragments[fragKey];
      if (fragment.endList) {
        delete this.endListFragments[fragment.type];
      }
    }
    removeAllFragments() {
      this.fragments = /* @__PURE__ */ Object.create(null);
      this.endListFragments = /* @__PURE__ */ Object.create(null);
      this.activePartLists = /* @__PURE__ */ Object.create(null);
      this.hasGaps = false;
    }
  };
  function isPartial(fragmentEntity) {
    var _fragmentEntity$range, _fragmentEntity$range2, _fragmentEntity$range3;
    return fragmentEntity.buffered && (fragmentEntity.body.gap || ((_fragmentEntity$range = fragmentEntity.range.video) == null ? void 0 : _fragmentEntity$range.partial) || ((_fragmentEntity$range2 = fragmentEntity.range.audio) == null ? void 0 : _fragmentEntity$range2.partial) || ((_fragmentEntity$range3 = fragmentEntity.range.audiovideo) == null ? void 0 : _fragmentEntity$range3.partial));
  }
  function getFragmentKey(fragment) {
    return `${fragment.type}_${fragment.level}_${fragment.sn}`;
  }
  var noopBuffered = {
    length: 0,
    start: () => 0,
    end: () => 0
  };
  var BufferHelper = class _BufferHelper {
    /**
     * Return true if `media`'s buffered include `position`
     */
    static isBuffered(media, position) {
      try {
        if (media) {
          const buffered = _BufferHelper.getBuffered(media);
          for (let i = 0; i < buffered.length; i++) {
            if (position >= buffered.start(i) && position <= buffered.end(i)) {
              return true;
            }
          }
        }
      } catch (error) {
      }
      return false;
    }
    static bufferInfo(media, pos, maxHoleDuration) {
      try {
        if (media) {
          const vbuffered = _BufferHelper.getBuffered(media);
          const buffered = [];
          let i;
          for (i = 0; i < vbuffered.length; i++) {
            buffered.push({
              start: vbuffered.start(i),
              end: vbuffered.end(i)
            });
          }
          return this.bufferedInfo(buffered, pos, maxHoleDuration);
        }
      } catch (error) {
      }
      return {
        len: 0,
        start: pos,
        end: pos,
        nextStart: void 0
      };
    }
    static bufferedInfo(buffered, pos, maxHoleDuration) {
      pos = Math.max(0, pos);
      buffered.sort(function(a, b) {
        const diff = a.start - b.start;
        if (diff) {
          return diff;
        } else {
          return b.end - a.end;
        }
      });
      let buffered2 = [];
      if (maxHoleDuration) {
        for (let i = 0; i < buffered.length; i++) {
          const buf2len = buffered2.length;
          if (buf2len) {
            const buf2end = buffered2[buf2len - 1].end;
            if (buffered[i].start - buf2end < maxHoleDuration) {
              if (buffered[i].end > buf2end) {
                buffered2[buf2len - 1].end = buffered[i].end;
              }
            } else {
              buffered2.push(buffered[i]);
            }
          } else {
            buffered2.push(buffered[i]);
          }
        }
      } else {
        buffered2 = buffered;
      }
      let bufferLen = 0;
      let bufferStartNext;
      let bufferStart = pos;
      let bufferEnd = pos;
      for (let i = 0; i < buffered2.length; i++) {
        const start = buffered2[i].start;
        const end = buffered2[i].end;
        if (pos + maxHoleDuration >= start && pos < end) {
          bufferStart = start;
          bufferEnd = end;
          bufferLen = bufferEnd - pos;
        } else if (pos + maxHoleDuration < start) {
          bufferStartNext = start;
          break;
        }
      }
      return {
        len: bufferLen,
        start: bufferStart || 0,
        end: bufferEnd || 0,
        nextStart: bufferStartNext
      };
    }
    /**
     * Safe method to get buffered property.
     * SourceBuffer.buffered may throw if SourceBuffer is removed from it's MediaSource
     */
    static getBuffered(media) {
      try {
        return media.buffered;
      } catch (e) {
        logger.log("failed to get media.buffered", e);
        return noopBuffered;
      }
    }
  };
  var ChunkMetadata = class {
    constructor(level, sn, id, size = 0, part = -1, partial = false) {
      this.level = void 0;
      this.sn = void 0;
      this.part = void 0;
      this.id = void 0;
      this.size = void 0;
      this.partial = void 0;
      this.transmuxing = getNewPerformanceTiming();
      this.buffering = {
        audio: getNewPerformanceTiming(),
        video: getNewPerformanceTiming(),
        audiovideo: getNewPerformanceTiming()
      };
      this.level = level;
      this.sn = sn;
      this.id = id;
      this.size = size;
      this.part = part;
      this.partial = partial;
    }
  };
  function getNewPerformanceTiming() {
    return {
      start: 0,
      executeStart: 0,
      executeEnd: 0,
      end: 0
    };
  }
  function findFirstFragWithCC(fragments, cc) {
    for (let i = 0, len = fragments.length; i < len; i++) {
      var _fragments$i;
      if (((_fragments$i = fragments[i]) == null ? void 0 : _fragments$i.cc) === cc) {
        return fragments[i];
      }
    }
    return null;
  }
  function shouldAlignOnDiscontinuities(lastFrag, switchDetails, details) {
    if (switchDetails) {
      if (details.endCC > details.startCC || lastFrag && lastFrag.cc < details.startCC) {
        return true;
      }
    }
    return false;
  }
  function findDiscontinuousReferenceFrag(prevDetails, curDetails) {
    const prevFrags = prevDetails.fragments;
    const curFrags = curDetails.fragments;
    if (!curFrags.length || !prevFrags.length) {
      logger.log("No fragments to align");
      return;
    }
    const prevStartFrag = findFirstFragWithCC(prevFrags, curFrags[0].cc);
    if (!prevStartFrag || prevStartFrag && !prevStartFrag.startPTS) {
      logger.log("No frag in previous level to align on");
      return;
    }
    return prevStartFrag;
  }
  function adjustFragmentStart(frag, sliding) {
    if (frag) {
      const start = frag.start + sliding;
      frag.start = frag.startPTS = start;
      frag.endPTS = start + frag.duration;
    }
  }
  function adjustSlidingStart(sliding, details) {
    const fragments = details.fragments;
    for (let i = 0, len = fragments.length; i < len; i++) {
      adjustFragmentStart(fragments[i], sliding);
    }
    if (details.fragmentHint) {
      adjustFragmentStart(details.fragmentHint, sliding);
    }
    details.alignedSliding = true;
  }
  function alignStream(lastFrag, switchDetails, details) {
    if (!switchDetails) {
      return;
    }
    alignDiscontinuities(lastFrag, details, switchDetails);
    if (!details.alignedSliding && switchDetails) {
      alignMediaPlaylistByPDT(details, switchDetails);
    }
    if (!details.alignedSliding && switchDetails && !details.skippedSegments) {
      adjustSliding(switchDetails, details);
    }
  }
  function alignDiscontinuities(lastFrag, details, switchDetails) {
    if (shouldAlignOnDiscontinuities(lastFrag, switchDetails, details)) {
      const referenceFrag = findDiscontinuousReferenceFrag(switchDetails, details);
      if (referenceFrag && isFiniteNumber(referenceFrag.start)) {
        logger.log(`Adjusting PTS using last level due to CC increase within current level ${details.url}`);
        adjustSlidingStart(referenceFrag.start, details);
      }
    }
  }
  function alignMediaPlaylistByPDT(details, refDetails) {
    if (!details.hasProgramDateTime || !refDetails.hasProgramDateTime) {
      return;
    }
    const fragments = details.fragments;
    const refFragments = refDetails.fragments;
    if (!fragments.length || !refFragments.length) {
      return;
    }
    let refFrag;
    let frag;
    const targetCC = Math.min(refDetails.endCC, details.endCC);
    if (refDetails.startCC < targetCC && details.startCC < targetCC) {
      refFrag = findFirstFragWithCC(refFragments, targetCC);
      frag = findFirstFragWithCC(fragments, targetCC);
    }
    if (!refFrag || !frag) {
      refFrag = refFragments[Math.floor(refFragments.length / 2)];
      frag = findFirstFragWithCC(fragments, refFrag.cc) || fragments[Math.floor(fragments.length / 2)];
    }
    const refPDT = refFrag.programDateTime;
    const targetPDT = frag.programDateTime;
    if (!refPDT || !targetPDT) {
      return;
    }
    const delta = (targetPDT - refPDT) / 1e3 - (frag.start - refFrag.start);
    adjustSlidingStart(delta, details);
  }
  var MIN_CHUNK_SIZE = Math.pow(2, 17);
  var FragmentLoader = class {
    constructor(config) {
      this.config = void 0;
      this.loader = null;
      this.partLoadTimeout = -1;
      this.config = config;
    }
    destroy() {
      if (this.loader) {
        this.loader.destroy();
        this.loader = null;
      }
    }
    abort() {
      if (this.loader) {
        this.loader.abort();
      }
    }
    load(frag, onProgress) {
      const url = frag.url;
      if (!url) {
        return Promise.reject(new LoadError({
          type: ErrorTypes.NETWORK_ERROR,
          details: ErrorDetails.FRAG_LOAD_ERROR,
          fatal: false,
          frag,
          error: new Error(`Fragment does not have a ${url ? "part list" : "url"}`),
          networkDetails: null
        }));
      }
      this.abort();
      const config = this.config;
      const FragmentILoader = config.fLoader;
      const DefaultILoader = config.loader;
      return new Promise((resolve, reject) => {
        if (this.loader) {
          this.loader.destroy();
        }
        if (frag.gap) {
          if (frag.tagList.some((tags) => tags[0] === "GAP")) {
            reject(createGapLoadError(frag));
            return;
          } else {
            frag.gap = false;
          }
        }
        const loader = this.loader = frag.loader = FragmentILoader ? new FragmentILoader(config) : new DefaultILoader(config);
        const loaderContext = createLoaderContext(frag);
        const loadPolicy = getLoaderConfigWithoutReties(config.fragLoadPolicy.default);
        const loaderConfig = {
          loadPolicy,
          timeout: loadPolicy.maxLoadTimeMs,
          maxRetry: 0,
          retryDelay: 0,
          maxRetryDelay: 0,
          highWaterMark: frag.sn === "initSegment" ? Infinity : MIN_CHUNK_SIZE
        };
        frag.stats = loader.stats;
        loader.load(loaderContext, loaderConfig, {
          onSuccess: (response, stats, context, networkDetails) => {
            this.resetLoader(frag, loader);
            let payload = response.data;
            if (context.resetIV && frag.decryptdata) {
              frag.decryptdata.iv = new Uint8Array(payload.slice(0, 16));
              payload = payload.slice(16);
            }
            resolve({
              frag,
              part: null,
              payload,
              networkDetails
            });
          },
          onError: (response, context, networkDetails, stats) => {
            this.resetLoader(frag, loader);
            reject(new LoadError({
              type: ErrorTypes.NETWORK_ERROR,
              details: ErrorDetails.FRAG_LOAD_ERROR,
              fatal: false,
              frag,
              response: _objectSpread2({
                url,
                data: void 0
              }, response),
              error: new Error(`HTTP Error ${response.code} ${response.text}`),
              networkDetails,
              stats
            }));
          },
          onAbort: (stats, context, networkDetails) => {
            this.resetLoader(frag, loader);
            reject(new LoadError({
              type: ErrorTypes.NETWORK_ERROR,
              details: ErrorDetails.INTERNAL_ABORTED,
              fatal: false,
              frag,
              error: new Error("Aborted"),
              networkDetails,
              stats
            }));
          },
          onTimeout: (stats, context, networkDetails) => {
            this.resetLoader(frag, loader);
            reject(new LoadError({
              type: ErrorTypes.NETWORK_ERROR,
              details: ErrorDetails.FRAG_LOAD_TIMEOUT,
              fatal: false,
              frag,
              error: new Error(`Timeout after ${loaderConfig.timeout}ms`),
              networkDetails,
              stats
            }));
          },
          onProgress: (stats, context, data, networkDetails) => {
            if (onProgress) {
              onProgress({
                frag,
                part: null,
                payload: data,
                networkDetails
              });
            }
          }
        });
      });
    }
    loadPart(frag, part, onProgress) {
      this.abort();
      const config = this.config;
      const FragmentILoader = config.fLoader;
      const DefaultILoader = config.loader;
      return new Promise((resolve, reject) => {
        if (this.loader) {
          this.loader.destroy();
        }
        if (frag.gap || part.gap) {
          reject(createGapLoadError(frag, part));
          return;
        }
        const loader = this.loader = frag.loader = FragmentILoader ? new FragmentILoader(config) : new DefaultILoader(config);
        const loaderContext = createLoaderContext(frag, part);
        const loadPolicy = getLoaderConfigWithoutReties(config.fragLoadPolicy.default);
        const loaderConfig = {
          loadPolicy,
          timeout: loadPolicy.maxLoadTimeMs,
          maxRetry: 0,
          retryDelay: 0,
          maxRetryDelay: 0,
          highWaterMark: MIN_CHUNK_SIZE
        };
        part.stats = loader.stats;
        loader.load(loaderContext, loaderConfig, {
          onSuccess: (response, stats, context, networkDetails) => {
            this.resetLoader(frag, loader);
            this.updateStatsFromPart(frag, part);
            const partLoadedData = {
              frag,
              part,
              payload: response.data,
              networkDetails
            };
            onProgress(partLoadedData);
            resolve(partLoadedData);
          },
          onError: (response, context, networkDetails, stats) => {
            this.resetLoader(frag, loader);
            reject(new LoadError({
              type: ErrorTypes.NETWORK_ERROR,
              details: ErrorDetails.FRAG_LOAD_ERROR,
              fatal: false,
              frag,
              part,
              response: _objectSpread2({
                url: loaderContext.url,
                data: void 0
              }, response),
              error: new Error(`HTTP Error ${response.code} ${response.text}`),
              networkDetails,
              stats
            }));
          },
          onAbort: (stats, context, networkDetails) => {
            frag.stats.aborted = part.stats.aborted;
            this.resetLoader(frag, loader);
            reject(new LoadError({
              type: ErrorTypes.NETWORK_ERROR,
              details: ErrorDetails.INTERNAL_ABORTED,
              fatal: false,
              frag,
              part,
              error: new Error("Aborted"),
              networkDetails,
              stats
            }));
          },
          onTimeout: (stats, context, networkDetails) => {
            this.resetLoader(frag, loader);
            reject(new LoadError({
              type: ErrorTypes.NETWORK_ERROR,
              details: ErrorDetails.FRAG_LOAD_TIMEOUT,
              fatal: false,
              frag,
              part,
              error: new Error(`Timeout after ${loaderConfig.timeout}ms`),
              networkDetails,
              stats
            }));
          }
        });
      });
    }
    updateStatsFromPart(frag, part) {
      const fragStats = frag.stats;
      const partStats = part.stats;
      const partTotal = partStats.total;
      fragStats.loaded += partStats.loaded;
      if (partTotal) {
        const estTotalParts = Math.round(frag.duration / part.duration);
        const estLoadedParts = Math.min(Math.round(fragStats.loaded / partTotal), estTotalParts);
        const estRemainingParts = estTotalParts - estLoadedParts;
        const estRemainingBytes = estRemainingParts * Math.round(fragStats.loaded / estLoadedParts);
        fragStats.total = fragStats.loaded + estRemainingBytes;
      } else {
        fragStats.total = Math.max(fragStats.loaded, fragStats.total);
      }
      const fragLoading = fragStats.loading;
      const partLoading = partStats.loading;
      if (fragLoading.start) {
        fragLoading.first += partLoading.first - partLoading.start;
      } else {
        fragLoading.start = partLoading.start;
        fragLoading.first = partLoading.first;
      }
      fragLoading.end = partLoading.end;
    }
    resetLoader(frag, loader) {
      frag.loader = null;
      if (this.loader === loader) {
        self.clearTimeout(this.partLoadTimeout);
        this.loader = null;
      }
      loader.destroy();
    }
  };
  function createLoaderContext(frag, part = null) {
    const segment = part || frag;
    const loaderContext = {
      frag,
      part,
      responseType: "arraybuffer",
      url: segment.url,
      headers: {},
      rangeStart: 0,
      rangeEnd: 0
    };
    const start = segment.byteRangeStartOffset;
    const end = segment.byteRangeEndOffset;
    if (isFiniteNumber(start) && isFiniteNumber(end)) {
      var _frag$decryptdata;
      let byteRangeStart = start;
      let byteRangeEnd = end;
      if (frag.sn === "initSegment" && ((_frag$decryptdata = frag.decryptdata) == null ? void 0 : _frag$decryptdata.method) === "AES-128") {
        const fragmentLen = end - start;
        if (fragmentLen % 16) {
          byteRangeEnd = end + (16 - fragmentLen % 16);
        }
        if (start !== 0) {
          loaderContext.resetIV = true;
          byteRangeStart = start - 16;
        }
      }
      loaderContext.rangeStart = byteRangeStart;
      loaderContext.rangeEnd = byteRangeEnd;
    }
    return loaderContext;
  }
  function createGapLoadError(frag, part) {
    const error = new Error(`GAP ${frag.gap ? "tag" : "attribute"} found`);
    const errorData = {
      type: ErrorTypes.MEDIA_ERROR,
      details: ErrorDetails.FRAG_GAP,
      fatal: false,
      frag,
      error,
      networkDetails: null
    };
    if (part) {
      errorData.part = part;
    }
    (part ? part : frag).stats.aborted = true;
    return new LoadError(errorData);
  }
  var LoadError = class extends Error {
    constructor(data) {
      super(data.error.message);
      this.data = void 0;
      this.data = data;
    }
  };
  var AESCrypto = class {
    constructor(subtle, iv) {
      this.subtle = void 0;
      this.aesIV = void 0;
      this.subtle = subtle;
      this.aesIV = iv;
    }
    decrypt(data, key) {
      return this.subtle.decrypt({
        name: "AES-CBC",
        iv: this.aesIV
      }, key, data);
    }
  };
  var FastAESKey = class {
    constructor(subtle, key) {
      this.subtle = void 0;
      this.key = void 0;
      this.subtle = subtle;
      this.key = key;
    }
    expandKey() {
      return this.subtle.importKey("raw", this.key, {
        name: "AES-CBC"
      }, false, ["encrypt", "decrypt"]);
    }
  };
  function removePadding(array) {
    const outputBytes = array.byteLength;
    const paddingBytes = outputBytes && new DataView(array.buffer).getUint8(outputBytes - 1);
    if (paddingBytes) {
      return sliceUint8(array, 0, outputBytes - paddingBytes);
    }
    return array;
  }
  var AESDecryptor = class {
    constructor() {
      this.rcon = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
      this.subMix = [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)];
      this.invSubMix = [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)];
      this.sBox = new Uint32Array(256);
      this.invSBox = new Uint32Array(256);
      this.key = new Uint32Array(0);
      this.ksRows = 0;
      this.keySize = 0;
      this.keySchedule = void 0;
      this.invKeySchedule = void 0;
      this.initTable();
    }
    // Using view.getUint32() also swaps the byte order.
    uint8ArrayToUint32Array_(arrayBuffer) {
      const view = new DataView(arrayBuffer);
      const newArray = new Uint32Array(4);
      for (let i = 0; i < 4; i++) {
        newArray[i] = view.getUint32(i * 4);
      }
      return newArray;
    }
    initTable() {
      const sBox = this.sBox;
      const invSBox = this.invSBox;
      const subMix = this.subMix;
      const subMix0 = subMix[0];
      const subMix1 = subMix[1];
      const subMix2 = subMix[2];
      const subMix3 = subMix[3];
      const invSubMix = this.invSubMix;
      const invSubMix0 = invSubMix[0];
      const invSubMix1 = invSubMix[1];
      const invSubMix2 = invSubMix[2];
      const invSubMix3 = invSubMix[3];
      const d = new Uint32Array(256);
      let x = 0;
      let xi = 0;
      let i = 0;
      for (i = 0; i < 256; i++) {
        if (i < 128) {
          d[i] = i << 1;
        } else {
          d[i] = i << 1 ^ 283;
        }
      }
      for (i = 0; i < 256; i++) {
        let sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
        sx = sx >>> 8 ^ sx & 255 ^ 99;
        sBox[x] = sx;
        invSBox[sx] = x;
        const x2 = d[x];
        const x4 = d[x2];
        const x8 = d[x4];
        let t2 = d[sx] * 257 ^ sx * 16843008;
        subMix0[x] = t2 << 24 | t2 >>> 8;
        subMix1[x] = t2 << 16 | t2 >>> 16;
        subMix2[x] = t2 << 8 | t2 >>> 24;
        subMix3[x] = t2;
        t2 = x8 * 16843009 ^ x4 * 65537 ^ x2 * 257 ^ x * 16843008;
        invSubMix0[sx] = t2 << 24 | t2 >>> 8;
        invSubMix1[sx] = t2 << 16 | t2 >>> 16;
        invSubMix2[sx] = t2 << 8 | t2 >>> 24;
        invSubMix3[sx] = t2;
        if (!x) {
          x = xi = 1;
        } else {
          x = x2 ^ d[d[d[x8 ^ x2]]];
          xi ^= d[d[xi]];
        }
      }
    }
    expandKey(keyBuffer) {
      const key = this.uint8ArrayToUint32Array_(keyBuffer);
      let sameKey = true;
      let offset = 0;
      while (offset < key.length && sameKey) {
        sameKey = key[offset] === this.key[offset];
        offset++;
      }
      if (sameKey) {
        return;
      }
      this.key = key;
      const keySize = this.keySize = key.length;
      if (keySize !== 4 && keySize !== 6 && keySize !== 8) {
        throw new Error("Invalid aes key size=" + keySize);
      }
      const ksRows = this.ksRows = (keySize + 6 + 1) * 4;
      let ksRow;
      let invKsRow;
      const keySchedule = this.keySchedule = new Uint32Array(ksRows);
      const invKeySchedule = this.invKeySchedule = new Uint32Array(ksRows);
      const sbox = this.sBox;
      const rcon = this.rcon;
      const invSubMix = this.invSubMix;
      const invSubMix0 = invSubMix[0];
      const invSubMix1 = invSubMix[1];
      const invSubMix2 = invSubMix[2];
      const invSubMix3 = invSubMix[3];
      let prev;
      let t2;
      for (ksRow = 0; ksRow < ksRows; ksRow++) {
        if (ksRow < keySize) {
          prev = keySchedule[ksRow] = key[ksRow];
          continue;
        }
        t2 = prev;
        if (ksRow % keySize === 0) {
          t2 = t2 << 8 | t2 >>> 24;
          t2 = sbox[t2 >>> 24] << 24 | sbox[t2 >>> 16 & 255] << 16 | sbox[t2 >>> 8 & 255] << 8 | sbox[t2 & 255];
          t2 ^= rcon[ksRow / keySize | 0] << 24;
        } else if (keySize > 6 && ksRow % keySize === 4) {
          t2 = sbox[t2 >>> 24] << 24 | sbox[t2 >>> 16 & 255] << 16 | sbox[t2 >>> 8 & 255] << 8 | sbox[t2 & 255];
        }
        keySchedule[ksRow] = prev = (keySchedule[ksRow - keySize] ^ t2) >>> 0;
      }
      for (invKsRow = 0; invKsRow < ksRows; invKsRow++) {
        ksRow = ksRows - invKsRow;
        if (invKsRow & 3) {
          t2 = keySchedule[ksRow];
        } else {
          t2 = keySchedule[ksRow - 4];
        }
        if (invKsRow < 4 || ksRow <= 4) {
          invKeySchedule[invKsRow] = t2;
        } else {
          invKeySchedule[invKsRow] = invSubMix0[sbox[t2 >>> 24]] ^ invSubMix1[sbox[t2 >>> 16 & 255]] ^ invSubMix2[sbox[t2 >>> 8 & 255]] ^ invSubMix3[sbox[t2 & 255]];
        }
        invKeySchedule[invKsRow] = invKeySchedule[invKsRow] >>> 0;
      }
    }
    // Adding this as a method greatly improves performance.
    networkToHostOrderSwap(word) {
      return word << 24 | (word & 65280) << 8 | (word & 16711680) >> 8 | word >>> 24;
    }
    decrypt(inputArrayBuffer, offset, aesIV) {
      const nRounds = this.keySize + 6;
      const invKeySchedule = this.invKeySchedule;
      const invSBOX = this.invSBox;
      const invSubMix = this.invSubMix;
      const invSubMix0 = invSubMix[0];
      const invSubMix1 = invSubMix[1];
      const invSubMix2 = invSubMix[2];
      const invSubMix3 = invSubMix[3];
      const initVector = this.uint8ArrayToUint32Array_(aesIV);
      let initVector0 = initVector[0];
      let initVector1 = initVector[1];
      let initVector2 = initVector[2];
      let initVector3 = initVector[3];
      const inputInt32 = new Int32Array(inputArrayBuffer);
      const outputInt32 = new Int32Array(inputInt32.length);
      let t0, t1, t2, t3;
      let s0, s1, s2, s3;
      let inputWords0, inputWords1, inputWords2, inputWords3;
      let ksRow, i;
      const swapWord = this.networkToHostOrderSwap;
      while (offset < inputInt32.length) {
        inputWords0 = swapWord(inputInt32[offset]);
        inputWords1 = swapWord(inputInt32[offset + 1]);
        inputWords2 = swapWord(inputInt32[offset + 2]);
        inputWords3 = swapWord(inputInt32[offset + 3]);
        s0 = inputWords0 ^ invKeySchedule[0];
        s1 = inputWords3 ^ invKeySchedule[1];
        s2 = inputWords2 ^ invKeySchedule[2];
        s3 = inputWords1 ^ invKeySchedule[3];
        ksRow = 4;
        for (i = 1; i < nRounds; i++) {
          t0 = invSubMix0[s0 >>> 24] ^ invSubMix1[s1 >> 16 & 255] ^ invSubMix2[s2 >> 8 & 255] ^ invSubMix3[s3 & 255] ^ invKeySchedule[ksRow];
          t1 = invSubMix0[s1 >>> 24] ^ invSubMix1[s2 >> 16 & 255] ^ invSubMix2[s3 >> 8 & 255] ^ invSubMix3[s0 & 255] ^ invKeySchedule[ksRow + 1];
          t2 = invSubMix0[s2 >>> 24] ^ invSubMix1[s3 >> 16 & 255] ^ invSubMix2[s0 >> 8 & 255] ^ invSubMix3[s1 & 255] ^ invKeySchedule[ksRow + 2];
          t3 = invSubMix0[s3 >>> 24] ^ invSubMix1[s0 >> 16 & 255] ^ invSubMix2[s1 >> 8 & 255] ^ invSubMix3[s2 & 255] ^ invKeySchedule[ksRow + 3];
          s0 = t0;
          s1 = t1;
          s2 = t2;
          s3 = t3;
          ksRow = ksRow + 4;
        }
        t0 = invSBOX[s0 >>> 24] << 24 ^ invSBOX[s1 >> 16 & 255] << 16 ^ invSBOX[s2 >> 8 & 255] << 8 ^ invSBOX[s3 & 255] ^ invKeySchedule[ksRow];
        t1 = invSBOX[s1 >>> 24] << 24 ^ invSBOX[s2 >> 16 & 255] << 16 ^ invSBOX[s3 >> 8 & 255] << 8 ^ invSBOX[s0 & 255] ^ invKeySchedule[ksRow + 1];
        t2 = invSBOX[s2 >>> 24] << 24 ^ invSBOX[s3 >> 16 & 255] << 16 ^ invSBOX[s0 >> 8 & 255] << 8 ^ invSBOX[s1 & 255] ^ invKeySchedule[ksRow + 2];
        t3 = invSBOX[s3 >>> 24] << 24 ^ invSBOX[s0 >> 16 & 255] << 16 ^ invSBOX[s1 >> 8 & 255] << 8 ^ invSBOX[s2 & 255] ^ invKeySchedule[ksRow + 3];
        outputInt32[offset] = swapWord(t0 ^ initVector0);
        outputInt32[offset + 1] = swapWord(t3 ^ initVector1);
        outputInt32[offset + 2] = swapWord(t2 ^ initVector2);
        outputInt32[offset + 3] = swapWord(t1 ^ initVector3);
        initVector0 = inputWords0;
        initVector1 = inputWords1;
        initVector2 = inputWords2;
        initVector3 = inputWords3;
        offset = offset + 4;
      }
      return outputInt32.buffer;
    }
  };
  var CHUNK_SIZE = 16;
  var Decrypter = class {
    constructor(config, {
      removePKCS7Padding = true
    } = {}) {
      this.logEnabled = true;
      this.removePKCS7Padding = void 0;
      this.subtle = null;
      this.softwareDecrypter = null;
      this.key = null;
      this.fastAesKey = null;
      this.remainderData = null;
      this.currentIV = null;
      this.currentResult = null;
      this.useSoftware = void 0;
      this.useSoftware = config.enableSoftwareAES;
      this.removePKCS7Padding = removePKCS7Padding;
      if (removePKCS7Padding) {
        try {
          const browserCrypto = self.crypto;
          if (browserCrypto) {
            this.subtle = browserCrypto.subtle || browserCrypto.webkitSubtle;
          }
        } catch (e) {
        }
      }
      this.useSoftware = !this.subtle;
    }
    destroy() {
      this.subtle = null;
      this.softwareDecrypter = null;
      this.key = null;
      this.fastAesKey = null;
      this.remainderData = null;
      this.currentIV = null;
      this.currentResult = null;
    }
    isSync() {
      return this.useSoftware;
    }
    flush() {
      const {
        currentResult,
        remainderData
      } = this;
      if (!currentResult || remainderData) {
        this.reset();
        return null;
      }
      const data = new Uint8Array(currentResult);
      this.reset();
      if (this.removePKCS7Padding) {
        return removePadding(data);
      }
      return data;
    }
    reset() {
      this.currentResult = null;
      this.currentIV = null;
      this.remainderData = null;
      if (this.softwareDecrypter) {
        this.softwareDecrypter = null;
      }
    }
    decrypt(data, key, iv) {
      if (this.useSoftware) {
        return new Promise((resolve, reject) => {
          this.softwareDecrypt(new Uint8Array(data), key, iv);
          const decryptResult = this.flush();
          if (decryptResult) {
            resolve(decryptResult.buffer);
          } else {
            reject(new Error("[softwareDecrypt] Failed to decrypt data"));
          }
        });
      }
      return this.webCryptoDecrypt(new Uint8Array(data), key, iv);
    }
    // Software decryption is progressive. Progressive decryption may not return a result on each call. Any cached
    // data is handled in the flush() call
    softwareDecrypt(data, key, iv) {
      const {
        currentIV,
        currentResult,
        remainderData
      } = this;
      this.logOnce("JS AES decrypt");
      if (remainderData) {
        data = appendUint8Array(remainderData, data);
        this.remainderData = null;
      }
      const currentChunk = this.getValidChunk(data);
      if (!currentChunk.length) {
        return null;
      }
      if (currentIV) {
        iv = currentIV;
      }
      let softwareDecrypter = this.softwareDecrypter;
      if (!softwareDecrypter) {
        softwareDecrypter = this.softwareDecrypter = new AESDecryptor();
      }
      softwareDecrypter.expandKey(key);
      const result = currentResult;
      this.currentResult = softwareDecrypter.decrypt(currentChunk.buffer, 0, iv);
      this.currentIV = sliceUint8(currentChunk, -16).buffer;
      if (!result) {
        return null;
      }
      return result;
    }
    webCryptoDecrypt(data, key, iv) {
      if (this.key !== key || !this.fastAesKey) {
        if (!this.subtle) {
          return Promise.resolve(this.onWebCryptoError(data, key, iv));
        }
        this.key = key;
        this.fastAesKey = new FastAESKey(this.subtle, key);
      }
      return this.fastAesKey.expandKey().then((aesKey) => {
        if (!this.subtle) {
          return Promise.reject(new Error("web crypto not initialized"));
        }
        this.logOnce("WebCrypto AES decrypt");
        const crypto2 = new AESCrypto(this.subtle, new Uint8Array(iv));
        return crypto2.decrypt(data.buffer, aesKey);
      }).catch((err) => {
        logger.warn(`[decrypter]: WebCrypto Error, disable WebCrypto API, ${err.name}: ${err.message}`);
        return this.onWebCryptoError(data, key, iv);
      });
    }
    onWebCryptoError(data, key, iv) {
      this.useSoftware = true;
      this.logEnabled = true;
      this.softwareDecrypt(data, key, iv);
      const decryptResult = this.flush();
      if (decryptResult) {
        return decryptResult.buffer;
      }
      throw new Error("WebCrypto and softwareDecrypt: failed to decrypt data");
    }
    getValidChunk(data) {
      let currentChunk = data;
      const splitPoint = data.length - data.length % CHUNK_SIZE;
      if (splitPoint !== data.length) {
        currentChunk = sliceUint8(data, 0, splitPoint);
        this.remainderData = sliceUint8(data, splitPoint);
      }
      return currentChunk;
    }
    logOnce(msg) {
      if (!this.logEnabled) {
        return;
      }
      logger.log(`[decrypter]: ${msg}`);
      this.logEnabled = false;
    }
  };
  var TimeRanges = {
    toString: function(r) {
      let log = "";
      const len = r.length;
      for (let i = 0; i < len; i++) {
        log += `[${r.start(i).toFixed(3)}-${r.end(i).toFixed(3)}]`;
      }
      return log;
    }
  };
  var State = {
    STOPPED: "STOPPED",
    IDLE: "IDLE",
    KEY_LOADING: "KEY_LOADING",
    FRAG_LOADING: "FRAG_LOADING",
    FRAG_LOADING_WAITING_RETRY: "FRAG_LOADING_WAITING_RETRY",
    WAITING_TRACK: "WAITING_TRACK",
    PARSING: "PARSING",
    PARSED: "PARSED",
    ENDED: "ENDED",
    ERROR: "ERROR",
    WAITING_INIT_PTS: "WAITING_INIT_PTS",
    WAITING_LEVEL: "WAITING_LEVEL"
  };
  var BaseStreamController = class extends TaskLoop {
    constructor(hls, fragmentTracker, keyLoader, logPrefix, playlistType) {
      super();
      this.hls = void 0;
      this.fragPrevious = null;
      this.fragCurrent = null;
      this.fragmentTracker = void 0;
      this.transmuxer = null;
      this._state = State.STOPPED;
      this.playlistType = void 0;
      this.media = null;
      this.mediaBuffer = null;
      this.config = void 0;
      this.bitrateTest = false;
      this.lastCurrentTime = 0;
      this.nextLoadPosition = 0;
      this.startPosition = 0;
      this.startTimeOffset = null;
      this.loadedmetadata = false;
      this.retryDate = 0;
      this.levels = null;
      this.fragmentLoader = void 0;
      this.keyLoader = void 0;
      this.levelLastLoaded = null;
      this.startFragRequested = false;
      this.decrypter = void 0;
      this.initPTS = [];
      this.buffering = true;
      this.onvseeking = null;
      this.onvended = null;
      this.logPrefix = "";
      this.log = void 0;
      this.warn = void 0;
      this.playlistType = playlistType;
      this.logPrefix = logPrefix;
      this.log = logger.log.bind(logger, `${logPrefix}:`);
      this.warn = logger.warn.bind(logger, `${logPrefix}:`);
      this.hls = hls;
      this.fragmentLoader = new FragmentLoader(hls.config);
      this.keyLoader = keyLoader;
      this.fragmentTracker = fragmentTracker;
      this.config = hls.config;
      this.decrypter = new Decrypter(hls.config);
      hls.on(Events2.MANIFEST_LOADED, this.onManifestLoaded, this);
    }
    doTick() {
      this.onTickEnd();
    }
    onTickEnd() {
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    startLoad(startPosition) {
    }
    stopLoad() {
      this.fragmentLoader.abort();
      this.keyLoader.abort(this.playlistType);
      const frag = this.fragCurrent;
      if (frag != null && frag.loader) {
        frag.abortRequests();
        this.fragmentTracker.removeFragment(frag);
      }
      this.resetTransmuxer();
      this.fragCurrent = null;
      this.fragPrevious = null;
      this.clearInterval();
      this.clearNextTick();
      this.state = State.STOPPED;
    }
    pauseBuffering() {
      this.buffering = false;
    }
    resumeBuffering() {
      this.buffering = true;
    }
    _streamEnded(bufferInfo, levelDetails) {
      if (levelDetails.live || bufferInfo.nextStart || !bufferInfo.end || !this.media) {
        return false;
      }
      const partList = levelDetails.partList;
      if (partList != null && partList.length) {
        const lastPart = partList[partList.length - 1];
        const lastPartBuffered = BufferHelper.isBuffered(this.media, lastPart.start + lastPart.duration / 2);
        return lastPartBuffered;
      }
      const playlistType = levelDetails.fragments[levelDetails.fragments.length - 1].type;
      return this.fragmentTracker.isEndListAppended(playlistType);
    }
    getLevelDetails() {
      if (this.levels && this.levelLastLoaded !== null) {
        var _this$levelLastLoaded;
        return (_this$levelLastLoaded = this.levelLastLoaded) == null ? void 0 : _this$levelLastLoaded.details;
      }
    }
    onMediaAttached(event, data) {
      const media = this.media = this.mediaBuffer = data.media;
      this.onvseeking = this.onMediaSeeking.bind(this);
      this.onvended = this.onMediaEnded.bind(this);
      media.addEventListener("seeking", this.onvseeking);
      media.addEventListener("ended", this.onvended);
      const config = this.config;
      if (this.levels && config.autoStartLoad && this.state === State.STOPPED) {
        this.startLoad(config.startPosition);
      }
    }
    onMediaDetaching() {
      const media = this.media;
      if (media != null && media.ended) {
        this.log("MSE detaching and video ended, reset startPosition");
        this.startPosition = this.lastCurrentTime = 0;
      }
      if (media && this.onvseeking && this.onvended) {
        media.removeEventListener("seeking", this.onvseeking);
        media.removeEventListener("ended", this.onvended);
        this.onvseeking = this.onvended = null;
      }
      if (this.keyLoader) {
        this.keyLoader.detach();
      }
      this.media = this.mediaBuffer = null;
      this.loadedmetadata = false;
      this.fragmentTracker.removeAllFragments();
      this.stopLoad();
    }
    onMediaSeeking() {
      const {
        config,
        fragCurrent,
        media,
        mediaBuffer,
        state
      } = this;
      const currentTime = media ? media.currentTime : 0;
      const bufferInfo = BufferHelper.bufferInfo(mediaBuffer ? mediaBuffer : media, currentTime, config.maxBufferHole);
      this.log(`media seeking to ${isFiniteNumber(currentTime) ? currentTime.toFixed(3) : currentTime}, state: ${state}`);
      if (this.state === State.ENDED) {
        this.resetLoadingState();
      } else if (fragCurrent) {
        const tolerance = config.maxFragLookUpTolerance;
        const fragStartOffset = fragCurrent.start - tolerance;
        const fragEndOffset = fragCurrent.start + fragCurrent.duration + tolerance;
        if (!bufferInfo.len || fragEndOffset < bufferInfo.start || fragStartOffset > bufferInfo.end) {
          const pastFragment = currentTime > fragEndOffset;
          if (currentTime < fragStartOffset || pastFragment) {
            if (pastFragment && fragCurrent.loader) {
              this.log("seeking outside of buffer while fragment load in progress, cancel fragment load");
              fragCurrent.abortRequests();
              this.resetLoadingState();
            }
            this.fragPrevious = null;
          }
        }
      }
      if (media) {
        this.fragmentTracker.removeFragmentsInRange(currentTime, Infinity, this.playlistType, true);
        this.lastCurrentTime = currentTime;
      }
      if (!this.loadedmetadata && !bufferInfo.len) {
        this.nextLoadPosition = this.startPosition = currentTime;
      }
      this.tickImmediate();
    }
    onMediaEnded() {
      this.startPosition = this.lastCurrentTime = 0;
    }
    onManifestLoaded(event, data) {
      this.startTimeOffset = data.startTimeOffset;
      this.initPTS = [];
    }
    onHandlerDestroying() {
      this.hls.off(Events2.MANIFEST_LOADED, this.onManifestLoaded, this);
      this.stopLoad();
      super.onHandlerDestroying();
      this.hls = null;
    }
    onHandlerDestroyed() {
      this.state = State.STOPPED;
      if (this.fragmentLoader) {
        this.fragmentLoader.destroy();
      }
      if (this.keyLoader) {
        this.keyLoader.destroy();
      }
      if (this.decrypter) {
        this.decrypter.destroy();
      }
      this.hls = this.log = this.warn = this.decrypter = this.keyLoader = this.fragmentLoader = this.fragmentTracker = null;
      super.onHandlerDestroyed();
    }
    loadFragment(frag, level, targetBufferTime) {
      this._loadFragForPlayback(frag, level, targetBufferTime);
    }
    _loadFragForPlayback(frag, level, targetBufferTime) {
      const progressCallback = (data) => {
        if (this.fragContextChanged(frag)) {
          this.warn(`Fragment ${frag.sn}${data.part ? " p: " + data.part.index : ""} of level ${frag.level} was dropped during download.`);
          this.fragmentTracker.removeFragment(frag);
          return;
        }
        frag.stats.chunkCount++;
        this._handleFragmentLoadProgress(data);
      };
      this._doFragLoad(frag, level, targetBufferTime, progressCallback).then((data) => {
        if (!data) {
          return;
        }
        const state = this.state;
        if (this.fragContextChanged(frag)) {
          if (state === State.FRAG_LOADING || !this.fragCurrent && state === State.PARSING) {
            this.fragmentTracker.removeFragment(frag);
            this.state = State.IDLE;
          }
          return;
        }
        if ("payload" in data) {
          this.log(`Loaded fragment ${frag.sn} of level ${frag.level}`);
          this.hls.trigger(Events2.FRAG_LOADED, data);
        }
        this._handleFragmentLoadComplete(data);
      }).catch((reason) => {
        if (this.state === State.STOPPED || this.state === State.ERROR) {
          return;
        }
        this.warn(`Frag error: ${(reason == null ? void 0 : reason.message) || reason}`);
        this.resetFragmentLoading(frag);
      });
    }
    clearTrackerIfNeeded(frag) {
      var _this$mediaBuffer;
      const {
        fragmentTracker
      } = this;
      const fragState = fragmentTracker.getState(frag);
      if (fragState === FragmentState.APPENDING) {
        const playlistType = frag.type;
        const bufferedInfo = this.getFwdBufferInfo(this.mediaBuffer, playlistType);
        const minForwardBufferLength = Math.max(frag.duration, bufferedInfo ? bufferedInfo.len : this.config.maxBufferLength);
        const backtrackFragment = this.backtrackFragment;
        const backtracked = backtrackFragment ? frag.sn - backtrackFragment.sn : 0;
        if (backtracked === 1 || this.reduceMaxBufferLength(minForwardBufferLength, frag.duration)) {
          fragmentTracker.removeFragment(frag);
        }
      } else if (((_this$mediaBuffer = this.mediaBuffer) == null ? void 0 : _this$mediaBuffer.buffered.length) === 0) {
        fragmentTracker.removeAllFragments();
      } else if (fragmentTracker.hasParts(frag.type)) {
        fragmentTracker.detectPartialFragments({
          frag,
          part: null,
          stats: frag.stats,
          id: frag.type
        });
        if (fragmentTracker.getState(frag) === FragmentState.PARTIAL) {
          fragmentTracker.removeFragment(frag);
        }
      }
    }
    checkLiveUpdate(details) {
      if (details.updated && !details.live) {
        const lastFragment = details.fragments[details.fragments.length - 1];
        this.fragmentTracker.detectPartialFragments({
          frag: lastFragment,
          part: null,
          stats: lastFragment.stats,
          id: lastFragment.type
        });
      }
      if (!details.fragments[0]) {
        details.deltaUpdateFailed = true;
      }
    }
    flushMainBuffer(startOffset, endOffset, type = null) {
      if (!(startOffset - endOffset)) {
        return;
      }
      const flushScope = {
        startOffset,
        endOffset,
        type
      };
      this.hls.trigger(Events2.BUFFER_FLUSHING, flushScope);
    }
    _loadInitSegment(frag, level) {
      this._doFragLoad(frag, level).then((data) => {
        if (!data || this.fragContextChanged(frag) || !this.levels) {
          throw new Error("init load aborted");
        }
        return data;
      }).then((data) => {
        const {
          hls
        } = this;
        const {
          payload
        } = data;
        const decryptData = frag.decryptdata;
        if (payload && payload.byteLength > 0 && decryptData != null && decryptData.key && decryptData.iv && decryptData.method === "AES-128") {
          const startTime = self.performance.now();
          return this.decrypter.decrypt(new Uint8Array(payload), decryptData.key.buffer, decryptData.iv.buffer).catch((err) => {
            hls.trigger(Events2.ERROR, {
              type: ErrorTypes.MEDIA_ERROR,
              details: ErrorDetails.FRAG_DECRYPT_ERROR,
              fatal: false,
              error: err,
              reason: err.message,
              frag
            });
            throw err;
          }).then((decryptedData) => {
            const endTime = self.performance.now();
            hls.trigger(Events2.FRAG_DECRYPTED, {
              frag,
              payload: decryptedData,
              stats: {
                tstart: startTime,
                tdecrypt: endTime
              }
            });
            data.payload = decryptedData;
            return this.completeInitSegmentLoad(data);
          });
        }
        return this.completeInitSegmentLoad(data);
      }).catch((reason) => {
        if (this.state === State.STOPPED || this.state === State.ERROR) {
          return;
        }
        this.warn(reason);
        this.resetFragmentLoading(frag);
      });
    }
    completeInitSegmentLoad(data) {
      const {
        levels
      } = this;
      if (!levels) {
        throw new Error("init load aborted, missing levels");
      }
      const stats = data.frag.stats;
      this.state = State.IDLE;
      data.frag.data = new Uint8Array(data.payload);
      stats.parsing.start = stats.buffering.start = self.performance.now();
      stats.parsing.end = stats.buffering.end = self.performance.now();
      this.tick();
    }
    fragContextChanged(frag) {
      const {
        fragCurrent
      } = this;
      return !frag || !fragCurrent || frag.sn !== fragCurrent.sn || frag.level !== fragCurrent.level;
    }
    fragBufferedComplete(frag, part) {
      var _frag$startPTS, _frag$endPTS, _this$fragCurrent, _this$fragPrevious;
      const media = this.mediaBuffer ? this.mediaBuffer : this.media;
      this.log(`Buffered ${frag.type} sn: ${frag.sn}${part ? " part: " + part.index : ""} of ${this.playlistType === PlaylistLevelType.MAIN ? "level" : "track"} ${frag.level} (frag:[${((_frag$startPTS = frag.startPTS) != null ? _frag$startPTS : NaN).toFixed(3)}-${((_frag$endPTS = frag.endPTS) != null ? _frag$endPTS : NaN).toFixed(3)}] > buffer:${media ? TimeRanges.toString(BufferHelper.getBuffered(media)) : "(detached)"})`);
      if (frag.sn !== "initSegment") {
        var _this$levels;
        if (frag.type !== PlaylistLevelType.SUBTITLE) {
          const el = frag.elementaryStreams;
          if (!Object.keys(el).some((type) => !!el[type])) {
            this.state = State.IDLE;
            return;
          }
        }
        const level = (_this$levels = this.levels) == null ? void 0 : _this$levels[frag.level];
        if (level != null && level.fragmentError) {
          this.log(`Resetting level fragment error count of ${level.fragmentError} on frag buffered`);
          level.fragmentError = 0;
        }
      }
      this.state = State.IDLE;
      if (!media) {
        return;
      }
      if (!this.loadedmetadata && frag.type == PlaylistLevelType.MAIN && media.buffered.length && ((_this$fragCurrent = this.fragCurrent) == null ? void 0 : _this$fragCurrent.sn) === ((_this$fragPrevious = this.fragPrevious) == null ? void 0 : _this$fragPrevious.sn)) {
        this.loadedmetadata = true;
        this.seekToStartPos();
      }
      this.tick();
    }
    seekToStartPos() {
    }
    _handleFragmentLoadComplete(fragLoadedEndData) {
      const {
        transmuxer
      } = this;
      if (!transmuxer) {
        return;
      }
      const {
        frag,
        part,
        partsLoaded
      } = fragLoadedEndData;
      const complete = !partsLoaded || partsLoaded.length === 0 || partsLoaded.some((fragLoaded) => !fragLoaded);
      const chunkMeta = new ChunkMetadata(frag.level, frag.sn, frag.stats.chunkCount + 1, 0, part ? part.index : -1, !complete);
      transmuxer.flush(chunkMeta);
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _handleFragmentLoadProgress(frag) {
    }
    _doFragLoad(frag, level, targetBufferTime = null, progressCallback) {
      var _frag$decryptdata;
      const details = level == null ? void 0 : level.details;
      if (!this.levels || !details) {
        throw new Error(`frag load aborted, missing level${details ? "" : " detail"}s`);
      }
      let keyLoadingPromise = null;
      if (frag.encrypted && !((_frag$decryptdata = frag.decryptdata) != null && _frag$decryptdata.key)) {
        this.log(`Loading key for ${frag.sn} of [${details.startSN}-${details.endSN}], ${this.logPrefix === "[stream-controller]" ? "level" : "track"} ${frag.level}`);
        this.state = State.KEY_LOADING;
        this.fragCurrent = frag;
        keyLoadingPromise = this.keyLoader.load(frag).then((keyLoadedData) => {
          if (!this.fragContextChanged(keyLoadedData.frag)) {
            this.hls.trigger(Events2.KEY_LOADED, keyLoadedData);
            if (this.state === State.KEY_LOADING) {
              this.state = State.IDLE;
            }
            return keyLoadedData;
          }
        });
        this.hls.trigger(Events2.KEY_LOADING, {
          frag
        });
        if (this.fragCurrent === null) {
          keyLoadingPromise = Promise.reject(new Error(`frag load aborted, context changed in KEY_LOADING`));
        }
      } else if (!frag.encrypted && details.encryptedFragments.length) {
        this.keyLoader.loadClear(frag, details.encryptedFragments);
      }
      targetBufferTime = Math.max(frag.start, targetBufferTime || 0);
      if (this.config.lowLatencyMode && frag.sn !== "initSegment") {
        const partList = details.partList;
        if (partList && progressCallback) {
          if (targetBufferTime > frag.end && details.fragmentHint) {
            frag = details.fragmentHint;
          }
          const partIndex = this.getNextPart(partList, frag, targetBufferTime);
          if (partIndex > -1) {
            const part = partList[partIndex];
            this.log(`Loading part sn: ${frag.sn} p: ${part.index} cc: ${frag.cc} of playlist [${details.startSN}-${details.endSN}] parts [0-${partIndex}-${partList.length - 1}] ${this.logPrefix === "[stream-controller]" ? "level" : "track"}: ${frag.level}, target: ${parseFloat(targetBufferTime.toFixed(3))}`);
            this.nextLoadPosition = part.start + part.duration;
            this.state = State.FRAG_LOADING;
            let _result;
            if (keyLoadingPromise) {
              _result = keyLoadingPromise.then((keyLoadedData) => {
                if (!keyLoadedData || this.fragContextChanged(keyLoadedData.frag)) {
                  return null;
                }
                return this.doFragPartsLoad(frag, part, level, progressCallback);
              }).catch((error) => this.handleFragLoadError(error));
            } else {
              _result = this.doFragPartsLoad(frag, part, level, progressCallback).catch((error) => this.handleFragLoadError(error));
            }
            this.hls.trigger(Events2.FRAG_LOADING, {
              frag,
              part,
              targetBufferTime
            });
            if (this.fragCurrent === null) {
              return Promise.reject(new Error(`frag load aborted, context changed in FRAG_LOADING parts`));
            }
            return _result;
          } else if (!frag.url || this.loadedEndOfParts(partList, targetBufferTime)) {
            return Promise.resolve(null);
          }
        }
      }
      this.log(`Loading fragment ${frag.sn} cc: ${frag.cc} ${details ? "of [" + details.startSN + "-" + details.endSN + "] " : ""}${this.logPrefix === "[stream-controller]" ? "level" : "track"}: ${frag.level}, target: ${parseFloat(targetBufferTime.toFixed(3))}`);
      if (isFiniteNumber(frag.sn) && !this.bitrateTest) {
        this.nextLoadPosition = frag.start + frag.duration;
      }
      this.state = State.FRAG_LOADING;
      const dataOnProgress = this.config.progressive;
      let result;
      if (dataOnProgress && keyLoadingPromise) {
        result = keyLoadingPromise.then((keyLoadedData) => {
          if (!keyLoadedData || this.fragContextChanged(keyLoadedData == null ? void 0 : keyLoadedData.frag)) {
            return null;
          }
          return this.fragmentLoader.load(frag, progressCallback);
        }).catch((error) => this.handleFragLoadError(error));
      } else {
        result = Promise.all([this.fragmentLoader.load(frag, dataOnProgress ? progressCallback : void 0), keyLoadingPromise]).then(([fragLoadedData]) => {
          if (!dataOnProgress && fragLoadedData && progressCallback) {
            progressCallback(fragLoadedData);
          }
          return fragLoadedData;
        }).catch((error) => this.handleFragLoadError(error));
      }
      this.hls.trigger(Events2.FRAG_LOADING, {
        frag,
        targetBufferTime
      });
      if (this.fragCurrent === null) {
        return Promise.reject(new Error(`frag load aborted, context changed in FRAG_LOADING`));
      }
      return result;
    }
    doFragPartsLoad(frag, fromPart, level, progressCallback) {
      return new Promise((resolve, reject) => {
        var _level$details;
        const partsLoaded = [];
        const initialPartList = (_level$details = level.details) == null ? void 0 : _level$details.partList;
        const loadPart = (part) => {
          this.fragmentLoader.loadPart(frag, part, progressCallback).then((partLoadedData) => {
            partsLoaded[part.index] = partLoadedData;
            const loadedPart = partLoadedData.part;
            this.hls.trigger(Events2.FRAG_LOADED, partLoadedData);
            const nextPart = getPartWith(level, frag.sn, part.index + 1) || findPart(initialPartList, frag.sn, part.index + 1);
            if (nextPart) {
              loadPart(nextPart);
            } else {
              return resolve({
                frag,
                part: loadedPart,
                partsLoaded
              });
            }
          }).catch(reject);
        };
        loadPart(fromPart);
      });
    }
    handleFragLoadError(error) {
      if ("data" in error) {
        const data = error.data;
        if (error.data && data.details === ErrorDetails.INTERNAL_ABORTED) {
          this.handleFragLoadAborted(data.frag, data.part);
        } else {
          this.hls.trigger(Events2.ERROR, data);
        }
      } else {
        this.hls.trigger(Events2.ERROR, {
          type: ErrorTypes.OTHER_ERROR,
          details: ErrorDetails.INTERNAL_EXCEPTION,
          err: error,
          error,
          fatal: true
        });
      }
      return null;
    }
    _handleTransmuxerFlush(chunkMeta) {
      const context = this.getCurrentContext(chunkMeta);
      if (!context || this.state !== State.PARSING) {
        if (!this.fragCurrent && this.state !== State.STOPPED && this.state !== State.ERROR) {
          this.state = State.IDLE;
        }
        return;
      }
      const {
        frag,
        part,
        level
      } = context;
      const now2 = self.performance.now();
      frag.stats.parsing.end = now2;
      if (part) {
        part.stats.parsing.end = now2;
      }
      this.updateLevelTiming(frag, part, level, chunkMeta.partial);
    }
    getCurrentContext(chunkMeta) {
      const {
        levels,
        fragCurrent
      } = this;
      const {
        level: levelIndex,
        sn,
        part: partIndex
      } = chunkMeta;
      if (!(levels != null && levels[levelIndex])) {
        this.warn(`Levels object was unset while buffering fragment ${sn} of level ${levelIndex}. The current chunk will not be buffered.`);
        return null;
      }
      const level = levels[levelIndex];
      const part = partIndex > -1 ? getPartWith(level, sn, partIndex) : null;
      const frag = part ? part.fragment : getFragmentWithSN(level, sn, fragCurrent);
      if (!frag) {
        return null;
      }
      if (fragCurrent && fragCurrent !== frag) {
        frag.stats = fragCurrent.stats;
      }
      return {
        frag,
        part,
        level
      };
    }
    bufferFragmentData(data, frag, part, chunkMeta, noBacktracking) {
      var _buffer;
      if (!data || this.state !== State.PARSING) {
        return;
      }
      const {
        data1,
        data2
      } = data;
      let buffer = data1;
      if (data1 && data2) {
        buffer = appendUint8Array(data1, data2);
      }
      if (!((_buffer = buffer) != null && _buffer.length)) {
        return;
      }
      const segment = {
        type: data.type,
        frag,
        part,
        chunkMeta,
        parent: frag.type,
        data: buffer
      };
      this.hls.trigger(Events2.BUFFER_APPENDING, segment);
      if (data.dropped && data.independent && !part) {
        if (noBacktracking) {
          return;
        }
        this.flushBufferGap(frag);
      }
    }
    flushBufferGap(frag) {
      const media = this.media;
      if (!media) {
        return;
      }
      if (!BufferHelper.isBuffered(media, media.currentTime)) {
        this.flushMainBuffer(0, frag.start);
        return;
      }
      const currentTime = media.currentTime;
      const bufferInfo = BufferHelper.bufferInfo(media, currentTime, 0);
      const fragDuration = frag.duration;
      const segmentFraction = Math.min(this.config.maxFragLookUpTolerance * 2, fragDuration * 0.25);
      const start = Math.max(Math.min(frag.start - segmentFraction, bufferInfo.end - segmentFraction), currentTime + segmentFraction);
      if (frag.start - start > segmentFraction) {
        this.flushMainBuffer(start, frag.start);
      }
    }
    getFwdBufferInfo(bufferable, type) {
      const pos = this.getLoadPosition();
      if (!isFiniteNumber(pos)) {
        return null;
      }
      return this.getFwdBufferInfoAtPos(bufferable, pos, type);
    }
    getFwdBufferInfoAtPos(bufferable, pos, type) {
      const {
        config: {
          maxBufferHole
        }
      } = this;
      const bufferInfo = BufferHelper.bufferInfo(bufferable, pos, maxBufferHole);
      if (bufferInfo.len === 0 && bufferInfo.nextStart !== void 0) {
        const bufferedFragAtPos = this.fragmentTracker.getBufferedFrag(pos, type);
        if (bufferedFragAtPos && bufferInfo.nextStart < bufferedFragAtPos.end) {
          return BufferHelper.bufferInfo(bufferable, pos, Math.max(bufferInfo.nextStart, maxBufferHole));
        }
      }
      return bufferInfo;
    }
    getMaxBufferLength(levelBitrate) {
      const {
        config
      } = this;
      let maxBufLen;
      if (levelBitrate) {
        maxBufLen = Math.max(8 * config.maxBufferSize / levelBitrate, config.maxBufferLength);
      } else {
        maxBufLen = config.maxBufferLength;
      }
      return Math.min(maxBufLen, config.maxMaxBufferLength);
    }
    reduceMaxBufferLength(threshold, fragDuration) {
      const config = this.config;
      const minLength = Math.max(Math.min(threshold - fragDuration, config.maxBufferLength), fragDuration);
      const reducedLength = Math.max(threshold - fragDuration * 3, config.maxMaxBufferLength / 2, minLength);
      if (reducedLength >= minLength) {
        config.maxMaxBufferLength = reducedLength;
        this.warn(`Reduce max buffer length to ${reducedLength}s`);
        return true;
      }
      return false;
    }
    getAppendedFrag(position, playlistType = PlaylistLevelType.MAIN) {
      const fragOrPart = this.fragmentTracker.getAppendedFrag(position, PlaylistLevelType.MAIN);
      if (fragOrPart && "fragment" in fragOrPart) {
        return fragOrPart.fragment;
      }
      return fragOrPart;
    }
    getNextFragment(pos, levelDetails) {
      const fragments = levelDetails.fragments;
      const fragLen = fragments.length;
      if (!fragLen) {
        return null;
      }
      const {
        config
      } = this;
      const start = fragments[0].start;
      let frag;
      if (levelDetails.live) {
        const initialLiveManifestSize = config.initialLiveManifestSize;
        if (fragLen < initialLiveManifestSize) {
          this.warn(`Not enough fragments to start playback (have: ${fragLen}, need: ${initialLiveManifestSize})`);
          return null;
        }
        if (!levelDetails.PTSKnown && !this.startFragRequested && this.startPosition === -1 || pos < start) {
          frag = this.getInitialLiveFragment(levelDetails, fragments);
          this.startPosition = this.nextLoadPosition = frag ? this.hls.liveSyncPosition || frag.start : pos;
        }
      } else if (pos <= start) {
        frag = fragments[0];
      }
      if (!frag) {
        const end = config.lowLatencyMode ? levelDetails.partEnd : levelDetails.fragmentEnd;
        frag = this.getFragmentAtPosition(pos, end, levelDetails);
      }
      return this.mapToInitFragWhenRequired(frag);
    }
    isLoopLoading(frag, targetBufferTime) {
      const trackerState = this.fragmentTracker.getState(frag);
      return (trackerState === FragmentState.OK || trackerState === FragmentState.PARTIAL && !!frag.gap) && this.nextLoadPosition > targetBufferTime;
    }
    getNextFragmentLoopLoading(frag, levelDetails, bufferInfo, playlistType, maxBufLen) {
      const gapStart = frag.gap;
      const nextFragment = this.getNextFragment(this.nextLoadPosition, levelDetails);
      if (nextFragment === null) {
        return nextFragment;
      }
      frag = nextFragment;
      if (gapStart && frag && !frag.gap && bufferInfo.nextStart) {
        const nextbufferInfo = this.getFwdBufferInfoAtPos(this.mediaBuffer ? this.mediaBuffer : this.media, bufferInfo.nextStart, playlistType);
        if (nextbufferInfo !== null && bufferInfo.len + nextbufferInfo.len >= maxBufLen) {
          this.log(`buffer full after gaps in "${playlistType}" playlist starting at sn: ${frag.sn}`);
          return null;
        }
      }
      return frag;
    }
    mapToInitFragWhenRequired(frag) {
      if (frag != null && frag.initSegment && !(frag != null && frag.initSegment.data) && !this.bitrateTest) {
        return frag.initSegment;
      }
      return frag;
    }
    getNextPart(partList, frag, targetBufferTime) {
      let nextPart = -1;
      let contiguous = false;
      let independentAttrOmitted = true;
      for (let i = 0, len = partList.length; i < len; i++) {
        const part = partList[i];
        independentAttrOmitted = independentAttrOmitted && !part.independent;
        if (nextPart > -1 && targetBufferTime < part.start) {
          break;
        }
        const loaded = part.loaded;
        if (loaded) {
          nextPart = -1;
        } else if ((contiguous || part.independent || independentAttrOmitted) && part.fragment === frag) {
          nextPart = i;
        }
        contiguous = loaded;
      }
      return nextPart;
    }
    loadedEndOfParts(partList, targetBufferTime) {
      const lastPart = partList[partList.length - 1];
      return lastPart && targetBufferTime > lastPart.start && lastPart.loaded;
    }
    /*
     This method is used find the best matching first fragment for a live playlist. This fragment is used to calculate the
     "sliding" of the playlist, which is its offset from the start of playback. After sliding we can compute the real
     start and end times for each fragment in the playlist (after which this method will not need to be called).
    */
    getInitialLiveFragment(levelDetails, fragments) {
      const fragPrevious = this.fragPrevious;
      let frag = null;
      if (fragPrevious) {
        if (levelDetails.hasProgramDateTime) {
          this.log(`Live playlist, switching playlist, load frag with same PDT: ${fragPrevious.programDateTime}`);
          frag = findFragmentByPDT(fragments, fragPrevious.endProgramDateTime, this.config.maxFragLookUpTolerance);
        }
        if (!frag) {
          const targetSN = fragPrevious.sn + 1;
          if (targetSN >= levelDetails.startSN && targetSN <= levelDetails.endSN) {
            const fragNext = fragments[targetSN - levelDetails.startSN];
            if (fragPrevious.cc === fragNext.cc) {
              frag = fragNext;
              this.log(`Live playlist, switching playlist, load frag with next SN: ${frag.sn}`);
            }
          }
          if (!frag) {
            frag = findFragWithCC(fragments, fragPrevious.cc);
            if (frag) {
              this.log(`Live playlist, switching playlist, load frag with same CC: ${frag.sn}`);
            }
          }
        }
      } else {
        const liveStart = this.hls.liveSyncPosition;
        if (liveStart !== null) {
          frag = this.getFragmentAtPosition(liveStart, this.bitrateTest ? levelDetails.fragmentEnd : levelDetails.edge, levelDetails);
        }
      }
      return frag;
    }
    /*
    This method finds the best matching fragment given the provided position.
     */
    getFragmentAtPosition(bufferEnd, end, levelDetails) {
      const {
        config
      } = this;
      let {
        fragPrevious
      } = this;
      let {
        fragments,
        endSN
      } = levelDetails;
      const {
        fragmentHint
      } = levelDetails;
      const {
        maxFragLookUpTolerance
      } = config;
      const partList = levelDetails.partList;
      const loadingParts = !!(config.lowLatencyMode && partList != null && partList.length && fragmentHint);
      if (loadingParts && fragmentHint && !this.bitrateTest) {
        fragments = fragments.concat(fragmentHint);
        endSN = fragmentHint.sn;
      }
      let frag;
      if (bufferEnd < end) {
        const lookupTolerance = bufferEnd > end - maxFragLookUpTolerance ? 0 : maxFragLookUpTolerance;
        frag = findFragmentByPTS(fragPrevious, fragments, bufferEnd, lookupTolerance);
      } else {
        frag = fragments[fragments.length - 1];
      }
      if (frag) {
        const curSNIdx = frag.sn - levelDetails.startSN;
        const fragState = this.fragmentTracker.getState(frag);
        if (fragState === FragmentState.OK || fragState === FragmentState.PARTIAL && frag.gap) {
          fragPrevious = frag;
        }
        if (fragPrevious && frag.sn === fragPrevious.sn && (!loadingParts || partList[0].fragment.sn > frag.sn)) {
          const sameLevel = fragPrevious && frag.level === fragPrevious.level;
          if (sameLevel) {
            const nextFrag = fragments[curSNIdx + 1];
            if (frag.sn < endSN && this.fragmentTracker.getState(nextFrag) !== FragmentState.OK) {
              frag = nextFrag;
            } else {
              frag = null;
            }
          }
        }
      }
      return frag;
    }
    synchronizeToLiveEdge(levelDetails) {
      const {
        config,
        media
      } = this;
      if (!media) {
        return;
      }
      const liveSyncPosition = this.hls.liveSyncPosition;
      const currentTime = media.currentTime;
      const start = levelDetails.fragments[0].start;
      const end = levelDetails.edge;
      const withinSlidingWindow = currentTime >= start - config.maxFragLookUpTolerance && currentTime <= end;
      if (liveSyncPosition !== null && media.duration > liveSyncPosition && (currentTime < liveSyncPosition || !withinSlidingWindow)) {
        const maxLatency = config.liveMaxLatencyDuration !== void 0 ? config.liveMaxLatencyDuration : config.liveMaxLatencyDurationCount * levelDetails.targetduration;
        if (!withinSlidingWindow && media.readyState < 4 || currentTime < end - maxLatency) {
          if (!this.loadedmetadata) {
            this.nextLoadPosition = liveSyncPosition;
          }
          if (media.readyState) {
            this.warn(`Playback: ${currentTime.toFixed(3)} is located too far from the end of live sliding playlist: ${end}, reset currentTime to : ${liveSyncPosition.toFixed(3)}`);
            media.currentTime = liveSyncPosition;
          }
        }
      }
    }
    alignPlaylists(details, previousDetails, switchDetails) {
      const length = details.fragments.length;
      if (!length) {
        this.warn(`No fragments in live playlist`);
        return 0;
      }
      const slidingStart = details.fragments[0].start;
      const firstLevelLoad = !previousDetails;
      const aligned = details.alignedSliding && isFiniteNumber(slidingStart);
      if (firstLevelLoad || !aligned && !slidingStart) {
        const {
          fragPrevious
        } = this;
        alignStream(fragPrevious, switchDetails, details);
        const alignedSlidingStart = details.fragments[0].start;
        this.log(`Live playlist sliding: ${alignedSlidingStart.toFixed(2)} start-sn: ${previousDetails ? previousDetails.startSN : "na"}->${details.startSN} prev-sn: ${fragPrevious ? fragPrevious.sn : "na"} fragments: ${length}`);
        return alignedSlidingStart;
      }
      return slidingStart;
    }
    waitForCdnTuneIn(details) {
      const advancePartLimit = 3;
      return details.live && details.canBlockReload && details.partTarget && details.tuneInGoal > Math.max(details.partHoldBack, details.partTarget * advancePartLimit);
    }
    setStartPosition(details, sliding) {
      let startPosition = this.startPosition;
      if (startPosition < sliding) {
        startPosition = -1;
      }
      if (startPosition === -1 || this.lastCurrentTime === -1) {
        const offsetInMultivariantPlaylist = this.startTimeOffset !== null;
        const startTimeOffset = offsetInMultivariantPlaylist ? this.startTimeOffset : details.startTimeOffset;
        if (startTimeOffset !== null && isFiniteNumber(startTimeOffset)) {
          startPosition = sliding + startTimeOffset;
          if (startTimeOffset < 0) {
            startPosition += details.totalduration;
          }
          startPosition = Math.min(Math.max(sliding, startPosition), sliding + details.totalduration);
          this.log(`Start time offset ${startTimeOffset} found in ${offsetInMultivariantPlaylist ? "multivariant" : "media"} playlist, adjust startPosition to ${startPosition}`);
          this.startPosition = startPosition;
        } else if (details.live) {
          startPosition = this.hls.liveSyncPosition || sliding;
        } else {
          this.startPosition = startPosition = 0;
        }
        this.lastCurrentTime = startPosition;
      }
      this.nextLoadPosition = startPosition;
    }
    getLoadPosition() {
      const {
        media
      } = this;
      let pos = 0;
      if (this.loadedmetadata && media) {
        pos = media.currentTime;
      } else if (this.nextLoadPosition) {
        pos = this.nextLoadPosition;
      }
      return pos;
    }
    handleFragLoadAborted(frag, part) {
      if (this.transmuxer && frag.sn !== "initSegment" && frag.stats.aborted) {
        this.warn(`Fragment ${frag.sn}${part ? " part " + part.index : ""} of level ${frag.level} was aborted`);
        this.resetFragmentLoading(frag);
      }
    }
    resetFragmentLoading(frag) {
      if (!this.fragCurrent || !this.fragContextChanged(frag) && this.state !== State.FRAG_LOADING_WAITING_RETRY) {
        this.state = State.IDLE;
      }
    }
    onFragmentOrKeyLoadError(filterType, data) {
      if (data.chunkMeta && !data.frag) {
        const context = this.getCurrentContext(data.chunkMeta);
        if (context) {
          data.frag = context.frag;
        }
      }
      const frag = data.frag;
      if (!frag || frag.type !== filterType || !this.levels) {
        return;
      }
      if (this.fragContextChanged(frag)) {
        var _this$fragCurrent2;
        this.warn(`Frag load error must match current frag to retry ${frag.url} > ${(_this$fragCurrent2 = this.fragCurrent) == null ? void 0 : _this$fragCurrent2.url}`);
        return;
      }
      const gapTagEncountered = data.details === ErrorDetails.FRAG_GAP;
      if (gapTagEncountered) {
        this.fragmentTracker.fragBuffered(frag, true);
      }
      const errorAction = data.errorAction;
      const {
        action,
        retryCount = 0,
        retryConfig
      } = errorAction || {};
      if (errorAction && action === NetworkErrorAction.RetryRequest && retryConfig) {
        this.resetStartWhenNotLoaded(this.levelLastLoaded);
        const delay2 = getRetryDelay(retryConfig, retryCount);
        this.warn(`Fragment ${frag.sn} of ${filterType} ${frag.level} errored with ${data.details}, retrying loading ${retryCount + 1}/${retryConfig.maxNumRetry} in ${delay2}ms`);
        errorAction.resolved = true;
        this.retryDate = self.performance.now() + delay2;
        this.state = State.FRAG_LOADING_WAITING_RETRY;
      } else if (retryConfig && errorAction) {
        this.resetFragmentErrors(filterType);
        if (retryCount < retryConfig.maxNumRetry) {
          if (!gapTagEncountered && action !== NetworkErrorAction.RemoveAlternatePermanently) {
            errorAction.resolved = true;
          }
        } else {
          logger.warn(`${data.details} reached or exceeded max retry (${retryCount})`);
          return;
        }
      } else if ((errorAction == null ? void 0 : errorAction.action) === NetworkErrorAction.SendAlternateToPenaltyBox) {
        this.state = State.WAITING_LEVEL;
      } else {
        this.state = State.ERROR;
      }
      this.tickImmediate();
    }
    reduceLengthAndFlushBuffer(data) {
      if (this.state === State.PARSING || this.state === State.PARSED) {
        const frag = data.frag;
        const playlistType = data.parent;
        const bufferedInfo = this.getFwdBufferInfo(this.mediaBuffer, playlistType);
        const buffered = bufferedInfo && bufferedInfo.len > 0.5;
        if (buffered) {
          this.reduceMaxBufferLength(bufferedInfo.len, (frag == null ? void 0 : frag.duration) || 10);
        }
        const flushBuffer = !buffered;
        if (flushBuffer) {
          this.warn(`Buffer full error while media.currentTime is not buffered, flush ${playlistType} buffer`);
        }
        if (frag) {
          this.fragmentTracker.removeFragment(frag);
          this.nextLoadPosition = frag.start;
        }
        this.resetLoadingState();
        return flushBuffer;
      }
      return false;
    }
    resetFragmentErrors(filterType) {
      if (filterType === PlaylistLevelType.AUDIO) {
        this.fragCurrent = null;
      }
      if (!this.loadedmetadata) {
        this.startFragRequested = false;
      }
      if (this.state !== State.STOPPED) {
        this.state = State.IDLE;
      }
    }
    afterBufferFlushed(media, bufferType, playlistType) {
      if (!media) {
        return;
      }
      const bufferedTimeRanges = BufferHelper.getBuffered(media);
      this.fragmentTracker.detectEvictedFragments(bufferType, bufferedTimeRanges, playlistType);
      if (this.state === State.ENDED) {
        this.resetLoadingState();
      }
    }
    resetLoadingState() {
      this.log("Reset loading state");
      this.fragCurrent = null;
      this.fragPrevious = null;
      this.state = State.IDLE;
    }
    resetStartWhenNotLoaded(level) {
      if (!this.loadedmetadata) {
        this.startFragRequested = false;
        const details = level ? level.details : null;
        if (details != null && details.live) {
          this.startPosition = -1;
          this.setStartPosition(details, 0);
          this.resetLoadingState();
        } else {
          this.nextLoadPosition = this.startPosition;
        }
      }
    }
    resetWhenMissingContext(chunkMeta) {
      this.warn(`The loading context changed while buffering fragment ${chunkMeta.sn} of level ${chunkMeta.level}. This chunk will not be buffered.`);
      this.removeUnbufferedFrags();
      this.resetStartWhenNotLoaded(this.levelLastLoaded);
      this.resetLoadingState();
    }
    removeUnbufferedFrags(start = 0) {
      this.fragmentTracker.removeFragmentsInRange(start, Infinity, this.playlistType, false, true);
    }
    updateLevelTiming(frag, part, level, partial) {
      var _this$transmuxer;
      const details = level.details;
      if (!details) {
        this.warn("level.details undefined");
        return;
      }
      const parsed = Object.keys(frag.elementaryStreams).reduce((result, type) => {
        const info = frag.elementaryStreams[type];
        if (info) {
          const parsedDuration = info.endPTS - info.startPTS;
          if (parsedDuration <= 0) {
            this.warn(`Could not parse fragment ${frag.sn} ${type} duration reliably (${parsedDuration})`);
            return result || false;
          }
          const drift = partial ? 0 : updateFragPTSDTS(details, frag, info.startPTS, info.endPTS, info.startDTS, info.endDTS);
          this.hls.trigger(Events2.LEVEL_PTS_UPDATED, {
            details,
            level,
            drift,
            type,
            frag,
            start: info.startPTS,
            end: info.endPTS
          });
          return true;
        }
        return result;
      }, false);
      if (!parsed && ((_this$transmuxer = this.transmuxer) == null ? void 0 : _this$transmuxer.error) === null) {
        const error = new Error(`Found no media in fragment ${frag.sn} of level ${frag.level} resetting transmuxer to fallback to playlist timing`);
        if (level.fragmentError === 0) {
          level.fragmentError++;
          frag.gap = true;
          this.fragmentTracker.removeFragment(frag);
          this.fragmentTracker.fragBuffered(frag, true);
        }
        this.warn(error.message);
        this.hls.trigger(Events2.ERROR, {
          type: ErrorTypes.MEDIA_ERROR,
          details: ErrorDetails.FRAG_PARSING_ERROR,
          fatal: false,
          error,
          frag,
          reason: `Found no media in msn ${frag.sn} of level "${level.url}"`
        });
        if (!this.hls) {
          return;
        }
        this.resetTransmuxer();
      }
      this.state = State.PARSED;
      this.hls.trigger(Events2.FRAG_PARSED, {
        frag,
        part
      });
    }
    resetTransmuxer() {
      if (this.transmuxer) {
        this.transmuxer.destroy();
        this.transmuxer = null;
      }
    }
    recoverWorkerError(data) {
      if (data.event === "demuxerWorker") {
        this.fragmentTracker.removeAllFragments();
        this.resetTransmuxer();
        this.resetStartWhenNotLoaded(this.levelLastLoaded);
        this.resetLoadingState();
      }
    }
    set state(nextState) {
      const previousState = this._state;
      if (previousState !== nextState) {
        this._state = nextState;
        this.log(`${previousState}->${nextState}`);
      }
    }
    get state() {
      return this._state;
    }
  };
  var ChunkCache = class {
    constructor() {
      this.chunks = [];
      this.dataLength = 0;
    }
    push(chunk) {
      this.chunks.push(chunk);
      this.dataLength += chunk.length;
    }
    flush() {
      const {
        chunks,
        dataLength
      } = this;
      let result;
      if (!chunks.length) {
        return new Uint8Array(0);
      } else if (chunks.length === 1) {
        result = chunks[0];
      } else {
        result = concatUint8Arrays(chunks, dataLength);
      }
      this.reset();
      return result;
    }
    reset() {
      this.chunks.length = 0;
      this.dataLength = 0;
    }
  };
  function concatUint8Arrays(chunks, dataLength) {
    const result = new Uint8Array(dataLength);
    let offset = 0;
    for (let i = 0; i < chunks.length; i++) {
      const chunk = chunks[i];
      result.set(chunk, offset);
      offset += chunk.length;
    }
    return result;
  }
  function hasUMDWorker() {
    return typeof __HLS_WORKER_BUNDLE__ === "function";
  }
  function injectWorker() {
    const blob = new self.Blob([`var exports={};var module={exports:exports};function define(f){f()};define.amd=true;(${__HLS_WORKER_BUNDLE__.toString()})(true);`], {
      type: "text/javascript"
    });
    const objectURL = self.URL.createObjectURL(blob);
    const worker = new self.Worker(objectURL);
    return {
      worker,
      objectURL
    };
  }
  function loadWorker(path) {
    const scriptURL = new self.URL(path, self.location.href).href;
    const worker = new self.Worker(scriptURL);
    return {
      worker,
      scriptURL
    };
  }
  function dummyTrack(type = "", inputTimeScale = 9e4) {
    return {
      type,
      id: -1,
      pid: -1,
      inputTimeScale,
      sequenceNumber: -1,
      samples: [],
      dropped: 0
    };
  }
  var BaseAudioDemuxer = class {
    constructor() {
      this._audioTrack = void 0;
      this._id3Track = void 0;
      this.frameIndex = 0;
      this.cachedData = null;
      this.basePTS = null;
      this.initPTS = null;
      this.lastPTS = null;
    }
    resetInitSegment(initSegment, audioCodec, videoCodec, trackDuration) {
      this._id3Track = {
        type: "id3",
        id: 3,
        pid: -1,
        inputTimeScale: 9e4,
        sequenceNumber: 0,
        samples: [],
        dropped: 0
      };
    }
    resetTimeStamp(deaultTimestamp) {
      this.initPTS = deaultTimestamp;
      this.resetContiguity();
    }
    resetContiguity() {
      this.basePTS = null;
      this.lastPTS = null;
      this.frameIndex = 0;
    }
    canParse(data, offset) {
      return false;
    }
    appendFrame(track, data, offset) {
    }
    // feed incoming data to the front of the parsing pipeline
    demux(data, timeOffset) {
      if (this.cachedData) {
        data = appendUint8Array(this.cachedData, data);
        this.cachedData = null;
      }
      let id3Data = getID3Data(data, 0);
      let offset = id3Data ? id3Data.length : 0;
      let lastDataIndex;
      const track = this._audioTrack;
      const id3Track = this._id3Track;
      const timestamp = id3Data ? getTimeStamp(id3Data) : void 0;
      const length = data.length;
      if (this.basePTS === null || this.frameIndex === 0 && isFiniteNumber(timestamp)) {
        this.basePTS = initPTSFn(timestamp, timeOffset, this.initPTS);
        this.lastPTS = this.basePTS;
      }
      if (this.lastPTS === null) {
        this.lastPTS = this.basePTS;
      }
      if (id3Data && id3Data.length > 0) {
        id3Track.samples.push({
          pts: this.lastPTS,
          dts: this.lastPTS,
          data: id3Data,
          type: MetadataSchema.audioId3,
          duration: Number.POSITIVE_INFINITY
        });
      }
      while (offset < length) {
        if (this.canParse(data, offset)) {
          const frame = this.appendFrame(track, data, offset);
          if (frame) {
            this.frameIndex++;
            this.lastPTS = frame.sample.pts;
            offset += frame.length;
            lastDataIndex = offset;
          } else {
            offset = length;
          }
        } else if (canParse$2(data, offset)) {
          id3Data = getID3Data(data, offset);
          id3Track.samples.push({
            pts: this.lastPTS,
            dts: this.lastPTS,
            data: id3Data,
            type: MetadataSchema.audioId3,
            duration: Number.POSITIVE_INFINITY
          });
          offset += id3Data.length;
          lastDataIndex = offset;
        } else {
          offset++;
        }
        if (offset === length && lastDataIndex !== length) {
          const partialData = sliceUint8(data, lastDataIndex);
          if (this.cachedData) {
            this.cachedData = appendUint8Array(this.cachedData, partialData);
          } else {
            this.cachedData = partialData;
          }
        }
      }
      return {
        audioTrack: track,
        videoTrack: dummyTrack(),
        id3Track,
        textTrack: dummyTrack()
      };
    }
    demuxSampleAes(data, keyData, timeOffset) {
      return Promise.reject(new Error(`[${this}] This demuxer does not support Sample-AES decryption`));
    }
    flush(timeOffset) {
      const cachedData = this.cachedData;
      if (cachedData) {
        this.cachedData = null;
        this.demux(cachedData, 0);
      }
      return {
        audioTrack: this._audioTrack,
        videoTrack: dummyTrack(),
        id3Track: this._id3Track,
        textTrack: dummyTrack()
      };
    }
    destroy() {
    }
  };
  var initPTSFn = (timestamp, timeOffset, initPTS) => {
    if (isFiniteNumber(timestamp)) {
      return timestamp * 90;
    }
    const init90kHz = initPTS ? initPTS.baseTime * 9e4 / initPTS.timescale : 0;
    return timeOffset * 9e4 + init90kHz;
  };
  function getAudioConfig(observer2, data, offset, audioCodec) {
    let adtsObjectType;
    let adtsExtensionSamplingIndex;
    let adtsChannelConfig;
    let config;
    const userAgent = navigator.userAgent.toLowerCase();
    const manifestCodec = audioCodec;
    const adtsSamplingRates = [96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350];
    adtsObjectType = ((data[offset + 2] & 192) >>> 6) + 1;
    const adtsSamplingIndex = (data[offset + 2] & 60) >>> 2;
    if (adtsSamplingIndex > adtsSamplingRates.length - 1) {
      const error = new Error(`invalid ADTS sampling index:${adtsSamplingIndex}`);
      observer2.emit(Events2.ERROR, Events2.ERROR, {
        type: ErrorTypes.MEDIA_ERROR,
        details: ErrorDetails.FRAG_PARSING_ERROR,
        fatal: true,
        error,
        reason: error.message
      });
      return;
    }
    adtsChannelConfig = (data[offset + 2] & 1) << 2;
    adtsChannelConfig |= (data[offset + 3] & 192) >>> 6;
    logger.log(`manifest codec:${audioCodec}, ADTS type:${adtsObjectType}, samplingIndex:${adtsSamplingIndex}`);
    if (/firefox/i.test(userAgent)) {
      if (adtsSamplingIndex >= 6) {
        adtsObjectType = 5;
        config = new Array(4);
        adtsExtensionSamplingIndex = adtsSamplingIndex - 3;
      } else {
        adtsObjectType = 2;
        config = new Array(2);
        adtsExtensionSamplingIndex = adtsSamplingIndex;
      }
    } else if (userAgent.indexOf("android") !== -1) {
      adtsObjectType = 2;
      config = new Array(2);
      adtsExtensionSamplingIndex = adtsSamplingIndex;
    } else {
      adtsObjectType = 5;
      config = new Array(4);
      if (audioCodec && (audioCodec.indexOf("mp4a.40.29") !== -1 || audioCodec.indexOf("mp4a.40.5") !== -1) || !audioCodec && adtsSamplingIndex >= 6) {
        adtsExtensionSamplingIndex = adtsSamplingIndex - 3;
      } else {
        if (audioCodec && audioCodec.indexOf("mp4a.40.2") !== -1 && (adtsSamplingIndex >= 6 && adtsChannelConfig === 1 || /vivaldi/i.test(userAgent)) || !audioCodec && adtsChannelConfig === 1) {
          adtsObjectType = 2;
          config = new Array(2);
        }
        adtsExtensionSamplingIndex = adtsSamplingIndex;
      }
    }
    config[0] = adtsObjectType << 3;
    config[0] |= (adtsSamplingIndex & 14) >> 1;
    config[1] |= (adtsSamplingIndex & 1) << 7;
    config[1] |= adtsChannelConfig << 3;
    if (adtsObjectType === 5) {
      config[1] |= (adtsExtensionSamplingIndex & 14) >> 1;
      config[2] = (adtsExtensionSamplingIndex & 1) << 7;
      config[2] |= 2 << 2;
      config[3] = 0;
    }
    return {
      config,
      samplerate: adtsSamplingRates[adtsSamplingIndex],
      channelCount: adtsChannelConfig,
      codec: "mp4a.40." + adtsObjectType,
      manifestCodec
    };
  }
  function isHeaderPattern$1(data, offset) {
    return data[offset] === 255 && (data[offset + 1] & 246) === 240;
  }
  function getHeaderLength(data, offset) {
    return data[offset + 1] & 1 ? 7 : 9;
  }
  function getFullFrameLength(data, offset) {
    return (data[offset + 3] & 3) << 11 | data[offset + 4] << 3 | (data[offset + 5] & 224) >>> 5;
  }
  function canGetFrameLength(data, offset) {
    return offset + 5 < data.length;
  }
  function isHeader$1(data, offset) {
    return offset + 1 < data.length && isHeaderPattern$1(data, offset);
  }
  function canParse$1(data, offset) {
    return canGetFrameLength(data, offset) && isHeaderPattern$1(data, offset) && getFullFrameLength(data, offset) <= data.length - offset;
  }
  function probe$1(data, offset) {
    if (isHeader$1(data, offset)) {
      const headerLength = getHeaderLength(data, offset);
      if (offset + headerLength >= data.length) {
        return false;
      }
      const frameLength = getFullFrameLength(data, offset);
      if (frameLength <= headerLength) {
        return false;
      }
      const newOffset = offset + frameLength;
      return newOffset === data.length || isHeader$1(data, newOffset);
    }
    return false;
  }
  function initTrackConfig(track, observer2, data, offset, audioCodec) {
    if (!track.samplerate) {
      const config = getAudioConfig(observer2, data, offset, audioCodec);
      if (!config) {
        return;
      }
      track.config = config.config;
      track.samplerate = config.samplerate;
      track.channelCount = config.channelCount;
      track.codec = config.codec;
      track.manifestCodec = config.manifestCodec;
      logger.log(`parsed codec:${track.codec}, rate:${config.samplerate}, channels:${config.channelCount}`);
    }
  }
  function getFrameDuration(samplerate) {
    return 1024 * 9e4 / samplerate;
  }
  function parseFrameHeader(data, offset) {
    const headerLength = getHeaderLength(data, offset);
    if (offset + headerLength <= data.length) {
      const frameLength = getFullFrameLength(data, offset) - headerLength;
      if (frameLength > 0) {
        return {
          headerLength,
          frameLength
        };
      }
    }
  }
  function appendFrame$2(track, data, offset, pts, frameIndex) {
    const frameDuration = getFrameDuration(track.samplerate);
    const stamp = pts + frameIndex * frameDuration;
    const header = parseFrameHeader(data, offset);
    let unit;
    if (header) {
      const {
        frameLength,
        headerLength
      } = header;
      const _length = headerLength + frameLength;
      const missing = Math.max(0, offset + _length - data.length);
      if (missing) {
        unit = new Uint8Array(_length - headerLength);
        unit.set(data.subarray(offset + headerLength, data.length), 0);
      } else {
        unit = data.subarray(offset + headerLength, offset + _length);
      }
      const _sample = {
        unit,
        pts: stamp
      };
      if (!missing) {
        track.samples.push(_sample);
      }
      return {
        sample: _sample,
        length: _length,
        missing
      };
    }
    const length = data.length - offset;
    unit = new Uint8Array(length);
    unit.set(data.subarray(offset, data.length), 0);
    const sample = {
      unit,
      pts: stamp
    };
    return {
      sample,
      length,
      missing: -1
    };
  }
  var chromeVersion$1 = null;
  var BitratesMap = [32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 32, 48, 56, 64, 80, 96, 112, 128, 144, 160, 176, 192, 224, 256, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160];
  var SamplingRateMap = [44100, 48e3, 32e3, 22050, 24e3, 16e3, 11025, 12e3, 8e3];
  var SamplesCoefficients = [
    // MPEG 2.5
    [
      0,
      // Reserved
      72,
      // Layer3
      144,
      // Layer2
      12
      // Layer1
    ],
    // Reserved
    [
      0,
      // Reserved
      0,
      // Layer3
      0,
      // Layer2
      0
      // Layer1
    ],
    // MPEG 2
    [
      0,
      // Reserved
      72,
      // Layer3
      144,
      // Layer2
      12
      // Layer1
    ],
    // MPEG 1
    [
      0,
      // Reserved
      144,
      // Layer3
      144,
      // Layer2
      12
      // Layer1
    ]
  ];
  var BytesInSlot = [
    0,
    // Reserved
    1,
    // Layer3
    1,
    // Layer2
    4
    // Layer1
  ];
  function appendFrame$1(track, data, offset, pts, frameIndex) {
    if (offset + 24 > data.length) {
      return;
    }
    const header = parseHeader(data, offset);
    if (header && offset + header.frameLength <= data.length) {
      const frameDuration = header.samplesPerFrame * 9e4 / header.sampleRate;
      const stamp = pts + frameIndex * frameDuration;
      const sample = {
        unit: data.subarray(offset, offset + header.frameLength),
        pts: stamp,
        dts: stamp
      };
      track.config = [];
      track.channelCount = header.channelCount;
      track.samplerate = header.sampleRate;
      track.samples.push(sample);
      return {
        sample,
        length: header.frameLength,
        missing: 0
      };
    }
  }
  function parseHeader(data, offset) {
    const mpegVersion = data[offset + 1] >> 3 & 3;
    const mpegLayer = data[offset + 1] >> 1 & 3;
    const bitRateIndex = data[offset + 2] >> 4 & 15;
    const sampleRateIndex = data[offset + 2] >> 2 & 3;
    if (mpegVersion !== 1 && bitRateIndex !== 0 && bitRateIndex !== 15 && sampleRateIndex !== 3) {
      const paddingBit = data[offset + 2] >> 1 & 1;
      const channelMode = data[offset + 3] >> 6;
      const columnInBitrates = mpegVersion === 3 ? 3 - mpegLayer : mpegLayer === 3 ? 3 : 4;
      const bitRate = BitratesMap[columnInBitrates * 14 + bitRateIndex - 1] * 1e3;
      const columnInSampleRates = mpegVersion === 3 ? 0 : mpegVersion === 2 ? 1 : 2;
      const sampleRate = SamplingRateMap[columnInSampleRates * 3 + sampleRateIndex];
      const channelCount = channelMode === 3 ? 1 : 2;
      const sampleCoefficient = SamplesCoefficients[mpegVersion][mpegLayer];
      const bytesInSlot = BytesInSlot[mpegLayer];
      const samplesPerFrame = sampleCoefficient * 8 * bytesInSlot;
      const frameLength = Math.floor(sampleCoefficient * bitRate / sampleRate + paddingBit) * bytesInSlot;
      if (chromeVersion$1 === null) {
        const userAgent = navigator.userAgent || "";
        const result = userAgent.match(/Chrome\/(\d+)/i);
        chromeVersion$1 = result ? parseInt(result[1]) : 0;
      }
      const needChromeFix = !!chromeVersion$1 && chromeVersion$1 <= 87;
      if (needChromeFix && mpegLayer === 2 && bitRate >= 224e3 && channelMode === 0) {
        data[offset + 3] = data[offset + 3] | 128;
      }
      return {
        sampleRate,
        channelCount,
        frameLength,
        samplesPerFrame
      };
    }
  }
  function isHeaderPattern(data, offset) {
    return data[offset] === 255 && (data[offset + 1] & 224) === 224 && (data[offset + 1] & 6) !== 0;
  }
  function isHeader(data, offset) {
    return offset + 1 < data.length && isHeaderPattern(data, offset);
  }
  function canParse(data, offset) {
    const headerSize = 4;
    return isHeaderPattern(data, offset) && headerSize <= data.length - offset;
  }
  function probe(data, offset) {
    if (offset + 1 < data.length && isHeaderPattern(data, offset)) {
      const headerLength = 4;
      const header = parseHeader(data, offset);
      let frameLength = headerLength;
      if (header != null && header.frameLength) {
        frameLength = header.frameLength;
      }
      const newOffset = offset + frameLength;
      return newOffset === data.length || isHeader(data, newOffset);
    }
    return false;
  }
  var AACDemuxer = class extends BaseAudioDemuxer {
    constructor(observer2, config) {
      super();
      this.observer = void 0;
      this.config = void 0;
      this.observer = observer2;
      this.config = config;
    }
    resetInitSegment(initSegment, audioCodec, videoCodec, trackDuration) {
      super.resetInitSegment(initSegment, audioCodec, videoCodec, trackDuration);
      this._audioTrack = {
        container: "audio/adts",
        type: "audio",
        id: 2,
        pid: -1,
        sequenceNumber: 0,
        segmentCodec: "aac",
        samples: [],
        manifestCodec: audioCodec,
        duration: trackDuration,
        inputTimeScale: 9e4,
        dropped: 0
      };
    }
    // Source for probe info - https://wiki.multimedia.cx/index.php?title=ADTS
    static probe(data) {
      if (!data) {
        return false;
      }
      const id3Data = getID3Data(data, 0);
      let offset = (id3Data == null ? void 0 : id3Data.length) || 0;
      if (probe(data, offset)) {
        return false;
      }
      for (let length = data.length; offset < length; offset++) {
        if (probe$1(data, offset)) {
          logger.log("ADTS sync word found !");
          return true;
        }
      }
      return false;
    }
    canParse(data, offset) {
      return canParse$1(data, offset);
    }
    appendFrame(track, data, offset) {
      initTrackConfig(track, this.observer, data, offset, track.manifestCodec);
      const frame = appendFrame$2(track, data, offset, this.basePTS, this.frameIndex);
      if (frame && frame.missing === 0) {
        return frame;
      }
    }
  };
  var emsgSchemePattern = /\/emsg[-/]ID3/i;
  var MP4Demuxer = class {
    constructor(observer2, config) {
      this.remainderData = null;
      this.timeOffset = 0;
      this.config = void 0;
      this.videoTrack = void 0;
      this.audioTrack = void 0;
      this.id3Track = void 0;
      this.txtTrack = void 0;
      this.config = config;
    }
    resetTimeStamp() {
    }
    resetInitSegment(initSegment, audioCodec, videoCodec, trackDuration) {
      const videoTrack = this.videoTrack = dummyTrack("video", 1);
      const audioTrack = this.audioTrack = dummyTrack("audio", 1);
      const captionTrack = this.txtTrack = dummyTrack("text", 1);
      this.id3Track = dummyTrack("id3", 1);
      this.timeOffset = 0;
      if (!(initSegment != null && initSegment.byteLength)) {
        return;
      }
      const initData = parseInitSegment(initSegment);
      if (initData.video) {
        const {
          id,
          timescale,
          codec
        } = initData.video;
        videoTrack.id = id;
        videoTrack.timescale = captionTrack.timescale = timescale;
        videoTrack.codec = codec;
      }
      if (initData.audio) {
        const {
          id,
          timescale,
          codec
        } = initData.audio;
        audioTrack.id = id;
        audioTrack.timescale = timescale;
        audioTrack.codec = codec;
      }
      captionTrack.id = RemuxerTrackIdConfig.text;
      videoTrack.sampleDuration = 0;
      videoTrack.duration = audioTrack.duration = trackDuration;
    }
    resetContiguity() {
      this.remainderData = null;
    }
    static probe(data) {
      return hasMoofData(data);
    }
    demux(data, timeOffset) {
      this.timeOffset = timeOffset;
      let videoSamples = data;
      const videoTrack = this.videoTrack;
      const textTrack = this.txtTrack;
      if (this.config.progressive) {
        if (this.remainderData) {
          videoSamples = appendUint8Array(this.remainderData, data);
        }
        const segmentedData = segmentValidRange(videoSamples);
        this.remainderData = segmentedData.remainder;
        videoTrack.samples = segmentedData.valid || new Uint8Array();
      } else {
        videoTrack.samples = videoSamples;
      }
      const id3Track = this.extractID3Track(videoTrack, timeOffset);
      textTrack.samples = parseSamples(timeOffset, videoTrack);
      return {
        videoTrack,
        audioTrack: this.audioTrack,
        id3Track,
        textTrack: this.txtTrack
      };
    }
    flush() {
      const timeOffset = this.timeOffset;
      const videoTrack = this.videoTrack;
      const textTrack = this.txtTrack;
      videoTrack.samples = this.remainderData || new Uint8Array();
      this.remainderData = null;
      const id3Track = this.extractID3Track(videoTrack, this.timeOffset);
      textTrack.samples = parseSamples(timeOffset, videoTrack);
      return {
        videoTrack,
        audioTrack: dummyTrack(),
        id3Track,
        textTrack: dummyTrack()
      };
    }
    extractID3Track(videoTrack, timeOffset) {
      const id3Track = this.id3Track;
      if (videoTrack.samples.length) {
        const emsgs = findBox(videoTrack.samples, ["emsg"]);
        if (emsgs) {
          emsgs.forEach((data) => {
            const emsgInfo = parseEmsg(data);
            if (emsgSchemePattern.test(emsgInfo.schemeIdUri)) {
              const pts = isFiniteNumber(emsgInfo.presentationTime) ? emsgInfo.presentationTime / emsgInfo.timeScale : timeOffset + emsgInfo.presentationTimeDelta / emsgInfo.timeScale;
              let duration = emsgInfo.eventDuration === 4294967295 ? Number.POSITIVE_INFINITY : emsgInfo.eventDuration / emsgInfo.timeScale;
              if (duration <= 1e-3) {
                duration = Number.POSITIVE_INFINITY;
              }
              const payload = emsgInfo.payload;
              id3Track.samples.push({
                data: payload,
                len: payload.byteLength,
                dts: pts,
                pts,
                type: MetadataSchema.emsg,
                duration
              });
            }
          });
        }
      }
      return id3Track;
    }
    demuxSampleAes(data, keyData, timeOffset) {
      return Promise.reject(new Error("The MP4 demuxer does not support SAMPLE-AES decryption"));
    }
    destroy() {
    }
  };
  var getAudioBSID = (data, offset) => {
    let bsid = 0;
    let numBits = 5;
    offset += numBits;
    const temp = new Uint32Array(1);
    const mask = new Uint32Array(1);
    const byte = new Uint8Array(1);
    while (numBits > 0) {
      byte[0] = data[offset];
      const bits = Math.min(numBits, 8);
      const shift = 8 - bits;
      mask[0] = 4278190080 >>> 24 + shift << shift;
      temp[0] = (byte[0] & mask[0]) >> shift;
      bsid = !bsid ? temp[0] : bsid << bits | temp[0];
      offset += 1;
      numBits -= bits;
    }
    return bsid;
  };
  var AC3Demuxer = class extends BaseAudioDemuxer {
    constructor(observer2) {
      super();
      this.observer = void 0;
      this.observer = observer2;
    }
    resetInitSegment(initSegment, audioCodec, videoCodec, trackDuration) {
      super.resetInitSegment(initSegment, audioCodec, videoCodec, trackDuration);
      this._audioTrack = {
        container: "audio/ac-3",
        type: "audio",
        id: 2,
        pid: -1,
        sequenceNumber: 0,
        segmentCodec: "ac3",
        samples: [],
        manifestCodec: audioCodec,
        duration: trackDuration,
        inputTimeScale: 9e4,
        dropped: 0
      };
    }
    canParse(data, offset) {
      return offset + 64 < data.length;
    }
    appendFrame(track, data, offset) {
      const frameLength = appendFrame(track, data, offset, this.basePTS, this.frameIndex);
      if (frameLength !== -1) {
        const sample = track.samples[track.samples.length - 1];
        return {
          sample,
          length: frameLength,
          missing: 0
        };
      }
    }
    static probe(data) {
      if (!data) {
        return false;
      }
      const id3Data = getID3Data(data, 0);
      if (!id3Data) {
        return false;
      }
      const offset = id3Data.length;
      if (data[offset] === 11 && data[offset + 1] === 119 && getTimeStamp(id3Data) !== void 0 && // check the bsid to confirm ac-3
      getAudioBSID(data, offset) < 16) {
        return true;
      }
      return false;
    }
  };
  function appendFrame(track, data, start, pts, frameIndex) {
    if (start + 8 > data.length) {
      return -1;
    }
    if (data[start] !== 11 || data[start + 1] !== 119) {
      return -1;
    }
    const samplingRateCode = data[start + 4] >> 6;
    if (samplingRateCode >= 3) {
      return -1;
    }
    const samplingRateMap = [48e3, 44100, 32e3];
    const sampleRate = samplingRateMap[samplingRateCode];
    const frameSizeCode = data[start + 4] & 63;
    const frameSizeMap = [64, 69, 96, 64, 70, 96, 80, 87, 120, 80, 88, 120, 96, 104, 144, 96, 105, 144, 112, 121, 168, 112, 122, 168, 128, 139, 192, 128, 140, 192, 160, 174, 240, 160, 175, 240, 192, 208, 288, 192, 209, 288, 224, 243, 336, 224, 244, 336, 256, 278, 384, 256, 279, 384, 320, 348, 480, 320, 349, 480, 384, 417, 576, 384, 418, 576, 448, 487, 672, 448, 488, 672, 512, 557, 768, 512, 558, 768, 640, 696, 960, 640, 697, 960, 768, 835, 1152, 768, 836, 1152, 896, 975, 1344, 896, 976, 1344, 1024, 1114, 1536, 1024, 1115, 1536, 1152, 1253, 1728, 1152, 1254, 1728, 1280, 1393, 1920, 1280, 1394, 1920];
    const frameLength = frameSizeMap[frameSizeCode * 3 + samplingRateCode] * 2;
    if (start + frameLength > data.length) {
      return -1;
    }
    const channelMode = data[start + 6] >> 5;
    let skipCount = 0;
    if (channelMode === 2) {
      skipCount += 2;
    } else {
      if (channelMode & 1 && channelMode !== 1) {
        skipCount += 2;
      }
      if (channelMode & 4) {
        skipCount += 2;
      }
    }
    const lfeon = (data[start + 6] << 8 | data[start + 7]) >> 12 - skipCount & 1;
    const channelsMap = [2, 1, 2, 3, 3, 4, 4, 5];
    const channelCount = channelsMap[channelMode] + lfeon;
    const bsid = data[start + 5] >> 3;
    const bsmod = data[start + 5] & 7;
    const config = new Uint8Array([samplingRateCode << 6 | bsid << 1 | bsmod >> 2, (bsmod & 3) << 6 | channelMode << 3 | lfeon << 2 | frameSizeCode >> 4, frameSizeCode << 4 & 224]);
    const frameDuration = 1536 / sampleRate * 9e4;
    const stamp = pts + frameIndex * frameDuration;
    const unit = data.subarray(start, start + frameLength);
    track.config = config;
    track.channelCount = channelCount;
    track.samplerate = sampleRate;
    track.samples.push({
      unit,
      pts: stamp
    });
    return frameLength;
  }
  var BaseVideoParser = class {
    constructor() {
      this.VideoSample = null;
    }
    createVideoSample(key, pts, dts, debug) {
      return {
        key,
        frame: false,
        pts,
        dts,
        units: [],
        debug,
        length: 0
      };
    }
    getLastNalUnit(samples) {
      var _VideoSample;
      let VideoSample = this.VideoSample;
      let lastUnit;
      if (!VideoSample || VideoSample.units.length === 0) {
        VideoSample = samples[samples.length - 1];
      }
      if ((_VideoSample = VideoSample) != null && _VideoSample.units) {
        const units = VideoSample.units;
        lastUnit = units[units.length - 1];
      }
      return lastUnit;
    }
    pushAccessUnit(VideoSample, videoTrack) {
      if (VideoSample.units.length && VideoSample.frame) {
        if (VideoSample.pts === void 0) {
          const samples = videoTrack.samples;
          const nbSamples = samples.length;
          if (nbSamples) {
            const lastSample = samples[nbSamples - 1];
            VideoSample.pts = lastSample.pts;
            VideoSample.dts = lastSample.dts;
          } else {
            videoTrack.dropped++;
            return;
          }
        }
        videoTrack.samples.push(VideoSample);
      }
      if (VideoSample.debug.length) {
        logger.log(VideoSample.pts + "/" + VideoSample.dts + ":" + VideoSample.debug);
      }
    }
  };
  var ExpGolomb = class {
    constructor(data) {
      this.data = void 0;
      this.bytesAvailable = void 0;
      this.word = void 0;
      this.bitsAvailable = void 0;
      this.data = data;
      this.bytesAvailable = data.byteLength;
      this.word = 0;
      this.bitsAvailable = 0;
    }
    // ():void
    loadWord() {
      const data = this.data;
      const bytesAvailable = this.bytesAvailable;
      const position = data.byteLength - bytesAvailable;
      const workingBytes = new Uint8Array(4);
      const availableBytes = Math.min(4, bytesAvailable);
      if (availableBytes === 0) {
        throw new Error("no bytes available");
      }
      workingBytes.set(data.subarray(position, position + availableBytes));
      this.word = new DataView(workingBytes.buffer).getUint32(0);
      this.bitsAvailable = availableBytes * 8;
      this.bytesAvailable -= availableBytes;
    }
    // (count:int):void
    skipBits(count) {
      let skipBytes;
      count = Math.min(count, this.bytesAvailable * 8 + this.bitsAvailable);
      if (this.bitsAvailable > count) {
        this.word <<= count;
        this.bitsAvailable -= count;
      } else {
        count -= this.bitsAvailable;
        skipBytes = count >> 3;
        count -= skipBytes << 3;
        this.bytesAvailable -= skipBytes;
        this.loadWord();
        this.word <<= count;
        this.bitsAvailable -= count;
      }
    }
    // (size:int):uint
    readBits(size) {
      let bits = Math.min(this.bitsAvailable, size);
      const valu = this.word >>> 32 - bits;
      if (size > 32) {
        logger.error("Cannot read more than 32 bits at a time");
      }
      this.bitsAvailable -= bits;
      if (this.bitsAvailable > 0) {
        this.word <<= bits;
      } else if (this.bytesAvailable > 0) {
        this.loadWord();
      } else {
        throw new Error("no bits available");
      }
      bits = size - bits;
      if (bits > 0 && this.bitsAvailable) {
        return valu << bits | this.readBits(bits);
      } else {
        return valu;
      }
    }
    // ():uint
    skipLZ() {
      let leadingZeroCount;
      for (leadingZeroCount = 0; leadingZeroCount < this.bitsAvailable; ++leadingZeroCount) {
        if ((this.word & 2147483648 >>> leadingZeroCount) !== 0) {
          this.word <<= leadingZeroCount;
          this.bitsAvailable -= leadingZeroCount;
          return leadingZeroCount;
        }
      }
      this.loadWord();
      return leadingZeroCount + this.skipLZ();
    }
    // ():void
    skipUEG() {
      this.skipBits(1 + this.skipLZ());
    }
    // ():void
    skipEG() {
      this.skipBits(1 + this.skipLZ());
    }
    // ():uint
    readUEG() {
      const clz = this.skipLZ();
      return this.readBits(clz + 1) - 1;
    }
    // ():int
    readEG() {
      const valu = this.readUEG();
      if (1 & valu) {
        return 1 + valu >>> 1;
      } else {
        return -1 * (valu >>> 1);
      }
    }
    // Some convenience functions
    // :Boolean
    readBoolean() {
      return this.readBits(1) === 1;
    }
    // ():int
    readUByte() {
      return this.readBits(8);
    }
    // ():int
    readUShort() {
      return this.readBits(16);
    }
    // ():int
    readUInt() {
      return this.readBits(32);
    }
    /**
     * Advance the ExpGolomb decoder past a scaling list. The scaling
     * list is optionally transmitted as part of a sequence parameter
     * set and is not relevant to transmuxing.
     * @param count the number of entries in this scaling list
     * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1
     */
    skipScalingList(count) {
      let lastScale = 8;
      let nextScale = 8;
      let deltaScale;
      for (let j = 0; j < count; j++) {
        if (nextScale !== 0) {
          deltaScale = this.readEG();
          nextScale = (lastScale + deltaScale + 256) % 256;
        }
        lastScale = nextScale === 0 ? lastScale : nextScale;
      }
    }
    /**
     * Read a sequence parameter set and return some interesting video
     * properties. A sequence parameter set is the H264 metadata that
     * describes the properties of upcoming video frames.
     * @returns an object with configuration parsed from the
     * sequence parameter set, including the dimensions of the
     * associated video frames.
     */
    readSPS() {
      let frameCropLeftOffset = 0;
      let frameCropRightOffset = 0;
      let frameCropTopOffset = 0;
      let frameCropBottomOffset = 0;
      let numRefFramesInPicOrderCntCycle;
      let scalingListCount;
      let i;
      const readUByte = this.readUByte.bind(this);
      const readBits = this.readBits.bind(this);
      const readUEG = this.readUEG.bind(this);
      const readBoolean = this.readBoolean.bind(this);
      const skipBits = this.skipBits.bind(this);
      const skipEG = this.skipEG.bind(this);
      const skipUEG = this.skipUEG.bind(this);
      const skipScalingList = this.skipScalingList.bind(this);
      readUByte();
      const profileIdc = readUByte();
      readBits(5);
      skipBits(3);
      readUByte();
      skipUEG();
      if (profileIdc === 100 || profileIdc === 110 || profileIdc === 122 || profileIdc === 244 || profileIdc === 44 || profileIdc === 83 || profileIdc === 86 || profileIdc === 118 || profileIdc === 128) {
        const chromaFormatIdc = readUEG();
        if (chromaFormatIdc === 3) {
          skipBits(1);
        }
        skipUEG();
        skipUEG();
        skipBits(1);
        if (readBoolean()) {
          scalingListCount = chromaFormatIdc !== 3 ? 8 : 12;
          for (i = 0; i < scalingListCount; i++) {
            if (readBoolean()) {
              if (i < 6) {
                skipScalingList(16);
              } else {
                skipScalingList(64);
              }
            }
          }
        }
      }
      skipUEG();
      const picOrderCntType = readUEG();
      if (picOrderCntType === 0) {
        readUEG();
      } else if (picOrderCntType === 1) {
        skipBits(1);
        skipEG();
        skipEG();
        numRefFramesInPicOrderCntCycle = readUEG();
        for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {
          skipEG();
        }
      }
      skipUEG();
      skipBits(1);
      const picWidthInMbsMinus1 = readUEG();
      const picHeightInMapUnitsMinus1 = readUEG();
      const frameMbsOnlyFlag = readBits(1);
      if (frameMbsOnlyFlag === 0) {
        skipBits(1);
      }
      skipBits(1);
      if (readBoolean()) {
        frameCropLeftOffset = readUEG();
        frameCropRightOffset = readUEG();
        frameCropTopOffset = readUEG();
        frameCropBottomOffset = readUEG();
      }
      let pixelRatio = [1, 1];
      if (readBoolean()) {
        if (readBoolean()) {
          const aspectRatioIdc = readUByte();
          switch (aspectRatioIdc) {
            case 1:
              pixelRatio = [1, 1];
              break;
            case 2:
              pixelRatio = [12, 11];
              break;
            case 3:
              pixelRatio = [10, 11];
              break;
            case 4:
              pixelRatio = [16, 11];
              break;
            case 5:
              pixelRatio = [40, 33];
              break;
            case 6:
              pixelRatio = [24, 11];
              break;
            case 7:
              pixelRatio = [20, 11];
              break;
            case 8:
              pixelRatio = [32, 11];
              break;
            case 9:
              pixelRatio = [80, 33];
              break;
            case 10:
              pixelRatio = [18, 11];
              break;
            case 11:
              pixelRatio = [15, 11];
              break;
            case 12:
              pixelRatio = [64, 33];
              break;
            case 13:
              pixelRatio = [160, 99];
              break;
            case 14:
              pixelRatio = [4, 3];
              break;
            case 15:
              pixelRatio = [3, 2];
              break;
            case 16:
              pixelRatio = [2, 1];
              break;
            case 255: {
              pixelRatio = [readUByte() << 8 | readUByte(), readUByte() << 8 | readUByte()];
              break;
            }
          }
        }
      }
      return {
        width: Math.ceil((picWidthInMbsMinus1 + 1) * 16 - frameCropLeftOffset * 2 - frameCropRightOffset * 2),
        height: (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16 - (frameMbsOnlyFlag ? 2 : 4) * (frameCropTopOffset + frameCropBottomOffset),
        pixelRatio
      };
    }
    readSliceType() {
      this.readUByte();
      this.readUEG();
      return this.readUEG();
    }
  };
  var AvcVideoParser = class extends BaseVideoParser {
    parseAVCPES(track, textTrack, pes, last, duration) {
      const units = this.parseAVCNALu(track, pes.data);
      let VideoSample = this.VideoSample;
      let push2;
      let spsfound = false;
      pes.data = null;
      if (VideoSample && units.length && !track.audFound) {
        this.pushAccessUnit(VideoSample, track);
        VideoSample = this.VideoSample = this.createVideoSample(false, pes.pts, pes.dts, "");
      }
      units.forEach((unit) => {
        var _VideoSample2;
        switch (unit.type) {
          // NDR
          case 1: {
            let iskey = false;
            push2 = true;
            const data = unit.data;
            if (spsfound && data.length > 4) {
              const sliceType = new ExpGolomb(data).readSliceType();
              if (sliceType === 2 || sliceType === 4 || sliceType === 7 || sliceType === 9) {
                iskey = true;
              }
            }
            if (iskey) {
              var _VideoSample;
              if ((_VideoSample = VideoSample) != null && _VideoSample.frame && !VideoSample.key) {
                this.pushAccessUnit(VideoSample, track);
                VideoSample = this.VideoSample = null;
              }
            }
            if (!VideoSample) {
              VideoSample = this.VideoSample = this.createVideoSample(true, pes.pts, pes.dts, "");
            }
            VideoSample.frame = true;
            VideoSample.key = iskey;
            break;
          }
          case 5:
            push2 = true;
            if ((_VideoSample2 = VideoSample) != null && _VideoSample2.frame && !VideoSample.key) {
              this.pushAccessUnit(VideoSample, track);
              VideoSample = this.VideoSample = null;
            }
            if (!VideoSample) {
              VideoSample = this.VideoSample = this.createVideoSample(true, pes.pts, pes.dts, "");
            }
            VideoSample.key = true;
            VideoSample.frame = true;
            break;
          // SEI
          case 6: {
            push2 = true;
            parseSEIMessageFromNALu(unit.data, 1, pes.pts, textTrack.samples);
            break;
          }
          case 7: {
            var _track$pixelRatio, _track$pixelRatio2;
            push2 = true;
            spsfound = true;
            const sps = unit.data;
            const expGolombDecoder = new ExpGolomb(sps);
            const config = expGolombDecoder.readSPS();
            if (!track.sps || track.width !== config.width || track.height !== config.height || ((_track$pixelRatio = track.pixelRatio) == null ? void 0 : _track$pixelRatio[0]) !== config.pixelRatio[0] || ((_track$pixelRatio2 = track.pixelRatio) == null ? void 0 : _track$pixelRatio2[1]) !== config.pixelRatio[1]) {
              track.width = config.width;
              track.height = config.height;
              track.pixelRatio = config.pixelRatio;
              track.sps = [sps];
              track.duration = duration;
              const codecarray = sps.subarray(1, 4);
              let codecstring = "avc1.";
              for (let i = 0; i < 3; i++) {
                let h = codecarray[i].toString(16);
                if (h.length < 2) {
                  h = "0" + h;
                }
                codecstring += h;
              }
              track.codec = codecstring;
            }
            break;
          }
          // PPS
          case 8:
            push2 = true;
            track.pps = [unit.data];
            break;
          // AUD
          case 9:
            push2 = true;
            track.audFound = true;
            if (VideoSample) {
              this.pushAccessUnit(VideoSample, track);
            }
            VideoSample = this.VideoSample = this.createVideoSample(false, pes.pts, pes.dts, "");
            break;
          // Filler Data
          case 12:
            push2 = true;
            break;
          default:
            push2 = false;
            if (VideoSample) {
              VideoSample.debug += "unknown NAL " + unit.type + " ";
            }
            break;
        }
        if (VideoSample && push2) {
          const units2 = VideoSample.units;
          units2.push(unit);
        }
      });
      if (last && VideoSample) {
        this.pushAccessUnit(VideoSample, track);
        this.VideoSample = null;
      }
    }
    parseAVCNALu(track, array) {
      const len = array.byteLength;
      let state = track.naluState || 0;
      const lastState = state;
      const units = [];
      let i = 0;
      let value;
      let overflow;
      let unitType;
      let lastUnitStart = -1;
      let lastUnitType = 0;
      if (state === -1) {
        lastUnitStart = 0;
        lastUnitType = array[0] & 31;
        state = 0;
        i = 1;
      }
      while (i < len) {
        value = array[i++];
        if (!state) {
          state = value ? 0 : 1;
          continue;
        }
        if (state === 1) {
          state = value ? 0 : 2;
          continue;
        }
        if (!value) {
          state = 3;
        } else if (value === 1) {
          overflow = i - state - 1;
          if (lastUnitStart >= 0) {
            const unit = {
              data: array.subarray(lastUnitStart, overflow),
              type: lastUnitType
            };
            units.push(unit);
          } else {
            const lastUnit = this.getLastNalUnit(track.samples);
            if (lastUnit) {
              if (lastState && i <= 4 - lastState) {
                if (lastUnit.state) {
                  lastUnit.data = lastUnit.data.subarray(0, lastUnit.data.byteLength - lastState);
                }
              }
              if (overflow > 0) {
                lastUnit.data = appendUint8Array(lastUnit.data, array.subarray(0, overflow));
                lastUnit.state = 0;
              }
            }
          }
          if (i < len) {
            unitType = array[i] & 31;
            lastUnitStart = i;
            lastUnitType = unitType;
            state = 0;
          } else {
            state = -1;
          }
        } else {
          state = 0;
        }
      }
      if (lastUnitStart >= 0 && state >= 0) {
        const unit = {
          data: array.subarray(lastUnitStart, len),
          type: lastUnitType,
          state
        };
        units.push(unit);
      }
      if (units.length === 0) {
        const lastUnit = this.getLastNalUnit(track.samples);
        if (lastUnit) {
          lastUnit.data = appendUint8Array(lastUnit.data, array);
        }
      }
      track.naluState = state;
      return units;
    }
  };
  var SampleAesDecrypter = class {
    constructor(observer2, config, keyData) {
      this.keyData = void 0;
      this.decrypter = void 0;
      this.keyData = keyData;
      this.decrypter = new Decrypter(config, {
        removePKCS7Padding: false
      });
    }
    decryptBuffer(encryptedData) {
      return this.decrypter.decrypt(encryptedData, this.keyData.key.buffer, this.keyData.iv.buffer);
    }
    // AAC - encrypt all full 16 bytes blocks starting from offset 16
    decryptAacSample(samples, sampleIndex, callback) {
      const curUnit = samples[sampleIndex].unit;
      if (curUnit.length <= 16) {
        return;
      }
      const encryptedData = curUnit.subarray(16, curUnit.length - curUnit.length % 16);
      const encryptedBuffer = encryptedData.buffer.slice(encryptedData.byteOffset, encryptedData.byteOffset + encryptedData.length);
      this.decryptBuffer(encryptedBuffer).then((decryptedBuffer) => {
        const decryptedData = new Uint8Array(decryptedBuffer);
        curUnit.set(decryptedData, 16);
        if (!this.decrypter.isSync()) {
          this.decryptAacSamples(samples, sampleIndex + 1, callback);
        }
      });
    }
    decryptAacSamples(samples, sampleIndex, callback) {
      for (; ; sampleIndex++) {
        if (sampleIndex >= samples.length) {
          callback();
          return;
        }
        if (samples[sampleIndex].unit.length < 32) {
          continue;
        }
        this.decryptAacSample(samples, sampleIndex, callback);
        if (!this.decrypter.isSync()) {
          return;
        }
      }
    }
    // AVC - encrypt one 16 bytes block out of ten, starting from offset 32
    getAvcEncryptedData(decodedData) {
      const encryptedDataLen = Math.floor((decodedData.length - 48) / 160) * 16 + 16;
      const encryptedData = new Int8Array(encryptedDataLen);
      let outputPos = 0;
      for (let inputPos = 32; inputPos < decodedData.length - 16; inputPos += 160, outputPos += 16) {
        encryptedData.set(decodedData.subarray(inputPos, inputPos + 16), outputPos);
      }
      return encryptedData;
    }
    getAvcDecryptedUnit(decodedData, decryptedData) {
      const uint8DecryptedData = new Uint8Array(decryptedData);
      let inputPos = 0;
      for (let outputPos = 32; outputPos < decodedData.length - 16; outputPos += 160, inputPos += 16) {
        decodedData.set(uint8DecryptedData.subarray(inputPos, inputPos + 16), outputPos);
      }
      return decodedData;
    }
    decryptAvcSample(samples, sampleIndex, unitIndex, callback, curUnit) {
      const decodedData = discardEPB(curUnit.data);
      const encryptedData = this.getAvcEncryptedData(decodedData);
      this.decryptBuffer(encryptedData.buffer).then((decryptedBuffer) => {
        curUnit.data = this.getAvcDecryptedUnit(decodedData, decryptedBuffer);
        if (!this.decrypter.isSync()) {
          this.decryptAvcSamples(samples, sampleIndex, unitIndex + 1, callback);
        }
      });
    }
    decryptAvcSamples(samples, sampleIndex, unitIndex, callback) {
      if (samples instanceof Uint8Array) {
        throw new Error("Cannot decrypt samples of type Uint8Array");
      }
      for (; ; sampleIndex++, unitIndex = 0) {
        if (sampleIndex >= samples.length) {
          callback();
          return;
        }
        const curUnits = samples[sampleIndex].units;
        for (; ; unitIndex++) {
          if (unitIndex >= curUnits.length) {
            break;
          }
          const curUnit = curUnits[unitIndex];
          if (curUnit.data.length <= 48 || curUnit.type !== 1 && curUnit.type !== 5) {
            continue;
          }
          this.decryptAvcSample(samples, sampleIndex, unitIndex, callback, curUnit);
          if (!this.decrypter.isSync()) {
            return;
          }
        }
      }
    }
  };
  var PACKET_LENGTH = 188;
  var TSDemuxer = class _TSDemuxer {
    constructor(observer2, config, typeSupported) {
      this.observer = void 0;
      this.config = void 0;
      this.typeSupported = void 0;
      this.sampleAes = null;
      this.pmtParsed = false;
      this.audioCodec = void 0;
      this.videoCodec = void 0;
      this._duration = 0;
      this._pmtId = -1;
      this._videoTrack = void 0;
      this._audioTrack = void 0;
      this._id3Track = void 0;
      this._txtTrack = void 0;
      this.aacOverFlow = null;
      this.remainderData = null;
      this.videoParser = void 0;
      this.observer = observer2;
      this.config = config;
      this.typeSupported = typeSupported;
      this.videoParser = new AvcVideoParser();
    }
    static probe(data) {
      const syncOffset = _TSDemuxer.syncOffset(data);
      if (syncOffset > 0) {
        logger.warn(`MPEG2-TS detected but first sync word found @ offset ${syncOffset}`);
      }
      return syncOffset !== -1;
    }
    static syncOffset(data) {
      const length = data.length;
      let scanwindow = Math.min(PACKET_LENGTH * 5, length - PACKET_LENGTH) + 1;
      let i = 0;
      while (i < scanwindow) {
        let foundPat = false;
        let packetStart = -1;
        let tsPackets = 0;
        for (let j = i; j < length; j += PACKET_LENGTH) {
          if (data[j] === 71 && (length - j === PACKET_LENGTH || data[j + PACKET_LENGTH] === 71)) {
            tsPackets++;
            if (packetStart === -1) {
              packetStart = j;
              if (packetStart !== 0) {
                scanwindow = Math.min(packetStart + PACKET_LENGTH * 99, data.length - PACKET_LENGTH) + 1;
              }
            }
            if (!foundPat) {
              foundPat = parsePID(data, j) === 0;
            }
            if (foundPat && tsPackets > 1 && (packetStart === 0 && tsPackets > 2 || j + PACKET_LENGTH > scanwindow)) {
              return packetStart;
            }
          } else if (tsPackets) {
            return -1;
          } else {
            break;
          }
        }
        i++;
      }
      return -1;
    }
    /**
     * Creates a track model internal to demuxer used to drive remuxing input
     */
    static createTrack(type, duration) {
      return {
        container: type === "video" || type === "audio" ? "video/mp2t" : void 0,
        type,
        id: RemuxerTrackIdConfig[type],
        pid: -1,
        inputTimeScale: 9e4,
        sequenceNumber: 0,
        samples: [],
        dropped: 0,
        duration: type === "audio" ? duration : void 0
      };
    }
    /**
     * Initializes a new init segment on the demuxer/remuxer interface. Needed for discontinuities/track-switches (or at stream start)
     * Resets all internal track instances of the demuxer.
     */
    resetInitSegment(initSegment, audioCodec, videoCodec, trackDuration) {
      this.pmtParsed = false;
      this._pmtId = -1;
      this._videoTrack = _TSDemuxer.createTrack("video");
      this._audioTrack = _TSDemuxer.createTrack("audio", trackDuration);
      this._id3Track = _TSDemuxer.createTrack("id3");
      this._txtTrack = _TSDemuxer.createTrack("text");
      this._audioTrack.segmentCodec = "aac";
      this.aacOverFlow = null;
      this.remainderData = null;
      this.audioCodec = audioCodec;
      this.videoCodec = videoCodec;
      this._duration = trackDuration;
    }
    resetTimeStamp() {
    }
    resetContiguity() {
      const {
        _audioTrack,
        _videoTrack,
        _id3Track
      } = this;
      if (_audioTrack) {
        _audioTrack.pesData = null;
      }
      if (_videoTrack) {
        _videoTrack.pesData = null;
      }
      if (_id3Track) {
        _id3Track.pesData = null;
      }
      this.aacOverFlow = null;
      this.remainderData = null;
    }
    demux(data, timeOffset, isSampleAes = false, flush = false) {
      if (!isSampleAes) {
        this.sampleAes = null;
      }
      let pes;
      const videoTrack = this._videoTrack;
      const audioTrack = this._audioTrack;
      const id3Track = this._id3Track;
      const textTrack = this._txtTrack;
      let videoPid = videoTrack.pid;
      let videoData = videoTrack.pesData;
      let audioPid = audioTrack.pid;
      let id3Pid = id3Track.pid;
      let audioData = audioTrack.pesData;
      let id3Data = id3Track.pesData;
      let unknownPID = null;
      let pmtParsed = this.pmtParsed;
      let pmtId = this._pmtId;
      let len = data.length;
      if (this.remainderData) {
        data = appendUint8Array(this.remainderData, data);
        len = data.length;
        this.remainderData = null;
      }
      if (len < PACKET_LENGTH && !flush) {
        this.remainderData = data;
        return {
          audioTrack,
          videoTrack,
          id3Track,
          textTrack
        };
      }
      const syncOffset = Math.max(0, _TSDemuxer.syncOffset(data));
      len -= (len - syncOffset) % PACKET_LENGTH;
      if (len < data.byteLength && !flush) {
        this.remainderData = new Uint8Array(data.buffer, len, data.buffer.byteLength - len);
      }
      let tsPacketErrors = 0;
      for (let start = syncOffset; start < len; start += PACKET_LENGTH) {
        if (data[start] === 71) {
          const stt = !!(data[start + 1] & 64);
          const pid = parsePID(data, start);
          const atf = (data[start + 3] & 48) >> 4;
          let offset;
          if (atf > 1) {
            offset = start + 5 + data[start + 4];
            if (offset === start + PACKET_LENGTH) {
              continue;
            }
          } else {
            offset = start + 4;
          }
          switch (pid) {
            case videoPid:
              if (stt) {
                if (videoData && (pes = parsePES(videoData))) {
                  this.videoParser.parseAVCPES(videoTrack, textTrack, pes, false, this._duration);
                }
                videoData = {
                  data: [],
                  size: 0
                };
              }
              if (videoData) {
                videoData.data.push(data.subarray(offset, start + PACKET_LENGTH));
                videoData.size += start + PACKET_LENGTH - offset;
              }
              break;
            case audioPid:
              if (stt) {
                if (audioData && (pes = parsePES(audioData))) {
                  switch (audioTrack.segmentCodec) {
                    case "aac":
                      this.parseAACPES(audioTrack, pes);
                      break;
                    case "mp3":
                      this.parseMPEGPES(audioTrack, pes);
                      break;
                    case "ac3":
                      {
                        this.parseAC3PES(audioTrack, pes);
                      }
                      break;
                  }
                }
                audioData = {
                  data: [],
                  size: 0
                };
              }
              if (audioData) {
                audioData.data.push(data.subarray(offset, start + PACKET_LENGTH));
                audioData.size += start + PACKET_LENGTH - offset;
              }
              break;
            case id3Pid:
              if (stt) {
                if (id3Data && (pes = parsePES(id3Data))) {
                  this.parseID3PES(id3Track, pes);
                }
                id3Data = {
                  data: [],
                  size: 0
                };
              }
              if (id3Data) {
                id3Data.data.push(data.subarray(offset, start + PACKET_LENGTH));
                id3Data.size += start + PACKET_LENGTH - offset;
              }
              break;
            case 0:
              if (stt) {
                offset += data[offset] + 1;
              }
              pmtId = this._pmtId = parsePAT(data, offset);
              break;
            case pmtId: {
              if (stt) {
                offset += data[offset] + 1;
              }
              const parsedPIDs = parsePMT(data, offset, this.typeSupported, isSampleAes, this.observer);
              videoPid = parsedPIDs.videoPid;
              if (videoPid > 0) {
                videoTrack.pid = videoPid;
                videoTrack.segmentCodec = parsedPIDs.segmentVideoCodec;
              }
              audioPid = parsedPIDs.audioPid;
              if (audioPid > 0) {
                audioTrack.pid = audioPid;
                audioTrack.segmentCodec = parsedPIDs.segmentAudioCodec;
              }
              id3Pid = parsedPIDs.id3Pid;
              if (id3Pid > 0) {
                id3Track.pid = id3Pid;
              }
              if (unknownPID !== null && !pmtParsed) {
                logger.warn(`MPEG-TS PMT found at ${start} after unknown PID '${unknownPID}'. Backtracking to sync byte @${syncOffset} to parse all TS packets.`);
                unknownPID = null;
                start = syncOffset - 188;
              }
              pmtParsed = this.pmtParsed = true;
              break;
            }
            case 17:
            case 8191:
              break;
            default:
              unknownPID = pid;
              break;
          }
        } else {
          tsPacketErrors++;
        }
      }
      if (tsPacketErrors > 0) {
        emitParsingError(this.observer, new Error(`Found ${tsPacketErrors} TS packet/s that do not start with 0x47`));
      }
      videoTrack.pesData = videoData;
      audioTrack.pesData = audioData;
      id3Track.pesData = id3Data;
      const demuxResult = {
        audioTrack,
        videoTrack,
        id3Track,
        textTrack
      };
      if (flush) {
        this.extractRemainingSamples(demuxResult);
      }
      return demuxResult;
    }
    flush() {
      const {
        remainderData
      } = this;
      this.remainderData = null;
      let result;
      if (remainderData) {
        result = this.demux(remainderData, -1, false, true);
      } else {
        result = {
          videoTrack: this._videoTrack,
          audioTrack: this._audioTrack,
          id3Track: this._id3Track,
          textTrack: this._txtTrack
        };
      }
      this.extractRemainingSamples(result);
      if (this.sampleAes) {
        return this.decrypt(result, this.sampleAes);
      }
      return result;
    }
    extractRemainingSamples(demuxResult) {
      const {
        audioTrack,
        videoTrack,
        id3Track,
        textTrack
      } = demuxResult;
      const videoData = videoTrack.pesData;
      const audioData = audioTrack.pesData;
      const id3Data = id3Track.pesData;
      let pes;
      if (videoData && (pes = parsePES(videoData))) {
        this.videoParser.parseAVCPES(videoTrack, textTrack, pes, true, this._duration);
        videoTrack.pesData = null;
      } else {
        videoTrack.pesData = videoData;
      }
      if (audioData && (pes = parsePES(audioData))) {
        switch (audioTrack.segmentCodec) {
          case "aac":
            this.parseAACPES(audioTrack, pes);
            break;
          case "mp3":
            this.parseMPEGPES(audioTrack, pes);
            break;
          case "ac3":
            {
              this.parseAC3PES(audioTrack, pes);
            }
            break;
        }
        audioTrack.pesData = null;
      } else {
        if (audioData != null && audioData.size) {
          logger.log("last AAC PES packet truncated,might overlap between fragments");
        }
        audioTrack.pesData = audioData;
      }
      if (id3Data && (pes = parsePES(id3Data))) {
        this.parseID3PES(id3Track, pes);
        id3Track.pesData = null;
      } else {
        id3Track.pesData = id3Data;
      }
    }
    demuxSampleAes(data, keyData, timeOffset) {
      const demuxResult = this.demux(data, timeOffset, true, !this.config.progressive);
      const sampleAes = this.sampleAes = new SampleAesDecrypter(this.observer, this.config, keyData);
      return this.decrypt(demuxResult, sampleAes);
    }
    decrypt(demuxResult, sampleAes) {
      return new Promise((resolve) => {
        const {
          audioTrack,
          videoTrack
        } = demuxResult;
        if (audioTrack.samples && audioTrack.segmentCodec === "aac") {
          sampleAes.decryptAacSamples(audioTrack.samples, 0, () => {
            if (videoTrack.samples) {
              sampleAes.decryptAvcSamples(videoTrack.samples, 0, 0, () => {
                resolve(demuxResult);
              });
            } else {
              resolve(demuxResult);
            }
          });
        } else if (videoTrack.samples) {
          sampleAes.decryptAvcSamples(videoTrack.samples, 0, 0, () => {
            resolve(demuxResult);
          });
        }
      });
    }
    destroy() {
      this._duration = 0;
    }
    parseAACPES(track, pes) {
      let startOffset = 0;
      const aacOverFlow = this.aacOverFlow;
      let data = pes.data;
      if (aacOverFlow) {
        this.aacOverFlow = null;
        const frameMissingBytes = aacOverFlow.missing;
        const sampleLength = aacOverFlow.sample.unit.byteLength;
        if (frameMissingBytes === -1) {
          data = appendUint8Array(aacOverFlow.sample.unit, data);
        } else {
          const frameOverflowBytes = sampleLength - frameMissingBytes;
          aacOverFlow.sample.unit.set(data.subarray(0, frameMissingBytes), frameOverflowBytes);
          track.samples.push(aacOverFlow.sample);
          startOffset = aacOverFlow.missing;
        }
      }
      let offset;
      let len;
      for (offset = startOffset, len = data.length; offset < len - 1; offset++) {
        if (isHeader$1(data, offset)) {
          break;
        }
      }
      if (offset !== startOffset) {
        let reason;
        const recoverable = offset < len - 1;
        if (recoverable) {
          reason = `AAC PES did not start with ADTS header,offset:${offset}`;
        } else {
          reason = "No ADTS header found in AAC PES";
        }
        emitParsingError(this.observer, new Error(reason), recoverable);
        if (!recoverable) {
          return;
        }
      }
      initTrackConfig(track, this.observer, data, offset, this.audioCodec);
      let pts;
      if (pes.pts !== void 0) {
        pts = pes.pts;
      } else if (aacOverFlow) {
        const frameDuration = getFrameDuration(track.samplerate);
        pts = aacOverFlow.sample.pts + frameDuration;
      } else {
        logger.warn("[tsdemuxer]: AAC PES unknown PTS");
        return;
      }
      let frameIndex = 0;
      let frame;
      while (offset < len) {
        frame = appendFrame$2(track, data, offset, pts, frameIndex);
        offset += frame.length;
        if (!frame.missing) {
          frameIndex++;
          for (; offset < len - 1; offset++) {
            if (isHeader$1(data, offset)) {
              break;
            }
          }
        } else {
          this.aacOverFlow = frame;
          break;
        }
      }
    }
    parseMPEGPES(track, pes) {
      const data = pes.data;
      const length = data.length;
      let frameIndex = 0;
      let offset = 0;
      const pts = pes.pts;
      if (pts === void 0) {
        logger.warn("[tsdemuxer]: MPEG PES unknown PTS");
        return;
      }
      while (offset < length) {
        if (isHeader(data, offset)) {
          const frame = appendFrame$1(track, data, offset, pts, frameIndex);
          if (frame) {
            offset += frame.length;
            frameIndex++;
          } else {
            break;
          }
        } else {
          offset++;
        }
      }
    }
    parseAC3PES(track, pes) {
      {
        const data = pes.data;
        const pts = pes.pts;
        if (pts === void 0) {
          logger.warn("[tsdemuxer]: AC3 PES unknown PTS");
          return;
        }
        const length = data.length;
        let frameIndex = 0;
        let offset = 0;
        let parsed;
        while (offset < length && (parsed = appendFrame(track, data, offset, pts, frameIndex++)) > 0) {
          offset += parsed;
        }
      }
    }
    parseID3PES(id3Track, pes) {
      if (pes.pts === void 0) {
        logger.warn("[tsdemuxer]: ID3 PES unknown PTS");
        return;
      }
      const id3Sample = _extends({}, pes, {
        type: this._videoTrack ? MetadataSchema.emsg : MetadataSchema.audioId3,
        duration: Number.POSITIVE_INFINITY
      });
      id3Track.samples.push(id3Sample);
    }
  };
  function parsePID(data, offset) {
    return ((data[offset + 1] & 31) << 8) + data[offset + 2];
  }
  function parsePAT(data, offset) {
    return (data[offset + 10] & 31) << 8 | data[offset + 11];
  }
  function parsePMT(data, offset, typeSupported, isSampleAes, observer2) {
    const result = {
      audioPid: -1,
      videoPid: -1,
      id3Pid: -1,
      segmentVideoCodec: "avc",
      segmentAudioCodec: "aac"
    };
    const sectionLength = (data[offset + 1] & 15) << 8 | data[offset + 2];
    const tableEnd = offset + 3 + sectionLength - 4;
    const programInfoLength = (data[offset + 10] & 15) << 8 | data[offset + 11];
    offset += 12 + programInfoLength;
    while (offset < tableEnd) {
      const pid = parsePID(data, offset);
      const esInfoLength = (data[offset + 3] & 15) << 8 | data[offset + 4];
      switch (data[offset]) {
        case 207:
          if (!isSampleAes) {
            logEncryptedSamplesFoundInUnencryptedStream("ADTS AAC");
            break;
          }
        /* falls through */
        case 15:
          if (result.audioPid === -1) {
            result.audioPid = pid;
          }
          break;
        // Packetized metadata (ID3)
        case 21:
          if (result.id3Pid === -1) {
            result.id3Pid = pid;
          }
          break;
        case 219:
          if (!isSampleAes) {
            logEncryptedSamplesFoundInUnencryptedStream("H.264");
            break;
          }
        /* falls through */
        case 27:
          if (result.videoPid === -1) {
            result.videoPid = pid;
            result.segmentVideoCodec = "avc";
          }
          break;
        // ISO/IEC 11172-3 (MPEG-1 audio)
        // or ISO/IEC 13818-3 (MPEG-2 halved sample rate audio)
        case 3:
        case 4:
          if (!typeSupported.mpeg && !typeSupported.mp3) {
            logger.log("MPEG audio found, not supported in this browser");
          } else if (result.audioPid === -1) {
            result.audioPid = pid;
            result.segmentAudioCodec = "mp3";
          }
          break;
        case 193:
          if (!isSampleAes) {
            logEncryptedSamplesFoundInUnencryptedStream("AC-3");
            break;
          }
        /* falls through */
        case 129:
          {
            if (!typeSupported.ac3) {
              logger.log("AC-3 audio found, not supported in this browser");
            } else if (result.audioPid === -1) {
              result.audioPid = pid;
              result.segmentAudioCodec = "ac3";
            }
          }
          break;
        case 6:
          if (result.audioPid === -1 && esInfoLength > 0) {
            let parsePos = offset + 5;
            let remaining = esInfoLength;
            while (remaining > 2) {
              const descriptorId = data[parsePos];
              switch (descriptorId) {
                case 106:
                  {
                    if (typeSupported.ac3 !== true) {
                      logger.log("AC-3 audio found, not supported in this browser for now");
                    } else {
                      result.audioPid = pid;
                      result.segmentAudioCodec = "ac3";
                    }
                  }
                  break;
              }
              const descriptorLen = data[parsePos + 1] + 2;
              parsePos += descriptorLen;
              remaining -= descriptorLen;
            }
          }
          break;
        case 194:
        // SAMPLE-AES EC3
        /* falls through */
        case 135:
          emitParsingError(observer2, new Error("Unsupported EC-3 in M2TS found"));
          return result;
        case 36:
          emitParsingError(observer2, new Error("Unsupported HEVC in M2TS found"));
          return result;
      }
      offset += esInfoLength + 5;
    }
    return result;
  }
  function emitParsingError(observer2, error, levelRetry) {
    logger.warn(`parsing error: ${error.message}`);
    observer2.emit(Events2.ERROR, Events2.ERROR, {
      type: ErrorTypes.MEDIA_ERROR,
      details: ErrorDetails.FRAG_PARSING_ERROR,
      fatal: false,
      levelRetry,
      error,
      reason: error.message
    });
  }
  function logEncryptedSamplesFoundInUnencryptedStream(type) {
    logger.log(`${type} with AES-128-CBC encryption found in unencrypted stream`);
  }
  function parsePES(stream) {
    let i = 0;
    let frag;
    let pesLen;
    let pesHdrLen;
    let pesPts;
    let pesDts;
    const data = stream.data;
    if (!stream || stream.size === 0) {
      return null;
    }
    while (data[0].length < 19 && data.length > 1) {
      data[0] = appendUint8Array(data[0], data[1]);
      data.splice(1, 1);
    }
    frag = data[0];
    const pesPrefix = (frag[0] << 16) + (frag[1] << 8) + frag[2];
    if (pesPrefix === 1) {
      pesLen = (frag[4] << 8) + frag[5];
      if (pesLen && pesLen > stream.size - 6) {
        return null;
      }
      const pesFlags = frag[7];
      if (pesFlags & 192) {
        pesPts = (frag[9] & 14) * 536870912 + // 1 << 29
        (frag[10] & 255) * 4194304 + // 1 << 22
        (frag[11] & 254) * 16384 + // 1 << 14
        (frag[12] & 255) * 128 + // 1 << 7
        (frag[13] & 254) / 2;
        if (pesFlags & 64) {
          pesDts = (frag[14] & 14) * 536870912 + // 1 << 29
          (frag[15] & 255) * 4194304 + // 1 << 22
          (frag[16] & 254) * 16384 + // 1 << 14
          (frag[17] & 255) * 128 + // 1 << 7
          (frag[18] & 254) / 2;
          if (pesPts - pesDts > 60 * 9e4) {
            logger.warn(`${Math.round((pesPts - pesDts) / 9e4)}s delta between PTS and DTS, align them`);
            pesPts = pesDts;
          }
        } else {
          pesDts = pesPts;
        }
      }
      pesHdrLen = frag[8];
      let payloadStartOffset = pesHdrLen + 9;
      if (stream.size <= payloadStartOffset) {
        return null;
      }
      stream.size -= payloadStartOffset;
      const pesData = new Uint8Array(stream.size);
      for (let j = 0, dataLen = data.length; j < dataLen; j++) {
        frag = data[j];
        let len = frag.byteLength;
        if (payloadStartOffset) {
          if (payloadStartOffset > len) {
            payloadStartOffset -= len;
            continue;
          } else {
            frag = frag.subarray(payloadStartOffset);
            len -= payloadStartOffset;
            payloadStartOffset = 0;
          }
        }
        pesData.set(frag, i);
        i += len;
      }
      if (pesLen) {
        pesLen -= pesHdrLen + 3;
      }
      return {
        data: pesData,
        pts: pesPts,
        dts: pesDts,
        len: pesLen
      };
    }
    return null;
  }
  var MP3Demuxer = class extends BaseAudioDemuxer {
    resetInitSegment(initSegment, audioCodec, videoCodec, trackDuration) {
      super.resetInitSegment(initSegment, audioCodec, videoCodec, trackDuration);
      this._audioTrack = {
        container: "audio/mpeg",
        type: "audio",
        id: 2,
        pid: -1,
        sequenceNumber: 0,
        segmentCodec: "mp3",
        samples: [],
        manifestCodec: audioCodec,
        duration: trackDuration,
        inputTimeScale: 9e4,
        dropped: 0
      };
    }
    static probe(data) {
      if (!data) {
        return false;
      }
      const id3Data = getID3Data(data, 0);
      let offset = (id3Data == null ? void 0 : id3Data.length) || 0;
      if (id3Data && data[offset] === 11 && data[offset + 1] === 119 && getTimeStamp(id3Data) !== void 0 && // check the bsid to confirm ac-3 or ec-3 (not mp3)
      getAudioBSID(data, offset) <= 16) {
        return false;
      }
      for (let length = data.length; offset < length; offset++) {
        if (probe(data, offset)) {
          logger.log("MPEG Audio sync word found !");
          return true;
        }
      }
      return false;
    }
    canParse(data, offset) {
      return canParse(data, offset);
    }
    appendFrame(track, data, offset) {
      if (this.basePTS === null) {
        return;
      }
      return appendFrame$1(track, data, offset, this.basePTS, this.frameIndex);
    }
  };
  var AAC = class {
    static getSilentFrame(codec, channelCount) {
      switch (codec) {
        case "mp4a.40.2":
          if (channelCount === 1) {
            return new Uint8Array([0, 200, 0, 128, 35, 128]);
          } else if (channelCount === 2) {
            return new Uint8Array([33, 0, 73, 144, 2, 25, 0, 35, 128]);
          } else if (channelCount === 3) {
            return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 142]);
          } else if (channelCount === 4) {
            return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 128, 44, 128, 8, 2, 56]);
          } else if (channelCount === 5) {
            return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 56]);
          } else if (channelCount === 6) {
            return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 0, 178, 0, 32, 8, 224]);
          }
          break;
        // handle HE-AAC below (mp4a.40.5 / mp4a.40.29)
        default:
          if (channelCount === 1) {
            return new Uint8Array([1, 64, 34, 128, 163, 78, 230, 128, 186, 8, 0, 0, 0, 28, 6, 241, 193, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
          } else if (channelCount === 2) {
            return new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
          } else if (channelCount === 3) {
            return new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
          }
          break;
      }
      return void 0;
    }
  };
  var UINT32_MAX = Math.pow(2, 32) - 1;
  var MP4 = class _MP4 {
    static init() {
      _MP4.types = {
        avc1: [],
        // codingname
        avcC: [],
        btrt: [],
        dinf: [],
        dref: [],
        esds: [],
        ftyp: [],
        hdlr: [],
        mdat: [],
        mdhd: [],
        mdia: [],
        mfhd: [],
        minf: [],
        moof: [],
        moov: [],
        mp4a: [],
        ".mp3": [],
        dac3: [],
        "ac-3": [],
        mvex: [],
        mvhd: [],
        pasp: [],
        sdtp: [],
        stbl: [],
        stco: [],
        stsc: [],
        stsd: [],
        stsz: [],
        stts: [],
        tfdt: [],
        tfhd: [],
        traf: [],
        trak: [],
        trun: [],
        trex: [],
        tkhd: [],
        vmhd: [],
        smhd: []
      };
      let i;
      for (i in _MP4.types) {
        if (_MP4.types.hasOwnProperty(i)) {
          _MP4.types[i] = [i.charCodeAt(0), i.charCodeAt(1), i.charCodeAt(2), i.charCodeAt(3)];
        }
      }
      const videoHdlr = new Uint8Array([
        0,
        // version 0
        0,
        0,
        0,
        // flags
        0,
        0,
        0,
        0,
        // pre_defined
        118,
        105,
        100,
        101,
        // handler_type: 'vide'
        0,
        0,
        0,
        0,
        // reserved
        0,
        0,
        0,
        0,
        // reserved
        0,
        0,
        0,
        0,
        // reserved
        86,
        105,
        100,
        101,
        111,
        72,
        97,
        110,
        100,
        108,
        101,
        114,
        0
        // name: 'VideoHandler'
      ]);
      const audioHdlr = new Uint8Array([
        0,
        // version 0
        0,
        0,
        0,
        // flags
        0,
        0,
        0,
        0,
        // pre_defined
        115,
        111,
        117,
        110,
        // handler_type: 'soun'
        0,
        0,
        0,
        0,
        // reserved
        0,
        0,
        0,
        0,
        // reserved
        0,
        0,
        0,
        0,
        // reserved
        83,
        111,
        117,
        110,
        100,
        72,
        97,
        110,
        100,
        108,
        101,
        114,
        0
        // name: 'SoundHandler'
      ]);
      _MP4.HDLR_TYPES = {
        video: videoHdlr,
        audio: audioHdlr
      };
      const dref = new Uint8Array([
        0,
        // version 0
        0,
        0,
        0,
        // flags
        0,
        0,
        0,
        1,
        // entry_count
        0,
        0,
        0,
        12,
        // entry_size
        117,
        114,
        108,
        32,
        // 'url' type
        0,
        // version 0
        0,
        0,
        1
        // entry_flags
      ]);
      const stco = new Uint8Array([
        0,
        // version
        0,
        0,
        0,
        // flags
        0,
        0,
        0,
        0
        // entry_count
      ]);
      _MP4.STTS = _MP4.STSC = _MP4.STCO = stco;
      _MP4.STSZ = new Uint8Array([
        0,
        // version
        0,
        0,
        0,
        // flags
        0,
        0,
        0,
        0,
        // sample_size
        0,
        0,
        0,
        0
        // sample_count
      ]);
      _MP4.VMHD = new Uint8Array([
        0,
        // version
        0,
        0,
        1,
        // flags
        0,
        0,
        // graphicsmode
        0,
        0,
        0,
        0,
        0,
        0
        // opcolor
      ]);
      _MP4.SMHD = new Uint8Array([
        0,
        // version
        0,
        0,
        0,
        // flags
        0,
        0,
        // balance
        0,
        0
        // reserved
      ]);
      _MP4.STSD = new Uint8Array([
        0,
        // version 0
        0,
        0,
        0,
        // flags
        0,
        0,
        0,
        1
      ]);
      const majorBrand = new Uint8Array([105, 115, 111, 109]);
      const avc1Brand = new Uint8Array([97, 118, 99, 49]);
      const minorVersion = new Uint8Array([0, 0, 0, 1]);
      _MP4.FTYP = _MP4.box(_MP4.types.ftyp, majorBrand, minorVersion, majorBrand, avc1Brand);
      _MP4.DINF = _MP4.box(_MP4.types.dinf, _MP4.box(_MP4.types.dref, dref));
    }
    static box(type, ...payload) {
      let size = 8;
      let i = payload.length;
      const len = i;
      while (i--) {
        size += payload[i].byteLength;
      }
      const result = new Uint8Array(size);
      result[0] = size >> 24 & 255;
      result[1] = size >> 16 & 255;
      result[2] = size >> 8 & 255;
      result[3] = size & 255;
      result.set(type, 4);
      for (i = 0, size = 8; i < len; i++) {
        result.set(payload[i], size);
        size += payload[i].byteLength;
      }
      return result;
    }
    static hdlr(type) {
      return _MP4.box(_MP4.types.hdlr, _MP4.HDLR_TYPES[type]);
    }
    static mdat(data) {
      return _MP4.box(_MP4.types.mdat, data);
    }
    static mdhd(timescale, duration) {
      duration *= timescale;
      const upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));
      const lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));
      return _MP4.box(_MP4.types.mdhd, new Uint8Array([
        1,
        // version 1
        0,
        0,
        0,
        // flags
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        // creation_time
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        3,
        // modification_time
        timescale >> 24 & 255,
        timescale >> 16 & 255,
        timescale >> 8 & 255,
        timescale & 255,
        // timescale
        upperWordDuration >> 24,
        upperWordDuration >> 16 & 255,
        upperWordDuration >> 8 & 255,
        upperWordDuration & 255,
        lowerWordDuration >> 24,
        lowerWordDuration >> 16 & 255,
        lowerWordDuration >> 8 & 255,
        lowerWordDuration & 255,
        85,
        196,
        // 'und' language (undetermined)
        0,
        0
      ]));
    }
    static mdia(track) {
      return _MP4.box(_MP4.types.mdia, _MP4.mdhd(track.timescale, track.duration), _MP4.hdlr(track.type), _MP4.minf(track));
    }
    static mfhd(sequenceNumber) {
      return _MP4.box(_MP4.types.mfhd, new Uint8Array([
        0,
        0,
        0,
        0,
        // flags
        sequenceNumber >> 24,
        sequenceNumber >> 16 & 255,
        sequenceNumber >> 8 & 255,
        sequenceNumber & 255
        // sequence_number
      ]));
    }
    static minf(track) {
      if (track.type === "audio") {
        return _MP4.box(_MP4.types.minf, _MP4.box(_MP4.types.smhd, _MP4.SMHD), _MP4.DINF, _MP4.stbl(track));
      } else {
        return _MP4.box(_MP4.types.minf, _MP4.box(_MP4.types.vmhd, _MP4.VMHD), _MP4.DINF, _MP4.stbl(track));
      }
    }
    static moof(sn, baseMediaDecodeTime, track) {
      return _MP4.box(_MP4.types.moof, _MP4.mfhd(sn), _MP4.traf(track, baseMediaDecodeTime));
    }
    static moov(tracks) {
      let i = tracks.length;
      const boxes = [];
      while (i--) {
        boxes[i] = _MP4.trak(tracks[i]);
      }
      return _MP4.box.apply(null, [_MP4.types.moov, _MP4.mvhd(tracks[0].timescale, tracks[0].duration)].concat(boxes).concat(_MP4.mvex(tracks)));
    }
    static mvex(tracks) {
      let i = tracks.length;
      const boxes = [];
      while (i--) {
        boxes[i] = _MP4.trex(tracks[i]);
      }
      return _MP4.box.apply(null, [_MP4.types.mvex, ...boxes]);
    }
    static mvhd(timescale, duration) {
      duration *= timescale;
      const upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));
      const lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));
      const bytes = new Uint8Array([
        1,
        // version 1
        0,
        0,
        0,
        // flags
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        // creation_time
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        3,
        // modification_time
        timescale >> 24 & 255,
        timescale >> 16 & 255,
        timescale >> 8 & 255,
        timescale & 255,
        // timescale
        upperWordDuration >> 24,
        upperWordDuration >> 16 & 255,
        upperWordDuration >> 8 & 255,
        upperWordDuration & 255,
        lowerWordDuration >> 24,
        lowerWordDuration >> 16 & 255,
        lowerWordDuration >> 8 & 255,
        lowerWordDuration & 255,
        0,
        1,
        0,
        0,
        // 1.0 rate
        1,
        0,
        // 1.0 volume
        0,
        0,
        // reserved
        0,
        0,
        0,
        0,
        // reserved
        0,
        0,
        0,
        0,
        // reserved
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        // transformation: unity matrix
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        // pre_defined
        255,
        255,
        255,
        255
        // next_track_ID
      ]);
      return _MP4.box(_MP4.types.mvhd, bytes);
    }
    static sdtp(track) {
      const samples = track.samples || [];
      const bytes = new Uint8Array(4 + samples.length);
      let i;
      let flags;
      for (i = 0; i < samples.length; i++) {
        flags = samples[i].flags;
        bytes[i + 4] = flags.dependsOn << 4 | flags.isDependedOn << 2 | flags.hasRedundancy;
      }
      return _MP4.box(_MP4.types.sdtp, bytes);
    }
    static stbl(track) {
      return _MP4.box(_MP4.types.stbl, _MP4.stsd(track), _MP4.box(_MP4.types.stts, _MP4.STTS), _MP4.box(_MP4.types.stsc, _MP4.STSC), _MP4.box(_MP4.types.stsz, _MP4.STSZ), _MP4.box(_MP4.types.stco, _MP4.STCO));
    }
    static avc1(track) {
      let sps = [];
      let pps = [];
      let i;
      let data;
      let len;
      for (i = 0; i < track.sps.length; i++) {
        data = track.sps[i];
        len = data.byteLength;
        sps.push(len >>> 8 & 255);
        sps.push(len & 255);
        sps = sps.concat(Array.prototype.slice.call(data));
      }
      for (i = 0; i < track.pps.length; i++) {
        data = track.pps[i];
        len = data.byteLength;
        pps.push(len >>> 8 & 255);
        pps.push(len & 255);
        pps = pps.concat(Array.prototype.slice.call(data));
      }
      const avcc = _MP4.box(_MP4.types.avcC, new Uint8Array([
        1,
        // version
        sps[3],
        // profile
        sps[4],
        // profile compat
        sps[5],
        // level
        252 | 3,
        // lengthSizeMinusOne, hard-coded to 4 bytes
        224 | track.sps.length
        // 3bit reserved (111) + numOfSequenceParameterSets
      ].concat(sps).concat([
        track.pps.length
        // numOfPictureParameterSets
      ]).concat(pps)));
      const width = track.width;
      const height = track.height;
      const hSpacing = track.pixelRatio[0];
      const vSpacing = track.pixelRatio[1];
      return _MP4.box(
        _MP4.types.avc1,
        new Uint8Array([
          0,
          0,
          0,
          // reserved
          0,
          0,
          0,
          // reserved
          0,
          1,
          // data_reference_index
          0,
          0,
          // pre_defined
          0,
          0,
          // reserved
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          // pre_defined
          width >> 8 & 255,
          width & 255,
          // width
          height >> 8 & 255,
          height & 255,
          // height
          0,
          72,
          0,
          0,
          // horizresolution
          0,
          72,
          0,
          0,
          // vertresolution
          0,
          0,
          0,
          0,
          // reserved
          0,
          1,
          // frame_count
          18,
          100,
          97,
          105,
          108,
          // dailymotion/hls.js
          121,
          109,
          111,
          116,
          105,
          111,
          110,
          47,
          104,
          108,
          115,
          46,
          106,
          115,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          // compressorname
          0,
          24,
          // depth = 24
          17,
          17
        ]),
        // pre_defined = -1
        avcc,
        _MP4.box(_MP4.types.btrt, new Uint8Array([
          0,
          28,
          156,
          128,
          // bufferSizeDB
          0,
          45,
          198,
          192,
          // maxBitrate
          0,
          45,
          198,
          192
        ])),
        // avgBitrate
        _MP4.box(_MP4.types.pasp, new Uint8Array([
          hSpacing >> 24,
          // hSpacing
          hSpacing >> 16 & 255,
          hSpacing >> 8 & 255,
          hSpacing & 255,
          vSpacing >> 24,
          // vSpacing
          vSpacing >> 16 & 255,
          vSpacing >> 8 & 255,
          vSpacing & 255
        ]))
      );
    }
    static esds(track) {
      const configlen = track.config.length;
      return new Uint8Array([
        0,
        // version 0
        0,
        0,
        0,
        // flags
        3,
        // descriptor_type
        23 + configlen,
        // length
        0,
        1,
        // es_id
        0,
        // stream_priority
        4,
        // descriptor_type
        15 + configlen,
        // length
        64,
        // codec : mpeg4_audio
        21,
        // stream_type
        0,
        0,
        0,
        // buffer_size
        0,
        0,
        0,
        0,
        // maxBitrate
        0,
        0,
        0,
        0,
        // avgBitrate
        5
        // descriptor_type
      ].concat([configlen]).concat(track.config).concat([6, 1, 2]));
    }
    static audioStsd(track) {
      const samplerate = track.samplerate;
      return new Uint8Array([
        0,
        0,
        0,
        // reserved
        0,
        0,
        0,
        // reserved
        0,
        1,
        // data_reference_index
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        // reserved
        0,
        track.channelCount,
        // channelcount
        0,
        16,
        // sampleSize:16bits
        0,
        0,
        0,
        0,
        // reserved2
        samplerate >> 8 & 255,
        samplerate & 255,
        //
        0,
        0
      ]);
    }
    static mp4a(track) {
      return _MP4.box(_MP4.types.mp4a, _MP4.audioStsd(track), _MP4.box(_MP4.types.esds, _MP4.esds(track)));
    }
    static mp3(track) {
      return _MP4.box(_MP4.types[".mp3"], _MP4.audioStsd(track));
    }
    static ac3(track) {
      return _MP4.box(_MP4.types["ac-3"], _MP4.audioStsd(track), _MP4.box(_MP4.types.dac3, track.config));
    }
    static stsd(track) {
      if (track.type === "audio") {
        if (track.segmentCodec === "mp3" && track.codec === "mp3") {
          return _MP4.box(_MP4.types.stsd, _MP4.STSD, _MP4.mp3(track));
        }
        if (track.segmentCodec === "ac3") {
          return _MP4.box(_MP4.types.stsd, _MP4.STSD, _MP4.ac3(track));
        }
        return _MP4.box(_MP4.types.stsd, _MP4.STSD, _MP4.mp4a(track));
      } else {
        return _MP4.box(_MP4.types.stsd, _MP4.STSD, _MP4.avc1(track));
      }
    }
    static tkhd(track) {
      const id = track.id;
      const duration = track.duration * track.timescale;
      const width = track.width;
      const height = track.height;
      const upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));
      const lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));
      return _MP4.box(_MP4.types.tkhd, new Uint8Array([
        1,
        // version 1
        0,
        0,
        7,
        // flags
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        // creation_time
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        3,
        // modification_time
        id >> 24 & 255,
        id >> 16 & 255,
        id >> 8 & 255,
        id & 255,
        // track_ID
        0,
        0,
        0,
        0,
        // reserved
        upperWordDuration >> 24,
        upperWordDuration >> 16 & 255,
        upperWordDuration >> 8 & 255,
        upperWordDuration & 255,
        lowerWordDuration >> 24,
        lowerWordDuration >> 16 & 255,
        lowerWordDuration >> 8 & 255,
        lowerWordDuration & 255,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        // reserved
        0,
        0,
        // layer
        0,
        0,
        // alternate_group
        0,
        0,
        // non-audio track volume
        0,
        0,
        // reserved
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        // transformation: unity matrix
        width >> 8 & 255,
        width & 255,
        0,
        0,
        // width
        height >> 8 & 255,
        height & 255,
        0,
        0
        // height
      ]));
    }
    static traf(track, baseMediaDecodeTime) {
      const sampleDependencyTable = _MP4.sdtp(track);
      const id = track.id;
      const upperWordBaseMediaDecodeTime = Math.floor(baseMediaDecodeTime / (UINT32_MAX + 1));
      const lowerWordBaseMediaDecodeTime = Math.floor(baseMediaDecodeTime % (UINT32_MAX + 1));
      return _MP4.box(
        _MP4.types.traf,
        _MP4.box(_MP4.types.tfhd, new Uint8Array([
          0,
          // version 0
          0,
          0,
          0,
          // flags
          id >> 24,
          id >> 16 & 255,
          id >> 8 & 255,
          id & 255
          // track_ID
        ])),
        _MP4.box(_MP4.types.tfdt, new Uint8Array([
          1,
          // version 1
          0,
          0,
          0,
          // flags
          upperWordBaseMediaDecodeTime >> 24,
          upperWordBaseMediaDecodeTime >> 16 & 255,
          upperWordBaseMediaDecodeTime >> 8 & 255,
          upperWordBaseMediaDecodeTime & 255,
          lowerWordBaseMediaDecodeTime >> 24,
          lowerWordBaseMediaDecodeTime >> 16 & 255,
          lowerWordBaseMediaDecodeTime >> 8 & 255,
          lowerWordBaseMediaDecodeTime & 255
        ])),
        _MP4.trun(track, sampleDependencyTable.length + 16 + // tfhd
        20 + // tfdt
        8 + // traf header
        16 + // mfhd
        8 + // moof header
        8),
        // mdat header
        sampleDependencyTable
      );
    }
    /**
     * Generate a track box.
     * @param track a track definition
     */
    static trak(track) {
      track.duration = track.duration || 4294967295;
      return _MP4.box(_MP4.types.trak, _MP4.tkhd(track), _MP4.mdia(track));
    }
    static trex(track) {
      const id = track.id;
      return _MP4.box(_MP4.types.trex, new Uint8Array([
        0,
        // version 0
        0,
        0,
        0,
        // flags
        id >> 24,
        id >> 16 & 255,
        id >> 8 & 255,
        id & 255,
        // track_ID
        0,
        0,
        0,
        1,
        // default_sample_description_index
        0,
        0,
        0,
        0,
        // default_sample_duration
        0,
        0,
        0,
        0,
        // default_sample_size
        0,
        1,
        0,
        1
        // default_sample_flags
      ]));
    }
    static trun(track, offset) {
      const samples = track.samples || [];
      const len = samples.length;
      const arraylen = 12 + 16 * len;
      const array = new Uint8Array(arraylen);
      let i;
      let sample;
      let duration;
      let size;
      let flags;
      let cts;
      offset += 8 + arraylen;
      array.set([
        track.type === "video" ? 1 : 0,
        // version 1 for video with signed-int sample_composition_time_offset
        0,
        15,
        1,
        // flags
        len >>> 24 & 255,
        len >>> 16 & 255,
        len >>> 8 & 255,
        len & 255,
        // sample_count
        offset >>> 24 & 255,
        offset >>> 16 & 255,
        offset >>> 8 & 255,
        offset & 255
        // data_offset
      ], 0);
      for (i = 0; i < len; i++) {
        sample = samples[i];
        duration = sample.duration;
        size = sample.size;
        flags = sample.flags;
        cts = sample.cts;
        array.set([
          duration >>> 24 & 255,
          duration >>> 16 & 255,
          duration >>> 8 & 255,
          duration & 255,
          // sample_duration
          size >>> 24 & 255,
          size >>> 16 & 255,
          size >>> 8 & 255,
          size & 255,
          // sample_size
          flags.isLeading << 2 | flags.dependsOn,
          flags.isDependedOn << 6 | flags.hasRedundancy << 4 | flags.paddingValue << 1 | flags.isNonSync,
          flags.degradPrio & 240 << 8,
          flags.degradPrio & 15,
          // sample_flags
          cts >>> 24 & 255,
          cts >>> 16 & 255,
          cts >>> 8 & 255,
          cts & 255
          // sample_composition_time_offset
        ], 12 + 16 * i);
      }
      return _MP4.box(_MP4.types.trun, array);
    }
    static initSegment(tracks) {
      if (!_MP4.types) {
        _MP4.init();
      }
      const movie = _MP4.moov(tracks);
      const result = appendUint8Array(_MP4.FTYP, movie);
      return result;
    }
  };
  MP4.types = void 0;
  MP4.HDLR_TYPES = void 0;
  MP4.STTS = void 0;
  MP4.STSC = void 0;
  MP4.STCO = void 0;
  MP4.STSZ = void 0;
  MP4.VMHD = void 0;
  MP4.SMHD = void 0;
  MP4.STSD = void 0;
  MP4.FTYP = void 0;
  MP4.DINF = void 0;
  var MPEG_TS_CLOCK_FREQ_HZ = 9e4;
  function toTimescaleFromBase(baseTime, destScale, srcBase = 1, round = false) {
    const result = baseTime * destScale * srcBase;
    return round ? Math.round(result) : result;
  }
  function toTimescaleFromScale(baseTime, destScale, srcScale = 1, round = false) {
    return toTimescaleFromBase(baseTime, destScale, 1 / srcScale, round);
  }
  function toMsFromMpegTsClock(baseTime, round = false) {
    return toTimescaleFromBase(baseTime, 1e3, 1 / MPEG_TS_CLOCK_FREQ_HZ, round);
  }
  function toMpegTsClockFromTimescale(baseTime, srcScale = 1) {
    return toTimescaleFromBase(baseTime, MPEG_TS_CLOCK_FREQ_HZ, 1 / srcScale);
  }
  var MAX_SILENT_FRAME_DURATION = 10 * 1e3;
  var AAC_SAMPLES_PER_FRAME = 1024;
  var MPEG_AUDIO_SAMPLE_PER_FRAME = 1152;
  var AC3_SAMPLES_PER_FRAME = 1536;
  var chromeVersion = null;
  var safariWebkitVersion = null;
  var MP4Remuxer = class {
    constructor(observer2, config, typeSupported, vendor = "") {
      this.observer = void 0;
      this.config = void 0;
      this.typeSupported = void 0;
      this.ISGenerated = false;
      this._initPTS = null;
      this._initDTS = null;
      this.nextAvcDts = null;
      this.nextAudioPts = null;
      this.videoSampleDuration = null;
      this.isAudioContiguous = false;
      this.isVideoContiguous = false;
      this.videoTrackConfig = void 0;
      this.observer = observer2;
      this.config = config;
      this.typeSupported = typeSupported;
      this.ISGenerated = false;
      if (chromeVersion === null) {
        const userAgent = navigator.userAgent || "";
        const result = userAgent.match(/Chrome\/(\d+)/i);
        chromeVersion = result ? parseInt(result[1]) : 0;
      }
      if (safariWebkitVersion === null) {
        const result = navigator.userAgent.match(/Safari\/(\d+)/i);
        safariWebkitVersion = result ? parseInt(result[1]) : 0;
      }
    }
    destroy() {
      this.config = this.videoTrackConfig = this._initPTS = this._initDTS = null;
    }
    resetTimeStamp(defaultTimeStamp) {
      logger.log("[mp4-remuxer]: initPTS & initDTS reset");
      this._initPTS = this._initDTS = defaultTimeStamp;
    }
    resetNextTimestamp() {
      logger.log("[mp4-remuxer]: reset next timestamp");
      this.isVideoContiguous = false;
      this.isAudioContiguous = false;
    }
    resetInitSegment() {
      logger.log("[mp4-remuxer]: ISGenerated flag reset");
      this.ISGenerated = false;
      this.videoTrackConfig = void 0;
    }
    getVideoStartPts(videoSamples) {
      let rolloverDetected = false;
      const firstPts = videoSamples[0].pts;
      const startPTS = videoSamples.reduce((minPTS, sample) => {
        let pts = sample.pts;
        let delta = pts - minPTS;
        if (delta < -4294967296) {
          rolloverDetected = true;
          pts = normalizePts(pts, firstPts);
          delta = pts - minPTS;
        }
        if (delta > 0) {
          return minPTS;
        }
        return pts;
      }, firstPts);
      if (rolloverDetected) {
        logger.debug("PTS rollover detected");
      }
      return startPTS;
    }
    remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, accurateTimeOffset, flush, playlistType) {
      let video;
      let audio;
      let initSegment;
      let text;
      let id3;
      let independent;
      let audioTimeOffset = timeOffset;
      let videoTimeOffset = timeOffset;
      const hasAudio = audioTrack.pid > -1;
      const hasVideo = videoTrack.pid > -1;
      const length = videoTrack.samples.length;
      const enoughAudioSamples = audioTrack.samples.length > 0;
      const enoughVideoSamples = flush && length > 0 || length > 1;
      const canRemuxAvc = (!hasAudio || enoughAudioSamples) && (!hasVideo || enoughVideoSamples) || this.ISGenerated || flush;
      if (canRemuxAvc) {
        if (this.ISGenerated) {
          var _videoTrack$pixelRati, _config$pixelRatio, _videoTrack$pixelRati2, _config$pixelRatio2;
          const config = this.videoTrackConfig;
          if (config && (videoTrack.width !== config.width || videoTrack.height !== config.height || ((_videoTrack$pixelRati = videoTrack.pixelRatio) == null ? void 0 : _videoTrack$pixelRati[0]) !== ((_config$pixelRatio = config.pixelRatio) == null ? void 0 : _config$pixelRatio[0]) || ((_videoTrack$pixelRati2 = videoTrack.pixelRatio) == null ? void 0 : _videoTrack$pixelRati2[1]) !== ((_config$pixelRatio2 = config.pixelRatio) == null ? void 0 : _config$pixelRatio2[1]))) {
            this.resetInitSegment();
          }
        } else {
          initSegment = this.generateIS(audioTrack, videoTrack, timeOffset, accurateTimeOffset);
        }
        const isVideoContiguous = this.isVideoContiguous;
        let firstKeyFrameIndex = -1;
        let firstKeyFramePTS;
        if (enoughVideoSamples) {
          firstKeyFrameIndex = findKeyframeIndex(videoTrack.samples);
          if (!isVideoContiguous && this.config.forceKeyFrameOnDiscontinuity) {
            independent = true;
            if (firstKeyFrameIndex > 0) {
              logger.warn(`[mp4-remuxer]: Dropped ${firstKeyFrameIndex} out of ${length} video samples due to a missing keyframe`);
              const startPTS = this.getVideoStartPts(videoTrack.samples);
              videoTrack.samples = videoTrack.samples.slice(firstKeyFrameIndex);
              videoTrack.dropped += firstKeyFrameIndex;
              videoTimeOffset += (videoTrack.samples[0].pts - startPTS) / videoTrack.inputTimeScale;
              firstKeyFramePTS = videoTimeOffset;
            } else if (firstKeyFrameIndex === -1) {
              logger.warn(`[mp4-remuxer]: No keyframe found out of ${length} video samples`);
              independent = false;
            }
          }
        }
        if (this.ISGenerated) {
          if (enoughAudioSamples && enoughVideoSamples) {
            const startPTS = this.getVideoStartPts(videoTrack.samples);
            const tsDelta = normalizePts(audioTrack.samples[0].pts, startPTS) - startPTS;
            const audiovideoTimestampDelta = tsDelta / videoTrack.inputTimeScale;
            audioTimeOffset += Math.max(0, audiovideoTimestampDelta);
            videoTimeOffset += Math.max(0, -audiovideoTimestampDelta);
          }
          if (enoughAudioSamples) {
            if (!audioTrack.samplerate) {
              logger.warn("[mp4-remuxer]: regenerate InitSegment as audio detected");
              initSegment = this.generateIS(audioTrack, videoTrack, timeOffset, accurateTimeOffset);
            }
            audio = this.remuxAudio(audioTrack, audioTimeOffset, this.isAudioContiguous, accurateTimeOffset, hasVideo || enoughVideoSamples || playlistType === PlaylistLevelType.AUDIO ? videoTimeOffset : void 0);
            if (enoughVideoSamples) {
              const audioTrackLength = audio ? audio.endPTS - audio.startPTS : 0;
              if (!videoTrack.inputTimeScale) {
                logger.warn("[mp4-remuxer]: regenerate InitSegment as video detected");
                initSegment = this.generateIS(audioTrack, videoTrack, timeOffset, accurateTimeOffset);
              }
              video = this.remuxVideo(videoTrack, videoTimeOffset, isVideoContiguous, audioTrackLength);
            }
          } else if (enoughVideoSamples) {
            video = this.remuxVideo(videoTrack, videoTimeOffset, isVideoContiguous, 0);
          }
          if (video) {
            video.firstKeyFrame = firstKeyFrameIndex;
            video.independent = firstKeyFrameIndex !== -1;
            video.firstKeyFramePTS = firstKeyFramePTS;
          }
        }
      }
      if (this.ISGenerated && this._initPTS && this._initDTS) {
        if (id3Track.samples.length) {
          id3 = flushTextTrackMetadataCueSamples(id3Track, timeOffset, this._initPTS, this._initDTS);
        }
        if (textTrack.samples.length) {
          text = flushTextTrackUserdataCueSamples(textTrack, timeOffset, this._initPTS);
        }
      }
      return {
        audio,
        video,
        initSegment,
        independent,
        text,
        id3
      };
    }
    generateIS(audioTrack, videoTrack, timeOffset, accurateTimeOffset) {
      const audioSamples = audioTrack.samples;
      const videoSamples = videoTrack.samples;
      const typeSupported = this.typeSupported;
      const tracks = {};
      const _initPTS = this._initPTS;
      let computePTSDTS = !_initPTS || accurateTimeOffset;
      let container = "audio/mp4";
      let initPTS;
      let initDTS;
      let timescale;
      if (computePTSDTS) {
        initPTS = initDTS = Infinity;
      }
      if (audioTrack.config && audioSamples.length) {
        audioTrack.timescale = audioTrack.samplerate;
        switch (audioTrack.segmentCodec) {
          case "mp3":
            if (typeSupported.mpeg) {
              container = "audio/mpeg";
              audioTrack.codec = "";
            } else if (typeSupported.mp3) {
              audioTrack.codec = "mp3";
            }
            break;
          case "ac3":
            audioTrack.codec = "ac-3";
            break;
        }
        tracks.audio = {
          id: "audio",
          container,
          codec: audioTrack.codec,
          initSegment: audioTrack.segmentCodec === "mp3" && typeSupported.mpeg ? new Uint8Array(0) : MP4.initSegment([audioTrack]),
          metadata: {
            channelCount: audioTrack.channelCount
          }
        };
        if (computePTSDTS) {
          timescale = audioTrack.inputTimeScale;
          if (!_initPTS || timescale !== _initPTS.timescale) {
            initPTS = initDTS = audioSamples[0].pts - Math.round(timescale * timeOffset);
          } else {
            computePTSDTS = false;
          }
        }
      }
      if (videoTrack.sps && videoTrack.pps && videoSamples.length) {
        videoTrack.timescale = videoTrack.inputTimeScale;
        tracks.video = {
          id: "main",
          container: "video/mp4",
          codec: videoTrack.codec,
          initSegment: MP4.initSegment([videoTrack]),
          metadata: {
            width: videoTrack.width,
            height: videoTrack.height
          }
        };
        if (computePTSDTS) {
          timescale = videoTrack.inputTimeScale;
          if (!_initPTS || timescale !== _initPTS.timescale) {
            const startPTS = this.getVideoStartPts(videoSamples);
            const startOffset = Math.round(timescale * timeOffset);
            initDTS = Math.min(initDTS, normalizePts(videoSamples[0].dts, startPTS) - startOffset);
            initPTS = Math.min(initPTS, startPTS - startOffset);
          } else {
            computePTSDTS = false;
          }
        }
        this.videoTrackConfig = {
          width: videoTrack.width,
          height: videoTrack.height,
          pixelRatio: videoTrack.pixelRatio
        };
      }
      if (Object.keys(tracks).length) {
        this.ISGenerated = true;
        if (computePTSDTS) {
          this._initPTS = {
            baseTime: initPTS,
            timescale
          };
          this._initDTS = {
            baseTime: initDTS,
            timescale
          };
        } else {
          initPTS = timescale = void 0;
        }
        return {
          tracks,
          initPTS,
          timescale
        };
      }
    }
    remuxVideo(track, timeOffset, contiguous, audioTrackLength) {
      const timeScale = track.inputTimeScale;
      const inputSamples = track.samples;
      const outputSamples = [];
      const nbSamples = inputSamples.length;
      const initPTS = this._initPTS;
      let nextAvcDts = this.nextAvcDts;
      let offset = 8;
      let mp4SampleDuration = this.videoSampleDuration;
      let firstDTS;
      let lastDTS;
      let minPTS = Number.POSITIVE_INFINITY;
      let maxPTS = Number.NEGATIVE_INFINITY;
      let sortSamples = false;
      if (!contiguous || nextAvcDts === null) {
        const pts = timeOffset * timeScale;
        const cts = inputSamples[0].pts - normalizePts(inputSamples[0].dts, inputSamples[0].pts);
        if (chromeVersion && nextAvcDts !== null && Math.abs(pts - cts - nextAvcDts) < 15e3) {
          contiguous = true;
        } else {
          nextAvcDts = pts - cts;
        }
      }
      const initTime = initPTS.baseTime * timeScale / initPTS.timescale;
      for (let i = 0; i < nbSamples; i++) {
        const sample = inputSamples[i];
        sample.pts = normalizePts(sample.pts - initTime, nextAvcDts);
        sample.dts = normalizePts(sample.dts - initTime, nextAvcDts);
        if (sample.dts < inputSamples[i > 0 ? i - 1 : i].dts) {
          sortSamples = true;
        }
      }
      if (sortSamples) {
        inputSamples.sort(function(a, b) {
          const deltadts = a.dts - b.dts;
          const deltapts = a.pts - b.pts;
          return deltadts || deltapts;
        });
      }
      firstDTS = inputSamples[0].dts;
      lastDTS = inputSamples[inputSamples.length - 1].dts;
      const inputDuration = lastDTS - firstDTS;
      const averageSampleDuration = inputDuration ? Math.round(inputDuration / (nbSamples - 1)) : mp4SampleDuration || track.inputTimeScale / 30;
      if (contiguous) {
        const delta = firstDTS - nextAvcDts;
        const foundHole = delta > averageSampleDuration;
        const foundOverlap = delta < -1;
        if (foundHole || foundOverlap) {
          if (foundHole) {
            logger.warn(`AVC: ${toMsFromMpegTsClock(delta, true)} ms (${delta}dts) hole between fragments detected at ${timeOffset.toFixed(3)}`);
          } else {
            logger.warn(`AVC: ${toMsFromMpegTsClock(-delta, true)} ms (${delta}dts) overlapping between fragments detected at ${timeOffset.toFixed(3)}`);
          }
          if (!foundOverlap || nextAvcDts >= inputSamples[0].pts || chromeVersion) {
            firstDTS = nextAvcDts;
            const firstPTS = inputSamples[0].pts - delta;
            if (foundHole) {
              inputSamples[0].dts = firstDTS;
              inputSamples[0].pts = firstPTS;
            } else {
              for (let i = 0; i < inputSamples.length; i++) {
                if (inputSamples[i].dts > firstPTS) {
                  break;
                }
                inputSamples[i].dts -= delta;
                inputSamples[i].pts -= delta;
              }
            }
            logger.log(`Video: Initial PTS/DTS adjusted: ${toMsFromMpegTsClock(firstPTS, true)}/${toMsFromMpegTsClock(firstDTS, true)}, delta: ${toMsFromMpegTsClock(delta, true)} ms`);
          }
        }
      }
      firstDTS = Math.max(0, firstDTS);
      let nbNalu = 0;
      let naluLen = 0;
      let dtsStep = firstDTS;
      for (let i = 0; i < nbSamples; i++) {
        const sample = inputSamples[i];
        const units = sample.units;
        const nbUnits = units.length;
        let sampleLen = 0;
        for (let j = 0; j < nbUnits; j++) {
          sampleLen += units[j].data.length;
        }
        naluLen += sampleLen;
        nbNalu += nbUnits;
        sample.length = sampleLen;
        if (sample.dts < dtsStep) {
          sample.dts = dtsStep;
          dtsStep += averageSampleDuration / 4 | 0 || 1;
        } else {
          dtsStep = sample.dts;
        }
        minPTS = Math.min(sample.pts, minPTS);
        maxPTS = Math.max(sample.pts, maxPTS);
      }
      lastDTS = inputSamples[nbSamples - 1].dts;
      const mdatSize = naluLen + 4 * nbNalu + 8;
      let mdat;
      try {
        mdat = new Uint8Array(mdatSize);
      } catch (err) {
        this.observer.emit(Events2.ERROR, Events2.ERROR, {
          type: ErrorTypes.MUX_ERROR,
          details: ErrorDetails.REMUX_ALLOC_ERROR,
          fatal: false,
          error: err,
          bytes: mdatSize,
          reason: `fail allocating video mdat ${mdatSize}`
        });
        return;
      }
      const view = new DataView(mdat.buffer);
      view.setUint32(0, mdatSize);
      mdat.set(MP4.types.mdat, 4);
      let stretchedLastFrame = false;
      let minDtsDelta = Number.POSITIVE_INFINITY;
      let minPtsDelta = Number.POSITIVE_INFINITY;
      let maxDtsDelta = Number.NEGATIVE_INFINITY;
      let maxPtsDelta = Number.NEGATIVE_INFINITY;
      for (let i = 0; i < nbSamples; i++) {
        const VideoSample = inputSamples[i];
        const VideoSampleUnits = VideoSample.units;
        let mp4SampleLength = 0;
        for (let j = 0, nbUnits = VideoSampleUnits.length; j < nbUnits; j++) {
          const unit = VideoSampleUnits[j];
          const unitData = unit.data;
          const unitDataLen = unit.data.byteLength;
          view.setUint32(offset, unitDataLen);
          offset += 4;
          mdat.set(unitData, offset);
          offset += unitDataLen;
          mp4SampleLength += 4 + unitDataLen;
        }
        let ptsDelta;
        if (i < nbSamples - 1) {
          mp4SampleDuration = inputSamples[i + 1].dts - VideoSample.dts;
          ptsDelta = inputSamples[i + 1].pts - VideoSample.pts;
        } else {
          const config = this.config;
          const lastFrameDuration = i > 0 ? VideoSample.dts - inputSamples[i - 1].dts : averageSampleDuration;
          ptsDelta = i > 0 ? VideoSample.pts - inputSamples[i - 1].pts : averageSampleDuration;
          if (config.stretchShortVideoTrack && this.nextAudioPts !== null) {
            const gapTolerance = Math.floor(config.maxBufferHole * timeScale);
            const deltaToFrameEnd = (audioTrackLength ? minPTS + audioTrackLength * timeScale : this.nextAudioPts) - VideoSample.pts;
            if (deltaToFrameEnd > gapTolerance) {
              mp4SampleDuration = deltaToFrameEnd - lastFrameDuration;
              if (mp4SampleDuration < 0) {
                mp4SampleDuration = lastFrameDuration;
              } else {
                stretchedLastFrame = true;
              }
              logger.log(`[mp4-remuxer]: It is approximately ${deltaToFrameEnd / 90} ms to the next segment; using duration ${mp4SampleDuration / 90} ms for the last video frame.`);
            } else {
              mp4SampleDuration = lastFrameDuration;
            }
          } else {
            mp4SampleDuration = lastFrameDuration;
          }
        }
        const compositionTimeOffset = Math.round(VideoSample.pts - VideoSample.dts);
        minDtsDelta = Math.min(minDtsDelta, mp4SampleDuration);
        maxDtsDelta = Math.max(maxDtsDelta, mp4SampleDuration);
        minPtsDelta = Math.min(minPtsDelta, ptsDelta);
        maxPtsDelta = Math.max(maxPtsDelta, ptsDelta);
        outputSamples.push(new Mp4Sample(VideoSample.key, mp4SampleDuration, mp4SampleLength, compositionTimeOffset));
      }
      if (outputSamples.length) {
        if (chromeVersion) {
          if (chromeVersion < 70) {
            const flags = outputSamples[0].flags;
            flags.dependsOn = 2;
            flags.isNonSync = 0;
          }
        } else if (safariWebkitVersion) {
          if (maxPtsDelta - minPtsDelta < maxDtsDelta - minDtsDelta && averageSampleDuration / maxDtsDelta < 0.025 && outputSamples[0].cts === 0) {
            logger.warn("Found irregular gaps in sample duration. Using PTS instead of DTS to determine MP4 sample duration.");
            let dts = firstDTS;
            for (let i = 0, len = outputSamples.length; i < len; i++) {
              const nextDts = dts + outputSamples[i].duration;
              const pts = dts + outputSamples[i].cts;
              if (i < len - 1) {
                const nextPts = nextDts + outputSamples[i + 1].cts;
                outputSamples[i].duration = nextPts - pts;
              } else {
                outputSamples[i].duration = i ? outputSamples[i - 1].duration : averageSampleDuration;
              }
              outputSamples[i].cts = 0;
              dts = nextDts;
            }
          }
        }
      }
      mp4SampleDuration = stretchedLastFrame || !mp4SampleDuration ? averageSampleDuration : mp4SampleDuration;
      this.nextAvcDts = nextAvcDts = lastDTS + mp4SampleDuration;
      this.videoSampleDuration = mp4SampleDuration;
      this.isVideoContiguous = true;
      const moof = MP4.moof(track.sequenceNumber++, firstDTS, _extends({}, track, {
        samples: outputSamples
      }));
      const type = "video";
      const data = {
        data1: moof,
        data2: mdat,
        startPTS: minPTS / timeScale,
        endPTS: (maxPTS + mp4SampleDuration) / timeScale,
        startDTS: firstDTS / timeScale,
        endDTS: nextAvcDts / timeScale,
        type,
        hasAudio: false,
        hasVideo: true,
        nb: outputSamples.length,
        dropped: track.dropped
      };
      track.samples = [];
      track.dropped = 0;
      return data;
    }
    getSamplesPerFrame(track) {
      switch (track.segmentCodec) {
        case "mp3":
          return MPEG_AUDIO_SAMPLE_PER_FRAME;
        case "ac3":
          return AC3_SAMPLES_PER_FRAME;
        default:
          return AAC_SAMPLES_PER_FRAME;
      }
    }
    remuxAudio(track, timeOffset, contiguous, accurateTimeOffset, videoTimeOffset) {
      const inputTimeScale = track.inputTimeScale;
      const mp4timeScale = track.samplerate ? track.samplerate : inputTimeScale;
      const scaleFactor = inputTimeScale / mp4timeScale;
      const mp4SampleDuration = this.getSamplesPerFrame(track);
      const inputSampleDuration = mp4SampleDuration * scaleFactor;
      const initPTS = this._initPTS;
      const rawMPEG = track.segmentCodec === "mp3" && this.typeSupported.mpeg;
      const outputSamples = [];
      const alignedWithVideo = videoTimeOffset !== void 0;
      let inputSamples = track.samples;
      let offset = rawMPEG ? 0 : 8;
      let nextAudioPts = this.nextAudioPts || -1;
      const timeOffsetMpegTS = timeOffset * inputTimeScale;
      const initTime = initPTS.baseTime * inputTimeScale / initPTS.timescale;
      this.isAudioContiguous = contiguous = contiguous || inputSamples.length && nextAudioPts > 0 && (accurateTimeOffset && Math.abs(timeOffsetMpegTS - nextAudioPts) < 9e3 || Math.abs(normalizePts(inputSamples[0].pts - initTime, timeOffsetMpegTS) - nextAudioPts) < 20 * inputSampleDuration);
      inputSamples.forEach(function(sample) {
        sample.pts = normalizePts(sample.pts - initTime, timeOffsetMpegTS);
      });
      if (!contiguous || nextAudioPts < 0) {
        inputSamples = inputSamples.filter((sample) => sample.pts >= 0);
        if (!inputSamples.length) {
          return;
        }
        if (videoTimeOffset === 0) {
          nextAudioPts = 0;
        } else if (accurateTimeOffset && !alignedWithVideo) {
          nextAudioPts = Math.max(0, timeOffsetMpegTS);
        } else {
          nextAudioPts = inputSamples[0].pts;
        }
      }
      if (track.segmentCodec === "aac") {
        const maxAudioFramesDrift = this.config.maxAudioFramesDrift;
        for (let i = 0, nextPts = nextAudioPts; i < inputSamples.length; i++) {
          const sample = inputSamples[i];
          const pts = sample.pts;
          const delta = pts - nextPts;
          const duration = Math.abs(1e3 * delta / inputTimeScale);
          if (delta <= -maxAudioFramesDrift * inputSampleDuration && alignedWithVideo) {
            if (i === 0) {
              logger.warn(`Audio frame @ ${(pts / inputTimeScale).toFixed(3)}s overlaps nextAudioPts by ${Math.round(1e3 * delta / inputTimeScale)} ms.`);
              this.nextAudioPts = nextAudioPts = nextPts = pts;
            }
          } else if (delta >= maxAudioFramesDrift * inputSampleDuration && duration < MAX_SILENT_FRAME_DURATION && alignedWithVideo) {
            let missing = Math.round(delta / inputSampleDuration);
            nextPts = pts - missing * inputSampleDuration;
            if (nextPts < 0) {
              missing--;
              nextPts += inputSampleDuration;
            }
            if (i === 0) {
              this.nextAudioPts = nextAudioPts = nextPts;
            }
            logger.warn(`[mp4-remuxer]: Injecting ${missing} audio frame @ ${(nextPts / inputTimeScale).toFixed(3)}s due to ${Math.round(1e3 * delta / inputTimeScale)} ms gap.`);
            for (let j = 0; j < missing; j++) {
              const newStamp = Math.max(nextPts, 0);
              let fillFrame = AAC.getSilentFrame(track.manifestCodec || track.codec, track.channelCount);
              if (!fillFrame) {
                logger.log("[mp4-remuxer]: Unable to get silent frame for given audio codec; duplicating last frame instead.");
                fillFrame = sample.unit.subarray();
              }
              inputSamples.splice(i, 0, {
                unit: fillFrame,
                pts: newStamp
              });
              nextPts += inputSampleDuration;
              i++;
            }
          }
          sample.pts = nextPts;
          nextPts += inputSampleDuration;
        }
      }
      let firstPTS = null;
      let lastPTS = null;
      let mdat;
      let mdatSize = 0;
      let sampleLength = inputSamples.length;
      while (sampleLength--) {
        mdatSize += inputSamples[sampleLength].unit.byteLength;
      }
      for (let j = 0, _nbSamples = inputSamples.length; j < _nbSamples; j++) {
        const audioSample = inputSamples[j];
        const unit = audioSample.unit;
        let pts = audioSample.pts;
        if (lastPTS !== null) {
          const prevSample = outputSamples[j - 1];
          prevSample.duration = Math.round((pts - lastPTS) / scaleFactor);
        } else {
          if (contiguous && track.segmentCodec === "aac") {
            pts = nextAudioPts;
          }
          firstPTS = pts;
          if (mdatSize > 0) {
            mdatSize += offset;
            try {
              mdat = new Uint8Array(mdatSize);
            } catch (err) {
              this.observer.emit(Events2.ERROR, Events2.ERROR, {
                type: ErrorTypes.MUX_ERROR,
                details: ErrorDetails.REMUX_ALLOC_ERROR,
                fatal: false,
                error: err,
                bytes: mdatSize,
                reason: `fail allocating audio mdat ${mdatSize}`
              });
              return;
            }
            if (!rawMPEG) {
              const view = new DataView(mdat.buffer);
              view.setUint32(0, mdatSize);
              mdat.set(MP4.types.mdat, 4);
            }
          } else {
            return;
          }
        }
        mdat.set(unit, offset);
        const unitLen = unit.byteLength;
        offset += unitLen;
        outputSamples.push(new Mp4Sample(true, mp4SampleDuration, unitLen, 0));
        lastPTS = pts;
      }
      const nbSamples = outputSamples.length;
      if (!nbSamples) {
        return;
      }
      const lastSample = outputSamples[outputSamples.length - 1];
      this.nextAudioPts = nextAudioPts = lastPTS + scaleFactor * lastSample.duration;
      const moof = rawMPEG ? new Uint8Array(0) : MP4.moof(track.sequenceNumber++, firstPTS / scaleFactor, _extends({}, track, {
        samples: outputSamples
      }));
      track.samples = [];
      const start = firstPTS / inputTimeScale;
      const end = nextAudioPts / inputTimeScale;
      const type = "audio";
      const audioData = {
        data1: moof,
        data2: mdat,
        startPTS: start,
        endPTS: end,
        startDTS: start,
        endDTS: end,
        type,
        hasAudio: true,
        hasVideo: false,
        nb: nbSamples
      };
      this.isAudioContiguous = true;
      return audioData;
    }
    remuxEmptyAudio(track, timeOffset, contiguous, videoData) {
      const inputTimeScale = track.inputTimeScale;
      const mp4timeScale = track.samplerate ? track.samplerate : inputTimeScale;
      const scaleFactor = inputTimeScale / mp4timeScale;
      const nextAudioPts = this.nextAudioPts;
      const initDTS = this._initDTS;
      const init90kHz = initDTS.baseTime * 9e4 / initDTS.timescale;
      const startDTS = (nextAudioPts !== null ? nextAudioPts : videoData.startDTS * inputTimeScale) + init90kHz;
      const endDTS = videoData.endDTS * inputTimeScale + init90kHz;
      const frameDuration = scaleFactor * AAC_SAMPLES_PER_FRAME;
      const nbSamples = Math.ceil((endDTS - startDTS) / frameDuration);
      const silentFrame = AAC.getSilentFrame(track.manifestCodec || track.codec, track.channelCount);
      logger.warn("[mp4-remuxer]: remux empty Audio");
      if (!silentFrame) {
        logger.trace("[mp4-remuxer]: Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec");
        return;
      }
      const samples = [];
      for (let i = 0; i < nbSamples; i++) {
        const stamp = startDTS + i * frameDuration;
        samples.push({
          unit: silentFrame,
          pts: stamp,
          dts: stamp
        });
      }
      track.samples = samples;
      return this.remuxAudio(track, timeOffset, contiguous, false);
    }
  };
  function normalizePts(value, reference) {
    let offset;
    if (reference === null) {
      return value;
    }
    if (reference < value) {
      offset = -8589934592;
    } else {
      offset = 8589934592;
    }
    while (Math.abs(value - reference) > 4294967296) {
      value += offset;
    }
    return value;
  }
  function findKeyframeIndex(samples) {
    for (let i = 0; i < samples.length; i++) {
      if (samples[i].key) {
        return i;
      }
    }
    return -1;
  }
  function flushTextTrackMetadataCueSamples(track, timeOffset, initPTS, initDTS) {
    const length = track.samples.length;
    if (!length) {
      return;
    }
    const inputTimeScale = track.inputTimeScale;
    for (let index = 0; index < length; index++) {
      const sample = track.samples[index];
      sample.pts = normalizePts(sample.pts - initPTS.baseTime * inputTimeScale / initPTS.timescale, timeOffset * inputTimeScale) / inputTimeScale;
      sample.dts = normalizePts(sample.dts - initDTS.baseTime * inputTimeScale / initDTS.timescale, timeOffset * inputTimeScale) / inputTimeScale;
    }
    const samples = track.samples;
    track.samples = [];
    return {
      samples
    };
  }
  function flushTextTrackUserdataCueSamples(track, timeOffset, initPTS) {
    const length = track.samples.length;
    if (!length) {
      return;
    }
    const inputTimeScale = track.inputTimeScale;
    for (let index = 0; index < length; index++) {
      const sample = track.samples[index];
      sample.pts = normalizePts(sample.pts - initPTS.baseTime * inputTimeScale / initPTS.timescale, timeOffset * inputTimeScale) / inputTimeScale;
    }
    track.samples.sort((a, b) => a.pts - b.pts);
    const samples = track.samples;
    track.samples = [];
    return {
      samples
    };
  }
  var Mp4Sample = class {
    constructor(isKeyframe, duration, size, cts) {
      this.size = void 0;
      this.duration = void 0;
      this.cts = void 0;
      this.flags = void 0;
      this.duration = duration;
      this.size = size;
      this.cts = cts;
      this.flags = {
        isLeading: 0,
        isDependedOn: 0,
        hasRedundancy: 0,
        degradPrio: 0,
        dependsOn: isKeyframe ? 2 : 1,
        isNonSync: isKeyframe ? 0 : 1
      };
    }
  };
  var PassThroughRemuxer = class {
    constructor() {
      this.emitInitSegment = false;
      this.audioCodec = void 0;
      this.videoCodec = void 0;
      this.initData = void 0;
      this.initPTS = null;
      this.initTracks = void 0;
      this.lastEndTime = null;
    }
    destroy() {
    }
    resetTimeStamp(defaultInitPTS) {
      this.initPTS = defaultInitPTS;
      this.lastEndTime = null;
    }
    resetNextTimestamp() {
      this.lastEndTime = null;
    }
    resetInitSegment(initSegment, audioCodec, videoCodec, decryptdata) {
      this.audioCodec = audioCodec;
      this.videoCodec = videoCodec;
      this.generateInitSegment(patchEncyptionData(initSegment, decryptdata));
      this.emitInitSegment = true;
    }
    generateInitSegment(initSegment) {
      let {
        audioCodec,
        videoCodec
      } = this;
      if (!(initSegment != null && initSegment.byteLength)) {
        this.initTracks = void 0;
        this.initData = void 0;
        return;
      }
      const initData = this.initData = parseInitSegment(initSegment);
      if (initData.audio) {
        audioCodec = getParsedTrackCodec(initData.audio, ElementaryStreamTypes.AUDIO);
      }
      if (initData.video) {
        videoCodec = getParsedTrackCodec(initData.video, ElementaryStreamTypes.VIDEO);
      }
      const tracks = {};
      if (initData.audio && initData.video) {
        tracks.audiovideo = {
          container: "video/mp4",
          codec: audioCodec + "," + videoCodec,
          initSegment,
          id: "main"
        };
      } else if (initData.audio) {
        tracks.audio = {
          container: "audio/mp4",
          codec: audioCodec,
          initSegment,
          id: "audio"
        };
      } else if (initData.video) {
        tracks.video = {
          container: "video/mp4",
          codec: videoCodec,
          initSegment,
          id: "main"
        };
      } else {
        logger.warn("[passthrough-remuxer.ts]: initSegment does not contain moov or trak boxes.");
      }
      this.initTracks = tracks;
    }
    remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, accurateTimeOffset) {
      var _initData, _initData2;
      let {
        initPTS,
        lastEndTime
      } = this;
      const result = {
        audio: void 0,
        video: void 0,
        text: textTrack,
        id3: id3Track,
        initSegment: void 0
      };
      if (!isFiniteNumber(lastEndTime)) {
        lastEndTime = this.lastEndTime = timeOffset || 0;
      }
      const data = videoTrack.samples;
      if (!(data != null && data.length)) {
        return result;
      }
      const initSegment = {
        initPTS: void 0,
        timescale: 1
      };
      let initData = this.initData;
      if (!((_initData = initData) != null && _initData.length)) {
        this.generateInitSegment(data);
        initData = this.initData;
      }
      if (!((_initData2 = initData) != null && _initData2.length)) {
        logger.warn("[passthrough-remuxer.ts]: Failed to generate initSegment.");
        return result;
      }
      if (this.emitInitSegment) {
        initSegment.tracks = this.initTracks;
        this.emitInitSegment = false;
      }
      const duration = getDuration(data, initData);
      const startDTS = getStartDTS(initData, data);
      const decodeTime = startDTS === null ? timeOffset : startDTS;
      if (isInvalidInitPts(initPTS, decodeTime, timeOffset, duration) || initSegment.timescale !== initPTS.timescale && accurateTimeOffset) {
        initSegment.initPTS = decodeTime - timeOffset;
        if (initPTS && initPTS.timescale === 1) {
          logger.warn(`Adjusting initPTS by ${initSegment.initPTS - initPTS.baseTime}`);
        }
        this.initPTS = initPTS = {
          baseTime: initSegment.initPTS,
          timescale: 1
        };
      }
      const startTime = audioTrack ? decodeTime - initPTS.baseTime / initPTS.timescale : lastEndTime;
      const endTime = startTime + duration;
      offsetStartDTS(initData, data, initPTS.baseTime / initPTS.timescale);
      if (duration > 0) {
        this.lastEndTime = endTime;
      } else {
        logger.warn("Duration parsed from mp4 should be greater than zero");
        this.resetNextTimestamp();
      }
      const hasAudio = !!initData.audio;
      const hasVideo = !!initData.video;
      let type = "";
      if (hasAudio) {
        type += "audio";
      }
      if (hasVideo) {
        type += "video";
      }
      const track = {
        data1: data,
        startPTS: startTime,
        startDTS: startTime,
        endPTS: endTime,
        endDTS: endTime,
        type,
        hasAudio,
        hasVideo,
        nb: 1,
        dropped: 0
      };
      result.audio = track.type === "audio" ? track : void 0;
      result.video = track.type !== "audio" ? track : void 0;
      result.initSegment = initSegment;
      result.id3 = flushTextTrackMetadataCueSamples(id3Track, timeOffset, initPTS, initPTS);
      if (textTrack.samples.length) {
        result.text = flushTextTrackUserdataCueSamples(textTrack, timeOffset, initPTS);
      }
      return result;
    }
  };
  function isInvalidInitPts(initPTS, startDTS, timeOffset, duration) {
    if (initPTS === null) {
      return true;
    }
    const minDuration = Math.max(duration, 1);
    const startTime = startDTS - initPTS.baseTime / initPTS.timescale;
    return Math.abs(startTime - timeOffset) > minDuration;
  }
  function getParsedTrackCodec(track, type) {
    const parsedCodec = track == null ? void 0 : track.codec;
    if (parsedCodec && parsedCodec.length > 4) {
      return parsedCodec;
    }
    if (type === ElementaryStreamTypes.AUDIO) {
      if (parsedCodec === "ec-3" || parsedCodec === "ac-3" || parsedCodec === "alac") {
        return parsedCodec;
      }
      if (parsedCodec === "fLaC" || parsedCodec === "Opus") {
        const preferManagedMediaSource = false;
        return getCodecCompatibleName(parsedCodec, preferManagedMediaSource);
      }
      const result = "mp4a.40.5";
      logger.info(`Parsed audio codec "${parsedCodec}" or audio object type not handled. Using "${result}"`);
      return result;
    }
    logger.warn(`Unhandled video codec "${parsedCodec}"`);
    if (parsedCodec === "hvc1" || parsedCodec === "hev1") {
      return "hvc1.1.6.L120.90";
    }
    if (parsedCodec === "av01") {
      return "av01.0.04M.08";
    }
    return "avc1.42e01e";
  }
  var now;
  try {
    now = self.performance.now.bind(self.performance);
  } catch (err) {
    logger.debug("Unable to use Performance API on this environment");
    now = optionalSelf == null ? void 0 : optionalSelf.Date.now;
  }
  var muxConfig = [{
    demux: MP4Demuxer,
    remux: PassThroughRemuxer
  }, {
    demux: TSDemuxer,
    remux: MP4Remuxer
  }, {
    demux: AACDemuxer,
    remux: MP4Remuxer
  }, {
    demux: MP3Demuxer,
    remux: MP4Remuxer
  }];
  {
    muxConfig.splice(2, 0, {
      demux: AC3Demuxer,
      remux: MP4Remuxer
    });
  }
  var Transmuxer = class {
    constructor(observer2, typeSupported, config, vendor, id) {
      this.async = false;
      this.observer = void 0;
      this.typeSupported = void 0;
      this.config = void 0;
      this.vendor = void 0;
      this.id = void 0;
      this.demuxer = void 0;
      this.remuxer = void 0;
      this.decrypter = void 0;
      this.probe = void 0;
      this.decryptionPromise = null;
      this.transmuxConfig = void 0;
      this.currentTransmuxState = void 0;
      this.observer = observer2;
      this.typeSupported = typeSupported;
      this.config = config;
      this.vendor = vendor;
      this.id = id;
    }
    configure(transmuxConfig) {
      this.transmuxConfig = transmuxConfig;
      if (this.decrypter) {
        this.decrypter.reset();
      }
    }
    push(data, decryptdata, chunkMeta, state) {
      const stats = chunkMeta.transmuxing;
      stats.executeStart = now();
      let uintData = new Uint8Array(data);
      const {
        currentTransmuxState,
        transmuxConfig
      } = this;
      if (state) {
        this.currentTransmuxState = state;
      }
      const {
        contiguous,
        discontinuity,
        trackSwitch,
        accurateTimeOffset,
        timeOffset,
        initSegmentChange
      } = state || currentTransmuxState;
      const {
        audioCodec,
        videoCodec,
        defaultInitPts,
        duration,
        initSegmentData
      } = transmuxConfig;
      const keyData = getEncryptionType(uintData, decryptdata);
      if (keyData && keyData.method === "AES-128") {
        const decrypter = this.getDecrypter();
        if (decrypter.isSync()) {
          let decryptedData = decrypter.softwareDecrypt(uintData, keyData.key.buffer, keyData.iv.buffer);
          const loadingParts = chunkMeta.part > -1;
          if (loadingParts) {
            decryptedData = decrypter.flush();
          }
          if (!decryptedData) {
            stats.executeEnd = now();
            return emptyResult(chunkMeta);
          }
          uintData = new Uint8Array(decryptedData);
        } else {
          this.decryptionPromise = decrypter.webCryptoDecrypt(uintData, keyData.key.buffer, keyData.iv.buffer).then((decryptedData) => {
            const result2 = this.push(decryptedData, null, chunkMeta);
            this.decryptionPromise = null;
            return result2;
          });
          return this.decryptionPromise;
        }
      }
      const resetMuxers = this.needsProbing(discontinuity, trackSwitch);
      if (resetMuxers) {
        const error = this.configureTransmuxer(uintData);
        if (error) {
          logger.warn(`[transmuxer] ${error.message}`);
          this.observer.emit(Events2.ERROR, Events2.ERROR, {
            type: ErrorTypes.MEDIA_ERROR,
            details: ErrorDetails.FRAG_PARSING_ERROR,
            fatal: false,
            error,
            reason: error.message
          });
          stats.executeEnd = now();
          return emptyResult(chunkMeta);
        }
      }
      if (discontinuity || trackSwitch || initSegmentChange || resetMuxers) {
        this.resetInitSegment(initSegmentData, audioCodec, videoCodec, duration, decryptdata);
      }
      if (discontinuity || initSegmentChange || resetMuxers) {
        this.resetInitialTimestamp(defaultInitPts);
      }
      if (!contiguous) {
        this.resetContiguity();
      }
      const result = this.transmux(uintData, keyData, timeOffset, accurateTimeOffset, chunkMeta);
      const currentState = this.currentTransmuxState;
      currentState.contiguous = true;
      currentState.discontinuity = false;
      currentState.trackSwitch = false;
      stats.executeEnd = now();
      return result;
    }
    // Due to data caching, flush calls can produce more than one TransmuxerResult (hence the Array type)
    flush(chunkMeta) {
      const stats = chunkMeta.transmuxing;
      stats.executeStart = now();
      const {
        decrypter,
        currentTransmuxState,
        decryptionPromise
      } = this;
      if (decryptionPromise) {
        return decryptionPromise.then(() => {
          return this.flush(chunkMeta);
        });
      }
      const transmuxResults = [];
      const {
        timeOffset
      } = currentTransmuxState;
      if (decrypter) {
        const decryptedData = decrypter.flush();
        if (decryptedData) {
          transmuxResults.push(this.push(decryptedData, null, chunkMeta));
        }
      }
      const {
        demuxer,
        remuxer
      } = this;
      if (!demuxer || !remuxer) {
        stats.executeEnd = now();
        return [emptyResult(chunkMeta)];
      }
      const demuxResultOrPromise = demuxer.flush(timeOffset);
      if (isPromise(demuxResultOrPromise)) {
        return demuxResultOrPromise.then((demuxResult) => {
          this.flushRemux(transmuxResults, demuxResult, chunkMeta);
          return transmuxResults;
        });
      }
      this.flushRemux(transmuxResults, demuxResultOrPromise, chunkMeta);
      return transmuxResults;
    }
    flushRemux(transmuxResults, demuxResult, chunkMeta) {
      const {
        audioTrack,
        videoTrack,
        id3Track,
        textTrack
      } = demuxResult;
      const {
        accurateTimeOffset,
        timeOffset
      } = this.currentTransmuxState;
      logger.log(`[transmuxer.ts]: Flushed fragment ${chunkMeta.sn}${chunkMeta.part > -1 ? " p: " + chunkMeta.part : ""} of level ${chunkMeta.level}`);
      const remuxResult = this.remuxer.remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, accurateTimeOffset, true, this.id);
      transmuxResults.push({
        remuxResult,
        chunkMeta
      });
      chunkMeta.transmuxing.executeEnd = now();
    }
    resetInitialTimestamp(defaultInitPts) {
      const {
        demuxer,
        remuxer
      } = this;
      if (!demuxer || !remuxer) {
        return;
      }
      demuxer.resetTimeStamp(defaultInitPts);
      remuxer.resetTimeStamp(defaultInitPts);
    }
    resetContiguity() {
      const {
        demuxer,
        remuxer
      } = this;
      if (!demuxer || !remuxer) {
        return;
      }
      demuxer.resetContiguity();
      remuxer.resetNextTimestamp();
    }
    resetInitSegment(initSegmentData, audioCodec, videoCodec, trackDuration, decryptdata) {
      const {
        demuxer,
        remuxer
      } = this;
      if (!demuxer || !remuxer) {
        return;
      }
      demuxer.resetInitSegment(initSegmentData, audioCodec, videoCodec, trackDuration);
      remuxer.resetInitSegment(initSegmentData, audioCodec, videoCodec, decryptdata);
    }
    destroy() {
      if (this.demuxer) {
        this.demuxer.destroy();
        this.demuxer = void 0;
      }
      if (this.remuxer) {
        this.remuxer.destroy();
        this.remuxer = void 0;
      }
    }
    transmux(data, keyData, timeOffset, accurateTimeOffset, chunkMeta) {
      let result;
      if (keyData && keyData.method === "SAMPLE-AES") {
        result = this.transmuxSampleAes(data, keyData, timeOffset, accurateTimeOffset, chunkMeta);
      } else {
        result = this.transmuxUnencrypted(data, timeOffset, accurateTimeOffset, chunkMeta);
      }
      return result;
    }
    transmuxUnencrypted(data, timeOffset, accurateTimeOffset, chunkMeta) {
      const {
        audioTrack,
        videoTrack,
        id3Track,
        textTrack
      } = this.demuxer.demux(data, timeOffset, false, !this.config.progressive);
      const remuxResult = this.remuxer.remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, accurateTimeOffset, false, this.id);
      return {
        remuxResult,
        chunkMeta
      };
    }
    transmuxSampleAes(data, decryptData, timeOffset, accurateTimeOffset, chunkMeta) {
      return this.demuxer.demuxSampleAes(data, decryptData, timeOffset).then((demuxResult) => {
        const remuxResult = this.remuxer.remux(demuxResult.audioTrack, demuxResult.videoTrack, demuxResult.id3Track, demuxResult.textTrack, timeOffset, accurateTimeOffset, false, this.id);
        return {
          remuxResult,
          chunkMeta
        };
      });
    }
    configureTransmuxer(data) {
      const {
        config,
        observer: observer2,
        typeSupported,
        vendor
      } = this;
      let mux;
      for (let i = 0, len = muxConfig.length; i < len; i++) {
        var _muxConfig$i$demux;
        if ((_muxConfig$i$demux = muxConfig[i].demux) != null && _muxConfig$i$demux.probe(data)) {
          mux = muxConfig[i];
          break;
        }
      }
      if (!mux) {
        return new Error("Failed to find demuxer by probing fragment data");
      }
      const demuxer = this.demuxer;
      const remuxer = this.remuxer;
      const Remuxer = mux.remux;
      const Demuxer = mux.demux;
      if (!remuxer || !(remuxer instanceof Remuxer)) {
        this.remuxer = new Remuxer(observer2, config, typeSupported, vendor);
      }
      if (!demuxer || !(demuxer instanceof Demuxer)) {
        this.demuxer = new Demuxer(observer2, config, typeSupported);
        this.probe = Demuxer.probe;
      }
    }
    needsProbing(discontinuity, trackSwitch) {
      return !this.demuxer || !this.remuxer || discontinuity || trackSwitch;
    }
    getDecrypter() {
      let decrypter = this.decrypter;
      if (!decrypter) {
        decrypter = this.decrypter = new Decrypter(this.config);
      }
      return decrypter;
    }
  };
  function getEncryptionType(data, decryptData) {
    let encryptionType = null;
    if (data.byteLength > 0 && (decryptData == null ? void 0 : decryptData.key) != null && decryptData.iv !== null && decryptData.method != null) {
      encryptionType = decryptData;
    }
    return encryptionType;
  }
  var emptyResult = (chunkMeta) => ({
    remuxResult: {},
    chunkMeta
  });
  function isPromise(p) {
    return "then" in p && p.then instanceof Function;
  }
  var TransmuxConfig = class {
    constructor(audioCodec, videoCodec, initSegmentData, duration, defaultInitPts) {
      this.audioCodec = void 0;
      this.videoCodec = void 0;
      this.initSegmentData = void 0;
      this.duration = void 0;
      this.defaultInitPts = void 0;
      this.audioCodec = audioCodec;
      this.videoCodec = videoCodec;
      this.initSegmentData = initSegmentData;
      this.duration = duration;
      this.defaultInitPts = defaultInitPts || null;
    }
  };
  var TransmuxState = class {
    constructor(discontinuity, contiguous, accurateTimeOffset, trackSwitch, timeOffset, initSegmentChange) {
      this.discontinuity = void 0;
      this.contiguous = void 0;
      this.accurateTimeOffset = void 0;
      this.trackSwitch = void 0;
      this.timeOffset = void 0;
      this.initSegmentChange = void 0;
      this.discontinuity = discontinuity;
      this.contiguous = contiguous;
      this.accurateTimeOffset = accurateTimeOffset;
      this.trackSwitch = trackSwitch;
      this.timeOffset = timeOffset;
      this.initSegmentChange = initSegmentChange;
    }
  };
  var eventemitter3 = { exports: {} };
  (function(module) {
    var has = Object.prototype.hasOwnProperty, prefix = "~";
    function Events3() {
    }
    if (Object.create) {
      Events3.prototype = /* @__PURE__ */ Object.create(null);
      if (!new Events3().__proto__) prefix = false;
    }
    function EE(fn, context, once) {
      this.fn = fn;
      this.context = context;
      this.once = once || false;
    }
    function addListener(emitter, event, fn, context, once) {
      if (typeof fn !== "function") {
        throw new TypeError("The listener must be a function");
      }
      var listener = new EE(fn, context || emitter, once), evt = prefix ? prefix + event : event;
      if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
      else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
      else emitter._events[evt] = [emitter._events[evt], listener];
      return emitter;
    }
    function clearEvent(emitter, evt) {
      if (--emitter._eventsCount === 0) emitter._events = new Events3();
      else delete emitter._events[evt];
    }
    function EventEmitter2() {
      this._events = new Events3();
      this._eventsCount = 0;
    }
    EventEmitter2.prototype.eventNames = function eventNames() {
      var names = [], events, name;
      if (this._eventsCount === 0) return names;
      for (name in events = this._events) {
        if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
      }
      if (Object.getOwnPropertySymbols) {
        return names.concat(Object.getOwnPropertySymbols(events));
      }
      return names;
    };
    EventEmitter2.prototype.listeners = function listeners(event) {
      var evt = prefix ? prefix + event : event, handlers = this._events[evt];
      if (!handlers) return [];
      if (handlers.fn) return [handlers.fn];
      for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
        ee[i] = handlers[i].fn;
      }
      return ee;
    };
    EventEmitter2.prototype.listenerCount = function listenerCount(event) {
      var evt = prefix ? prefix + event : event, listeners = this._events[evt];
      if (!listeners) return 0;
      if (listeners.fn) return 1;
      return listeners.length;
    };
    EventEmitter2.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt]) return false;
      var listeners = this._events[evt], len = arguments.length, args, i;
      if (listeners.fn) {
        if (listeners.once) this.removeListener(event, listeners.fn, void 0, true);
        switch (len) {
          case 1:
            return listeners.fn.call(listeners.context), true;
          case 2:
            return listeners.fn.call(listeners.context, a1), true;
          case 3:
            return listeners.fn.call(listeners.context, a1, a2), true;
          case 4:
            return listeners.fn.call(listeners.context, a1, a2, a3), true;
          case 5:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
          case 6:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }
        for (i = 1, args = new Array(len - 1); i < len; i++) {
          args[i - 1] = arguments[i];
        }
        listeners.fn.apply(listeners.context, args);
      } else {
        var length = listeners.length, j;
        for (i = 0; i < length; i++) {
          if (listeners[i].once) this.removeListener(event, listeners[i].fn, void 0, true);
          switch (len) {
            case 1:
              listeners[i].fn.call(listeners[i].context);
              break;
            case 2:
              listeners[i].fn.call(listeners[i].context, a1);
              break;
            case 3:
              listeners[i].fn.call(listeners[i].context, a1, a2);
              break;
            case 4:
              listeners[i].fn.call(listeners[i].context, a1, a2, a3);
              break;
            default:
              if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
                args[j - 1] = arguments[j];
              }
              listeners[i].fn.apply(listeners[i].context, args);
          }
        }
      }
      return true;
    };
    EventEmitter2.prototype.on = function on(event, fn, context) {
      return addListener(this, event, fn, context, false);
    };
    EventEmitter2.prototype.once = function once(event, fn, context) {
      return addListener(this, event, fn, context, true);
    };
    EventEmitter2.prototype.removeListener = function removeListener(event, fn, context, once) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt]) return this;
      if (!fn) {
        clearEvent(this, evt);
        return this;
      }
      var listeners = this._events[evt];
      if (listeners.fn) {
        if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
          clearEvent(this, evt);
        }
      } else {
        for (var i = 0, events = [], length = listeners.length; i < length; i++) {
          if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
            events.push(listeners[i]);
          }
        }
        if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
        else clearEvent(this, evt);
      }
      return this;
    };
    EventEmitter2.prototype.removeAllListeners = function removeAllListeners(event) {
      var evt;
      if (event) {
        evt = prefix ? prefix + event : event;
        if (this._events[evt]) clearEvent(this, evt);
      } else {
        this._events = new Events3();
        this._eventsCount = 0;
      }
      return this;
    };
    EventEmitter2.prototype.off = EventEmitter2.prototype.removeListener;
    EventEmitter2.prototype.addListener = EventEmitter2.prototype.on;
    EventEmitter2.prefixed = prefix;
    EventEmitter2.EventEmitter = EventEmitter2;
    {
      module.exports = EventEmitter2;
    }
  })(eventemitter3);
  var eventemitter3Exports = eventemitter3.exports;
  var EventEmitter = /* @__PURE__ */ getDefaultExportFromCjs(eventemitter3Exports);
  var TransmuxerInterface = class {
    constructor(hls, id, onTransmuxComplete, onFlush) {
      this.error = null;
      this.hls = void 0;
      this.id = void 0;
      this.observer = void 0;
      this.frag = null;
      this.part = null;
      this.useWorker = void 0;
      this.workerContext = null;
      this.onwmsg = void 0;
      this.transmuxer = null;
      this.onTransmuxComplete = void 0;
      this.onFlush = void 0;
      const config = hls.config;
      this.hls = hls;
      this.id = id;
      this.useWorker = !!config.enableWorker;
      this.onTransmuxComplete = onTransmuxComplete;
      this.onFlush = onFlush;
      const forwardMessage = (ev, data) => {
        data = data || {};
        data.frag = this.frag;
        data.id = this.id;
        if (ev === Events2.ERROR) {
          this.error = data.error;
        }
        this.hls.trigger(ev, data);
      };
      this.observer = new EventEmitter();
      this.observer.on(Events2.FRAG_DECRYPTED, forwardMessage);
      this.observer.on(Events2.ERROR, forwardMessage);
      const MediaSource = getMediaSource(config.preferManagedMediaSource) || {
        isTypeSupported: () => false
      };
      const m2tsTypeSupported = {
        mpeg: MediaSource.isTypeSupported("audio/mpeg"),
        mp3: MediaSource.isTypeSupported('audio/mp4; codecs="mp3"'),
        ac3: MediaSource.isTypeSupported('audio/mp4; codecs="ac-3"')
      };
      if (this.useWorker && typeof Worker !== "undefined") {
        const canCreateWorker = config.workerPath || hasUMDWorker();
        if (canCreateWorker) {
          try {
            if (config.workerPath) {
              logger.log(`loading Web Worker ${config.workerPath} for "${id}"`);
              this.workerContext = loadWorker(config.workerPath);
            } else {
              logger.log(`injecting Web Worker for "${id}"`);
              this.workerContext = injectWorker();
            }
            this.onwmsg = (event) => this.onWorkerMessage(event);
            const {
              worker
            } = this.workerContext;
            worker.addEventListener("message", this.onwmsg);
            worker.onerror = (event) => {
              const error = new Error(`${event.message}  (${event.filename}:${event.lineno})`);
              config.enableWorker = false;
              logger.warn(`Error in "${id}" Web Worker, fallback to inline`);
              this.hls.trigger(Events2.ERROR, {
                type: ErrorTypes.OTHER_ERROR,
                details: ErrorDetails.INTERNAL_EXCEPTION,
                fatal: false,
                event: "demuxerWorker",
                error
              });
            };
            worker.postMessage({
              cmd: "init",
              typeSupported: m2tsTypeSupported,
              vendor: "",
              id,
              config: JSON.stringify(config)
            });
          } catch (err) {
            logger.warn(`Error setting up "${id}" Web Worker, fallback to inline`, err);
            this.resetWorker();
            this.error = null;
            this.transmuxer = new Transmuxer(this.observer, m2tsTypeSupported, config, "", id);
          }
          return;
        }
      }
      this.transmuxer = new Transmuxer(this.observer, m2tsTypeSupported, config, "", id);
    }
    resetWorker() {
      if (this.workerContext) {
        const {
          worker,
          objectURL
        } = this.workerContext;
        if (objectURL) {
          self.URL.revokeObjectURL(objectURL);
        }
        worker.removeEventListener("message", this.onwmsg);
        worker.onerror = null;
        worker.terminate();
        this.workerContext = null;
      }
    }
    destroy() {
      if (this.workerContext) {
        this.resetWorker();
        this.onwmsg = void 0;
      } else {
        const transmuxer = this.transmuxer;
        if (transmuxer) {
          transmuxer.destroy();
          this.transmuxer = null;
        }
      }
      const observer2 = this.observer;
      if (observer2) {
        observer2.removeAllListeners();
      }
      this.frag = null;
      this.observer = null;
      this.hls = null;
    }
    push(data, initSegmentData, audioCodec, videoCodec, frag, part, duration, accurateTimeOffset, chunkMeta, defaultInitPTS) {
      var _frag$initSegment, _lastFrag$initSegment;
      chunkMeta.transmuxing.start = self.performance.now();
      const {
        transmuxer
      } = this;
      const timeOffset = part ? part.start : frag.start;
      const decryptdata = frag.decryptdata;
      const lastFrag = this.frag;
      const discontinuity = !(lastFrag && frag.cc === lastFrag.cc);
      const trackSwitch = !(lastFrag && chunkMeta.level === lastFrag.level);
      const snDiff = lastFrag ? chunkMeta.sn - lastFrag.sn : -1;
      const partDiff = this.part ? chunkMeta.part - this.part.index : -1;
      const progressive = snDiff === 0 && chunkMeta.id > 1 && chunkMeta.id === (lastFrag == null ? void 0 : lastFrag.stats.chunkCount);
      const contiguous = !trackSwitch && (snDiff === 1 || snDiff === 0 && (partDiff === 1 || progressive && partDiff <= 0));
      const now2 = self.performance.now();
      if (trackSwitch || snDiff || frag.stats.parsing.start === 0) {
        frag.stats.parsing.start = now2;
      }
      if (part && (partDiff || !contiguous)) {
        part.stats.parsing.start = now2;
      }
      const initSegmentChange = !(lastFrag && ((_frag$initSegment = frag.initSegment) == null ? void 0 : _frag$initSegment.url) === ((_lastFrag$initSegment = lastFrag.initSegment) == null ? void 0 : _lastFrag$initSegment.url));
      const state = new TransmuxState(discontinuity, contiguous, accurateTimeOffset, trackSwitch, timeOffset, initSegmentChange);
      if (!contiguous || discontinuity || initSegmentChange) {
        logger.log(`[transmuxer-interface, ${frag.type}]: Starting new transmux session for sn: ${chunkMeta.sn} p: ${chunkMeta.part} level: ${chunkMeta.level} id: ${chunkMeta.id}
        discontinuity: ${discontinuity}
        trackSwitch: ${trackSwitch}
        contiguous: ${contiguous}
        accurateTimeOffset: ${accurateTimeOffset}
        timeOffset: ${timeOffset}
        initSegmentChange: ${initSegmentChange}`);
        const config = new TransmuxConfig(audioCodec, videoCodec, initSegmentData, duration, defaultInitPTS);
        this.configureTransmuxer(config);
      }
      this.frag = frag;
      this.part = part;
      if (this.workerContext) {
        this.workerContext.worker.postMessage({
          cmd: "demux",
          data,
          decryptdata,
          chunkMeta,
          state
        }, data instanceof ArrayBuffer ? [data] : []);
      } else if (transmuxer) {
        const transmuxResult = transmuxer.push(data, decryptdata, chunkMeta, state);
        if (isPromise(transmuxResult)) {
          transmuxer.async = true;
          transmuxResult.then((data2) => {
            this.handleTransmuxComplete(data2);
          }).catch((error) => {
            this.transmuxerError(error, chunkMeta, "transmuxer-interface push error");
          });
        } else {
          transmuxer.async = false;
          this.handleTransmuxComplete(transmuxResult);
        }
      }
    }
    flush(chunkMeta) {
      chunkMeta.transmuxing.start = self.performance.now();
      const {
        transmuxer
      } = this;
      if (this.workerContext) {
        this.workerContext.worker.postMessage({
          cmd: "flush",
          chunkMeta
        });
      } else if (transmuxer) {
        let transmuxResult = transmuxer.flush(chunkMeta);
        const asyncFlush = isPromise(transmuxResult);
        if (asyncFlush || transmuxer.async) {
          if (!isPromise(transmuxResult)) {
            transmuxResult = Promise.resolve(transmuxResult);
          }
          transmuxResult.then((data) => {
            this.handleFlushResult(data, chunkMeta);
          }).catch((error) => {
            this.transmuxerError(error, chunkMeta, "transmuxer-interface flush error");
          });
        } else {
          this.handleFlushResult(transmuxResult, chunkMeta);
        }
      }
    }
    transmuxerError(error, chunkMeta, reason) {
      if (!this.hls) {
        return;
      }
      this.error = error;
      this.hls.trigger(Events2.ERROR, {
        type: ErrorTypes.MEDIA_ERROR,
        details: ErrorDetails.FRAG_PARSING_ERROR,
        chunkMeta,
        frag: this.frag || void 0,
        fatal: false,
        error,
        err: error,
        reason
      });
    }
    handleFlushResult(results, chunkMeta) {
      results.forEach((result) => {
        this.handleTransmuxComplete(result);
      });
      this.onFlush(chunkMeta);
    }
    onWorkerMessage(event) {
      const data = event.data;
      if (!(data != null && data.event)) {
        logger.warn(`worker message received with no ${data ? "event name" : "data"}`);
        return;
      }
      const hls = this.hls;
      if (!this.hls) {
        return;
      }
      switch (data.event) {
        case "init": {
          var _this$workerContext;
          const objectURL = (_this$workerContext = this.workerContext) == null ? void 0 : _this$workerContext.objectURL;
          if (objectURL) {
            self.URL.revokeObjectURL(objectURL);
          }
          break;
        }
        case "transmuxComplete": {
          this.handleTransmuxComplete(data.data);
          break;
        }
        case "flush": {
          this.onFlush(data.data);
          break;
        }
        // pass logs from the worker thread to the main logger
        case "workerLog":
          if (logger[data.data.logType]) {
            logger[data.data.logType](data.data.message);
          }
          break;
        default: {
          data.data = data.data || {};
          data.data.frag = this.frag;
          data.data.id = this.id;
          hls.trigger(data.event, data.data);
          break;
        }
      }
    }
    configureTransmuxer(config) {
      const {
        transmuxer
      } = this;
      if (this.workerContext) {
        this.workerContext.worker.postMessage({
          cmd: "configure",
          config
        });
      } else if (transmuxer) {
        transmuxer.configure(config);
      }
    }
    handleTransmuxComplete(result) {
      result.chunkMeta.transmuxing.end = self.performance.now();
      this.onTransmuxComplete(result);
    }
  };
  function subtitleOptionsIdentical(trackList1, trackList2) {
    if (trackList1.length !== trackList2.length) {
      return false;
    }
    for (let i = 0; i < trackList1.length; i++) {
      if (!mediaAttributesIdentical(trackList1[i].attrs, trackList2[i].attrs)) {
        return false;
      }
    }
    return true;
  }
  function mediaAttributesIdentical(attrs1, attrs2, customAttributes) {
    const stableRenditionId = attrs1["STABLE-RENDITION-ID"];
    if (stableRenditionId && !customAttributes) {
      return stableRenditionId === attrs2["STABLE-RENDITION-ID"];
    }
    return !(customAttributes || ["LANGUAGE", "NAME", "CHARACTERISTICS", "AUTOSELECT", "DEFAULT", "FORCED", "ASSOC-LANGUAGE"]).some((subtitleAttribute) => attrs1[subtitleAttribute] !== attrs2[subtitleAttribute]);
  }
  function subtitleTrackMatchesTextTrack(subtitleTrack, textTrack) {
    return textTrack.label.toLowerCase() === subtitleTrack.name.toLowerCase() && (!textTrack.language || textTrack.language.toLowerCase() === (subtitleTrack.lang || "").toLowerCase());
  }
  var TICK_INTERVAL$2 = 100;
  var AudioStreamController = class extends BaseStreamController {
    constructor(hls, fragmentTracker, keyLoader) {
      super(hls, fragmentTracker, keyLoader, "[audio-stream-controller]", PlaylistLevelType.AUDIO);
      this.videoBuffer = null;
      this.videoTrackCC = -1;
      this.waitingVideoCC = -1;
      this.bufferedTrack = null;
      this.switchingTrack = null;
      this.trackId = -1;
      this.waitingData = null;
      this.mainDetails = null;
      this.flushing = false;
      this.bufferFlushed = false;
      this.cachedTrackLoadedData = null;
      this._registerListeners();
    }
    onHandlerDestroying() {
      this._unregisterListeners();
      super.onHandlerDestroying();
      this.mainDetails = null;
      this.bufferedTrack = null;
      this.switchingTrack = null;
    }
    _registerListeners() {
      const {
        hls
      } = this;
      hls.on(Events2.MEDIA_ATTACHED, this.onMediaAttached, this);
      hls.on(Events2.MEDIA_DETACHING, this.onMediaDetaching, this);
      hls.on(Events2.MANIFEST_LOADING, this.onManifestLoading, this);
      hls.on(Events2.LEVEL_LOADED, this.onLevelLoaded, this);
      hls.on(Events2.AUDIO_TRACKS_UPDATED, this.onAudioTracksUpdated, this);
      hls.on(Events2.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this);
      hls.on(Events2.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this);
      hls.on(Events2.ERROR, this.onError, this);
      hls.on(Events2.BUFFER_RESET, this.onBufferReset, this);
      hls.on(Events2.BUFFER_CREATED, this.onBufferCreated, this);
      hls.on(Events2.BUFFER_FLUSHING, this.onBufferFlushing, this);
      hls.on(Events2.BUFFER_FLUSHED, this.onBufferFlushed, this);
      hls.on(Events2.INIT_PTS_FOUND, this.onInitPtsFound, this);
      hls.on(Events2.FRAG_BUFFERED, this.onFragBuffered, this);
    }
    _unregisterListeners() {
      const {
        hls
      } = this;
      hls.off(Events2.MEDIA_ATTACHED, this.onMediaAttached, this);
      hls.off(Events2.MEDIA_DETACHING, this.onMediaDetaching, this);
      hls.off(Events2.MANIFEST_LOADING, this.onManifestLoading, this);
      hls.off(Events2.LEVEL_LOADED, this.onLevelLoaded, this);
      hls.off(Events2.AUDIO_TRACKS_UPDATED, this.onAudioTracksUpdated, this);
      hls.off(Events2.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this);
      hls.off(Events2.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this);
      hls.off(Events2.ERROR, this.onError, this);
      hls.off(Events2.BUFFER_RESET, this.onBufferReset, this);
      hls.off(Events2.BUFFER_CREATED, this.onBufferCreated, this);
      hls.off(Events2.BUFFER_FLUSHING, this.onBufferFlushing, this);
      hls.off(Events2.BUFFER_FLUSHED, this.onBufferFlushed, this);
      hls.off(Events2.INIT_PTS_FOUND, this.onInitPtsFound, this);
      hls.off(Events2.FRAG_BUFFERED, this.onFragBuffered, this);
    }
    // INIT_PTS_FOUND is triggered when the video track parsed in the stream-controller has a new PTS value
    onInitPtsFound(event, {
      frag,
      id,
      initPTS,
      timescale
    }) {
      if (id === "main") {
        const cc = frag.cc;
        this.initPTS[frag.cc] = {
          baseTime: initPTS,
          timescale
        };
        this.log(`InitPTS for cc: ${cc} found from main: ${initPTS}`);
        this.videoTrackCC = cc;
        if (this.state === State.WAITING_INIT_PTS) {
          this.tick();
        }
      }
    }
    startLoad(startPosition) {
      if (!this.levels) {
        this.startPosition = startPosition;
        this.state = State.STOPPED;
        return;
      }
      const lastCurrentTime = this.lastCurrentTime;
      this.stopLoad();
      this.setInterval(TICK_INTERVAL$2);
      if (lastCurrentTime > 0 && startPosition === -1) {
        this.log(`Override startPosition with lastCurrentTime @${lastCurrentTime.toFixed(3)}`);
        startPosition = lastCurrentTime;
        this.state = State.IDLE;
      } else {
        this.loadedmetadata = false;
        this.state = State.WAITING_TRACK;
      }
      this.nextLoadPosition = this.startPosition = this.lastCurrentTime = startPosition;
      this.tick();
    }
    doTick() {
      switch (this.state) {
        case State.IDLE:
          this.doTickIdle();
          break;
        case State.WAITING_TRACK: {
          var _levels$trackId;
          const {
            levels,
            trackId
          } = this;
          const details = levels == null ? void 0 : (_levels$trackId = levels[trackId]) == null ? void 0 : _levels$trackId.details;
          if (details) {
            if (this.waitForCdnTuneIn(details)) {
              break;
            }
            this.state = State.WAITING_INIT_PTS;
          }
          break;
        }
        case State.FRAG_LOADING_WAITING_RETRY: {
          var _this$media;
          const now2 = performance.now();
          const retryDate = this.retryDate;
          if (!retryDate || now2 >= retryDate || (_this$media = this.media) != null && _this$media.seeking) {
            const {
              levels,
              trackId
            } = this;
            this.log("RetryDate reached, switch back to IDLE state");
            this.resetStartWhenNotLoaded((levels == null ? void 0 : levels[trackId]) || null);
            this.state = State.IDLE;
          }
          break;
        }
        case State.WAITING_INIT_PTS: {
          const waitingData = this.waitingData;
          if (waitingData) {
            const {
              frag,
              part,
              cache,
              complete
            } = waitingData;
            if (this.initPTS[frag.cc] !== void 0) {
              this.waitingData = null;
              this.waitingVideoCC = -1;
              this.state = State.FRAG_LOADING;
              const payload = cache.flush();
              const data = {
                frag,
                part,
                payload,
                networkDetails: null
              };
              this._handleFragmentLoadProgress(data);
              if (complete) {
                super._handleFragmentLoadComplete(data);
              }
            } else if (this.videoTrackCC !== this.waitingVideoCC) {
              this.log(`Waiting fragment cc (${frag.cc}) cancelled because video is at cc ${this.videoTrackCC}`);
              this.clearWaitingFragment();
            } else {
              const pos = this.getLoadPosition();
              const bufferInfo = BufferHelper.bufferInfo(this.mediaBuffer, pos, this.config.maxBufferHole);
              const waitingFragmentAtPosition = fragmentWithinToleranceTest(bufferInfo.end, this.config.maxFragLookUpTolerance, frag);
              if (waitingFragmentAtPosition < 0) {
                this.log(`Waiting fragment cc (${frag.cc}) @ ${frag.start} cancelled because another fragment at ${bufferInfo.end} is needed`);
                this.clearWaitingFragment();
              }
            }
          } else {
            this.state = State.IDLE;
          }
        }
      }
      this.onTickEnd();
    }
    clearWaitingFragment() {
      const waitingData = this.waitingData;
      if (waitingData) {
        this.fragmentTracker.removeFragment(waitingData.frag);
        this.waitingData = null;
        this.waitingVideoCC = -1;
        this.state = State.IDLE;
      }
    }
    resetLoadingState() {
      this.clearWaitingFragment();
      super.resetLoadingState();
    }
    onTickEnd() {
      const {
        media
      } = this;
      if (!(media != null && media.readyState)) {
        return;
      }
      this.lastCurrentTime = media.currentTime;
    }
    doTickIdle() {
      const {
        hls,
        levels,
        media,
        trackId
      } = this;
      const config = hls.config;
      if (!this.buffering || !media && (this.startFragRequested || !config.startFragPrefetch) || !(levels != null && levels[trackId])) {
        return;
      }
      const levelInfo = levels[trackId];
      const trackDetails = levelInfo.details;
      if (!trackDetails || trackDetails.live && this.levelLastLoaded !== levelInfo || this.waitForCdnTuneIn(trackDetails)) {
        this.state = State.WAITING_TRACK;
        return;
      }
      const bufferable = this.mediaBuffer ? this.mediaBuffer : this.media;
      if (this.bufferFlushed && bufferable) {
        this.bufferFlushed = false;
        this.afterBufferFlushed(bufferable, ElementaryStreamTypes.AUDIO, PlaylistLevelType.AUDIO);
      }
      const bufferInfo = this.getFwdBufferInfo(bufferable, PlaylistLevelType.AUDIO);
      if (bufferInfo === null) {
        return;
      }
      const {
        bufferedTrack,
        switchingTrack
      } = this;
      if (!switchingTrack && this._streamEnded(bufferInfo, trackDetails)) {
        hls.trigger(Events2.BUFFER_EOS, {
          type: "audio"
        });
        this.state = State.ENDED;
        return;
      }
      const mainBufferInfo = this.getFwdBufferInfo(this.videoBuffer ? this.videoBuffer : this.media, PlaylistLevelType.MAIN);
      const bufferLen = bufferInfo.len;
      const maxBufLen = this.getMaxBufferLength(mainBufferInfo == null ? void 0 : mainBufferInfo.len);
      const fragments = trackDetails.fragments;
      const start = fragments[0].start;
      let targetBufferTime = this.flushing ? this.getLoadPosition() : bufferInfo.end;
      if (switchingTrack && media) {
        const pos = this.getLoadPosition();
        if (bufferedTrack && !mediaAttributesIdentical(switchingTrack.attrs, bufferedTrack.attrs)) {
          targetBufferTime = pos;
        }
        if (trackDetails.PTSKnown && pos < start) {
          if (bufferInfo.end > start || bufferInfo.nextStart) {
            this.log("Alt audio track ahead of main track, seek to start of alt audio track");
            media.currentTime = start + 0.05;
          }
        }
      }
      if (bufferLen >= maxBufLen && !switchingTrack && targetBufferTime < fragments[fragments.length - 1].start) {
        return;
      }
      let frag = this.getNextFragment(targetBufferTime, trackDetails);
      let atGap = false;
      if (frag && this.isLoopLoading(frag, targetBufferTime)) {
        atGap = !!frag.gap;
        frag = this.getNextFragmentLoopLoading(frag, trackDetails, bufferInfo, PlaylistLevelType.MAIN, maxBufLen);
      }
      if (!frag) {
        this.bufferFlushed = true;
        return;
      }
      const atBufferSyncLimit = mainBufferInfo && frag.start > mainBufferInfo.end + trackDetails.targetduration;
      if (atBufferSyncLimit || // Or wait for main buffer after buffing some audio
      !(mainBufferInfo != null && mainBufferInfo.len) && bufferInfo.len) {
        const mainFrag = this.getAppendedFrag(frag.start, PlaylistLevelType.MAIN);
        if (mainFrag === null) {
          return;
        }
        atGap || (atGap = !!mainFrag.gap || !!atBufferSyncLimit && mainBufferInfo.len === 0);
        if (atBufferSyncLimit && !atGap || atGap && bufferInfo.nextStart && bufferInfo.nextStart < mainFrag.end) {
          return;
        }
      }
      this.loadFragment(frag, levelInfo, targetBufferTime);
    }
    getMaxBufferLength(mainBufferLength) {
      const maxConfigBuffer = super.getMaxBufferLength();
      if (!mainBufferLength) {
        return maxConfigBuffer;
      }
      return Math.min(Math.max(maxConfigBuffer, mainBufferLength), this.config.maxMaxBufferLength);
    }
    onMediaDetaching() {
      this.videoBuffer = null;
      this.bufferFlushed = this.flushing = false;
      super.onMediaDetaching();
    }
    onAudioTracksUpdated(event, {
      audioTracks
    }) {
      this.resetTransmuxer();
      this.levels = audioTracks.map((mediaPlaylist) => new Level(mediaPlaylist));
    }
    onAudioTrackSwitching(event, data) {
      const altAudio = !!data.url;
      this.trackId = data.id;
      const {
        fragCurrent
      } = this;
      if (fragCurrent) {
        fragCurrent.abortRequests();
        this.removeUnbufferedFrags(fragCurrent.start);
      }
      this.resetLoadingState();
      if (!altAudio) {
        this.resetTransmuxer();
      } else {
        this.setInterval(TICK_INTERVAL$2);
      }
      if (altAudio) {
        this.switchingTrack = data;
        this.state = State.IDLE;
        this.flushAudioIfNeeded(data);
      } else {
        this.switchingTrack = null;
        this.bufferedTrack = data;
        this.state = State.STOPPED;
      }
      this.tick();
    }
    onManifestLoading() {
      this.fragmentTracker.removeAllFragments();
      this.startPosition = this.lastCurrentTime = 0;
      this.bufferFlushed = this.flushing = false;
      this.levels = this.mainDetails = this.waitingData = this.bufferedTrack = this.cachedTrackLoadedData = this.switchingTrack = null;
      this.startFragRequested = false;
      this.trackId = this.videoTrackCC = this.waitingVideoCC = -1;
    }
    onLevelLoaded(event, data) {
      this.mainDetails = data.details;
      if (this.cachedTrackLoadedData !== null) {
        this.hls.trigger(Events2.AUDIO_TRACK_LOADED, this.cachedTrackLoadedData);
        this.cachedTrackLoadedData = null;
      }
    }
    onAudioTrackLoaded(event, data) {
      var _track$details;
      if (this.mainDetails == null) {
        this.cachedTrackLoadedData = data;
        return;
      }
      const {
        levels
      } = this;
      const {
        details: newDetails,
        id: trackId
      } = data;
      if (!levels) {
        this.warn(`Audio tracks were reset while loading level ${trackId}`);
        return;
      }
      this.log(`Audio track ${trackId} loaded [${newDetails.startSN},${newDetails.endSN}]${newDetails.lastPartSn ? `[part-${newDetails.lastPartSn}-${newDetails.lastPartIndex}]` : ""},duration:${newDetails.totalduration}`);
      const track = levels[trackId];
      let sliding = 0;
      if (newDetails.live || (_track$details = track.details) != null && _track$details.live) {
        this.checkLiveUpdate(newDetails);
        const mainDetails = this.mainDetails;
        if (newDetails.deltaUpdateFailed || !mainDetails) {
          return;
        }
        if (!track.details && newDetails.hasProgramDateTime && mainDetails.hasProgramDateTime) {
          alignMediaPlaylistByPDT(newDetails, mainDetails);
          sliding = newDetails.fragments[0].start;
        } else {
          var _this$levelLastLoaded;
          sliding = this.alignPlaylists(newDetails, track.details, (_this$levelLastLoaded = this.levelLastLoaded) == null ? void 0 : _this$levelLastLoaded.details);
        }
      }
      track.details = newDetails;
      this.levelLastLoaded = track;
      if (!this.startFragRequested && (this.mainDetails || !newDetails.live)) {
        this.setStartPosition(this.mainDetails || newDetails, sliding);
      }
      if (this.state === State.WAITING_TRACK && !this.waitForCdnTuneIn(newDetails)) {
        this.state = State.IDLE;
      }
      this.tick();
    }
    _handleFragmentLoadProgress(data) {
      var _frag$initSegment;
      const {
        frag,
        part,
        payload
      } = data;
      const {
        config,
        trackId,
        levels
      } = this;
      if (!levels) {
        this.warn(`Audio tracks were reset while fragment load was in progress. Fragment ${frag.sn} of level ${frag.level} will not be buffered`);
        return;
      }
      const track = levels[trackId];
      if (!track) {
        this.warn("Audio track is undefined on fragment load progress");
        return;
      }
      const details = track.details;
      if (!details) {
        this.warn("Audio track details undefined on fragment load progress");
        this.removeUnbufferedFrags(frag.start);
        return;
      }
      const audioCodec = config.defaultAudioCodec || track.audioCodec || "mp4a.40.2";
      let transmuxer = this.transmuxer;
      if (!transmuxer) {
        transmuxer = this.transmuxer = new TransmuxerInterface(this.hls, PlaylistLevelType.AUDIO, this._handleTransmuxComplete.bind(this), this._handleTransmuxerFlush.bind(this));
      }
      const initPTS = this.initPTS[frag.cc];
      const initSegmentData = (_frag$initSegment = frag.initSegment) == null ? void 0 : _frag$initSegment.data;
      if (initPTS !== void 0) {
        const accurateTimeOffset = false;
        const partIndex = part ? part.index : -1;
        const partial = partIndex !== -1;
        const chunkMeta = new ChunkMetadata(frag.level, frag.sn, frag.stats.chunkCount, payload.byteLength, partIndex, partial);
        transmuxer.push(payload, initSegmentData, audioCodec, "", frag, part, details.totalduration, accurateTimeOffset, chunkMeta, initPTS);
      } else {
        this.log(`Unknown video PTS for cc ${frag.cc}, waiting for video PTS before demuxing audio frag ${frag.sn} of [${details.startSN} ,${details.endSN}],track ${trackId}`);
        const {
          cache
        } = this.waitingData = this.waitingData || {
          frag,
          part,
          cache: new ChunkCache(),
          complete: false
        };
        cache.push(new Uint8Array(payload));
        this.waitingVideoCC = this.videoTrackCC;
        this.state = State.WAITING_INIT_PTS;
      }
    }
    _handleFragmentLoadComplete(fragLoadedData) {
      if (this.waitingData) {
        this.waitingData.complete = true;
        return;
      }
      super._handleFragmentLoadComplete(fragLoadedData);
    }
    onBufferReset() {
      this.mediaBuffer = this.videoBuffer = null;
      this.loadedmetadata = false;
    }
    onBufferCreated(event, data) {
      const audioTrack = data.tracks.audio;
      if (audioTrack) {
        this.mediaBuffer = audioTrack.buffer || null;
      }
      if (data.tracks.video) {
        this.videoBuffer = data.tracks.video.buffer || null;
      }
    }
    onFragBuffered(event, data) {
      const {
        frag,
        part
      } = data;
      if (frag.type !== PlaylistLevelType.AUDIO) {
        if (!this.loadedmetadata && frag.type === PlaylistLevelType.MAIN) {
          const bufferable = this.videoBuffer || this.media;
          if (bufferable) {
            const bufferedTimeRanges = BufferHelper.getBuffered(bufferable);
            if (bufferedTimeRanges.length) {
              this.loadedmetadata = true;
            }
          }
        }
        return;
      }
      if (this.fragContextChanged(frag)) {
        this.warn(`Fragment ${frag.sn}${part ? " p: " + part.index : ""} of level ${frag.level} finished buffering, but was aborted. state: ${this.state}, audioSwitch: ${this.switchingTrack ? this.switchingTrack.name : "false"}`);
        return;
      }
      if (frag.sn !== "initSegment") {
        this.fragPrevious = frag;
        const track = this.switchingTrack;
        if (track) {
          this.bufferedTrack = track;
          this.switchingTrack = null;
          this.hls.trigger(Events2.AUDIO_TRACK_SWITCHED, _objectSpread2({}, track));
        }
      }
      this.fragBufferedComplete(frag, part);
    }
    onError(event, data) {
      var _data$context;
      if (data.fatal) {
        this.state = State.ERROR;
        return;
      }
      switch (data.details) {
        case ErrorDetails.FRAG_GAP:
        case ErrorDetails.FRAG_PARSING_ERROR:
        case ErrorDetails.FRAG_DECRYPT_ERROR:
        case ErrorDetails.FRAG_LOAD_ERROR:
        case ErrorDetails.FRAG_LOAD_TIMEOUT:
        case ErrorDetails.KEY_LOAD_ERROR:
        case ErrorDetails.KEY_LOAD_TIMEOUT:
          this.onFragmentOrKeyLoadError(PlaylistLevelType.AUDIO, data);
          break;
        case ErrorDetails.AUDIO_TRACK_LOAD_ERROR:
        case ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT:
        case ErrorDetails.LEVEL_PARSING_ERROR:
          if (!data.levelRetry && this.state === State.WAITING_TRACK && ((_data$context = data.context) == null ? void 0 : _data$context.type) === PlaylistContextType.AUDIO_TRACK) {
            this.state = State.IDLE;
          }
          break;
        case ErrorDetails.BUFFER_APPEND_ERROR:
        case ErrorDetails.BUFFER_FULL_ERROR:
          if (!data.parent || data.parent !== "audio") {
            return;
          }
          if (data.details === ErrorDetails.BUFFER_APPEND_ERROR) {
            this.resetLoadingState();
            return;
          }
          if (this.reduceLengthAndFlushBuffer(data)) {
            this.bufferedTrack = null;
            super.flushMainBuffer(0, Number.POSITIVE_INFINITY, "audio");
          }
          break;
        case ErrorDetails.INTERNAL_EXCEPTION:
          this.recoverWorkerError(data);
          break;
      }
    }
    onBufferFlushing(event, {
      type
    }) {
      if (type !== ElementaryStreamTypes.VIDEO) {
        this.flushing = true;
      }
    }
    onBufferFlushed(event, {
      type
    }) {
      if (type !== ElementaryStreamTypes.VIDEO) {
        this.flushing = false;
        this.bufferFlushed = true;
        if (this.state === State.ENDED) {
          this.state = State.IDLE;
        }
        const mediaBuffer = this.mediaBuffer || this.media;
        if (mediaBuffer) {
          this.afterBufferFlushed(mediaBuffer, type, PlaylistLevelType.AUDIO);
          this.tick();
        }
      }
    }
    _handleTransmuxComplete(transmuxResult) {
      var _id3$samples;
      const id = "audio";
      const {
        hls
      } = this;
      const {
        remuxResult,
        chunkMeta
      } = transmuxResult;
      const context = this.getCurrentContext(chunkMeta);
      if (!context) {
        this.resetWhenMissingContext(chunkMeta);
        return;
      }
      const {
        frag,
        part,
        level
      } = context;
      const {
        details
      } = level;
      const {
        audio,
        text,
        id3,
        initSegment
      } = remuxResult;
      if (this.fragContextChanged(frag) || !details) {
        this.fragmentTracker.removeFragment(frag);
        return;
      }
      this.state = State.PARSING;
      if (this.switchingTrack && audio) {
        this.completeAudioSwitch(this.switchingTrack);
      }
      if (initSegment != null && initSegment.tracks) {
        const mapFragment = frag.initSegment || frag;
        this._bufferInitSegment(level, initSegment.tracks, mapFragment, chunkMeta);
        hls.trigger(Events2.FRAG_PARSING_INIT_SEGMENT, {
          frag: mapFragment,
          id,
          tracks: initSegment.tracks
        });
      }
      if (audio) {
        const {
          startPTS,
          endPTS,
          startDTS,
          endDTS
        } = audio;
        if (part) {
          part.elementaryStreams[ElementaryStreamTypes.AUDIO] = {
            startPTS,
            endPTS,
            startDTS,
            endDTS
          };
        }
        frag.setElementaryStreamInfo(ElementaryStreamTypes.AUDIO, startPTS, endPTS, startDTS, endDTS);
        this.bufferFragmentData(audio, frag, part, chunkMeta);
      }
      if (id3 != null && (_id3$samples = id3.samples) != null && _id3$samples.length) {
        const emittedID3 = _extends({
          id,
          frag,
          details
        }, id3);
        hls.trigger(Events2.FRAG_PARSING_METADATA, emittedID3);
      }
      if (text) {
        const emittedText = _extends({
          id,
          frag,
          details
        }, text);
        hls.trigger(Events2.FRAG_PARSING_USERDATA, emittedText);
      }
    }
    _bufferInitSegment(currentLevel, tracks, frag, chunkMeta) {
      if (this.state !== State.PARSING) {
        return;
      }
      if (tracks.video) {
        delete tracks.video;
      }
      const track = tracks.audio;
      if (!track) {
        return;
      }
      track.id = "audio";
      const variantAudioCodecs = currentLevel.audioCodec;
      this.log(`Init audio buffer, container:${track.container}, codecs[level/parsed]=[${variantAudioCodecs}/${track.codec}]`);
      if (variantAudioCodecs && variantAudioCodecs.split(",").length === 1) {
        track.levelCodec = variantAudioCodecs;
      }
      this.hls.trigger(Events2.BUFFER_CODECS, tracks);
      const initSegment = track.initSegment;
      if (initSegment != null && initSegment.byteLength) {
        const segment = {
          type: "audio",
          frag,
          part: null,
          chunkMeta,
          parent: frag.type,
          data: initSegment
        };
        this.hls.trigger(Events2.BUFFER_APPENDING, segment);
      }
      this.tickImmediate();
    }
    loadFragment(frag, track, targetBufferTime) {
      const fragState = this.fragmentTracker.getState(frag);
      this.fragCurrent = frag;
      if (this.switchingTrack || fragState === FragmentState.NOT_LOADED || fragState === FragmentState.PARTIAL) {
        var _track$details2;
        if (frag.sn === "initSegment") {
          this._loadInitSegment(frag, track);
        } else if ((_track$details2 = track.details) != null && _track$details2.live && !this.initPTS[frag.cc]) {
          this.log(`Waiting for video PTS in continuity counter ${frag.cc} of live stream before loading audio fragment ${frag.sn} of level ${this.trackId}`);
          this.state = State.WAITING_INIT_PTS;
          const mainDetails = this.mainDetails;
          if (mainDetails && mainDetails.fragments[0].start !== track.details.fragments[0].start) {
            alignMediaPlaylistByPDT(track.details, mainDetails);
          }
        } else {
          this.startFragRequested = true;
          super.loadFragment(frag, track, targetBufferTime);
        }
      } else {
        this.clearTrackerIfNeeded(frag);
      }
    }
    flushAudioIfNeeded(switchingTrack) {
      const {
        media,
        bufferedTrack
      } = this;
      const bufferedAttributes = bufferedTrack == null ? void 0 : bufferedTrack.attrs;
      const switchAttributes = switchingTrack.attrs;
      if (media && bufferedAttributes && (bufferedAttributes.CHANNELS !== switchAttributes.CHANNELS || bufferedTrack.name !== switchingTrack.name || bufferedTrack.lang !== switchingTrack.lang)) {
        this.log("Switching audio track : flushing all audio");
        super.flushMainBuffer(0, Number.POSITIVE_INFINITY, "audio");
        this.bufferedTrack = null;
      }
    }
    completeAudioSwitch(switchingTrack) {
      const {
        hls
      } = this;
      this.flushAudioIfNeeded(switchingTrack);
      this.bufferedTrack = switchingTrack;
      this.switchingTrack = null;
      hls.trigger(Events2.AUDIO_TRACK_SWITCHED, _objectSpread2({}, switchingTrack));
    }
  };
  var AudioTrackController = class extends BasePlaylistController {
    constructor(hls) {
      super(hls, "[audio-track-controller]");
      this.tracks = [];
      this.groupIds = null;
      this.tracksInGroup = [];
      this.trackId = -1;
      this.currentTrack = null;
      this.selectDefaultTrack = true;
      this.registerListeners();
    }
    registerListeners() {
      const {
        hls
      } = this;
      hls.on(Events2.MANIFEST_LOADING, this.onManifestLoading, this);
      hls.on(Events2.MANIFEST_PARSED, this.onManifestParsed, this);
      hls.on(Events2.LEVEL_LOADING, this.onLevelLoading, this);
      hls.on(Events2.LEVEL_SWITCHING, this.onLevelSwitching, this);
      hls.on(Events2.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this);
      hls.on(Events2.ERROR, this.onError, this);
    }
    unregisterListeners() {
      const {
        hls
      } = this;
      hls.off(Events2.MANIFEST_LOADING, this.onManifestLoading, this);
      hls.off(Events2.MANIFEST_PARSED, this.onManifestParsed, this);
      hls.off(Events2.LEVEL_LOADING, this.onLevelLoading, this);
      hls.off(Events2.LEVEL_SWITCHING, this.onLevelSwitching, this);
      hls.off(Events2.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this);
      hls.off(Events2.ERROR, this.onError, this);
    }
    destroy() {
      this.unregisterListeners();
      this.tracks.length = 0;
      this.tracksInGroup.length = 0;
      this.currentTrack = null;
      super.destroy();
    }
    onManifestLoading() {
      this.tracks = [];
      this.tracksInGroup = [];
      this.groupIds = null;
      this.currentTrack = null;
      this.trackId = -1;
      this.selectDefaultTrack = true;
    }
    onManifestParsed(event, data) {
      this.tracks = data.audioTracks || [];
    }
    onAudioTrackLoaded(event, data) {
      const {
        id,
        groupId,
        details
      } = data;
      const trackInActiveGroup = this.tracksInGroup[id];
      if (!trackInActiveGroup || trackInActiveGroup.groupId !== groupId) {
        this.warn(`Audio track with id:${id} and group:${groupId} not found in active group ${trackInActiveGroup == null ? void 0 : trackInActiveGroup.groupId}`);
        return;
      }
      const curDetails = trackInActiveGroup.details;
      trackInActiveGroup.details = data.details;
      this.log(`Audio track ${id} "${trackInActiveGroup.name}" lang:${trackInActiveGroup.lang} group:${groupId} loaded [${details.startSN}-${details.endSN}]`);
      if (id === this.trackId) {
        this.playlistLoaded(id, data, curDetails);
      }
    }
    onLevelLoading(event, data) {
      this.switchLevel(data.level);
    }
    onLevelSwitching(event, data) {
      this.switchLevel(data.level);
    }
    switchLevel(levelIndex) {
      const levelInfo = this.hls.levels[levelIndex];
      if (!levelInfo) {
        return;
      }
      const audioGroups = levelInfo.audioGroups || null;
      const currentGroups = this.groupIds;
      let currentTrack = this.currentTrack;
      if (!audioGroups || (currentGroups == null ? void 0 : currentGroups.length) !== (audioGroups == null ? void 0 : audioGroups.length) || audioGroups != null && audioGroups.some((groupId) => (currentGroups == null ? void 0 : currentGroups.indexOf(groupId)) === -1)) {
        this.groupIds = audioGroups;
        this.trackId = -1;
        this.currentTrack = null;
        const audioTracks = this.tracks.filter((track) => !audioGroups || audioGroups.indexOf(track.groupId) !== -1);
        if (audioTracks.length) {
          if (this.selectDefaultTrack && !audioTracks.some((track) => track.default)) {
            this.selectDefaultTrack = false;
          }
          audioTracks.forEach((track, i) => {
            track.id = i;
          });
        } else if (!currentTrack && !this.tracksInGroup.length) {
          return;
        }
        this.tracksInGroup = audioTracks;
        const audioPreference = this.hls.config.audioPreference;
        if (!currentTrack && audioPreference) {
          const groupIndex = findMatchingOption(audioPreference, audioTracks, audioMatchPredicate);
          if (groupIndex > -1) {
            currentTrack = audioTracks[groupIndex];
          } else {
            const allIndex = findMatchingOption(audioPreference, this.tracks);
            currentTrack = this.tracks[allIndex];
          }
        }
        let trackId = this.findTrackId(currentTrack);
        if (trackId === -1 && currentTrack) {
          trackId = this.findTrackId(null);
        }
        const audioTracksUpdated = {
          audioTracks
        };
        this.log(`Updating audio tracks, ${audioTracks.length} track(s) found in group(s): ${audioGroups == null ? void 0 : audioGroups.join(",")}`);
        this.hls.trigger(Events2.AUDIO_TRACKS_UPDATED, audioTracksUpdated);
        const selectedTrackId = this.trackId;
        if (trackId !== -1 && selectedTrackId === -1) {
          this.setAudioTrack(trackId);
        } else if (audioTracks.length && selectedTrackId === -1) {
          var _this$groupIds;
          const error = new Error(`No audio track selected for current audio group-ID(s): ${(_this$groupIds = this.groupIds) == null ? void 0 : _this$groupIds.join(",")} track count: ${audioTracks.length}`);
          this.warn(error.message);
          this.hls.trigger(Events2.ERROR, {
            type: ErrorTypes.MEDIA_ERROR,
            details: ErrorDetails.AUDIO_TRACK_LOAD_ERROR,
            fatal: true,
            error
          });
        }
      } else if (this.shouldReloadPlaylist(currentTrack)) {
        this.setAudioTrack(this.trackId);
      }
    }
    onError(event, data) {
      if (data.fatal || !data.context) {
        return;
      }
      if (data.context.type === PlaylistContextType.AUDIO_TRACK && data.context.id === this.trackId && (!this.groupIds || this.groupIds.indexOf(data.context.groupId) !== -1)) {
        this.requestScheduled = -1;
        this.checkRetry(data);
      }
    }
    get allAudioTracks() {
      return this.tracks;
    }
    get audioTracks() {
      return this.tracksInGroup;
    }
    get audioTrack() {
      return this.trackId;
    }
    set audioTrack(newId) {
      this.selectDefaultTrack = false;
      this.setAudioTrack(newId);
    }
    setAudioOption(audioOption) {
      const hls = this.hls;
      hls.config.audioPreference = audioOption;
      if (audioOption) {
        const allAudioTracks = this.allAudioTracks;
        this.selectDefaultTrack = false;
        if (allAudioTracks.length) {
          const currentTrack = this.currentTrack;
          if (currentTrack && matchesOption(audioOption, currentTrack, audioMatchPredicate)) {
            return currentTrack;
          }
          const groupIndex = findMatchingOption(audioOption, this.tracksInGroup, audioMatchPredicate);
          if (groupIndex > -1) {
            const track = this.tracksInGroup[groupIndex];
            this.setAudioTrack(groupIndex);
            return track;
          } else if (currentTrack) {
            let searchIndex = hls.loadLevel;
            if (searchIndex === -1) {
              searchIndex = hls.firstAutoLevel;
            }
            const switchIndex = findClosestLevelWithAudioGroup(audioOption, hls.levels, allAudioTracks, searchIndex, audioMatchPredicate);
            if (switchIndex === -1) {
              return null;
            }
            hls.nextLoadLevel = switchIndex;
          }
          if (audioOption.channels || audioOption.audioCodec) {
            const withoutCodecAndChannelsMatch = findMatchingOption(audioOption, allAudioTracks);
            if (withoutCodecAndChannelsMatch > -1) {
              return allAudioTracks[withoutCodecAndChannelsMatch];
            }
          }
        }
      }
      return null;
    }
    setAudioTrack(newId) {
      const tracks = this.tracksInGroup;
      if (newId < 0 || newId >= tracks.length) {
        this.warn(`Invalid audio track id: ${newId}`);
        return;
      }
      this.clearTimer();
      this.selectDefaultTrack = false;
      const lastTrack = this.currentTrack;
      const track = tracks[newId];
      const trackLoaded = track.details && !track.details.live;
      if (newId === this.trackId && track === lastTrack && trackLoaded) {
        return;
      }
      this.log(`Switching to audio-track ${newId} "${track.name}" lang:${track.lang} group:${track.groupId} channels:${track.channels}`);
      this.trackId = newId;
      this.currentTrack = track;
      this.hls.trigger(Events2.AUDIO_TRACK_SWITCHING, _objectSpread2({}, track));
      if (trackLoaded) {
        return;
      }
      const hlsUrlParameters = this.switchParams(track.url, lastTrack == null ? void 0 : lastTrack.details, track.details);
      this.loadPlaylist(hlsUrlParameters);
    }
    findTrackId(currentTrack) {
      const audioTracks = this.tracksInGroup;
      for (let i = 0; i < audioTracks.length; i++) {
        const track = audioTracks[i];
        if (this.selectDefaultTrack && !track.default) {
          continue;
        }
        if (!currentTrack || matchesOption(currentTrack, track, audioMatchPredicate)) {
          return i;
        }
      }
      if (currentTrack) {
        const {
          name,
          lang,
          assocLang,
          characteristics,
          audioCodec,
          channels
        } = currentTrack;
        for (let i = 0; i < audioTracks.length; i++) {
          const track = audioTracks[i];
          if (matchesOption({
            name,
            lang,
            assocLang,
            characteristics,
            audioCodec,
            channels
          }, track, audioMatchPredicate)) {
            return i;
          }
        }
        for (let i = 0; i < audioTracks.length; i++) {
          const track = audioTracks[i];
          if (mediaAttributesIdentical(currentTrack.attrs, track.attrs, ["LANGUAGE", "ASSOC-LANGUAGE", "CHARACTERISTICS"])) {
            return i;
          }
        }
        for (let i = 0; i < audioTracks.length; i++) {
          const track = audioTracks[i];
          if (mediaAttributesIdentical(currentTrack.attrs, track.attrs, ["LANGUAGE"])) {
            return i;
          }
        }
      }
      return -1;
    }
    loadPlaylist(hlsUrlParameters) {
      const audioTrack = this.currentTrack;
      if (this.shouldLoadPlaylist(audioTrack) && audioTrack) {
        super.loadPlaylist();
        const id = audioTrack.id;
        const groupId = audioTrack.groupId;
        let url = audioTrack.url;
        if (hlsUrlParameters) {
          try {
            url = hlsUrlParameters.addDirectives(url);
          } catch (error) {
            this.warn(`Could not construct new URL with HLS Delivery Directives: ${error}`);
          }
        }
        this.log(`loading audio-track playlist ${id} "${audioTrack.name}" lang:${audioTrack.lang} group:${groupId}`);
        this.clearTimer();
        this.hls.trigger(Events2.AUDIO_TRACK_LOADING, {
          url,
          id,
          groupId,
          deliveryDirectives: hlsUrlParameters || null
        });
      }
    }
  };
  var TICK_INTERVAL$1 = 500;
  var SubtitleStreamController = class extends BaseStreamController {
    constructor(hls, fragmentTracker, keyLoader) {
      super(hls, fragmentTracker, keyLoader, "[subtitle-stream-controller]", PlaylistLevelType.SUBTITLE);
      this.currentTrackId = -1;
      this.tracksBuffered = [];
      this.mainDetails = null;
      this._registerListeners();
    }
    onHandlerDestroying() {
      this._unregisterListeners();
      super.onHandlerDestroying();
      this.mainDetails = null;
    }
    _registerListeners() {
      const {
        hls
      } = this;
      hls.on(Events2.MEDIA_ATTACHED, this.onMediaAttached, this);
      hls.on(Events2.MEDIA_DETACHING, this.onMediaDetaching, this);
      hls.on(Events2.MANIFEST_LOADING, this.onManifestLoading, this);
      hls.on(Events2.LEVEL_LOADED, this.onLevelLoaded, this);
      hls.on(Events2.ERROR, this.onError, this);
      hls.on(Events2.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this);
      hls.on(Events2.SUBTITLE_TRACK_SWITCH, this.onSubtitleTrackSwitch, this);
      hls.on(Events2.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this);
      hls.on(Events2.SUBTITLE_FRAG_PROCESSED, this.onSubtitleFragProcessed, this);
      hls.on(Events2.BUFFER_FLUSHING, this.onBufferFlushing, this);
      hls.on(Events2.FRAG_BUFFERED, this.onFragBuffered, this);
    }
    _unregisterListeners() {
      const {
        hls
      } = this;
      hls.off(Events2.MEDIA_ATTACHED, this.onMediaAttached, this);
      hls.off(Events2.MEDIA_DETACHING, this.onMediaDetaching, this);
      hls.off(Events2.MANIFEST_LOADING, this.onManifestLoading, this);
      hls.off(Events2.LEVEL_LOADED, this.onLevelLoaded, this);
      hls.off(Events2.ERROR, this.onError, this);
      hls.off(Events2.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this);
      hls.off(Events2.SUBTITLE_TRACK_SWITCH, this.onSubtitleTrackSwitch, this);
      hls.off(Events2.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this);
      hls.off(Events2.SUBTITLE_FRAG_PROCESSED, this.onSubtitleFragProcessed, this);
      hls.off(Events2.BUFFER_FLUSHING, this.onBufferFlushing, this);
      hls.off(Events2.FRAG_BUFFERED, this.onFragBuffered, this);
    }
    startLoad(startPosition) {
      this.stopLoad();
      this.state = State.IDLE;
      this.setInterval(TICK_INTERVAL$1);
      this.nextLoadPosition = this.startPosition = this.lastCurrentTime = startPosition;
      this.tick();
    }
    onManifestLoading() {
      this.mainDetails = null;
      this.fragmentTracker.removeAllFragments();
    }
    onMediaDetaching() {
      this.tracksBuffered = [];
      super.onMediaDetaching();
    }
    onLevelLoaded(event, data) {
      this.mainDetails = data.details;
    }
    onSubtitleFragProcessed(event, data) {
      const {
        frag,
        success
      } = data;
      this.fragPrevious = frag;
      this.state = State.IDLE;
      if (!success) {
        return;
      }
      const buffered = this.tracksBuffered[this.currentTrackId];
      if (!buffered) {
        return;
      }
      let timeRange;
      const fragStart = frag.start;
      for (let i = 0; i < buffered.length; i++) {
        if (fragStart >= buffered[i].start && fragStart <= buffered[i].end) {
          timeRange = buffered[i];
          break;
        }
      }
      const fragEnd = frag.start + frag.duration;
      if (timeRange) {
        timeRange.end = fragEnd;
      } else {
        timeRange = {
          start: fragStart,
          end: fragEnd
        };
        buffered.push(timeRange);
      }
      this.fragmentTracker.fragBuffered(frag);
      this.fragBufferedComplete(frag, null);
    }
    onBufferFlushing(event, data) {
      const {
        startOffset,
        endOffset
      } = data;
      if (startOffset === 0 && endOffset !== Number.POSITIVE_INFINITY) {
        const endOffsetSubtitles = endOffset - 1;
        if (endOffsetSubtitles <= 0) {
          return;
        }
        data.endOffsetSubtitles = Math.max(0, endOffsetSubtitles);
        this.tracksBuffered.forEach((buffered) => {
          for (let i = 0; i < buffered.length; ) {
            if (buffered[i].end <= endOffsetSubtitles) {
              buffered.shift();
              continue;
            } else if (buffered[i].start < endOffsetSubtitles) {
              buffered[i].start = endOffsetSubtitles;
            } else {
              break;
            }
            i++;
          }
        });
        this.fragmentTracker.removeFragmentsInRange(startOffset, endOffsetSubtitles, PlaylistLevelType.SUBTITLE);
      }
    }
    onFragBuffered(event, data) {
      if (!this.loadedmetadata && data.frag.type === PlaylistLevelType.MAIN) {
        var _this$media;
        if ((_this$media = this.media) != null && _this$media.buffered.length) {
          this.loadedmetadata = true;
        }
      }
    }
    // If something goes wrong, proceed to next frag, if we were processing one.
    onError(event, data) {
      const frag = data.frag;
      if ((frag == null ? void 0 : frag.type) === PlaylistLevelType.SUBTITLE) {
        if (data.details === ErrorDetails.FRAG_GAP) {
          this.fragmentTracker.fragBuffered(frag, true);
        }
        if (this.fragCurrent) {
          this.fragCurrent.abortRequests();
        }
        if (this.state !== State.STOPPED) {
          this.state = State.IDLE;
        }
      }
    }
    // Got all new subtitle levels.
    onSubtitleTracksUpdated(event, {
      subtitleTracks
    }) {
      if (this.levels && subtitleOptionsIdentical(this.levels, subtitleTracks)) {
        this.levels = subtitleTracks.map((mediaPlaylist) => new Level(mediaPlaylist));
        return;
      }
      this.tracksBuffered = [];
      this.levels = subtitleTracks.map((mediaPlaylist) => {
        const level = new Level(mediaPlaylist);
        this.tracksBuffered[level.id] = [];
        return level;
      });
      this.fragmentTracker.removeFragmentsInRange(0, Number.POSITIVE_INFINITY, PlaylistLevelType.SUBTITLE);
      this.fragPrevious = null;
      this.mediaBuffer = null;
    }
    onSubtitleTrackSwitch(event, data) {
      var _this$levels;
      this.currentTrackId = data.id;
      if (!((_this$levels = this.levels) != null && _this$levels.length) || this.currentTrackId === -1) {
        this.clearInterval();
        return;
      }
      const currentTrack = this.levels[this.currentTrackId];
      if (currentTrack != null && currentTrack.details) {
        this.mediaBuffer = this.mediaBufferTimeRanges;
      } else {
        this.mediaBuffer = null;
      }
      if (currentTrack) {
        this.setInterval(TICK_INTERVAL$1);
      }
    }
    // Got a new set of subtitle fragments.
    onSubtitleTrackLoaded(event, data) {
      var _track$details;
      const {
        currentTrackId,
        levels
      } = this;
      const {
        details: newDetails,
        id: trackId
      } = data;
      if (!levels) {
        this.warn(`Subtitle tracks were reset while loading level ${trackId}`);
        return;
      }
      const track = levels[trackId];
      if (trackId >= levels.length || !track) {
        return;
      }
      this.log(`Subtitle track ${trackId} loaded [${newDetails.startSN},${newDetails.endSN}]${newDetails.lastPartSn ? `[part-${newDetails.lastPartSn}-${newDetails.lastPartIndex}]` : ""},duration:${newDetails.totalduration}`);
      this.mediaBuffer = this.mediaBufferTimeRanges;
      let sliding = 0;
      if (newDetails.live || (_track$details = track.details) != null && _track$details.live) {
        const mainDetails = this.mainDetails;
        if (newDetails.deltaUpdateFailed || !mainDetails) {
          return;
        }
        const mainSlidingStartFragment = mainDetails.fragments[0];
        if (!track.details) {
          if (newDetails.hasProgramDateTime && mainDetails.hasProgramDateTime) {
            alignMediaPlaylistByPDT(newDetails, mainDetails);
            sliding = newDetails.fragments[0].start;
          } else if (mainSlidingStartFragment) {
            sliding = mainSlidingStartFragment.start;
            addSliding(newDetails, sliding);
          }
        } else {
          var _this$levelLastLoaded;
          sliding = this.alignPlaylists(newDetails, track.details, (_this$levelLastLoaded = this.levelLastLoaded) == null ? void 0 : _this$levelLastLoaded.details);
          if (sliding === 0 && mainSlidingStartFragment) {
            sliding = mainSlidingStartFragment.start;
            addSliding(newDetails, sliding);
          }
        }
      }
      track.details = newDetails;
      this.levelLastLoaded = track;
      if (trackId !== currentTrackId) {
        return;
      }
      if (!this.startFragRequested && (this.mainDetails || !newDetails.live)) {
        this.setStartPosition(this.mainDetails || newDetails, sliding);
      }
      this.tick();
      if (newDetails.live && !this.fragCurrent && this.media && this.state === State.IDLE) {
        const foundFrag = findFragmentByPTS(null, newDetails.fragments, this.media.currentTime, 0);
        if (!foundFrag) {
          this.warn("Subtitle playlist not aligned with playback");
          track.details = void 0;
        }
      }
    }
    _handleFragmentLoadComplete(fragLoadedData) {
      const {
        frag,
        payload
      } = fragLoadedData;
      const decryptData = frag.decryptdata;
      const hls = this.hls;
      if (this.fragContextChanged(frag)) {
        return;
      }
      if (payload && payload.byteLength > 0 && decryptData != null && decryptData.key && decryptData.iv && decryptData.method === "AES-128") {
        const startTime = performance.now();
        this.decrypter.decrypt(new Uint8Array(payload), decryptData.key.buffer, decryptData.iv.buffer).catch((err) => {
          hls.trigger(Events2.ERROR, {
            type: ErrorTypes.MEDIA_ERROR,
            details: ErrorDetails.FRAG_DECRYPT_ERROR,
            fatal: false,
            error: err,
            reason: err.message,
            frag
          });
          throw err;
        }).then((decryptedData) => {
          const endTime = performance.now();
          hls.trigger(Events2.FRAG_DECRYPTED, {
            frag,
            payload: decryptedData,
            stats: {
              tstart: startTime,
              tdecrypt: endTime
            }
          });
        }).catch((err) => {
          this.warn(`${err.name}: ${err.message}`);
          this.state = State.IDLE;
        });
      }
    }
    doTick() {
      if (!this.media) {
        this.state = State.IDLE;
        return;
      }
      if (this.state === State.IDLE) {
        const {
          currentTrackId,
          levels
        } = this;
        const track = levels == null ? void 0 : levels[currentTrackId];
        if (!track || !levels.length || !track.details) {
          return;
        }
        const {
          config
        } = this;
        const currentTime = this.getLoadPosition();
        const bufferedInfo = BufferHelper.bufferedInfo(this.tracksBuffered[this.currentTrackId] || [], currentTime, config.maxBufferHole);
        const {
          end: targetBufferTime,
          len: bufferLen
        } = bufferedInfo;
        const mainBufferInfo = this.getFwdBufferInfo(this.media, PlaylistLevelType.MAIN);
        const trackDetails = track.details;
        const maxBufLen = this.getMaxBufferLength(mainBufferInfo == null ? void 0 : mainBufferInfo.len) + trackDetails.levelTargetDuration;
        if (bufferLen > maxBufLen) {
          return;
        }
        const fragments = trackDetails.fragments;
        const fragLen = fragments.length;
        const end = trackDetails.edge;
        let foundFrag = null;
        const fragPrevious = this.fragPrevious;
        if (targetBufferTime < end) {
          const tolerance = config.maxFragLookUpTolerance;
          const lookupTolerance = targetBufferTime > end - tolerance ? 0 : tolerance;
          foundFrag = findFragmentByPTS(fragPrevious, fragments, Math.max(fragments[0].start, targetBufferTime), lookupTolerance);
          if (!foundFrag && fragPrevious && fragPrevious.start < fragments[0].start) {
            foundFrag = fragments[0];
          }
        } else {
          foundFrag = fragments[fragLen - 1];
        }
        if (!foundFrag) {
          return;
        }
        foundFrag = this.mapToInitFragWhenRequired(foundFrag);
        if (foundFrag.sn !== "initSegment") {
          const curSNIdx = foundFrag.sn - trackDetails.startSN;
          const prevFrag = fragments[curSNIdx - 1];
          if (prevFrag && prevFrag.cc === foundFrag.cc && this.fragmentTracker.getState(prevFrag) === FragmentState.NOT_LOADED) {
            foundFrag = prevFrag;
          }
        }
        if (this.fragmentTracker.getState(foundFrag) === FragmentState.NOT_LOADED) {
          this.loadFragment(foundFrag, track, targetBufferTime);
        }
      }
    }
    getMaxBufferLength(mainBufferLength) {
      const maxConfigBuffer = super.getMaxBufferLength();
      if (!mainBufferLength) {
        return maxConfigBuffer;
      }
      return Math.max(maxConfigBuffer, mainBufferLength);
    }
    loadFragment(frag, level, targetBufferTime) {
      this.fragCurrent = frag;
      if (frag.sn === "initSegment") {
        this._loadInitSegment(frag, level);
      } else {
        this.startFragRequested = true;
        super.loadFragment(frag, level, targetBufferTime);
      }
    }
    get mediaBufferTimeRanges() {
      return new BufferableInstance(this.tracksBuffered[this.currentTrackId] || []);
    }
  };
  var BufferableInstance = class {
    constructor(timeranges) {
      this.buffered = void 0;
      const getRange = (name, index, length) => {
        index = index >>> 0;
        if (index > length - 1) {
          throw new DOMException(`Failed to execute '${name}' on 'TimeRanges': The index provided (${index}) is greater than the maximum bound (${length})`);
        }
        return timeranges[index][name];
      };
      this.buffered = {
        get length() {
          return timeranges.length;
        },
        end(index) {
          return getRange("end", index, timeranges.length);
        },
        start(index) {
          return getRange("start", index, timeranges.length);
        }
      };
    }
  };
  var SubtitleTrackController = class extends BasePlaylistController {
    constructor(hls) {
      super(hls, "[subtitle-track-controller]");
      this.media = null;
      this.tracks = [];
      this.groupIds = null;
      this.tracksInGroup = [];
      this.trackId = -1;
      this.currentTrack = null;
      this.selectDefaultTrack = true;
      this.queuedDefaultTrack = -1;
      this.asyncPollTrackChange = () => this.pollTrackChange(0);
      this.useTextTrackPolling = false;
      this.subtitlePollingInterval = -1;
      this._subtitleDisplay = true;
      this.onTextTracksChanged = () => {
        if (!this.useTextTrackPolling) {
          self.clearInterval(this.subtitlePollingInterval);
        }
        if (!this.media || !this.hls.config.renderTextTracksNatively) {
          return;
        }
        let textTrack = null;
        const tracks = filterSubtitleTracks(this.media.textTracks);
        for (let i = 0; i < tracks.length; i++) {
          if (tracks[i].mode === "hidden") {
            textTrack = tracks[i];
          } else if (tracks[i].mode === "showing") {
            textTrack = tracks[i];
            break;
          }
        }
        const trackId = this.findTrackForTextTrack(textTrack);
        if (this.subtitleTrack !== trackId) {
          this.setSubtitleTrack(trackId);
        }
      };
      this.registerListeners();
    }
    destroy() {
      this.unregisterListeners();
      this.tracks.length = 0;
      this.tracksInGroup.length = 0;
      this.currentTrack = null;
      this.onTextTracksChanged = this.asyncPollTrackChange = null;
      super.destroy();
    }
    get subtitleDisplay() {
      return this._subtitleDisplay;
    }
    set subtitleDisplay(value) {
      this._subtitleDisplay = value;
      if (this.trackId > -1) {
        this.toggleTrackModes();
      }
    }
    registerListeners() {
      const {
        hls
      } = this;
      hls.on(Events2.MEDIA_ATTACHED, this.onMediaAttached, this);
      hls.on(Events2.MEDIA_DETACHING, this.onMediaDetaching, this);
      hls.on(Events2.MANIFEST_LOADING, this.onManifestLoading, this);
      hls.on(Events2.MANIFEST_PARSED, this.onManifestParsed, this);
      hls.on(Events2.LEVEL_LOADING, this.onLevelLoading, this);
      hls.on(Events2.LEVEL_SWITCHING, this.onLevelSwitching, this);
      hls.on(Events2.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this);
      hls.on(Events2.ERROR, this.onError, this);
    }
    unregisterListeners() {
      const {
        hls
      } = this;
      hls.off(Events2.MEDIA_ATTACHED, this.onMediaAttached, this);
      hls.off(Events2.MEDIA_DETACHING, this.onMediaDetaching, this);
      hls.off(Events2.MANIFEST_LOADING, this.onManifestLoading, this);
      hls.off(Events2.MANIFEST_PARSED, this.onManifestParsed, this);
      hls.off(Events2.LEVEL_LOADING, this.onLevelLoading, this);
      hls.off(Events2.LEVEL_SWITCHING, this.onLevelSwitching, this);
      hls.off(Events2.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this);
      hls.off(Events2.ERROR, this.onError, this);
    }
    // Listen for subtitle track change, then extract the current track ID.
    onMediaAttached(event, data) {
      this.media = data.media;
      if (!this.media) {
        return;
      }
      if (this.queuedDefaultTrack > -1) {
        this.subtitleTrack = this.queuedDefaultTrack;
        this.queuedDefaultTrack = -1;
      }
      this.useTextTrackPolling = !(this.media.textTracks && "onchange" in this.media.textTracks);
      if (this.useTextTrackPolling) {
        this.pollTrackChange(500);
      } else {
        this.media.textTracks.addEventListener("change", this.asyncPollTrackChange);
      }
    }
    pollTrackChange(timeout) {
      self.clearInterval(this.subtitlePollingInterval);
      this.subtitlePollingInterval = self.setInterval(this.onTextTracksChanged, timeout);
    }
    onMediaDetaching() {
      if (!this.media) {
        return;
      }
      self.clearInterval(this.subtitlePollingInterval);
      if (!this.useTextTrackPolling) {
        this.media.textTracks.removeEventListener("change", this.asyncPollTrackChange);
      }
      if (this.trackId > -1) {
        this.queuedDefaultTrack = this.trackId;
      }
      const textTracks = filterSubtitleTracks(this.media.textTracks);
      textTracks.forEach((track) => {
        clearCurrentCues(track);
      });
      this.subtitleTrack = -1;
      this.media = null;
    }
    onManifestLoading() {
      this.tracks = [];
      this.groupIds = null;
      this.tracksInGroup = [];
      this.trackId = -1;
      this.currentTrack = null;
      this.selectDefaultTrack = true;
    }
    // Fired whenever a new manifest is loaded.
    onManifestParsed(event, data) {
      this.tracks = data.subtitleTracks;
    }
    onSubtitleTrackLoaded(event, data) {
      const {
        id,
        groupId,
        details
      } = data;
      const trackInActiveGroup = this.tracksInGroup[id];
      if (!trackInActiveGroup || trackInActiveGroup.groupId !== groupId) {
        this.warn(`Subtitle track with id:${id} and group:${groupId} not found in active group ${trackInActiveGroup == null ? void 0 : trackInActiveGroup.groupId}`);
        return;
      }
      const curDetails = trackInActiveGroup.details;
      trackInActiveGroup.details = data.details;
      this.log(`Subtitle track ${id} "${trackInActiveGroup.name}" lang:${trackInActiveGroup.lang} group:${groupId} loaded [${details.startSN}-${details.endSN}]`);
      if (id === this.trackId) {
        this.playlistLoaded(id, data, curDetails);
      }
    }
    onLevelLoading(event, data) {
      this.switchLevel(data.level);
    }
    onLevelSwitching(event, data) {
      this.switchLevel(data.level);
    }
    switchLevel(levelIndex) {
      const levelInfo = this.hls.levels[levelIndex];
      if (!levelInfo) {
        return;
      }
      const subtitleGroups = levelInfo.subtitleGroups || null;
      const currentGroups = this.groupIds;
      let currentTrack = this.currentTrack;
      if (!subtitleGroups || (currentGroups == null ? void 0 : currentGroups.length) !== (subtitleGroups == null ? void 0 : subtitleGroups.length) || subtitleGroups != null && subtitleGroups.some((groupId) => (currentGroups == null ? void 0 : currentGroups.indexOf(groupId)) === -1)) {
        this.groupIds = subtitleGroups;
        this.trackId = -1;
        this.currentTrack = null;
        const subtitleTracks = this.tracks.filter((track) => !subtitleGroups || subtitleGroups.indexOf(track.groupId) !== -1);
        if (subtitleTracks.length) {
          if (this.selectDefaultTrack && !subtitleTracks.some((track) => track.default)) {
            this.selectDefaultTrack = false;
          }
          subtitleTracks.forEach((track, i) => {
            track.id = i;
          });
        } else if (!currentTrack && !this.tracksInGroup.length) {
          return;
        }
        this.tracksInGroup = subtitleTracks;
        const subtitlePreference = this.hls.config.subtitlePreference;
        if (!currentTrack && subtitlePreference) {
          this.selectDefaultTrack = false;
          const groupIndex = findMatchingOption(subtitlePreference, subtitleTracks);
          if (groupIndex > -1) {
            currentTrack = subtitleTracks[groupIndex];
          } else {
            const allIndex = findMatchingOption(subtitlePreference, this.tracks);
            currentTrack = this.tracks[allIndex];
          }
        }
        let trackId = this.findTrackId(currentTrack);
        if (trackId === -1 && currentTrack) {
          trackId = this.findTrackId(null);
        }
        const subtitleTracksUpdated = {
          subtitleTracks
        };
        this.log(`Updating subtitle tracks, ${subtitleTracks.length} track(s) found in "${subtitleGroups == null ? void 0 : subtitleGroups.join(",")}" group-id`);
        this.hls.trigger(Events2.SUBTITLE_TRACKS_UPDATED, subtitleTracksUpdated);
        if (trackId !== -1 && this.trackId === -1) {
          this.setSubtitleTrack(trackId);
        }
      } else if (this.shouldReloadPlaylist(currentTrack)) {
        this.setSubtitleTrack(this.trackId);
      }
    }
    findTrackId(currentTrack) {
      const tracks = this.tracksInGroup;
      const selectDefault = this.selectDefaultTrack;
      for (let i = 0; i < tracks.length; i++) {
        const track = tracks[i];
        if (selectDefault && !track.default || !selectDefault && !currentTrack) {
          continue;
        }
        if (!currentTrack || matchesOption(track, currentTrack)) {
          return i;
        }
      }
      if (currentTrack) {
        for (let i = 0; i < tracks.length; i++) {
          const track = tracks[i];
          if (mediaAttributesIdentical(currentTrack.attrs, track.attrs, ["LANGUAGE", "ASSOC-LANGUAGE", "CHARACTERISTICS"])) {
            return i;
          }
        }
        for (let i = 0; i < tracks.length; i++) {
          const track = tracks[i];
          if (mediaAttributesIdentical(currentTrack.attrs, track.attrs, ["LANGUAGE"])) {
            return i;
          }
        }
      }
      return -1;
    }
    findTrackForTextTrack(textTrack) {
      if (textTrack) {
        const tracks = this.tracksInGroup;
        for (let i = 0; i < tracks.length; i++) {
          const track = tracks[i];
          if (subtitleTrackMatchesTextTrack(track, textTrack)) {
            return i;
          }
        }
      }
      return -1;
    }
    onError(event, data) {
      if (data.fatal || !data.context) {
        return;
      }
      if (data.context.type === PlaylistContextType.SUBTITLE_TRACK && data.context.id === this.trackId && (!this.groupIds || this.groupIds.indexOf(data.context.groupId) !== -1)) {
        this.checkRetry(data);
      }
    }
    get allSubtitleTracks() {
      return this.tracks;
    }
    /** get alternate subtitle tracks list from playlist **/
    get subtitleTracks() {
      return this.tracksInGroup;
    }
    /** get/set index of the selected subtitle track (based on index in subtitle track lists) **/
    get subtitleTrack() {
      return this.trackId;
    }
    set subtitleTrack(newId) {
      this.selectDefaultTrack = false;
      this.setSubtitleTrack(newId);
    }
    setSubtitleOption(subtitleOption) {
      this.hls.config.subtitlePreference = subtitleOption;
      if (subtitleOption) {
        const allSubtitleTracks = this.allSubtitleTracks;
        this.selectDefaultTrack = false;
        if (allSubtitleTracks.length) {
          const currentTrack = this.currentTrack;
          if (currentTrack && matchesOption(subtitleOption, currentTrack)) {
            return currentTrack;
          }
          const groupIndex = findMatchingOption(subtitleOption, this.tracksInGroup);
          if (groupIndex > -1) {
            const track = this.tracksInGroup[groupIndex];
            this.setSubtitleTrack(groupIndex);
            return track;
          } else if (currentTrack) {
            return null;
          } else {
            const allIndex = findMatchingOption(subtitleOption, allSubtitleTracks);
            if (allIndex > -1) {
              return allSubtitleTracks[allIndex];
            }
          }
        }
      }
      return null;
    }
    loadPlaylist(hlsUrlParameters) {
      super.loadPlaylist();
      const currentTrack = this.currentTrack;
      if (this.shouldLoadPlaylist(currentTrack) && currentTrack) {
        const id = currentTrack.id;
        const groupId = currentTrack.groupId;
        let url = currentTrack.url;
        if (hlsUrlParameters) {
          try {
            url = hlsUrlParameters.addDirectives(url);
          } catch (error) {
            this.warn(`Could not construct new URL with HLS Delivery Directives: ${error}`);
          }
        }
        this.log(`Loading subtitle playlist for id ${id}`);
        this.hls.trigger(Events2.SUBTITLE_TRACK_LOADING, {
          url,
          id,
          groupId,
          deliveryDirectives: hlsUrlParameters || null
        });
      }
    }
    /**
     * Disables the old subtitleTrack and sets current mode on the next subtitleTrack.
     * This operates on the DOM textTracks.
     * A value of -1 will disable all subtitle tracks.
     */
    toggleTrackModes() {
      const {
        media
      } = this;
      if (!media) {
        return;
      }
      const textTracks = filterSubtitleTracks(media.textTracks);
      const currentTrack = this.currentTrack;
      let nextTrack;
      if (currentTrack) {
        nextTrack = textTracks.filter((textTrack) => subtitleTrackMatchesTextTrack(currentTrack, textTrack))[0];
        if (!nextTrack) {
          this.warn(`Unable to find subtitle TextTrack with name "${currentTrack.name}" and language "${currentTrack.lang}"`);
        }
      }
      [].slice.call(textTracks).forEach((track) => {
        if (track.mode !== "disabled" && track !== nextTrack) {
          track.mode = "disabled";
        }
      });
      if (nextTrack) {
        const mode = this.subtitleDisplay ? "showing" : "hidden";
        if (nextTrack.mode !== mode) {
          nextTrack.mode = mode;
        }
      }
    }
    /**
     * This method is responsible for validating the subtitle index and periodically reloading if live.
     * Dispatches the SUBTITLE_TRACK_SWITCH event, which instructs the subtitle-stream-controller to load the selected track.
     */
    setSubtitleTrack(newId) {
      const tracks = this.tracksInGroup;
      if (!this.media) {
        this.queuedDefaultTrack = newId;
        return;
      }
      if (newId < -1 || newId >= tracks.length || !isFiniteNumber(newId)) {
        this.warn(`Invalid subtitle track id: ${newId}`);
        return;
      }
      this.clearTimer();
      this.selectDefaultTrack = false;
      const lastTrack = this.currentTrack;
      const track = tracks[newId] || null;
      this.trackId = newId;
      this.currentTrack = track;
      this.toggleTrackModes();
      if (!track) {
        this.hls.trigger(Events2.SUBTITLE_TRACK_SWITCH, {
          id: newId
        });
        return;
      }
      const trackLoaded = !!track.details && !track.details.live;
      if (newId === this.trackId && track === lastTrack && trackLoaded) {
        return;
      }
      this.log(`Switching to subtitle-track ${newId}` + (track ? ` "${track.name}" lang:${track.lang} group:${track.groupId}` : ""));
      const {
        id,
        groupId = "",
        name,
        type,
        url
      } = track;
      this.hls.trigger(Events2.SUBTITLE_TRACK_SWITCH, {
        id,
        groupId,
        name,
        type,
        url
      });
      const hlsUrlParameters = this.switchParams(track.url, lastTrack == null ? void 0 : lastTrack.details, track.details);
      this.loadPlaylist(hlsUrlParameters);
    }
  };
  var BufferOperationQueue = class {
    constructor(sourceBufferReference) {
      this.buffers = void 0;
      this.queues = {
        video: [],
        audio: [],
        audiovideo: []
      };
      this.buffers = sourceBufferReference;
    }
    append(operation, type, pending) {
      const queue = this.queues[type];
      queue.push(operation);
      if (queue.length === 1 && !pending) {
        this.executeNext(type);
      }
    }
    insertAbort(operation, type) {
      const queue = this.queues[type];
      queue.unshift(operation);
      this.executeNext(type);
    }
    appendBlocker(type) {
      let execute;
      const promise = new Promise((resolve) => {
        execute = resolve;
      });
      const operation = {
        execute,
        onStart: () => {
        },
        onComplete: () => {
        },
        onError: () => {
        }
      };
      this.append(operation, type);
      return promise;
    }
    executeNext(type) {
      const queue = this.queues[type];
      if (queue.length) {
        const operation = queue[0];
        try {
          operation.execute();
        } catch (error) {
          logger.warn(`[buffer-operation-queue]: Exception executing "${type}" SourceBuffer operation: ${error}`);
          operation.onError(error);
          const sb = this.buffers[type];
          if (!(sb != null && sb.updating)) {
            this.shiftAndExecuteNext(type);
          }
        }
      }
    }
    shiftAndExecuteNext(type) {
      this.queues[type].shift();
      this.executeNext(type);
    }
    current(type) {
      return this.queues[type][0];
    }
  };
  var VIDEO_CODEC_PROFILE_REPLACE = /(avc[1234]|hvc1|hev1|dvh[1e]|vp09|av01)(?:\.[^.,]+)+/;
  var BufferController = class {
    constructor(hls) {
      this.details = null;
      this._objectUrl = null;
      this.operationQueue = void 0;
      this.listeners = void 0;
      this.hls = void 0;
      this.bufferCodecEventsExpected = 0;
      this._bufferCodecEventsTotal = 0;
      this.media = null;
      this.mediaSource = null;
      this.lastMpegAudioChunk = null;
      this.appendSource = void 0;
      this.appendErrors = {
        audio: 0,
        video: 0,
        audiovideo: 0
      };
      this.tracks = {};
      this.pendingTracks = {};
      this.sourceBuffer = void 0;
      this.log = void 0;
      this.warn = void 0;
      this.error = void 0;
      this._onEndStreaming = (event) => {
        if (!this.hls) {
          return;
        }
        this.hls.pauseBuffering();
      };
      this._onStartStreaming = (event) => {
        if (!this.hls) {
          return;
        }
        this.hls.resumeBuffering();
      };
      this._onMediaSourceOpen = () => {
        const {
          media,
          mediaSource
        } = this;
        this.log("Media source opened");
        if (media) {
          media.removeEventListener("emptied", this._onMediaEmptied);
          this.updateMediaElementDuration();
          this.hls.trigger(Events2.MEDIA_ATTACHED, {
            media,
            mediaSource
          });
        }
        if (mediaSource) {
          mediaSource.removeEventListener("sourceopen", this._onMediaSourceOpen);
        }
        this.checkPendingTracks();
      };
      this._onMediaSourceClose = () => {
        this.log("Media source closed");
      };
      this._onMediaSourceEnded = () => {
        this.log("Media source ended");
      };
      this._onMediaEmptied = () => {
        const {
          mediaSrc,
          _objectUrl
        } = this;
        if (mediaSrc !== _objectUrl) {
          logger.error(`Media element src was set while attaching MediaSource (${_objectUrl} > ${mediaSrc})`);
        }
      };
      this.hls = hls;
      const logPrefix = "[buffer-controller]";
      this.appendSource = isManagedMediaSource(getMediaSource(hls.config.preferManagedMediaSource));
      this.log = logger.log.bind(logger, logPrefix);
      this.warn = logger.warn.bind(logger, logPrefix);
      this.error = logger.error.bind(logger, logPrefix);
      this._initSourceBuffer();
      this.registerListeners();
    }
    hasSourceTypes() {
      return this.getSourceBufferTypes().length > 0 || Object.keys(this.pendingTracks).length > 0;
    }
    destroy() {
      this.unregisterListeners();
      this.details = null;
      this.lastMpegAudioChunk = null;
      this.hls = null;
    }
    registerListeners() {
      const {
        hls
      } = this;
      hls.on(Events2.MEDIA_ATTACHING, this.onMediaAttaching, this);
      hls.on(Events2.MEDIA_DETACHING, this.onMediaDetaching, this);
      hls.on(Events2.MANIFEST_LOADING, this.onManifestLoading, this);
      hls.on(Events2.MANIFEST_PARSED, this.onManifestParsed, this);
      hls.on(Events2.BUFFER_RESET, this.onBufferReset, this);
      hls.on(Events2.BUFFER_APPENDING, this.onBufferAppending, this);
      hls.on(Events2.BUFFER_CODECS, this.onBufferCodecs, this);
      hls.on(Events2.BUFFER_EOS, this.onBufferEos, this);
      hls.on(Events2.BUFFER_FLUSHING, this.onBufferFlushing, this);
      hls.on(Events2.LEVEL_UPDATED, this.onLevelUpdated, this);
      hls.on(Events2.FRAG_PARSED, this.onFragParsed, this);
      hls.on(Events2.FRAG_CHANGED, this.onFragChanged, this);
    }
    unregisterListeners() {
      const {
        hls
      } = this;
      hls.off(Events2.MEDIA_ATTACHING, this.onMediaAttaching, this);
      hls.off(Events2.MEDIA_DETACHING, this.onMediaDetaching, this);
      hls.off(Events2.MANIFEST_LOADING, this.onManifestLoading, this);
      hls.off(Events2.MANIFEST_PARSED, this.onManifestParsed, this);
      hls.off(Events2.BUFFER_RESET, this.onBufferReset, this);
      hls.off(Events2.BUFFER_APPENDING, this.onBufferAppending, this);
      hls.off(Events2.BUFFER_CODECS, this.onBufferCodecs, this);
      hls.off(Events2.BUFFER_EOS, this.onBufferEos, this);
      hls.off(Events2.BUFFER_FLUSHING, this.onBufferFlushing, this);
      hls.off(Events2.LEVEL_UPDATED, this.onLevelUpdated, this);
      hls.off(Events2.FRAG_PARSED, this.onFragParsed, this);
      hls.off(Events2.FRAG_CHANGED, this.onFragChanged, this);
    }
    _initSourceBuffer() {
      this.sourceBuffer = {};
      this.operationQueue = new BufferOperationQueue(this.sourceBuffer);
      this.listeners = {
        audio: [],
        video: [],
        audiovideo: []
      };
      this.appendErrors = {
        audio: 0,
        video: 0,
        audiovideo: 0
      };
      this.lastMpegAudioChunk = null;
    }
    onManifestLoading() {
      this.bufferCodecEventsExpected = this._bufferCodecEventsTotal = 0;
      this.details = null;
    }
    onManifestParsed(event, data) {
      let codecEvents = 2;
      if (data.audio && !data.video || !data.altAudio || false) {
        codecEvents = 1;
      }
      this.bufferCodecEventsExpected = this._bufferCodecEventsTotal = codecEvents;
      this.log(`${this.bufferCodecEventsExpected} bufferCodec event(s) expected`);
    }
    onMediaAttaching(event, data) {
      const media = this.media = data.media;
      const MediaSource = getMediaSource(this.appendSource);
      if (media && MediaSource) {
        var _ms$constructor;
        const ms = this.mediaSource = new MediaSource();
        this.log(`created media source: ${(_ms$constructor = ms.constructor) == null ? void 0 : _ms$constructor.name}`);
        ms.addEventListener("sourceopen", this._onMediaSourceOpen);
        ms.addEventListener("sourceended", this._onMediaSourceEnded);
        ms.addEventListener("sourceclose", this._onMediaSourceClose);
        if (this.appendSource) {
          ms.addEventListener("startstreaming", this._onStartStreaming);
          ms.addEventListener("endstreaming", this._onEndStreaming);
        }
        const objectUrl = this._objectUrl = self.URL.createObjectURL(ms);
        if (this.appendSource) {
          try {
            media.removeAttribute("src");
            const MMS = self.ManagedMediaSource;
            media.disableRemotePlayback = media.disableRemotePlayback || MMS && ms instanceof MMS;
            removeSourceChildren(media);
            addSource(media, objectUrl);
            media.load();
          } catch (error) {
            media.src = objectUrl;
          }
        } else {
          media.src = objectUrl;
        }
        media.addEventListener("emptied", this._onMediaEmptied);
      }
    }
    onMediaDetaching() {
      const {
        media,
        mediaSource,
        _objectUrl
      } = this;
      if (mediaSource) {
        this.log("media source detaching");
        if (mediaSource.readyState === "open") {
          try {
            mediaSource.endOfStream();
          } catch (err) {
            this.warn(`onMediaDetaching: ${err.message} while calling endOfStream`);
          }
        }
        this.onBufferReset();
        mediaSource.removeEventListener("sourceopen", this._onMediaSourceOpen);
        mediaSource.removeEventListener("sourceended", this._onMediaSourceEnded);
        mediaSource.removeEventListener("sourceclose", this._onMediaSourceClose);
        if (this.appendSource) {
          mediaSource.removeEventListener("startstreaming", this._onStartStreaming);
          mediaSource.removeEventListener("endstreaming", this._onEndStreaming);
        }
        if (media) {
          media.removeEventListener("emptied", this._onMediaEmptied);
          if (_objectUrl) {
            self.URL.revokeObjectURL(_objectUrl);
          }
          if (this.mediaSrc === _objectUrl) {
            media.removeAttribute("src");
            if (this.appendSource) {
              removeSourceChildren(media);
            }
            media.load();
          } else {
            this.warn("media|source.src was changed by a third party - skip cleanup");
          }
        }
        this.mediaSource = null;
        this.media = null;
        this._objectUrl = null;
        this.bufferCodecEventsExpected = this._bufferCodecEventsTotal;
        this.pendingTracks = {};
        this.tracks = {};
      }
      this.hls.trigger(Events2.MEDIA_DETACHED, void 0);
    }
    onBufferReset() {
      this.getSourceBufferTypes().forEach((type) => {
        this.resetBuffer(type);
      });
      this._initSourceBuffer();
      this.hls.resumeBuffering();
    }
    resetBuffer(type) {
      const sb = this.sourceBuffer[type];
      try {
        if (sb) {
          var _this$mediaSource;
          this.removeBufferListeners(type);
          this.sourceBuffer[type] = void 0;
          if ((_this$mediaSource = this.mediaSource) != null && _this$mediaSource.sourceBuffers.length) {
            this.mediaSource.removeSourceBuffer(sb);
          }
        }
      } catch (err) {
        this.warn(`onBufferReset ${type}`, err);
      }
    }
    onBufferCodecs(event, data) {
      const sourceBufferCount = this.getSourceBufferTypes().length;
      const trackNames = Object.keys(data);
      trackNames.forEach((trackName) => {
        if (sourceBufferCount) {
          const track = this.tracks[trackName];
          if (track && typeof track.buffer.changeType === "function") {
            var _trackCodec;
            const {
              id,
              codec,
              levelCodec,
              container,
              metadata
            } = data[trackName];
            const currentCodecFull = pickMostCompleteCodecName(track.codec, track.levelCodec);
            const currentCodec = currentCodecFull == null ? void 0 : currentCodecFull.replace(VIDEO_CODEC_PROFILE_REPLACE, "$1");
            let trackCodec = pickMostCompleteCodecName(codec, levelCodec);
            const nextCodec = (_trackCodec = trackCodec) == null ? void 0 : _trackCodec.replace(VIDEO_CODEC_PROFILE_REPLACE, "$1");
            if (trackCodec && currentCodec !== nextCodec) {
              if (trackName.slice(0, 5) === "audio") {
                trackCodec = getCodecCompatibleName(trackCodec, this.appendSource);
              }
              const mimeType = `${container};codecs=${trackCodec}`;
              this.appendChangeType(trackName, mimeType);
              this.log(`switching codec ${currentCodecFull} to ${trackCodec}`);
              this.tracks[trackName] = {
                buffer: track.buffer,
                codec,
                container,
                levelCodec,
                metadata,
                id
              };
            }
          }
        } else {
          this.pendingTracks[trackName] = data[trackName];
        }
      });
      if (sourceBufferCount) {
        return;
      }
      const bufferCodecEventsExpected = Math.max(this.bufferCodecEventsExpected - 1, 0);
      if (this.bufferCodecEventsExpected !== bufferCodecEventsExpected) {
        this.log(`${bufferCodecEventsExpected} bufferCodec event(s) expected ${trackNames.join(",")}`);
        this.bufferCodecEventsExpected = bufferCodecEventsExpected;
      }
      if (this.mediaSource && this.mediaSource.readyState === "open") {
        this.checkPendingTracks();
      }
    }
    appendChangeType(type, mimeType) {
      const {
        operationQueue
      } = this;
      const operation = {
        execute: () => {
          const sb = this.sourceBuffer[type];
          if (sb) {
            this.log(`changing ${type} sourceBuffer type to ${mimeType}`);
            sb.changeType(mimeType);
          }
          operationQueue.shiftAndExecuteNext(type);
        },
        onStart: () => {
        },
        onComplete: () => {
        },
        onError: (error) => {
          this.warn(`Failed to change ${type} SourceBuffer type`, error);
        }
      };
      operationQueue.append(operation, type, !!this.pendingTracks[type]);
    }
    onBufferAppending(event, eventData) {
      const {
        hls,
        operationQueue,
        tracks
      } = this;
      const {
        data,
        type,
        frag,
        part,
        chunkMeta
      } = eventData;
      const chunkStats = chunkMeta.buffering[type];
      const bufferAppendingStart = self.performance.now();
      chunkStats.start = bufferAppendingStart;
      const fragBuffering = frag.stats.buffering;
      const partBuffering = part ? part.stats.buffering : null;
      if (fragBuffering.start === 0) {
        fragBuffering.start = bufferAppendingStart;
      }
      if (partBuffering && partBuffering.start === 0) {
        partBuffering.start = bufferAppendingStart;
      }
      const audioTrack = tracks.audio;
      let checkTimestampOffset = false;
      if (type === "audio" && (audioTrack == null ? void 0 : audioTrack.container) === "audio/mpeg") {
        checkTimestampOffset = !this.lastMpegAudioChunk || chunkMeta.id === 1 || this.lastMpegAudioChunk.sn !== chunkMeta.sn;
        this.lastMpegAudioChunk = chunkMeta;
      }
      const fragStart = frag.start;
      const operation = {
        execute: () => {
          chunkStats.executeStart = self.performance.now();
          if (checkTimestampOffset) {
            const sb = this.sourceBuffer[type];
            if (sb) {
              const delta = fragStart - sb.timestampOffset;
              if (Math.abs(delta) >= 0.1) {
                this.log(`Updating audio SourceBuffer timestampOffset to ${fragStart} (delta: ${delta}) sn: ${frag.sn})`);
                sb.timestampOffset = fragStart;
              }
            }
          }
          this.appendExecutor(data, type);
        },
        onStart: () => {
        },
        onComplete: () => {
          const end = self.performance.now();
          chunkStats.executeEnd = chunkStats.end = end;
          if (fragBuffering.first === 0) {
            fragBuffering.first = end;
          }
          if (partBuffering && partBuffering.first === 0) {
            partBuffering.first = end;
          }
          const {
            sourceBuffer
          } = this;
          const timeRanges = {};
          for (const type2 in sourceBuffer) {
            timeRanges[type2] = BufferHelper.getBuffered(sourceBuffer[type2]);
          }
          this.appendErrors[type] = 0;
          if (type === "audio" || type === "video") {
            this.appendErrors.audiovideo = 0;
          } else {
            this.appendErrors.audio = 0;
            this.appendErrors.video = 0;
          }
          this.hls.trigger(Events2.BUFFER_APPENDED, {
            type,
            frag,
            part,
            chunkMeta,
            parent: frag.type,
            timeRanges
          });
        },
        onError: (error) => {
          const event2 = {
            type: ErrorTypes.MEDIA_ERROR,
            parent: frag.type,
            details: ErrorDetails.BUFFER_APPEND_ERROR,
            sourceBufferName: type,
            frag,
            part,
            chunkMeta,
            error,
            err: error,
            fatal: false
          };
          if (error.code === DOMException.QUOTA_EXCEEDED_ERR) {
            event2.details = ErrorDetails.BUFFER_FULL_ERROR;
          } else {
            const appendErrorCount = ++this.appendErrors[type];
            event2.details = ErrorDetails.BUFFER_APPEND_ERROR;
            this.warn(`Failed ${appendErrorCount}/${hls.config.appendErrorMaxRetry} times to append segment in "${type}" sourceBuffer`);
            if (appendErrorCount >= hls.config.appendErrorMaxRetry) {
              event2.fatal = true;
            }
          }
          hls.trigger(Events2.ERROR, event2);
        }
      };
      operationQueue.append(operation, type, !!this.pendingTracks[type]);
    }
    onBufferFlushing(event, data) {
      const {
        operationQueue
      } = this;
      const flushOperation = (type) => ({
        execute: this.removeExecutor.bind(this, type, data.startOffset, data.endOffset),
        onStart: () => {
        },
        onComplete: () => {
          this.hls.trigger(Events2.BUFFER_FLUSHED, {
            type
          });
        },
        onError: (error) => {
          this.warn(`Failed to remove from ${type} SourceBuffer`, error);
        }
      });
      if (data.type) {
        operationQueue.append(flushOperation(data.type), data.type);
      } else {
        this.getSourceBufferTypes().forEach((type) => {
          operationQueue.append(flushOperation(type), type);
        });
      }
    }
    onFragParsed(event, data) {
      const {
        frag,
        part
      } = data;
      const buffersAppendedTo = [];
      const elementaryStreams = part ? part.elementaryStreams : frag.elementaryStreams;
      if (elementaryStreams[ElementaryStreamTypes.AUDIOVIDEO]) {
        buffersAppendedTo.push("audiovideo");
      } else {
        if (elementaryStreams[ElementaryStreamTypes.AUDIO]) {
          buffersAppendedTo.push("audio");
        }
        if (elementaryStreams[ElementaryStreamTypes.VIDEO]) {
          buffersAppendedTo.push("video");
        }
      }
      const onUnblocked = () => {
        const now2 = self.performance.now();
        frag.stats.buffering.end = now2;
        if (part) {
          part.stats.buffering.end = now2;
        }
        const stats = part ? part.stats : frag.stats;
        this.hls.trigger(Events2.FRAG_BUFFERED, {
          frag,
          part,
          stats,
          id: frag.type
        });
      };
      if (buffersAppendedTo.length === 0) {
        this.warn(`Fragments must have at least one ElementaryStreamType set. type: ${frag.type} level: ${frag.level} sn: ${frag.sn}`);
      }
      this.blockBuffers(onUnblocked, buffersAppendedTo);
    }
    onFragChanged(event, data) {
      this.trimBuffers();
    }
    // on BUFFER_EOS mark matching sourcebuffer(s) as ended and trigger checkEos()
    // an undefined data.type will mark all buffers as EOS.
    onBufferEos(event, data) {
      const ended = this.getSourceBufferTypes().reduce((acc, type) => {
        const sb = this.sourceBuffer[type];
        if (sb && (!data.type || data.type === type)) {
          sb.ending = true;
          if (!sb.ended) {
            sb.ended = true;
            this.log(`${type} sourceBuffer now EOS`);
          }
        }
        return acc && !!(!sb || sb.ended);
      }, true);
      if (ended) {
        this.log(`Queueing mediaSource.endOfStream()`);
        this.blockBuffers(() => {
          this.getSourceBufferTypes().forEach((type) => {
            const sb = this.sourceBuffer[type];
            if (sb) {
              sb.ending = false;
            }
          });
          const {
            mediaSource
          } = this;
          if (!mediaSource || mediaSource.readyState !== "open") {
            if (mediaSource) {
              this.log(`Could not call mediaSource.endOfStream(). mediaSource.readyState: ${mediaSource.readyState}`);
            }
            return;
          }
          this.log(`Calling mediaSource.endOfStream()`);
          mediaSource.endOfStream();
        });
      }
    }
    onLevelUpdated(event, {
      details
    }) {
      if (!details.fragments.length) {
        return;
      }
      this.details = details;
      if (this.getSourceBufferTypes().length) {
        this.blockBuffers(this.updateMediaElementDuration.bind(this));
      } else {
        this.updateMediaElementDuration();
      }
    }
    trimBuffers() {
      const {
        hls,
        details,
        media
      } = this;
      if (!media || details === null) {
        return;
      }
      const sourceBufferTypes = this.getSourceBufferTypes();
      if (!sourceBufferTypes.length) {
        return;
      }
      const config = hls.config;
      const currentTime = media.currentTime;
      const targetDuration = details.levelTargetDuration;
      const backBufferLength = details.live && config.liveBackBufferLength !== null ? config.liveBackBufferLength : config.backBufferLength;
      if (isFiniteNumber(backBufferLength) && backBufferLength > 0) {
        const maxBackBufferLength = Math.max(backBufferLength, targetDuration);
        const targetBackBufferPosition = Math.floor(currentTime / targetDuration) * targetDuration - maxBackBufferLength;
        this.flushBackBuffer(currentTime, targetDuration, targetBackBufferPosition);
      }
      if (isFiniteNumber(config.frontBufferFlushThreshold) && config.frontBufferFlushThreshold > 0) {
        const frontBufferLength = Math.max(config.maxBufferLength, config.frontBufferFlushThreshold);
        const maxFrontBufferLength = Math.max(frontBufferLength, targetDuration);
        const targetFrontBufferPosition = Math.floor(currentTime / targetDuration) * targetDuration + maxFrontBufferLength;
        this.flushFrontBuffer(currentTime, targetDuration, targetFrontBufferPosition);
      }
    }
    flushBackBuffer(currentTime, targetDuration, targetBackBufferPosition) {
      const {
        details,
        sourceBuffer
      } = this;
      const sourceBufferTypes = this.getSourceBufferTypes();
      sourceBufferTypes.forEach((type) => {
        const sb = sourceBuffer[type];
        if (sb) {
          const buffered = BufferHelper.getBuffered(sb);
          if (buffered.length > 0 && targetBackBufferPosition > buffered.start(0)) {
            this.hls.trigger(Events2.BACK_BUFFER_REACHED, {
              bufferEnd: targetBackBufferPosition
            });
            if (details != null && details.live) {
              this.hls.trigger(Events2.LIVE_BACK_BUFFER_REACHED, {
                bufferEnd: targetBackBufferPosition
              });
            } else if (sb.ended && buffered.end(buffered.length - 1) - currentTime < targetDuration * 2) {
              this.log(`Cannot flush ${type} back buffer while SourceBuffer is in ended state`);
              return;
            }
            this.hls.trigger(Events2.BUFFER_FLUSHING, {
              startOffset: 0,
              endOffset: targetBackBufferPosition,
              type
            });
          }
        }
      });
    }
    flushFrontBuffer(currentTime, targetDuration, targetFrontBufferPosition) {
      const {
        sourceBuffer
      } = this;
      const sourceBufferTypes = this.getSourceBufferTypes();
      sourceBufferTypes.forEach((type) => {
        const sb = sourceBuffer[type];
        if (sb) {
          const buffered = BufferHelper.getBuffered(sb);
          const numBufferedRanges = buffered.length;
          if (numBufferedRanges < 2) {
            return;
          }
          const bufferStart = buffered.start(numBufferedRanges - 1);
          const bufferEnd = buffered.end(numBufferedRanges - 1);
          if (targetFrontBufferPosition > bufferStart || currentTime >= bufferStart && currentTime <= bufferEnd) {
            return;
          } else if (sb.ended && currentTime - bufferEnd < 2 * targetDuration) {
            this.log(`Cannot flush ${type} front buffer while SourceBuffer is in ended state`);
            return;
          }
          this.hls.trigger(Events2.BUFFER_FLUSHING, {
            startOffset: bufferStart,
            endOffset: Infinity,
            type
          });
        }
      });
    }
    /**
     * Update Media Source duration to current level duration or override to Infinity if configuration parameter
     * 'liveDurationInfinity` is set to `true`
     * More details: https://github.com/video-dev/hls.js/issues/355
     */
    updateMediaElementDuration() {
      if (!this.details || !this.media || !this.mediaSource || this.mediaSource.readyState !== "open") {
        return;
      }
      const {
        details,
        hls,
        media,
        mediaSource
      } = this;
      const levelDuration = details.fragments[0].start + details.totalduration;
      const mediaDuration = media.duration;
      const msDuration = isFiniteNumber(mediaSource.duration) ? mediaSource.duration : 0;
      if (details.live && hls.config.liveDurationInfinity) {
        mediaSource.duration = Infinity;
        this.updateSeekableRange(details);
      } else if (levelDuration > msDuration && levelDuration > mediaDuration || !isFiniteNumber(mediaDuration)) {
        this.log(`Updating Media Source duration to ${levelDuration.toFixed(3)}`);
        mediaSource.duration = levelDuration;
      }
    }
    updateSeekableRange(levelDetails) {
      const mediaSource = this.mediaSource;
      const fragments = levelDetails.fragments;
      const len = fragments.length;
      if (len && levelDetails.live && mediaSource != null && mediaSource.setLiveSeekableRange) {
        const start = Math.max(0, fragments[0].start);
        const end = Math.max(start, start + levelDetails.totalduration);
        this.log(`Media Source duration is set to ${mediaSource.duration}. Setting seekable range to ${start}-${end}.`);
        mediaSource.setLiveSeekableRange(start, end);
      }
    }
    checkPendingTracks() {
      const {
        bufferCodecEventsExpected,
        operationQueue,
        pendingTracks
      } = this;
      const pendingTracksCount = Object.keys(pendingTracks).length;
      if (pendingTracksCount && (!bufferCodecEventsExpected || pendingTracksCount === 2 || "audiovideo" in pendingTracks)) {
        this.createSourceBuffers(pendingTracks);
        this.pendingTracks = {};
        const buffers = this.getSourceBufferTypes();
        if (buffers.length) {
          this.hls.trigger(Events2.BUFFER_CREATED, {
            tracks: this.tracks
          });
          buffers.forEach((type) => {
            operationQueue.executeNext(type);
          });
        } else {
          const error = new Error("could not create source buffer for media codec(s)");
          this.hls.trigger(Events2.ERROR, {
            type: ErrorTypes.MEDIA_ERROR,
            details: ErrorDetails.BUFFER_INCOMPATIBLE_CODECS_ERROR,
            fatal: true,
            error,
            reason: error.message
          });
        }
      }
    }
    createSourceBuffers(tracks) {
      const {
        sourceBuffer,
        mediaSource
      } = this;
      if (!mediaSource) {
        throw Error("createSourceBuffers called when mediaSource was null");
      }
      for (const trackName in tracks) {
        if (!sourceBuffer[trackName]) {
          var _track$levelCodec;
          const track = tracks[trackName];
          if (!track) {
            throw Error(`source buffer exists for track ${trackName}, however track does not`);
          }
          let codec = ((_track$levelCodec = track.levelCodec) == null ? void 0 : _track$levelCodec.indexOf(",")) === -1 ? track.levelCodec : track.codec;
          if (codec) {
            if (trackName.slice(0, 5) === "audio") {
              codec = getCodecCompatibleName(codec, this.appendSource);
            }
          }
          const mimeType = `${track.container};codecs=${codec}`;
          this.log(`creating sourceBuffer(${mimeType})`);
          try {
            const sb = sourceBuffer[trackName] = mediaSource.addSourceBuffer(mimeType);
            const sbName = trackName;
            this.addBufferListener(sbName, "updatestart", this._onSBUpdateStart);
            this.addBufferListener(sbName, "updateend", this._onSBUpdateEnd);
            this.addBufferListener(sbName, "error", this._onSBUpdateError);
            if (this.appendSource) {
              this.addBufferListener(sbName, "bufferedchange", (type, event) => {
                const removedRanges = event.removedRanges;
                if (removedRanges != null && removedRanges.length) {
                  this.hls.trigger(Events2.BUFFER_FLUSHED, {
                    type: trackName
                  });
                }
              });
            }
            this.tracks[trackName] = {
              buffer: sb,
              codec,
              container: track.container,
              levelCodec: track.levelCodec,
              metadata: track.metadata,
              id: track.id
            };
          } catch (err) {
            this.error(`error while trying to add sourceBuffer: ${err.message}`);
            this.hls.trigger(Events2.ERROR, {
              type: ErrorTypes.MEDIA_ERROR,
              details: ErrorDetails.BUFFER_ADD_CODEC_ERROR,
              fatal: false,
              error: err,
              sourceBufferName: trackName,
              mimeType
            });
          }
        }
      }
    }
    get mediaSrc() {
      var _this$media, _this$media$querySele;
      const media = ((_this$media = this.media) == null ? void 0 : (_this$media$querySele = _this$media.querySelector) == null ? void 0 : _this$media$querySele.call(_this$media, "source")) || this.media;
      return media == null ? void 0 : media.src;
    }
    _onSBUpdateStart(type) {
      const {
        operationQueue
      } = this;
      const operation = operationQueue.current(type);
      operation.onStart();
    }
    _onSBUpdateEnd(type) {
      var _this$mediaSource2;
      if (((_this$mediaSource2 = this.mediaSource) == null ? void 0 : _this$mediaSource2.readyState) === "closed") {
        this.resetBuffer(type);
        return;
      }
      const {
        operationQueue
      } = this;
      const operation = operationQueue.current(type);
      operation.onComplete();
      operationQueue.shiftAndExecuteNext(type);
    }
    _onSBUpdateError(type, event) {
      var _this$mediaSource3;
      const error = new Error(`${type} SourceBuffer error. MediaSource readyState: ${(_this$mediaSource3 = this.mediaSource) == null ? void 0 : _this$mediaSource3.readyState}`);
      this.error(`${error}`, event);
      this.hls.trigger(Events2.ERROR, {
        type: ErrorTypes.MEDIA_ERROR,
        details: ErrorDetails.BUFFER_APPENDING_ERROR,
        sourceBufferName: type,
        error,
        fatal: false
      });
      const operation = this.operationQueue.current(type);
      if (operation) {
        operation.onError(error);
      }
    }
    // This method must result in an updateend event; if remove is not called, _onSBUpdateEnd must be called manually
    removeExecutor(type, startOffset, endOffset) {
      const {
        media,
        mediaSource,
        operationQueue,
        sourceBuffer
      } = this;
      const sb = sourceBuffer[type];
      if (!media || !mediaSource || !sb) {
        this.warn(`Attempting to remove from the ${type} SourceBuffer, but it does not exist`);
        operationQueue.shiftAndExecuteNext(type);
        return;
      }
      const mediaDuration = isFiniteNumber(media.duration) ? media.duration : Infinity;
      const msDuration = isFiniteNumber(mediaSource.duration) ? mediaSource.duration : Infinity;
      const removeStart = Math.max(0, startOffset);
      const removeEnd = Math.min(endOffset, mediaDuration, msDuration);
      if (removeEnd > removeStart && (!sb.ending || sb.ended)) {
        sb.ended = false;
        this.log(`Removing [${removeStart},${removeEnd}] from the ${type} SourceBuffer`);
        sb.remove(removeStart, removeEnd);
      } else {
        operationQueue.shiftAndExecuteNext(type);
      }
    }
    // This method must result in an updateend event; if append is not called, _onSBUpdateEnd must be called manually
    appendExecutor(data, type) {
      const sb = this.sourceBuffer[type];
      if (!sb) {
        if (!this.pendingTracks[type]) {
          throw new Error(`Attempting to append to the ${type} SourceBuffer, but it does not exist`);
        }
        return;
      }
      sb.ended = false;
      sb.appendBuffer(data);
    }
    // Enqueues an operation to each SourceBuffer queue which, upon execution, resolves a promise. When all promises
    // resolve, the onUnblocked function is executed. Functions calling this method do not need to unblock the queue
    // upon completion, since we already do it here
    blockBuffers(onUnblocked, buffers = this.getSourceBufferTypes()) {
      if (!buffers.length) {
        this.log("Blocking operation requested, but no SourceBuffers exist");
        Promise.resolve().then(onUnblocked);
        return;
      }
      const {
        operationQueue
      } = this;
      const blockingOperations = buffers.map((type) => operationQueue.appendBlocker(type));
      Promise.all(blockingOperations).then(() => {
        onUnblocked();
        buffers.forEach((type) => {
          const sb = this.sourceBuffer[type];
          if (!(sb != null && sb.updating)) {
            operationQueue.shiftAndExecuteNext(type);
          }
        });
      });
    }
    getSourceBufferTypes() {
      return Object.keys(this.sourceBuffer);
    }
    addBufferListener(type, event, fn) {
      const buffer = this.sourceBuffer[type];
      if (!buffer) {
        return;
      }
      const listener = fn.bind(this, type);
      this.listeners[type].push({
        event,
        listener
      });
      buffer.addEventListener(event, listener);
    }
    removeBufferListeners(type) {
      const buffer = this.sourceBuffer[type];
      if (!buffer) {
        return;
      }
      this.listeners[type].forEach((l) => {
        buffer.removeEventListener(l.event, l.listener);
      });
    }
  };
  function removeSourceChildren(node) {
    const sourceChildren = node.querySelectorAll("source");
    [].slice.call(sourceChildren).forEach((source) => {
      node.removeChild(source);
    });
  }
  function addSource(media, url) {
    const source = self.document.createElement("source");
    source.type = "video/mp4";
    source.src = url;
    media.appendChild(source);
  }
  var specialCea608CharsCodes = {
    42: 225,
    // lowercase a, acute accent
    92: 233,
    // lowercase e, acute accent
    94: 237,
    // lowercase i, acute accent
    95: 243,
    // lowercase o, acute accent
    96: 250,
    // lowercase u, acute accent
    123: 231,
    // lowercase c with cedilla
    124: 247,
    // division symbol
    125: 209,
    // uppercase N tilde
    126: 241,
    // lowercase n tilde
    127: 9608,
    // Full block
    // THIS BLOCK INCLUDES THE 16 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS
    // THAT COME FROM HI BYTE=0x11 AND LOW BETWEEN 0x30 AND 0x3F
    // THIS MEANS THAT \x50 MUST BE ADDED TO THE VALUES
    128: 174,
    // Registered symbol (R)
    129: 176,
    // degree sign
    130: 189,
    // 1/2 symbol
    131: 191,
    // Inverted (open) question mark
    132: 8482,
    // Trademark symbol (TM)
    133: 162,
    // Cents symbol
    134: 163,
    // Pounds sterling
    135: 9834,
    // Music 8'th note
    136: 224,
    // lowercase a, grave accent
    137: 32,
    // transparent space (regular)
    138: 232,
    // lowercase e, grave accent
    139: 226,
    // lowercase a, circumflex accent
    140: 234,
    // lowercase e, circumflex accent
    141: 238,
    // lowercase i, circumflex accent
    142: 244,
    // lowercase o, circumflex accent
    143: 251,
    // lowercase u, circumflex accent
    // THIS BLOCK INCLUDES THE 32 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS
    // THAT COME FROM HI BYTE=0x12 AND LOW BETWEEN 0x20 AND 0x3F
    144: 193,
    // capital letter A with acute
    145: 201,
    // capital letter E with acute
    146: 211,
    // capital letter O with acute
    147: 218,
    // capital letter U with acute
    148: 220,
    // capital letter U with diaresis
    149: 252,
    // lowercase letter U with diaeresis
    150: 8216,
    // opening single quote
    151: 161,
    // inverted exclamation mark
    152: 42,
    // asterisk
    153: 8217,
    // closing single quote
    154: 9473,
    // box drawings heavy horizontal
    155: 169,
    // copyright sign
    156: 8480,
    // Service mark
    157: 8226,
    // (round) bullet
    158: 8220,
    // Left double quotation mark
    159: 8221,
    // Right double quotation mark
    160: 192,
    // uppercase A, grave accent
    161: 194,
    // uppercase A, circumflex
    162: 199,
    // uppercase C with cedilla
    163: 200,
    // uppercase E, grave accent
    164: 202,
    // uppercase E, circumflex
    165: 203,
    // capital letter E with diaresis
    166: 235,
    // lowercase letter e with diaresis
    167: 206,
    // uppercase I, circumflex
    168: 207,
    // uppercase I, with diaresis
    169: 239,
    // lowercase i, with diaresis
    170: 212,
    // uppercase O, circumflex
    171: 217,
    // uppercase U, grave accent
    172: 249,
    // lowercase u, grave accent
    173: 219,
    // uppercase U, circumflex
    174: 171,
    // left-pointing double angle quotation mark
    175: 187,
    // right-pointing double angle quotation mark
    // THIS BLOCK INCLUDES THE 32 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS
    // THAT COME FROM HI BYTE=0x13 AND LOW BETWEEN 0x20 AND 0x3F
    176: 195,
    // Uppercase A, tilde
    177: 227,
    // Lowercase a, tilde
    178: 205,
    // Uppercase I, acute accent
    179: 204,
    // Uppercase I, grave accent
    180: 236,
    // Lowercase i, grave accent
    181: 210,
    // Uppercase O, grave accent
    182: 242,
    // Lowercase o, grave accent
    183: 213,
    // Uppercase O, tilde
    184: 245,
    // Lowercase o, tilde
    185: 123,
    // Open curly brace
    186: 125,
    // Closing curly brace
    187: 92,
    // Backslash
    188: 94,
    // Caret
    189: 95,
    // Underscore
    190: 124,
    // Pipe (vertical line)
    191: 8764,
    // Tilde operator
    192: 196,
    // Uppercase A, umlaut
    193: 228,
    // Lowercase A, umlaut
    194: 214,
    // Uppercase O, umlaut
    195: 246,
    // Lowercase o, umlaut
    196: 223,
    // Esszett (sharp S)
    197: 165,
    // Yen symbol
    198: 164,
    // Generic currency sign
    199: 9475,
    // Box drawings heavy vertical
    200: 197,
    // Uppercase A, ring
    201: 229,
    // Lowercase A, ring
    202: 216,
    // Uppercase O, stroke
    203: 248,
    // Lowercase o, strok
    204: 9487,
    // Box drawings heavy down and right
    205: 9491,
    // Box drawings heavy down and left
    206: 9495,
    // Box drawings heavy up and right
    207: 9499
    // Box drawings heavy up and left
  };
  var getCharForByte = (byte) => String.fromCharCode(specialCea608CharsCodes[byte] || byte);
  var NR_ROWS = 15;
  var NR_COLS = 100;
  var rowsLowCh1 = {
    17: 1,
    18: 3,
    21: 5,
    22: 7,
    23: 9,
    16: 11,
    19: 12,
    20: 14
  };
  var rowsHighCh1 = {
    17: 2,
    18: 4,
    21: 6,
    22: 8,
    23: 10,
    19: 13,
    20: 15
  };
  var rowsLowCh2 = {
    25: 1,
    26: 3,
    29: 5,
    30: 7,
    31: 9,
    24: 11,
    27: 12,
    28: 14
  };
  var rowsHighCh2 = {
    25: 2,
    26: 4,
    29: 6,
    30: 8,
    31: 10,
    27: 13,
    28: 15
  };
  var backgroundColors = ["white", "green", "blue", "cyan", "red", "yellow", "magenta", "black", "transparent"];
  var CaptionsLogger = class {
    constructor() {
      this.time = null;
      this.verboseLevel = 0;
    }
    log(severity, msg) {
      if (this.verboseLevel >= severity) {
        const m = typeof msg === "function" ? msg() : msg;
        logger.log(`${this.time} [${severity}] ${m}`);
      }
    }
  };
  var numArrayToHexArray = function numArrayToHexArray2(numArray) {
    const hexArray = [];
    for (let j = 0; j < numArray.length; j++) {
      hexArray.push(numArray[j].toString(16));
    }
    return hexArray;
  };
  var PenState = class {
    constructor() {
      this.foreground = "white";
      this.underline = false;
      this.italics = false;
      this.background = "black";
      this.flash = false;
    }
    reset() {
      this.foreground = "white";
      this.underline = false;
      this.italics = false;
      this.background = "black";
      this.flash = false;
    }
    setStyles(styles) {
      const attribs = ["foreground", "underline", "italics", "background", "flash"];
      for (let i = 0; i < attribs.length; i++) {
        const style = attribs[i];
        if (styles.hasOwnProperty(style)) {
          this[style] = styles[style];
        }
      }
    }
    isDefault() {
      return this.foreground === "white" && !this.underline && !this.italics && this.background === "black" && !this.flash;
    }
    equals(other) {
      return this.foreground === other.foreground && this.underline === other.underline && this.italics === other.italics && this.background === other.background && this.flash === other.flash;
    }
    copy(newPenState) {
      this.foreground = newPenState.foreground;
      this.underline = newPenState.underline;
      this.italics = newPenState.italics;
      this.background = newPenState.background;
      this.flash = newPenState.flash;
    }
    toString() {
      return "color=" + this.foreground + ", underline=" + this.underline + ", italics=" + this.italics + ", background=" + this.background + ", flash=" + this.flash;
    }
  };
  var StyledUnicodeChar = class {
    constructor() {
      this.uchar = " ";
      this.penState = new PenState();
    }
    reset() {
      this.uchar = " ";
      this.penState.reset();
    }
    setChar(uchar, newPenState) {
      this.uchar = uchar;
      this.penState.copy(newPenState);
    }
    setPenState(newPenState) {
      this.penState.copy(newPenState);
    }
    equals(other) {
      return this.uchar === other.uchar && this.penState.equals(other.penState);
    }
    copy(newChar) {
      this.uchar = newChar.uchar;
      this.penState.copy(newChar.penState);
    }
    isEmpty() {
      return this.uchar === " " && this.penState.isDefault();
    }
  };
  var Row = class {
    constructor(logger2) {
      this.chars = [];
      this.pos = 0;
      this.currPenState = new PenState();
      this.cueStartTime = null;
      this.logger = void 0;
      for (let i = 0; i < NR_COLS; i++) {
        this.chars.push(new StyledUnicodeChar());
      }
      this.logger = logger2;
    }
    equals(other) {
      for (let i = 0; i < NR_COLS; i++) {
        if (!this.chars[i].equals(other.chars[i])) {
          return false;
        }
      }
      return true;
    }
    copy(other) {
      for (let i = 0; i < NR_COLS; i++) {
        this.chars[i].copy(other.chars[i]);
      }
    }
    isEmpty() {
      let empty = true;
      for (let i = 0; i < NR_COLS; i++) {
        if (!this.chars[i].isEmpty()) {
          empty = false;
          break;
        }
      }
      return empty;
    }
    /**
     *  Set the cursor to a valid column.
     */
    setCursor(absPos) {
      if (this.pos !== absPos) {
        this.pos = absPos;
      }
      if (this.pos < 0) {
        this.logger.log(3, "Negative cursor position " + this.pos);
        this.pos = 0;
      } else if (this.pos > NR_COLS) {
        this.logger.log(3, "Too large cursor position " + this.pos);
        this.pos = NR_COLS;
      }
    }
    /**
     * Move the cursor relative to current position.
     */
    moveCursor(relPos) {
      const newPos = this.pos + relPos;
      if (relPos > 1) {
        for (let i = this.pos + 1; i < newPos + 1; i++) {
          this.chars[i].setPenState(this.currPenState);
        }
      }
      this.setCursor(newPos);
    }
    /**
     * Backspace, move one step back and clear character.
     */
    backSpace() {
      this.moveCursor(-1);
      this.chars[this.pos].setChar(" ", this.currPenState);
    }
    insertChar(byte) {
      if (byte >= 144) {
        this.backSpace();
      }
      const char = getCharForByte(byte);
      if (this.pos >= NR_COLS) {
        this.logger.log(0, () => "Cannot insert " + byte.toString(16) + " (" + char + ") at position " + this.pos + ". Skipping it!");
        return;
      }
      this.chars[this.pos].setChar(char, this.currPenState);
      this.moveCursor(1);
    }
    clearFromPos(startPos) {
      let i;
      for (i = startPos; i < NR_COLS; i++) {
        this.chars[i].reset();
      }
    }
    clear() {
      this.clearFromPos(0);
      this.pos = 0;
      this.currPenState.reset();
    }
    clearToEndOfRow() {
      this.clearFromPos(this.pos);
    }
    getTextString() {
      const chars = [];
      let empty = true;
      for (let i = 0; i < NR_COLS; i++) {
        const char = this.chars[i].uchar;
        if (char !== " ") {
          empty = false;
        }
        chars.push(char);
      }
      if (empty) {
        return "";
      } else {
        return chars.join("");
      }
    }
    setPenStyles(styles) {
      this.currPenState.setStyles(styles);
      const currChar = this.chars[this.pos];
      currChar.setPenState(this.currPenState);
    }
  };
  var CaptionScreen = class {
    constructor(logger2) {
      this.rows = [];
      this.currRow = NR_ROWS - 1;
      this.nrRollUpRows = null;
      this.lastOutputScreen = null;
      this.logger = void 0;
      for (let i = 0; i < NR_ROWS; i++) {
        this.rows.push(new Row(logger2));
      }
      this.logger = logger2;
    }
    reset() {
      for (let i = 0; i < NR_ROWS; i++) {
        this.rows[i].clear();
      }
      this.currRow = NR_ROWS - 1;
    }
    equals(other) {
      let equal = true;
      for (let i = 0; i < NR_ROWS; i++) {
        if (!this.rows[i].equals(other.rows[i])) {
          equal = false;
          break;
        }
      }
      return equal;
    }
    copy(other) {
      for (let i = 0; i < NR_ROWS; i++) {
        this.rows[i].copy(other.rows[i]);
      }
    }
    isEmpty() {
      let empty = true;
      for (let i = 0; i < NR_ROWS; i++) {
        if (!this.rows[i].isEmpty()) {
          empty = false;
          break;
        }
      }
      return empty;
    }
    backSpace() {
      const row = this.rows[this.currRow];
      row.backSpace();
    }
    clearToEndOfRow() {
      const row = this.rows[this.currRow];
      row.clearToEndOfRow();
    }
    /**
     * Insert a character (without styling) in the current row.
     */
    insertChar(char) {
      const row = this.rows[this.currRow];
      row.insertChar(char);
    }
    setPen(styles) {
      const row = this.rows[this.currRow];
      row.setPenStyles(styles);
    }
    moveCursor(relPos) {
      const row = this.rows[this.currRow];
      row.moveCursor(relPos);
    }
    setCursor(absPos) {
      this.logger.log(2, "setCursor: " + absPos);
      const row = this.rows[this.currRow];
      row.setCursor(absPos);
    }
    setPAC(pacData) {
      this.logger.log(2, () => "pacData = " + JSON.stringify(pacData));
      let newRow = pacData.row - 1;
      if (this.nrRollUpRows && newRow < this.nrRollUpRows - 1) {
        newRow = this.nrRollUpRows - 1;
      }
      if (this.nrRollUpRows && this.currRow !== newRow) {
        for (let i = 0; i < NR_ROWS; i++) {
          this.rows[i].clear();
        }
        const topRowIndex = this.currRow + 1 - this.nrRollUpRows;
        const lastOutputScreen = this.lastOutputScreen;
        if (lastOutputScreen) {
          const prevLineTime = lastOutputScreen.rows[topRowIndex].cueStartTime;
          const time = this.logger.time;
          if (prevLineTime !== null && time !== null && prevLineTime < time) {
            for (let i = 0; i < this.nrRollUpRows; i++) {
              this.rows[newRow - this.nrRollUpRows + i + 1].copy(lastOutputScreen.rows[topRowIndex + i]);
            }
          }
        }
      }
      this.currRow = newRow;
      const row = this.rows[this.currRow];
      if (pacData.indent !== null) {
        const indent = pacData.indent;
        const prevPos = Math.max(indent - 1, 0);
        row.setCursor(pacData.indent);
        pacData.color = row.chars[prevPos].penState.foreground;
      }
      const styles = {
        foreground: pacData.color,
        underline: pacData.underline,
        italics: pacData.italics,
        background: "black",
        flash: false
      };
      this.setPen(styles);
    }
    /**
     * Set background/extra foreground, but first do back_space, and then insert space (backwards compatibility).
     */
    setBkgData(bkgData) {
      this.logger.log(2, () => "bkgData = " + JSON.stringify(bkgData));
      this.backSpace();
      this.setPen(bkgData);
      this.insertChar(32);
    }
    setRollUpRows(nrRows) {
      this.nrRollUpRows = nrRows;
    }
    rollUp() {
      if (this.nrRollUpRows === null) {
        this.logger.log(3, "roll_up but nrRollUpRows not set yet");
        return;
      }
      this.logger.log(1, () => this.getDisplayText());
      const topRowIndex = this.currRow + 1 - this.nrRollUpRows;
      const topRow = this.rows.splice(topRowIndex, 1)[0];
      topRow.clear();
      this.rows.splice(this.currRow, 0, topRow);
      this.logger.log(2, "Rolling up");
    }
    /**
     * Get all non-empty rows with as unicode text.
     */
    getDisplayText(asOneRow) {
      asOneRow = asOneRow || false;
      const displayText = [];
      let text = "";
      let rowNr = -1;
      for (let i = 0; i < NR_ROWS; i++) {
        const rowText = this.rows[i].getTextString();
        if (rowText) {
          rowNr = i + 1;
          if (asOneRow) {
            displayText.push("Row " + rowNr + ": '" + rowText + "'");
          } else {
            displayText.push(rowText.trim());
          }
        }
      }
      if (displayText.length > 0) {
        if (asOneRow) {
          text = "[" + displayText.join(" | ") + "]";
        } else {
          text = displayText.join("\n");
        }
      }
      return text;
    }
    getTextAndFormat() {
      return this.rows;
    }
  };
  var Cea608Channel = class {
    constructor(channelNumber, outputFilter, logger2) {
      this.chNr = void 0;
      this.outputFilter = void 0;
      this.mode = void 0;
      this.verbose = void 0;
      this.displayedMemory = void 0;
      this.nonDisplayedMemory = void 0;
      this.lastOutputScreen = void 0;
      this.currRollUpRow = void 0;
      this.writeScreen = void 0;
      this.cueStartTime = void 0;
      this.logger = void 0;
      this.chNr = channelNumber;
      this.outputFilter = outputFilter;
      this.mode = null;
      this.verbose = 0;
      this.displayedMemory = new CaptionScreen(logger2);
      this.nonDisplayedMemory = new CaptionScreen(logger2);
      this.lastOutputScreen = new CaptionScreen(logger2);
      this.currRollUpRow = this.displayedMemory.rows[NR_ROWS - 1];
      this.writeScreen = this.displayedMemory;
      this.mode = null;
      this.cueStartTime = null;
      this.logger = logger2;
    }
    reset() {
      this.mode = null;
      this.displayedMemory.reset();
      this.nonDisplayedMemory.reset();
      this.lastOutputScreen.reset();
      this.outputFilter.reset();
      this.currRollUpRow = this.displayedMemory.rows[NR_ROWS - 1];
      this.writeScreen = this.displayedMemory;
      this.mode = null;
      this.cueStartTime = null;
    }
    getHandler() {
      return this.outputFilter;
    }
    setHandler(newHandler) {
      this.outputFilter = newHandler;
    }
    setPAC(pacData) {
      this.writeScreen.setPAC(pacData);
    }
    setBkgData(bkgData) {
      this.writeScreen.setBkgData(bkgData);
    }
    setMode(newMode) {
      if (newMode === this.mode) {
        return;
      }
      this.mode = newMode;
      this.logger.log(2, () => "MODE=" + newMode);
      if (this.mode === "MODE_POP-ON") {
        this.writeScreen = this.nonDisplayedMemory;
      } else {
        this.writeScreen = this.displayedMemory;
        this.writeScreen.reset();
      }
      if (this.mode !== "MODE_ROLL-UP") {
        this.displayedMemory.nrRollUpRows = null;
        this.nonDisplayedMemory.nrRollUpRows = null;
      }
      this.mode = newMode;
    }
    insertChars(chars) {
      for (let i = 0; i < chars.length; i++) {
        this.writeScreen.insertChar(chars[i]);
      }
      const screen = this.writeScreen === this.displayedMemory ? "DISP" : "NON_DISP";
      this.logger.log(2, () => screen + ": " + this.writeScreen.getDisplayText(true));
      if (this.mode === "MODE_PAINT-ON" || this.mode === "MODE_ROLL-UP") {
        this.logger.log(1, () => "DISPLAYED: " + this.displayedMemory.getDisplayText(true));
        this.outputDataUpdate();
      }
    }
    ccRCL() {
      this.logger.log(2, "RCL - Resume Caption Loading");
      this.setMode("MODE_POP-ON");
    }
    ccBS() {
      this.logger.log(2, "BS - BackSpace");
      if (this.mode === "MODE_TEXT") {
        return;
      }
      this.writeScreen.backSpace();
      if (this.writeScreen === this.displayedMemory) {
        this.outputDataUpdate();
      }
    }
    ccAOF() {
    }
    ccAON() {
    }
    ccDER() {
      this.logger.log(2, "DER- Delete to End of Row");
      this.writeScreen.clearToEndOfRow();
      this.outputDataUpdate();
    }
    ccRU(nrRows) {
      this.logger.log(2, "RU(" + nrRows + ") - Roll Up");
      this.writeScreen = this.displayedMemory;
      this.setMode("MODE_ROLL-UP");
      this.writeScreen.setRollUpRows(nrRows);
    }
    ccFON() {
      this.logger.log(2, "FON - Flash On");
      this.writeScreen.setPen({
        flash: true
      });
    }
    ccRDC() {
      this.logger.log(2, "RDC - Resume Direct Captioning");
      this.setMode("MODE_PAINT-ON");
    }
    ccTR() {
      this.logger.log(2, "TR");
      this.setMode("MODE_TEXT");
    }
    ccRTD() {
      this.logger.log(2, "RTD");
      this.setMode("MODE_TEXT");
    }
    ccEDM() {
      this.logger.log(2, "EDM - Erase Displayed Memory");
      this.displayedMemory.reset();
      this.outputDataUpdate(true);
    }
    ccCR() {
      this.logger.log(2, "CR - Carriage Return");
      this.writeScreen.rollUp();
      this.outputDataUpdate(true);
    }
    ccENM() {
      this.logger.log(2, "ENM - Erase Non-displayed Memory");
      this.nonDisplayedMemory.reset();
    }
    ccEOC() {
      this.logger.log(2, "EOC - End Of Caption");
      if (this.mode === "MODE_POP-ON") {
        const tmp = this.displayedMemory;
        this.displayedMemory = this.nonDisplayedMemory;
        this.nonDisplayedMemory = tmp;
        this.writeScreen = this.nonDisplayedMemory;
        this.logger.log(1, () => "DISP: " + this.displayedMemory.getDisplayText());
      }
      this.outputDataUpdate(true);
    }
    ccTO(nrCols) {
      this.logger.log(2, "TO(" + nrCols + ") - Tab Offset");
      this.writeScreen.moveCursor(nrCols);
    }
    ccMIDROW(secondByte) {
      const styles = {
        flash: false
      };
      styles.underline = secondByte % 2 === 1;
      styles.italics = secondByte >= 46;
      if (!styles.italics) {
        const colorIndex = Math.floor(secondByte / 2) - 16;
        const colors = ["white", "green", "blue", "cyan", "red", "yellow", "magenta"];
        styles.foreground = colors[colorIndex];
      } else {
        styles.foreground = "white";
      }
      this.logger.log(2, "MIDROW: " + JSON.stringify(styles));
      this.writeScreen.setPen(styles);
    }
    outputDataUpdate(dispatch = false) {
      const time = this.logger.time;
      if (time === null) {
        return;
      }
      if (this.outputFilter) {
        if (this.cueStartTime === null && !this.displayedMemory.isEmpty()) {
          this.cueStartTime = time;
        } else {
          if (!this.displayedMemory.equals(this.lastOutputScreen)) {
            this.outputFilter.newCue(this.cueStartTime, time, this.lastOutputScreen);
            if (dispatch && this.outputFilter.dispatchCue) {
              this.outputFilter.dispatchCue();
            }
            this.cueStartTime = this.displayedMemory.isEmpty() ? null : time;
          }
        }
        this.lastOutputScreen.copy(this.displayedMemory);
      }
    }
    cueSplitAtTime(t2) {
      if (this.outputFilter) {
        if (!this.displayedMemory.isEmpty()) {
          if (this.outputFilter.newCue) {
            this.outputFilter.newCue(this.cueStartTime, t2, this.displayedMemory);
          }
          this.cueStartTime = t2;
        }
      }
    }
  };
  var Cea608Parser = class {
    constructor(field, out1, out2) {
      this.channels = void 0;
      this.currentChannel = 0;
      this.cmdHistory = createCmdHistory();
      this.logger = void 0;
      const logger2 = this.logger = new CaptionsLogger();
      this.channels = [null, new Cea608Channel(field, out1, logger2), new Cea608Channel(field + 1, out2, logger2)];
    }
    getHandler(channel) {
      return this.channels[channel].getHandler();
    }
    setHandler(channel, newHandler) {
      this.channels[channel].setHandler(newHandler);
    }
    /**
     * Add data for time t in forms of list of bytes (unsigned ints). The bytes are treated as pairs.
     */
    addData(time, byteList) {
      this.logger.time = time;
      for (let i = 0; i < byteList.length; i += 2) {
        const a = byteList[i] & 127;
        const b = byteList[i + 1] & 127;
        let cmdFound = false;
        let charsFound = null;
        if (a === 0 && b === 0) {
          continue;
        } else {
          this.logger.log(3, () => "[" + numArrayToHexArray([byteList[i], byteList[i + 1]]) + "] -> (" + numArrayToHexArray([a, b]) + ")");
        }
        const cmdHistory = this.cmdHistory;
        const isControlCode = a >= 16 && a <= 31;
        if (isControlCode) {
          if (hasCmdRepeated(a, b, cmdHistory)) {
            setLastCmd(null, null, cmdHistory);
            this.logger.log(3, () => "Repeated command (" + numArrayToHexArray([a, b]) + ") is dropped");
            continue;
          }
          setLastCmd(a, b, this.cmdHistory);
          cmdFound = this.parseCmd(a, b);
          if (!cmdFound) {
            cmdFound = this.parseMidrow(a, b);
          }
          if (!cmdFound) {
            cmdFound = this.parsePAC(a, b);
          }
          if (!cmdFound) {
            cmdFound = this.parseBackgroundAttributes(a, b);
          }
        } else {
          setLastCmd(null, null, cmdHistory);
        }
        if (!cmdFound) {
          charsFound = this.parseChars(a, b);
          if (charsFound) {
            const currChNr = this.currentChannel;
            if (currChNr && currChNr > 0) {
              const channel = this.channels[currChNr];
              channel.insertChars(charsFound);
            } else {
              this.logger.log(2, "No channel found yet. TEXT-MODE?");
            }
          }
        }
        if (!cmdFound && !charsFound) {
          this.logger.log(2, () => "Couldn't parse cleaned data " + numArrayToHexArray([a, b]) + " orig: " + numArrayToHexArray([byteList[i], byteList[i + 1]]));
        }
      }
    }
    /**
     * Parse Command.
     * @returns True if a command was found
     */
    parseCmd(a, b) {
      const cond1 = (a === 20 || a === 28 || a === 21 || a === 29) && b >= 32 && b <= 47;
      const cond2 = (a === 23 || a === 31) && b >= 33 && b <= 35;
      if (!(cond1 || cond2)) {
        return false;
      }
      const chNr = a === 20 || a === 21 || a === 23 ? 1 : 2;
      const channel = this.channels[chNr];
      if (a === 20 || a === 21 || a === 28 || a === 29) {
        if (b === 32) {
          channel.ccRCL();
        } else if (b === 33) {
          channel.ccBS();
        } else if (b === 34) {
          channel.ccAOF();
        } else if (b === 35) {
          channel.ccAON();
        } else if (b === 36) {
          channel.ccDER();
        } else if (b === 37) {
          channel.ccRU(2);
        } else if (b === 38) {
          channel.ccRU(3);
        } else if (b === 39) {
          channel.ccRU(4);
        } else if (b === 40) {
          channel.ccFON();
        } else if (b === 41) {
          channel.ccRDC();
        } else if (b === 42) {
          channel.ccTR();
        } else if (b === 43) {
          channel.ccRTD();
        } else if (b === 44) {
          channel.ccEDM();
        } else if (b === 45) {
          channel.ccCR();
        } else if (b === 46) {
          channel.ccENM();
        } else if (b === 47) {
          channel.ccEOC();
        }
      } else {
        channel.ccTO(b - 32);
      }
      this.currentChannel = chNr;
      return true;
    }
    /**
     * Parse midrow styling command
     */
    parseMidrow(a, b) {
      let chNr = 0;
      if ((a === 17 || a === 25) && b >= 32 && b <= 47) {
        if (a === 17) {
          chNr = 1;
        } else {
          chNr = 2;
        }
        if (chNr !== this.currentChannel) {
          this.logger.log(0, "Mismatch channel in midrow parsing");
          return false;
        }
        const channel = this.channels[chNr];
        if (!channel) {
          return false;
        }
        channel.ccMIDROW(b);
        this.logger.log(3, () => "MIDROW (" + numArrayToHexArray([a, b]) + ")");
        return true;
      }
      return false;
    }
    /**
     * Parse Preable Access Codes (Table 53).
     * @returns {Boolean} Tells if PAC found
     */
    parsePAC(a, b) {
      let row;
      const case1 = (a >= 17 && a <= 23 || a >= 25 && a <= 31) && b >= 64 && b <= 127;
      const case2 = (a === 16 || a === 24) && b >= 64 && b <= 95;
      if (!(case1 || case2)) {
        return false;
      }
      const chNr = a <= 23 ? 1 : 2;
      if (b >= 64 && b <= 95) {
        row = chNr === 1 ? rowsLowCh1[a] : rowsLowCh2[a];
      } else {
        row = chNr === 1 ? rowsHighCh1[a] : rowsHighCh2[a];
      }
      const channel = this.channels[chNr];
      if (!channel) {
        return false;
      }
      channel.setPAC(this.interpretPAC(row, b));
      this.currentChannel = chNr;
      return true;
    }
    /**
     * Interpret the second byte of the pac, and return the information.
     * @returns pacData with style parameters
     */
    interpretPAC(row, byte) {
      let pacIndex;
      const pacData = {
        color: null,
        italics: false,
        indent: null,
        underline: false,
        row
      };
      if (byte > 95) {
        pacIndex = byte - 96;
      } else {
        pacIndex = byte - 64;
      }
      pacData.underline = (pacIndex & 1) === 1;
      if (pacIndex <= 13) {
        pacData.color = ["white", "green", "blue", "cyan", "red", "yellow", "magenta", "white"][Math.floor(pacIndex / 2)];
      } else if (pacIndex <= 15) {
        pacData.italics = true;
        pacData.color = "white";
      } else {
        pacData.indent = Math.floor((pacIndex - 16) / 2) * 4;
      }
      return pacData;
    }
    /**
     * Parse characters.
     * @returns An array with 1 to 2 codes corresponding to chars, if found. null otherwise.
     */
    parseChars(a, b) {
      let channelNr;
      let charCodes = null;
      let charCode1 = null;
      if (a >= 25) {
        channelNr = 2;
        charCode1 = a - 8;
      } else {
        channelNr = 1;
        charCode1 = a;
      }
      if (charCode1 >= 17 && charCode1 <= 19) {
        let oneCode;
        if (charCode1 === 17) {
          oneCode = b + 80;
        } else if (charCode1 === 18) {
          oneCode = b + 112;
        } else {
          oneCode = b + 144;
        }
        this.logger.log(2, () => "Special char '" + getCharForByte(oneCode) + "' in channel " + channelNr);
        charCodes = [oneCode];
      } else if (a >= 32 && a <= 127) {
        charCodes = b === 0 ? [a] : [a, b];
      }
      if (charCodes) {
        this.logger.log(3, () => "Char codes =  " + numArrayToHexArray(charCodes).join(","));
      }
      return charCodes;
    }
    /**
     * Parse extended background attributes as well as new foreground color black.
     * @returns True if background attributes are found
     */
    parseBackgroundAttributes(a, b) {
      const case1 = (a === 16 || a === 24) && b >= 32 && b <= 47;
      const case2 = (a === 23 || a === 31) && b >= 45 && b <= 47;
      if (!(case1 || case2)) {
        return false;
      }
      let index;
      const bkgData = {};
      if (a === 16 || a === 24) {
        index = Math.floor((b - 32) / 2);
        bkgData.background = backgroundColors[index];
        if (b % 2 === 1) {
          bkgData.background = bkgData.background + "_semi";
        }
      } else if (b === 45) {
        bkgData.background = "transparent";
      } else {
        bkgData.foreground = "black";
        if (b === 47) {
          bkgData.underline = true;
        }
      }
      const chNr = a <= 23 ? 1 : 2;
      const channel = this.channels[chNr];
      channel.setBkgData(bkgData);
      return true;
    }
    /**
     * Reset state of parser and its channels.
     */
    reset() {
      for (let i = 0; i < Object.keys(this.channels).length; i++) {
        const channel = this.channels[i];
        if (channel) {
          channel.reset();
        }
      }
      setLastCmd(null, null, this.cmdHistory);
    }
    /**
     * Trigger the generation of a cue, and the start of a new one if displayScreens are not empty.
     */
    cueSplitAtTime(t2) {
      for (let i = 0; i < this.channels.length; i++) {
        const channel = this.channels[i];
        if (channel) {
          channel.cueSplitAtTime(t2);
        }
      }
    }
  };
  function setLastCmd(a, b, cmdHistory) {
    cmdHistory.a = a;
    cmdHistory.b = b;
  }
  function hasCmdRepeated(a, b, cmdHistory) {
    return cmdHistory.a === a && cmdHistory.b === b;
  }
  function createCmdHistory() {
    return {
      a: null,
      b: null
    };
  }
  var OutputFilter = class {
    constructor(timelineController, trackName) {
      this.timelineController = void 0;
      this.cueRanges = [];
      this.trackName = void 0;
      this.startTime = null;
      this.endTime = null;
      this.screen = null;
      this.timelineController = timelineController;
      this.trackName = trackName;
    }
    dispatchCue() {
      if (this.startTime === null) {
        return;
      }
      this.timelineController.addCues(this.trackName, this.startTime, this.endTime, this.screen, this.cueRanges);
      this.startTime = null;
    }
    newCue(startTime, endTime, screen) {
      if (this.startTime === null || this.startTime > startTime) {
        this.startTime = startTime;
      }
      this.endTime = endTime;
      this.screen = screen;
      this.timelineController.createCaptionsTrack(this.trackName);
    }
    reset() {
      this.cueRanges = [];
      this.startTime = null;
    }
  };
  var VTTCue = function() {
    if (optionalSelf != null && optionalSelf.VTTCue) {
      return self.VTTCue;
    }
    const AllowedDirections = ["", "lr", "rl"];
    const AllowedAlignments = ["start", "middle", "end", "left", "right"];
    function isAllowedValue(allowed, value) {
      if (typeof value !== "string") {
        return false;
      }
      if (!Array.isArray(allowed)) {
        return false;
      }
      const lcValue = value.toLowerCase();
      if (~allowed.indexOf(lcValue)) {
        return lcValue;
      }
      return false;
    }
    function findDirectionSetting(value) {
      return isAllowedValue(AllowedDirections, value);
    }
    function findAlignSetting(value) {
      return isAllowedValue(AllowedAlignments, value);
    }
    function extend(obj, ...rest) {
      let i = 1;
      for (; i < arguments.length; i++) {
        const cobj = arguments[i];
        for (const p in cobj) {
          obj[p] = cobj[p];
        }
      }
      return obj;
    }
    function VTTCue2(startTime, endTime, text) {
      const cue = this;
      const baseObj = {
        enumerable: true
      };
      cue.hasBeenReset = false;
      let _id2 = "";
      let _pauseOnExit = false;
      let _startTime2 = startTime;
      let _endTime = endTime;
      let _text = text;
      let _region = null;
      let _vertical = "";
      let _snapToLines = true;
      let _line = "auto";
      let _lineAlign = "start";
      let _position = 50;
      let _positionAlign = "middle";
      let _size = 50;
      let _align = "middle";
      Object.defineProperty(cue, "id", extend({}, baseObj, {
        get: function() {
          return _id2;
        },
        set: function(value) {
          _id2 = "" + value;
        }
      }));
      Object.defineProperty(cue, "pauseOnExit", extend({}, baseObj, {
        get: function() {
          return _pauseOnExit;
        },
        set: function(value) {
          _pauseOnExit = !!value;
        }
      }));
      Object.defineProperty(cue, "startTime", extend({}, baseObj, {
        get: function() {
          return _startTime2;
        },
        set: function(value) {
          if (typeof value !== "number") {
            throw new TypeError("Start time must be set to a number.");
          }
          _startTime2 = value;
          this.hasBeenReset = true;
        }
      }));
      Object.defineProperty(cue, "endTime", extend({}, baseObj, {
        get: function() {
          return _endTime;
        },
        set: function(value) {
          if (typeof value !== "number") {
            throw new TypeError("End time must be set to a number.");
          }
          _endTime = value;
          this.hasBeenReset = true;
        }
      }));
      Object.defineProperty(cue, "text", extend({}, baseObj, {
        get: function() {
          return _text;
        },
        set: function(value) {
          _text = "" + value;
          this.hasBeenReset = true;
        }
      }));
      Object.defineProperty(cue, "region", extend({}, baseObj, {
        get: function() {
          return _region;
        },
        set: function(value) {
          _region = value;
          this.hasBeenReset = true;
        }
      }));
      Object.defineProperty(cue, "vertical", extend({}, baseObj, {
        get: function() {
          return _vertical;
        },
        set: function(value) {
          const setting = findDirectionSetting(value);
          if (setting === false) {
            throw new SyntaxError("An invalid or illegal string was specified.");
          }
          _vertical = setting;
          this.hasBeenReset = true;
        }
      }));
      Object.defineProperty(cue, "snapToLines", extend({}, baseObj, {
        get: function() {
          return _snapToLines;
        },
        set: function(value) {
          _snapToLines = !!value;
          this.hasBeenReset = true;
        }
      }));
      Object.defineProperty(cue, "line", extend({}, baseObj, {
        get: function() {
          return _line;
        },
        set: function(value) {
          if (typeof value !== "number" && value !== "auto") {
            throw new SyntaxError("An invalid number or illegal string was specified.");
          }
          _line = value;
          this.hasBeenReset = true;
        }
      }));
      Object.defineProperty(cue, "lineAlign", extend({}, baseObj, {
        get: function() {
          return _lineAlign;
        },
        set: function(value) {
          const setting = findAlignSetting(value);
          if (!setting) {
            throw new SyntaxError("An invalid or illegal string was specified.");
          }
          _lineAlign = setting;
          this.hasBeenReset = true;
        }
      }));
      Object.defineProperty(cue, "position", extend({}, baseObj, {
        get: function() {
          return _position;
        },
        set: function(value) {
          if (value < 0 || value > 100) {
            throw new Error("Position must be between 0 and 100.");
          }
          _position = value;
          this.hasBeenReset = true;
        }
      }));
      Object.defineProperty(cue, "positionAlign", extend({}, baseObj, {
        get: function() {
          return _positionAlign;
        },
        set: function(value) {
          const setting = findAlignSetting(value);
          if (!setting) {
            throw new SyntaxError("An invalid or illegal string was specified.");
          }
          _positionAlign = setting;
          this.hasBeenReset = true;
        }
      }));
      Object.defineProperty(cue, "size", extend({}, baseObj, {
        get: function() {
          return _size;
        },
        set: function(value) {
          if (value < 0 || value > 100) {
            throw new Error("Size must be between 0 and 100.");
          }
          _size = value;
          this.hasBeenReset = true;
        }
      }));
      Object.defineProperty(cue, "align", extend({}, baseObj, {
        get: function() {
          return _align;
        },
        set: function(value) {
          const setting = findAlignSetting(value);
          if (!setting) {
            throw new SyntaxError("An invalid or illegal string was specified.");
          }
          _align = setting;
          this.hasBeenReset = true;
        }
      }));
      cue.displayState = void 0;
    }
    VTTCue2.prototype.getCueAsHTML = function() {
      const WebVTT = self.WebVTT;
      return WebVTT.convertCueToDOMTree(self, this.text);
    };
    return VTTCue2;
  }();
  var StringDecoder = class {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    decode(data, options) {
      if (!data) {
        return "";
      }
      if (typeof data !== "string") {
        throw new Error("Error - expected string data.");
      }
      return decodeURIComponent(encodeURIComponent(data));
    }
  };
  function parseTimeStamp(input) {
    function computeSeconds(h, m2, s, f) {
      return (h | 0) * 3600 + (m2 | 0) * 60 + (s | 0) + parseFloat(f || 0);
    }
    const m = input.match(/^(?:(\d+):)?(\d{2}):(\d{2})(\.\d+)?/);
    if (!m) {
      return null;
    }
    if (parseFloat(m[2]) > 59) {
      return computeSeconds(m[2], m[3], 0, m[4]);
    }
    return computeSeconds(m[1], m[2], m[3], m[4]);
  }
  var Settings = class {
    constructor() {
      this.values = /* @__PURE__ */ Object.create(null);
    }
    // Only accept the first assignment to any key.
    set(k, v) {
      if (!this.get(k) && v !== "") {
        this.values[k] = v;
      }
    }
    // Return the value for a key, or a default value.
    // If 'defaultKey' is passed then 'dflt' is assumed to be an object with
    // a number of possible default values as properties where 'defaultKey' is
    // the key of the property that will be chosen; otherwise it's assumed to be
    // a single value.
    get(k, dflt, defaultKey) {
      if (defaultKey) {
        return this.has(k) ? this.values[k] : dflt[defaultKey];
      }
      return this.has(k) ? this.values[k] : dflt;
    }
    // Check whether we have a value for a key.
    has(k) {
      return k in this.values;
    }
    // Accept a setting if its one of the given alternatives.
    alt(k, v, a) {
      for (let n = 0; n < a.length; ++n) {
        if (v === a[n]) {
          this.set(k, v);
          break;
        }
      }
    }
    // Accept a setting if its a valid (signed) integer.
    integer(k, v) {
      if (/^-?\d+$/.test(v)) {
        this.set(k, parseInt(v, 10));
      }
    }
    // Accept a setting if its a valid percentage.
    percent(k, v) {
      if (/^([\d]{1,3})(\.[\d]*)?%$/.test(v)) {
        const percent = parseFloat(v);
        if (percent >= 0 && percent <= 100) {
          this.set(k, percent);
          return true;
        }
      }
      return false;
    }
  };
  function parseOptions(input, callback, keyValueDelim, groupDelim) {
    const groups = groupDelim ? input.split(groupDelim) : [input];
    for (const i in groups) {
      if (typeof groups[i] !== "string") {
        continue;
      }
      const kv = groups[i].split(keyValueDelim);
      if (kv.length !== 2) {
        continue;
      }
      const k = kv[0];
      const v = kv[1];
      callback(k, v);
    }
  }
  var defaults = new VTTCue(0, 0, "");
  var center = defaults.align === "middle" ? "middle" : "center";
  function parseCue(input, cue, regionList) {
    const oInput = input;
    function consumeTimeStamp() {
      const ts = parseTimeStamp(input);
      if (ts === null) {
        throw new Error("Malformed timestamp: " + oInput);
      }
      input = input.replace(/^[^\sa-zA-Z-]+/, "");
      return ts;
    }
    function consumeCueSettings(input2, cue2) {
      const settings = new Settings();
      parseOptions(input2, function(k, v) {
        let vals;
        switch (k) {
          case "region":
            for (let i = regionList.length - 1; i >= 0; i--) {
              if (regionList[i].id === v) {
                settings.set(k, regionList[i].region);
                break;
              }
            }
            break;
          case "vertical":
            settings.alt(k, v, ["rl", "lr"]);
            break;
          case "line":
            vals = v.split(",");
            settings.integer(k, vals[0]);
            if (settings.percent(k, vals[0])) {
              settings.set("snapToLines", false);
            }
            settings.alt(k, vals[0], ["auto"]);
            if (vals.length === 2) {
              settings.alt("lineAlign", vals[1], ["start", center, "end"]);
            }
            break;
          case "position":
            vals = v.split(",");
            settings.percent(k, vals[0]);
            if (vals.length === 2) {
              settings.alt("positionAlign", vals[1], ["start", center, "end", "line-left", "line-right", "auto"]);
            }
            break;
          case "size":
            settings.percent(k, v);
            break;
          case "align":
            settings.alt(k, v, ["start", center, "end", "left", "right"]);
            break;
        }
      }, /:/, /\s/);
      cue2.region = settings.get("region", null);
      cue2.vertical = settings.get("vertical", "");
      let line = settings.get("line", "auto");
      if (line === "auto" && defaults.line === -1) {
        line = -1;
      }
      cue2.line = line;
      cue2.lineAlign = settings.get("lineAlign", "start");
      cue2.snapToLines = settings.get("snapToLines", true);
      cue2.size = settings.get("size", 100);
      cue2.align = settings.get("align", center);
      let position = settings.get("position", "auto");
      if (position === "auto" && defaults.position === 50) {
        position = cue2.align === "start" || cue2.align === "left" ? 0 : cue2.align === "end" || cue2.align === "right" ? 100 : 50;
      }
      cue2.position = position;
    }
    function skipWhitespace() {
      input = input.replace(/^\s+/, "");
    }
    skipWhitespace();
    cue.startTime = consumeTimeStamp();
    skipWhitespace();
    if (input.slice(0, 3) !== "-->") {
      throw new Error("Malformed time stamp (time stamps must be separated by '-->'): " + oInput);
    }
    input = input.slice(3);
    skipWhitespace();
    cue.endTime = consumeTimeStamp();
    skipWhitespace();
    consumeCueSettings(input, cue);
  }
  function fixLineBreaks(input) {
    return input.replace(/<br(?: \/)?>/gi, "\n");
  }
  var VTTParser = class {
    constructor() {
      this.state = "INITIAL";
      this.buffer = "";
      this.decoder = new StringDecoder();
      this.regionList = [];
      this.cue = null;
      this.oncue = void 0;
      this.onparsingerror = void 0;
      this.onflush = void 0;
    }
    parse(data) {
      const _this = this;
      if (data) {
        _this.buffer += _this.decoder.decode(data, {
          stream: true
        });
      }
      function collectNextLine() {
        let buffer = _this.buffer;
        let pos = 0;
        buffer = fixLineBreaks(buffer);
        while (pos < buffer.length && buffer[pos] !== "\r" && buffer[pos] !== "\n") {
          ++pos;
        }
        const line = buffer.slice(0, pos);
        if (buffer[pos] === "\r") {
          ++pos;
        }
        if (buffer[pos] === "\n") {
          ++pos;
        }
        _this.buffer = buffer.slice(pos);
        return line;
      }
      function parseHeader2(input) {
        parseOptions(input, function(k, v) {
        }, /:/);
      }
      try {
        let line = "";
        if (_this.state === "INITIAL") {
          if (!/\r\n|\n/.test(_this.buffer)) {
            return this;
          }
          line = collectNextLine();
          const m = line.match(/^(ï»¿)?WEBVTT([ \t].*)?$/);
          if (!(m != null && m[0])) {
            throw new Error("Malformed WebVTT signature.");
          }
          _this.state = "HEADER";
        }
        let alreadyCollectedLine = false;
        while (_this.buffer) {
          if (!/\r\n|\n/.test(_this.buffer)) {
            return this;
          }
          if (!alreadyCollectedLine) {
            line = collectNextLine();
          } else {
            alreadyCollectedLine = false;
          }
          switch (_this.state) {
            case "HEADER":
              if (/:/.test(line)) {
                parseHeader2(line);
              } else if (!line) {
                _this.state = "ID";
              }
              continue;
            case "NOTE":
              if (!line) {
                _this.state = "ID";
              }
              continue;
            case "ID":
              if (/^NOTE($|[ \t])/.test(line)) {
                _this.state = "NOTE";
                break;
              }
              if (!line) {
                continue;
              }
              _this.cue = new VTTCue(0, 0, "");
              _this.state = "CUE";
              if (line.indexOf("-->") === -1) {
                _this.cue.id = line;
                continue;
              }
            // Process line as start of a cue.
            /* falls through */
            case "CUE":
              if (!_this.cue) {
                _this.state = "BADCUE";
                continue;
              }
              try {
                parseCue(line, _this.cue, _this.regionList);
              } catch (e) {
                _this.cue = null;
                _this.state = "BADCUE";
                continue;
              }
              _this.state = "CUETEXT";
              continue;
            case "CUETEXT":
              {
                const hasSubstring = line.indexOf("-->") !== -1;
                if (!line || hasSubstring && (alreadyCollectedLine = true)) {
                  if (_this.oncue && _this.cue) {
                    _this.oncue(_this.cue);
                  }
                  _this.cue = null;
                  _this.state = "ID";
                  continue;
                }
                if (_this.cue === null) {
                  continue;
                }
                if (_this.cue.text) {
                  _this.cue.text += "\n";
                }
                _this.cue.text += line;
              }
              continue;
            case "BADCUE":
              if (!line) {
                _this.state = "ID";
              }
          }
        }
      } catch (e) {
        if (_this.state === "CUETEXT" && _this.cue && _this.oncue) {
          _this.oncue(_this.cue);
        }
        _this.cue = null;
        _this.state = _this.state === "INITIAL" ? "BADWEBVTT" : "BADCUE";
      }
      return this;
    }
    flush() {
      const _this = this;
      try {
        if (_this.cue || _this.state === "HEADER") {
          _this.buffer += "\n\n";
          _this.parse();
        }
        if (_this.state === "INITIAL" || _this.state === "BADWEBVTT") {
          throw new Error("Malformed WebVTT signature.");
        }
      } catch (e) {
        if (_this.onparsingerror) {
          _this.onparsingerror(e);
        }
      }
      if (_this.onflush) {
        _this.onflush();
      }
      return this;
    }
  };
  var LINEBREAKS = /\r\n|\n\r|\n|\r/g;
  var startsWith = function startsWith2(inputString, searchString, position = 0) {
    return inputString.slice(position, position + searchString.length) === searchString;
  };
  var cueString2millis = function cueString2millis2(timeString) {
    let ts = parseInt(timeString.slice(-3));
    const secs = parseInt(timeString.slice(-6, -4));
    const mins = parseInt(timeString.slice(-9, -7));
    const hours = timeString.length > 9 ? parseInt(timeString.substring(0, timeString.indexOf(":"))) : 0;
    if (!isFiniteNumber(ts) || !isFiniteNumber(secs) || !isFiniteNumber(mins) || !isFiniteNumber(hours)) {
      throw Error(`Malformed X-TIMESTAMP-MAP: Local:${timeString}`);
    }
    ts += 1e3 * secs;
    ts += 60 * 1e3 * mins;
    ts += 60 * 60 * 1e3 * hours;
    return ts;
  };
  var hash = function hash2(text) {
    let _hash = 5381;
    let i = text.length;
    while (i) {
      _hash = _hash * 33 ^ text.charCodeAt(--i);
    }
    return (_hash >>> 0).toString();
  };
  function generateCueId(startTime, endTime, text) {
    return hash(startTime.toString()) + hash(endTime.toString()) + hash(text);
  }
  var calculateOffset = function calculateOffset2(vttCCs, cc, presentationTime) {
    let currCC = vttCCs[cc];
    let prevCC = vttCCs[currCC.prevCC];
    if (!prevCC || !prevCC.new && currCC.new) {
      vttCCs.ccOffset = vttCCs.presentationOffset = currCC.start;
      currCC.new = false;
      return;
    }
    while ((_prevCC = prevCC) != null && _prevCC.new) {
      var _prevCC;
      vttCCs.ccOffset += currCC.start - prevCC.start;
      currCC.new = false;
      currCC = prevCC;
      prevCC = vttCCs[currCC.prevCC];
    }
    vttCCs.presentationOffset = presentationTime;
  };
  function parseWebVTT(vttByteArray, initPTS, vttCCs, cc, timeOffset, callBack, errorCallBack) {
    const parser = new VTTParser();
    const vttLines = utf8ArrayToStr(new Uint8Array(vttByteArray)).trim().replace(LINEBREAKS, "\n").split("\n");
    const cues = [];
    const init90kHz = initPTS ? toMpegTsClockFromTimescale(initPTS.baseTime, initPTS.timescale) : 0;
    let cueTime = "00:00.000";
    let timestampMapMPEGTS = 0;
    let timestampMapLOCAL = 0;
    let parsingError;
    let inHeader = true;
    parser.oncue = function(cue) {
      const currCC = vttCCs[cc];
      let cueOffset = vttCCs.ccOffset;
      const webVttMpegTsMapOffset = (timestampMapMPEGTS - init90kHz) / 9e4;
      if (currCC != null && currCC.new) {
        if (timestampMapLOCAL !== void 0) {
          cueOffset = vttCCs.ccOffset = currCC.start;
        } else {
          calculateOffset(vttCCs, cc, webVttMpegTsMapOffset);
        }
      }
      if (webVttMpegTsMapOffset) {
        if (!initPTS) {
          parsingError = new Error("Missing initPTS for VTT MPEGTS");
          return;
        }
        cueOffset = webVttMpegTsMapOffset - vttCCs.presentationOffset;
      }
      const duration = cue.endTime - cue.startTime;
      const startTime = normalizePts((cue.startTime + cueOffset - timestampMapLOCAL) * 9e4, timeOffset * 9e4) / 9e4;
      cue.startTime = Math.max(startTime, 0);
      cue.endTime = Math.max(startTime + duration, 0);
      const text = cue.text.trim();
      cue.text = decodeURIComponent(encodeURIComponent(text));
      if (!cue.id) {
        cue.id = generateCueId(cue.startTime, cue.endTime, text);
      }
      if (cue.endTime > 0) {
        cues.push(cue);
      }
    };
    parser.onparsingerror = function(error) {
      parsingError = error;
    };
    parser.onflush = function() {
      if (parsingError) {
        errorCallBack(parsingError);
        return;
      }
      callBack(cues);
    };
    vttLines.forEach((line) => {
      if (inHeader) {
        if (startsWith(line, "X-TIMESTAMP-MAP=")) {
          inHeader = false;
          line.slice(16).split(",").forEach((timestamp) => {
            if (startsWith(timestamp, "LOCAL:")) {
              cueTime = timestamp.slice(6);
            } else if (startsWith(timestamp, "MPEGTS:")) {
              timestampMapMPEGTS = parseInt(timestamp.slice(7));
            }
          });
          try {
            timestampMapLOCAL = cueString2millis(cueTime) / 1e3;
          } catch (error) {
            parsingError = error;
          }
          return;
        } else if (line === "") {
          inHeader = false;
        }
      }
      parser.parse(line + "\n");
    });
    parser.flush();
  }
  var IMSC1_CODEC = "stpp.ttml.im1t";
  var HMSF_REGEX = /^(\d{2,}):(\d{2}):(\d{2}):(\d{2})\.?(\d+)?$/;
  var TIME_UNIT_REGEX = /^(\d*(?:\.\d*)?)(h|m|s|ms|f|t)$/;
  var textAlignToLineAlign = {
    left: "start",
    center: "center",
    right: "end",
    start: "start",
    end: "end"
  };
  function parseIMSC1(payload, initPTS, callBack, errorCallBack) {
    const results = findBox(new Uint8Array(payload), ["mdat"]);
    if (results.length === 0) {
      errorCallBack(new Error("Could not parse IMSC1 mdat"));
      return;
    }
    const ttmlList = results.map((mdat) => utf8ArrayToStr(mdat));
    const syncTime = toTimescaleFromScale(initPTS.baseTime, 1, initPTS.timescale);
    try {
      ttmlList.forEach((ttml) => callBack(parseTTML(ttml, syncTime)));
    } catch (error) {
      errorCallBack(error);
    }
  }
  function parseTTML(ttml, syncTime) {
    const parser = new DOMParser();
    const xmlDoc = parser.parseFromString(ttml, "text/xml");
    const tt = xmlDoc.getElementsByTagName("tt")[0];
    if (!tt) {
      throw new Error("Invalid ttml");
    }
    const defaultRateInfo = {
      frameRate: 30,
      subFrameRate: 1,
      frameRateMultiplier: 0,
      tickRate: 0
    };
    const rateInfo = Object.keys(defaultRateInfo).reduce((result, key) => {
      result[key] = tt.getAttribute(`ttp:${key}`) || defaultRateInfo[key];
      return result;
    }, {});
    const trim = tt.getAttribute("xml:space") !== "preserve";
    const styleElements = collectionToDictionary(getElementCollection(tt, "styling", "style"));
    const regionElements = collectionToDictionary(getElementCollection(tt, "layout", "region"));
    const cueElements = getElementCollection(tt, "body", "[begin]");
    return [].map.call(cueElements, (cueElement) => {
      const cueText = getTextContent(cueElement, trim);
      if (!cueText || !cueElement.hasAttribute("begin")) {
        return null;
      }
      const startTime = parseTtmlTime(cueElement.getAttribute("begin"), rateInfo);
      const duration = parseTtmlTime(cueElement.getAttribute("dur"), rateInfo);
      let endTime = parseTtmlTime(cueElement.getAttribute("end"), rateInfo);
      if (startTime === null) {
        throw timestampParsingError(cueElement);
      }
      if (endTime === null) {
        if (duration === null) {
          throw timestampParsingError(cueElement);
        }
        endTime = startTime + duration;
      }
      const cue = new VTTCue(startTime - syncTime, endTime - syncTime, cueText);
      cue.id = generateCueId(cue.startTime, cue.endTime, cue.text);
      const region = regionElements[cueElement.getAttribute("region")];
      const style = styleElements[cueElement.getAttribute("style")];
      const styles = getTtmlStyles(region, style, styleElements);
      const {
        textAlign
      } = styles;
      if (textAlign) {
        const lineAlign = textAlignToLineAlign[textAlign];
        if (lineAlign) {
          cue.lineAlign = lineAlign;
        }
        cue.align = textAlign;
      }
      _extends(cue, styles);
      return cue;
    }).filter((cue) => cue !== null);
  }
  function getElementCollection(fromElement, parentName, childName) {
    const parent = fromElement.getElementsByTagName(parentName)[0];
    if (parent) {
      return [].slice.call(parent.querySelectorAll(childName));
    }
    return [];
  }
  function collectionToDictionary(elementsWithId) {
    return elementsWithId.reduce((dict, element) => {
      const id = element.getAttribute("xml:id");
      if (id) {
        dict[id] = element;
      }
      return dict;
    }, {});
  }
  function getTextContent(element, trim) {
    return [].slice.call(element.childNodes).reduce((str, node, i) => {
      var _node$childNodes;
      if (node.nodeName === "br" && i) {
        return str + "\n";
      }
      if ((_node$childNodes = node.childNodes) != null && _node$childNodes.length) {
        return getTextContent(node, trim);
      } else if (trim) {
        return str + node.textContent.trim().replace(/\s+/g, " ");
      }
      return str + node.textContent;
    }, "");
  }
  function getTtmlStyles(region, style, styleElements) {
    const ttsNs = "http://www.w3.org/ns/ttml#styling";
    let regionStyle = null;
    const styleAttributes = [
      "displayAlign",
      "textAlign",
      "color",
      "backgroundColor",
      "fontSize",
      "fontFamily"
      // 'fontWeight',
      // 'lineHeight',
      // 'wrapOption',
      // 'fontStyle',
      // 'direction',
      // 'writingMode'
    ];
    const regionStyleName = region != null && region.hasAttribute("style") ? region.getAttribute("style") : null;
    if (regionStyleName && styleElements.hasOwnProperty(regionStyleName)) {
      regionStyle = styleElements[regionStyleName];
    }
    return styleAttributes.reduce((styles, name) => {
      const value = getAttributeNS(style, ttsNs, name) || getAttributeNS(region, ttsNs, name) || getAttributeNS(regionStyle, ttsNs, name);
      if (value) {
        styles[name] = value;
      }
      return styles;
    }, {});
  }
  function getAttributeNS(element, ns, name) {
    if (!element) {
      return null;
    }
    return element.hasAttributeNS(ns, name) ? element.getAttributeNS(ns, name) : null;
  }
  function timestampParsingError(node) {
    return new Error(`Could not parse ttml timestamp ${node}`);
  }
  function parseTtmlTime(timeAttributeValue, rateInfo) {
    if (!timeAttributeValue) {
      return null;
    }
    let seconds = parseTimeStamp(timeAttributeValue);
    if (seconds === null) {
      if (HMSF_REGEX.test(timeAttributeValue)) {
        seconds = parseHoursMinutesSecondsFrames(timeAttributeValue, rateInfo);
      } else if (TIME_UNIT_REGEX.test(timeAttributeValue)) {
        seconds = parseTimeUnits(timeAttributeValue, rateInfo);
      }
    }
    return seconds;
  }
  function parseHoursMinutesSecondsFrames(timeAttributeValue, rateInfo) {
    const m = HMSF_REGEX.exec(timeAttributeValue);
    const frames = (m[4] | 0) + (m[5] | 0) / rateInfo.subFrameRate;
    return (m[1] | 0) * 3600 + (m[2] | 0) * 60 + (m[3] | 0) + frames / rateInfo.frameRate;
  }
  function parseTimeUnits(timeAttributeValue, rateInfo) {
    const m = TIME_UNIT_REGEX.exec(timeAttributeValue);
    const value = Number(m[1]);
    const unit = m[2];
    switch (unit) {
      case "h":
        return value * 3600;
      case "m":
        return value * 60;
      case "ms":
        return value * 1e3;
      case "f":
        return value / rateInfo.frameRate;
      case "t":
        return value / rateInfo.tickRate;
    }
    return value;
  }
  var TimelineController = class {
    constructor(hls) {
      this.hls = void 0;
      this.media = null;
      this.config = void 0;
      this.enabled = true;
      this.Cues = void 0;
      this.textTracks = [];
      this.tracks = [];
      this.initPTS = [];
      this.unparsedVttFrags = [];
      this.captionsTracks = {};
      this.nonNativeCaptionsTracks = {};
      this.cea608Parser1 = void 0;
      this.cea608Parser2 = void 0;
      this.lastCc = -1;
      this.lastSn = -1;
      this.lastPartIndex = -1;
      this.prevCC = -1;
      this.vttCCs = newVTTCCs();
      this.captionsProperties = void 0;
      this.hls = hls;
      this.config = hls.config;
      this.Cues = hls.config.cueHandler;
      this.captionsProperties = {
        textTrack1: {
          label: this.config.captionsTextTrack1Label,
          languageCode: this.config.captionsTextTrack1LanguageCode
        },
        textTrack2: {
          label: this.config.captionsTextTrack2Label,
          languageCode: this.config.captionsTextTrack2LanguageCode
        },
        textTrack3: {
          label: this.config.captionsTextTrack3Label,
          languageCode: this.config.captionsTextTrack3LanguageCode
        },
        textTrack4: {
          label: this.config.captionsTextTrack4Label,
          languageCode: this.config.captionsTextTrack4LanguageCode
        }
      };
      hls.on(Events2.MEDIA_ATTACHING, this.onMediaAttaching, this);
      hls.on(Events2.MEDIA_DETACHING, this.onMediaDetaching, this);
      hls.on(Events2.MANIFEST_LOADING, this.onManifestLoading, this);
      hls.on(Events2.MANIFEST_LOADED, this.onManifestLoaded, this);
      hls.on(Events2.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this);
      hls.on(Events2.FRAG_LOADING, this.onFragLoading, this);
      hls.on(Events2.FRAG_LOADED, this.onFragLoaded, this);
      hls.on(Events2.FRAG_PARSING_USERDATA, this.onFragParsingUserdata, this);
      hls.on(Events2.FRAG_DECRYPTED, this.onFragDecrypted, this);
      hls.on(Events2.INIT_PTS_FOUND, this.onInitPtsFound, this);
      hls.on(Events2.SUBTITLE_TRACKS_CLEARED, this.onSubtitleTracksCleared, this);
      hls.on(Events2.BUFFER_FLUSHING, this.onBufferFlushing, this);
    }
    destroy() {
      const {
        hls
      } = this;
      hls.off(Events2.MEDIA_ATTACHING, this.onMediaAttaching, this);
      hls.off(Events2.MEDIA_DETACHING, this.onMediaDetaching, this);
      hls.off(Events2.MANIFEST_LOADING, this.onManifestLoading, this);
      hls.off(Events2.MANIFEST_LOADED, this.onManifestLoaded, this);
      hls.off(Events2.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this);
      hls.off(Events2.FRAG_LOADING, this.onFragLoading, this);
      hls.off(Events2.FRAG_LOADED, this.onFragLoaded, this);
      hls.off(Events2.FRAG_PARSING_USERDATA, this.onFragParsingUserdata, this);
      hls.off(Events2.FRAG_DECRYPTED, this.onFragDecrypted, this);
      hls.off(Events2.INIT_PTS_FOUND, this.onInitPtsFound, this);
      hls.off(Events2.SUBTITLE_TRACKS_CLEARED, this.onSubtitleTracksCleared, this);
      hls.off(Events2.BUFFER_FLUSHING, this.onBufferFlushing, this);
      this.hls = this.config = null;
      this.cea608Parser1 = this.cea608Parser2 = void 0;
    }
    initCea608Parsers() {
      if (this.config.enableCEA708Captions && (!this.cea608Parser1 || !this.cea608Parser2)) {
        const channel1 = new OutputFilter(this, "textTrack1");
        const channel2 = new OutputFilter(this, "textTrack2");
        const channel3 = new OutputFilter(this, "textTrack3");
        const channel4 = new OutputFilter(this, "textTrack4");
        this.cea608Parser1 = new Cea608Parser(1, channel1, channel2);
        this.cea608Parser2 = new Cea608Parser(3, channel3, channel4);
      }
    }
    addCues(trackName, startTime, endTime, screen, cueRanges) {
      let merged = false;
      for (let i = cueRanges.length; i--; ) {
        const cueRange = cueRanges[i];
        const overlap = intersection(cueRange[0], cueRange[1], startTime, endTime);
        if (overlap >= 0) {
          cueRange[0] = Math.min(cueRange[0], startTime);
          cueRange[1] = Math.max(cueRange[1], endTime);
          merged = true;
          if (overlap / (endTime - startTime) > 0.5) {
            return;
          }
        }
      }
      if (!merged) {
        cueRanges.push([startTime, endTime]);
      }
      if (this.config.renderTextTracksNatively) {
        const track = this.captionsTracks[trackName];
        this.Cues.newCue(track, startTime, endTime, screen);
      } else {
        const cues = this.Cues.newCue(null, startTime, endTime, screen);
        this.hls.trigger(Events2.CUES_PARSED, {
          type: "captions",
          cues,
          track: trackName
        });
      }
    }
    // Triggered when an initial PTS is found; used for synchronisation of WebVTT.
    onInitPtsFound(event, {
      frag,
      id,
      initPTS,
      timescale
    }) {
      const {
        unparsedVttFrags
      } = this;
      if (id === "main") {
        this.initPTS[frag.cc] = {
          baseTime: initPTS,
          timescale
        };
      }
      if (unparsedVttFrags.length) {
        this.unparsedVttFrags = [];
        unparsedVttFrags.forEach((frag2) => {
          this.onFragLoaded(Events2.FRAG_LOADED, frag2);
        });
      }
    }
    getExistingTrack(label, language) {
      const {
        media
      } = this;
      if (media) {
        for (let i = 0; i < media.textTracks.length; i++) {
          const textTrack = media.textTracks[i];
          if (canReuseVttTextTrack(textTrack, {
            name: label,
            lang: language,
            attrs: {}
          })) {
            return textTrack;
          }
        }
      }
      return null;
    }
    createCaptionsTrack(trackName) {
      if (this.config.renderTextTracksNatively) {
        this.createNativeTrack(trackName);
      } else {
        this.createNonNativeTrack(trackName);
      }
    }
    createNativeTrack(trackName) {
      if (this.captionsTracks[trackName]) {
        return;
      }
      const {
        captionsProperties,
        captionsTracks,
        media
      } = this;
      const {
        label,
        languageCode
      } = captionsProperties[trackName];
      const existingTrack = this.getExistingTrack(label, languageCode);
      if (!existingTrack) {
        const textTrack = this.createTextTrack("captions", label, languageCode);
        if (textTrack) {
          textTrack[trackName] = true;
          captionsTracks[trackName] = textTrack;
        }
      } else {
        captionsTracks[trackName] = existingTrack;
        clearCurrentCues(captionsTracks[trackName]);
        sendAddTrackEvent(captionsTracks[trackName], media);
      }
    }
    createNonNativeTrack(trackName) {
      if (this.nonNativeCaptionsTracks[trackName]) {
        return;
      }
      const trackProperties = this.captionsProperties[trackName];
      if (!trackProperties) {
        return;
      }
      const label = trackProperties.label;
      const track = {
        _id: trackName,
        label,
        kind: "captions",
        default: trackProperties.media ? !!trackProperties.media.default : false,
        closedCaptions: trackProperties.media
      };
      this.nonNativeCaptionsTracks[trackName] = track;
      this.hls.trigger(Events2.NON_NATIVE_TEXT_TRACKS_FOUND, {
        tracks: [track]
      });
    }
    createTextTrack(kind, label, lang) {
      const media = this.media;
      if (!media) {
        return;
      }
      return media.addTextTrack(kind, label, lang);
    }
    onMediaAttaching(event, data) {
      this.media = data.media;
      this._cleanTracks();
    }
    onMediaDetaching() {
      const {
        captionsTracks
      } = this;
      Object.keys(captionsTracks).forEach((trackName) => {
        clearCurrentCues(captionsTracks[trackName]);
        delete captionsTracks[trackName];
      });
      this.nonNativeCaptionsTracks = {};
    }
    onManifestLoading() {
      this.lastCc = -1;
      this.lastSn = -1;
      this.lastPartIndex = -1;
      this.prevCC = -1;
      this.vttCCs = newVTTCCs();
      this._cleanTracks();
      this.tracks = [];
      this.captionsTracks = {};
      this.nonNativeCaptionsTracks = {};
      this.textTracks = [];
      this.unparsedVttFrags = [];
      this.initPTS = [];
      if (this.cea608Parser1 && this.cea608Parser2) {
        this.cea608Parser1.reset();
        this.cea608Parser2.reset();
      }
    }
    _cleanTracks() {
      const {
        media
      } = this;
      if (!media) {
        return;
      }
      const textTracks = media.textTracks;
      if (textTracks) {
        for (let i = 0; i < textTracks.length; i++) {
          clearCurrentCues(textTracks[i]);
        }
      }
    }
    onSubtitleTracksUpdated(event, data) {
      const tracks = data.subtitleTracks || [];
      const hasIMSC1 = tracks.some((track) => track.textCodec === IMSC1_CODEC);
      if (this.config.enableWebVTT || hasIMSC1 && this.config.enableIMSC1) {
        const listIsIdentical = subtitleOptionsIdentical(this.tracks, tracks);
        if (listIsIdentical) {
          this.tracks = tracks;
          return;
        }
        this.textTracks = [];
        this.tracks = tracks;
        if (this.config.renderTextTracksNatively) {
          const media = this.media;
          const inUseTracks = media ? filterSubtitleTracks(media.textTracks) : null;
          this.tracks.forEach((track, index) => {
            let textTrack;
            if (inUseTracks) {
              let inUseTrack = null;
              for (let i = 0; i < inUseTracks.length; i++) {
                if (inUseTracks[i] && canReuseVttTextTrack(inUseTracks[i], track)) {
                  inUseTrack = inUseTracks[i];
                  inUseTracks[i] = null;
                  break;
                }
              }
              if (inUseTrack) {
                textTrack = inUseTrack;
              }
            }
            if (textTrack) {
              clearCurrentCues(textTrack);
            } else {
              const textTrackKind = captionsOrSubtitlesFromCharacteristics(track);
              textTrack = this.createTextTrack(textTrackKind, track.name, track.lang);
              if (textTrack) {
                textTrack.mode = "disabled";
              }
            }
            if (textTrack) {
              this.textTracks.push(textTrack);
            }
          });
          if (inUseTracks != null && inUseTracks.length) {
            const unusedTextTracks = inUseTracks.filter((t2) => t2 !== null).map((t2) => t2.label);
            if (unusedTextTracks.length) {
              logger.warn(`Media element contains unused subtitle tracks: ${unusedTextTracks.join(", ")}. Replace media element for each source to clear TextTracks and captions menu.`);
            }
          }
        } else if (this.tracks.length) {
          const tracksList = this.tracks.map((track) => {
            return {
              label: track.name,
              kind: track.type.toLowerCase(),
              default: track.default,
              subtitleTrack: track
            };
          });
          this.hls.trigger(Events2.NON_NATIVE_TEXT_TRACKS_FOUND, {
            tracks: tracksList
          });
        }
      }
    }
    onManifestLoaded(event, data) {
      if (this.config.enableCEA708Captions && data.captions) {
        data.captions.forEach((captionsTrack) => {
          const instreamIdMatch = /(?:CC|SERVICE)([1-4])/.exec(captionsTrack.instreamId);
          if (!instreamIdMatch) {
            return;
          }
          const trackName = `textTrack${instreamIdMatch[1]}`;
          const trackProperties = this.captionsProperties[trackName];
          if (!trackProperties) {
            return;
          }
          trackProperties.label = captionsTrack.name;
          if (captionsTrack.lang) {
            trackProperties.languageCode = captionsTrack.lang;
          }
          trackProperties.media = captionsTrack;
        });
      }
    }
    closedCaptionsForLevel(frag) {
      const level = this.hls.levels[frag.level];
      return level == null ? void 0 : level.attrs["CLOSED-CAPTIONS"];
    }
    onFragLoading(event, data) {
      if (this.enabled && data.frag.type === PlaylistLevelType.MAIN) {
        var _data$part$index, _data$part;
        const {
          cea608Parser1,
          cea608Parser2,
          lastSn
        } = this;
        const {
          cc,
          sn
        } = data.frag;
        const partIndex = (_data$part$index = (_data$part = data.part) == null ? void 0 : _data$part.index) != null ? _data$part$index : -1;
        if (cea608Parser1 && cea608Parser2) {
          if (sn !== lastSn + 1 || sn === lastSn && partIndex !== this.lastPartIndex + 1 || cc !== this.lastCc) {
            cea608Parser1.reset();
            cea608Parser2.reset();
          }
        }
        this.lastCc = cc;
        this.lastSn = sn;
        this.lastPartIndex = partIndex;
      }
    }
    onFragLoaded(event, data) {
      const {
        frag,
        payload
      } = data;
      if (frag.type === PlaylistLevelType.SUBTITLE) {
        if (payload.byteLength) {
          const decryptData = frag.decryptdata;
          const decrypted = "stats" in data;
          if (decryptData == null || !decryptData.encrypted || decrypted) {
            const trackPlaylistMedia = this.tracks[frag.level];
            const vttCCs = this.vttCCs;
            if (!vttCCs[frag.cc]) {
              vttCCs[frag.cc] = {
                start: frag.start,
                prevCC: this.prevCC,
                new: true
              };
              this.prevCC = frag.cc;
            }
            if (trackPlaylistMedia && trackPlaylistMedia.textCodec === IMSC1_CODEC) {
              this._parseIMSC1(frag, payload);
            } else {
              this._parseVTTs(data);
            }
          }
        } else {
          this.hls.trigger(Events2.SUBTITLE_FRAG_PROCESSED, {
            success: false,
            frag,
            error: new Error("Empty subtitle payload")
          });
        }
      }
    }
    _parseIMSC1(frag, payload) {
      const hls = this.hls;
      parseIMSC1(payload, this.initPTS[frag.cc], (cues) => {
        this._appendCues(cues, frag.level);
        hls.trigger(Events2.SUBTITLE_FRAG_PROCESSED, {
          success: true,
          frag
        });
      }, (error) => {
        logger.log(`Failed to parse IMSC1: ${error}`);
        hls.trigger(Events2.SUBTITLE_FRAG_PROCESSED, {
          success: false,
          frag,
          error
        });
      });
    }
    _parseVTTs(data) {
      var _frag$initSegment;
      const {
        frag,
        payload
      } = data;
      const {
        initPTS,
        unparsedVttFrags
      } = this;
      const maxAvCC = initPTS.length - 1;
      if (!initPTS[frag.cc] && maxAvCC === -1) {
        unparsedVttFrags.push(data);
        return;
      }
      const hls = this.hls;
      const payloadWebVTT = (_frag$initSegment = frag.initSegment) != null && _frag$initSegment.data ? appendUint8Array(frag.initSegment.data, new Uint8Array(payload)) : payload;
      parseWebVTT(payloadWebVTT, this.initPTS[frag.cc], this.vttCCs, frag.cc, frag.start, (cues) => {
        this._appendCues(cues, frag.level);
        hls.trigger(Events2.SUBTITLE_FRAG_PROCESSED, {
          success: true,
          frag
        });
      }, (error) => {
        const missingInitPTS = error.message === "Missing initPTS for VTT MPEGTS";
        if (missingInitPTS) {
          unparsedVttFrags.push(data);
        } else {
          this._fallbackToIMSC1(frag, payload);
        }
        logger.log(`Failed to parse VTT cue: ${error}`);
        if (missingInitPTS && maxAvCC > frag.cc) {
          return;
        }
        hls.trigger(Events2.SUBTITLE_FRAG_PROCESSED, {
          success: false,
          frag,
          error
        });
      });
    }
    _fallbackToIMSC1(frag, payload) {
      const trackPlaylistMedia = this.tracks[frag.level];
      if (!trackPlaylistMedia.textCodec) {
        parseIMSC1(payload, this.initPTS[frag.cc], () => {
          trackPlaylistMedia.textCodec = IMSC1_CODEC;
          this._parseIMSC1(frag, payload);
        }, () => {
          trackPlaylistMedia.textCodec = "wvtt";
        });
      }
    }
    _appendCues(cues, fragLevel) {
      const hls = this.hls;
      if (this.config.renderTextTracksNatively) {
        const textTrack = this.textTracks[fragLevel];
        if (!textTrack || textTrack.mode === "disabled") {
          return;
        }
        cues.forEach((cue) => addCueToTrack(textTrack, cue));
      } else {
        const currentTrack = this.tracks[fragLevel];
        if (!currentTrack) {
          return;
        }
        const track = currentTrack.default ? "default" : "subtitles" + fragLevel;
        hls.trigger(Events2.CUES_PARSED, {
          type: "subtitles",
          cues,
          track
        });
      }
    }
    onFragDecrypted(event, data) {
      const {
        frag
      } = data;
      if (frag.type === PlaylistLevelType.SUBTITLE) {
        this.onFragLoaded(Events2.FRAG_LOADED, data);
      }
    }
    onSubtitleTracksCleared() {
      this.tracks = [];
      this.captionsTracks = {};
    }
    onFragParsingUserdata(event, data) {
      this.initCea608Parsers();
      const {
        cea608Parser1,
        cea608Parser2
      } = this;
      if (!this.enabled || !cea608Parser1 || !cea608Parser2) {
        return;
      }
      const {
        frag,
        samples
      } = data;
      if (frag.type === PlaylistLevelType.MAIN && this.closedCaptionsForLevel(frag) === "NONE") {
        return;
      }
      for (let i = 0; i < samples.length; i++) {
        const ccBytes = samples[i].bytes;
        if (ccBytes) {
          const ccdatas = this.extractCea608Data(ccBytes);
          cea608Parser1.addData(samples[i].pts, ccdatas[0]);
          cea608Parser2.addData(samples[i].pts, ccdatas[1]);
        }
      }
    }
    onBufferFlushing(event, {
      startOffset,
      endOffset,
      endOffsetSubtitles,
      type
    }) {
      const {
        media
      } = this;
      if (!media || media.currentTime < endOffset) {
        return;
      }
      if (!type || type === "video") {
        const {
          captionsTracks
        } = this;
        Object.keys(captionsTracks).forEach((trackName) => removeCuesInRange(captionsTracks[trackName], startOffset, endOffset));
      }
      if (this.config.renderTextTracksNatively) {
        if (startOffset === 0 && endOffsetSubtitles !== void 0) {
          const {
            textTracks
          } = this;
          Object.keys(textTracks).forEach((trackName) => removeCuesInRange(textTracks[trackName], startOffset, endOffsetSubtitles));
        }
      }
    }
    extractCea608Data(byteArray) {
      const actualCCBytes = [[], []];
      const count = byteArray[0] & 31;
      let position = 2;
      for (let j = 0; j < count; j++) {
        const tmpByte = byteArray[position++];
        const ccbyte1 = 127 & byteArray[position++];
        const ccbyte2 = 127 & byteArray[position++];
        if (ccbyte1 === 0 && ccbyte2 === 0) {
          continue;
        }
        const ccValid = (4 & tmpByte) !== 0;
        if (ccValid) {
          const ccType = 3 & tmpByte;
          if (0 === ccType || 1 === ccType) {
            actualCCBytes[ccType].push(ccbyte1);
            actualCCBytes[ccType].push(ccbyte2);
          }
        }
      }
      return actualCCBytes;
    }
  };
  function captionsOrSubtitlesFromCharacteristics(track) {
    if (track.characteristics) {
      if (/transcribes-spoken-dialog/gi.test(track.characteristics) && /describes-music-and-sound/gi.test(track.characteristics)) {
        return "captions";
      }
    }
    return "subtitles";
  }
  function canReuseVttTextTrack(inUseTrack, manifestTrack) {
    return !!inUseTrack && inUseTrack.kind === captionsOrSubtitlesFromCharacteristics(manifestTrack) && subtitleTrackMatchesTextTrack(manifestTrack, inUseTrack);
  }
  function intersection(x1, x2, y1, y2) {
    return Math.min(x2, y2) - Math.max(x1, y1);
  }
  function newVTTCCs() {
    return {
      ccOffset: 0,
      presentationOffset: 0,
      0: {
        start: 0,
        prevCC: -1,
        new: true
      }
    };
  }
  var CapLevelController = class _CapLevelController {
    constructor(hls) {
      this.hls = void 0;
      this.autoLevelCapping = void 0;
      this.firstLevel = void 0;
      this.media = void 0;
      this.restrictedLevels = void 0;
      this.timer = void 0;
      this.clientRect = void 0;
      this.streamController = void 0;
      this.hls = hls;
      this.autoLevelCapping = Number.POSITIVE_INFINITY;
      this.firstLevel = -1;
      this.media = null;
      this.restrictedLevels = [];
      this.timer = void 0;
      this.clientRect = null;
      this.registerListeners();
    }
    setStreamController(streamController) {
      this.streamController = streamController;
    }
    destroy() {
      if (this.hls) {
        this.unregisterListener();
      }
      if (this.timer) {
        this.stopCapping();
      }
      this.media = null;
      this.clientRect = null;
      this.hls = this.streamController = null;
    }
    registerListeners() {
      const {
        hls
      } = this;
      hls.on(Events2.FPS_DROP_LEVEL_CAPPING, this.onFpsDropLevelCapping, this);
      hls.on(Events2.MEDIA_ATTACHING, this.onMediaAttaching, this);
      hls.on(Events2.MANIFEST_PARSED, this.onManifestParsed, this);
      hls.on(Events2.LEVELS_UPDATED, this.onLevelsUpdated, this);
      hls.on(Events2.BUFFER_CODECS, this.onBufferCodecs, this);
      hls.on(Events2.MEDIA_DETACHING, this.onMediaDetaching, this);
    }
    unregisterListener() {
      const {
        hls
      } = this;
      hls.off(Events2.FPS_DROP_LEVEL_CAPPING, this.onFpsDropLevelCapping, this);
      hls.off(Events2.MEDIA_ATTACHING, this.onMediaAttaching, this);
      hls.off(Events2.MANIFEST_PARSED, this.onManifestParsed, this);
      hls.off(Events2.LEVELS_UPDATED, this.onLevelsUpdated, this);
      hls.off(Events2.BUFFER_CODECS, this.onBufferCodecs, this);
      hls.off(Events2.MEDIA_DETACHING, this.onMediaDetaching, this);
    }
    onFpsDropLevelCapping(event, data) {
      const level = this.hls.levels[data.droppedLevel];
      if (this.isLevelAllowed(level)) {
        this.restrictedLevels.push({
          bitrate: level.bitrate,
          height: level.height,
          width: level.width
        });
      }
    }
    onMediaAttaching(event, data) {
      this.media = data.media instanceof HTMLVideoElement ? data.media : null;
      this.clientRect = null;
      if (this.timer && this.hls.levels.length) {
        this.detectPlayerSize();
      }
    }
    onManifestParsed(event, data) {
      const hls = this.hls;
      this.restrictedLevels = [];
      this.firstLevel = data.firstLevel;
      if (hls.config.capLevelToPlayerSize && data.video) {
        this.startCapping();
      }
    }
    onLevelsUpdated(event, data) {
      if (this.timer && isFiniteNumber(this.autoLevelCapping)) {
        this.detectPlayerSize();
      }
    }
    // Only activate capping when playing a video stream; otherwise, multi-bitrate audio-only streams will be restricted
    // to the first level
    onBufferCodecs(event, data) {
      const hls = this.hls;
      if (hls.config.capLevelToPlayerSize && data.video) {
        this.startCapping();
      }
    }
    onMediaDetaching() {
      this.stopCapping();
    }
    detectPlayerSize() {
      if (this.media) {
        if (this.mediaHeight <= 0 || this.mediaWidth <= 0) {
          this.clientRect = null;
          return;
        }
        const levels = this.hls.levels;
        if (levels.length) {
          const hls = this.hls;
          const maxLevel = this.getMaxLevel(levels.length - 1);
          if (maxLevel !== this.autoLevelCapping) {
            logger.log(`Setting autoLevelCapping to ${maxLevel}: ${levels[maxLevel].height}p@${levels[maxLevel].bitrate} for media ${this.mediaWidth}x${this.mediaHeight}`);
          }
          hls.autoLevelCapping = maxLevel;
          if (hls.autoLevelCapping > this.autoLevelCapping && this.streamController) {
            this.streamController.nextLevelSwitch();
          }
          this.autoLevelCapping = hls.autoLevelCapping;
        }
      }
    }
    /*
     * returns level should be the one with the dimensions equal or greater than the media (player) dimensions (so the video will be downscaled)
     */
    getMaxLevel(capLevelIndex) {
      const levels = this.hls.levels;
      if (!levels.length) {
        return -1;
      }
      const validLevels = levels.filter((level, index) => this.isLevelAllowed(level) && index <= capLevelIndex);
      this.clientRect = null;
      return _CapLevelController.getMaxLevelByMediaSize(validLevels, this.mediaWidth, this.mediaHeight);
    }
    startCapping() {
      if (this.timer) {
        return;
      }
      this.autoLevelCapping = Number.POSITIVE_INFINITY;
      self.clearInterval(this.timer);
      this.timer = self.setInterval(this.detectPlayerSize.bind(this), 1e3);
      this.detectPlayerSize();
    }
    stopCapping() {
      this.restrictedLevels = [];
      this.firstLevel = -1;
      this.autoLevelCapping = Number.POSITIVE_INFINITY;
      if (this.timer) {
        self.clearInterval(this.timer);
        this.timer = void 0;
      }
    }
    getDimensions() {
      if (this.clientRect) {
        return this.clientRect;
      }
      const media = this.media;
      const boundsRect = {
        width: 0,
        height: 0
      };
      if (media) {
        const clientRect = media.getBoundingClientRect();
        boundsRect.width = clientRect.width;
        boundsRect.height = clientRect.height;
        if (!boundsRect.width && !boundsRect.height) {
          boundsRect.width = clientRect.right - clientRect.left || media.width || 0;
          boundsRect.height = clientRect.bottom - clientRect.top || media.height || 0;
        }
      }
      this.clientRect = boundsRect;
      return boundsRect;
    }
    get mediaWidth() {
      return this.getDimensions().width * this.contentScaleFactor;
    }
    get mediaHeight() {
      return this.getDimensions().height * this.contentScaleFactor;
    }
    get contentScaleFactor() {
      let pixelRatio = 1;
      if (!this.hls.config.ignoreDevicePixelRatio) {
        try {
          pixelRatio = self.devicePixelRatio;
        } catch (e) {
        }
      }
      return pixelRatio;
    }
    isLevelAllowed(level) {
      const restrictedLevels = this.restrictedLevels;
      return !restrictedLevels.some((restrictedLevel) => {
        return level.bitrate === restrictedLevel.bitrate && level.width === restrictedLevel.width && level.height === restrictedLevel.height;
      });
    }
    static getMaxLevelByMediaSize(levels, width, height) {
      if (!(levels != null && levels.length)) {
        return -1;
      }
      const atGreatestBandwidth = (curLevel, nextLevel) => {
        if (!nextLevel) {
          return true;
        }
        return curLevel.width !== nextLevel.width || curLevel.height !== nextLevel.height;
      };
      let maxLevelIndex = levels.length - 1;
      const squareSize = Math.max(width, height);
      for (let i = 0; i < levels.length; i += 1) {
        const level = levels[i];
        if ((level.width >= squareSize || level.height >= squareSize) && atGreatestBandwidth(level, levels[i + 1])) {
          maxLevelIndex = i;
          break;
        }
      }
      return maxLevelIndex;
    }
  };
  var FPSController = class {
    constructor(hls) {
      this.hls = void 0;
      this.isVideoPlaybackQualityAvailable = false;
      this.timer = void 0;
      this.media = null;
      this.lastTime = void 0;
      this.lastDroppedFrames = 0;
      this.lastDecodedFrames = 0;
      this.streamController = void 0;
      this.hls = hls;
      this.registerListeners();
    }
    setStreamController(streamController) {
      this.streamController = streamController;
    }
    registerListeners() {
      this.hls.on(Events2.MEDIA_ATTACHING, this.onMediaAttaching, this);
    }
    unregisterListeners() {
      this.hls.off(Events2.MEDIA_ATTACHING, this.onMediaAttaching, this);
    }
    destroy() {
      if (this.timer) {
        clearInterval(this.timer);
      }
      this.unregisterListeners();
      this.isVideoPlaybackQualityAvailable = false;
      this.media = null;
    }
    onMediaAttaching(event, data) {
      const config = this.hls.config;
      if (config.capLevelOnFPSDrop) {
        const media = data.media instanceof self.HTMLVideoElement ? data.media : null;
        this.media = media;
        if (media && typeof media.getVideoPlaybackQuality === "function") {
          this.isVideoPlaybackQualityAvailable = true;
        }
        self.clearInterval(this.timer);
        this.timer = self.setInterval(this.checkFPSInterval.bind(this), config.fpsDroppedMonitoringPeriod);
      }
    }
    checkFPS(video, decodedFrames, droppedFrames) {
      const currentTime = performance.now();
      if (decodedFrames) {
        if (this.lastTime) {
          const currentPeriod = currentTime - this.lastTime;
          const currentDropped = droppedFrames - this.lastDroppedFrames;
          const currentDecoded = decodedFrames - this.lastDecodedFrames;
          const droppedFPS = 1e3 * currentDropped / currentPeriod;
          const hls = this.hls;
          hls.trigger(Events2.FPS_DROP, {
            currentDropped,
            currentDecoded,
            totalDroppedFrames: droppedFrames
          });
          if (droppedFPS > 0) {
            if (currentDropped > hls.config.fpsDroppedMonitoringThreshold * currentDecoded) {
              let currentLevel = hls.currentLevel;
              logger.warn("drop FPS ratio greater than max allowed value for currentLevel: " + currentLevel);
              if (currentLevel > 0 && (hls.autoLevelCapping === -1 || hls.autoLevelCapping >= currentLevel)) {
                currentLevel = currentLevel - 1;
                hls.trigger(Events2.FPS_DROP_LEVEL_CAPPING, {
                  level: currentLevel,
                  droppedLevel: hls.currentLevel
                });
                hls.autoLevelCapping = currentLevel;
                this.streamController.nextLevelSwitch();
              }
            }
          }
        }
        this.lastTime = currentTime;
        this.lastDroppedFrames = droppedFrames;
        this.lastDecodedFrames = decodedFrames;
      }
    }
    checkFPSInterval() {
      const video = this.media;
      if (video) {
        if (this.isVideoPlaybackQualityAvailable) {
          const videoPlaybackQuality = video.getVideoPlaybackQuality();
          this.checkFPS(video, videoPlaybackQuality.totalVideoFrames, videoPlaybackQuality.droppedVideoFrames);
        } else {
          this.checkFPS(video, video.webkitDecodedFrameCount, video.webkitDroppedFrameCount);
        }
      }
    }
  };
  var LOGGER_PREFIX = "[eme]";
  var EMEController = class _EMEController {
    constructor(hls) {
      this.hls = void 0;
      this.config = void 0;
      this.media = null;
      this.keyFormatPromise = null;
      this.keySystemAccessPromises = {};
      this._requestLicenseFailureCount = 0;
      this.mediaKeySessions = [];
      this.keyIdToKeySessionPromise = {};
      this.setMediaKeysQueue = _EMEController.CDMCleanupPromise ? [_EMEController.CDMCleanupPromise] : [];
      this.onMediaEncrypted = this._onMediaEncrypted.bind(this);
      this.onWaitingForKey = this._onWaitingForKey.bind(this);
      this.debug = logger.debug.bind(logger, LOGGER_PREFIX);
      this.log = logger.log.bind(logger, LOGGER_PREFIX);
      this.warn = logger.warn.bind(logger, LOGGER_PREFIX);
      this.error = logger.error.bind(logger, LOGGER_PREFIX);
      this.hls = hls;
      this.config = hls.config;
      this.registerListeners();
    }
    destroy() {
      this.unregisterListeners();
      this.onMediaDetached();
      const config = this.config;
      config.requestMediaKeySystemAccessFunc = null;
      config.licenseXhrSetup = config.licenseResponseCallback = void 0;
      config.drmSystems = config.drmSystemOptions = {};
      this.hls = this.onMediaEncrypted = this.onWaitingForKey = this.keyIdToKeySessionPromise = null;
      this.config = null;
    }
    registerListeners() {
      this.hls.on(Events2.MEDIA_ATTACHED, this.onMediaAttached, this);
      this.hls.on(Events2.MEDIA_DETACHED, this.onMediaDetached, this);
      this.hls.on(Events2.MANIFEST_LOADING, this.onManifestLoading, this);
      this.hls.on(Events2.MANIFEST_LOADED, this.onManifestLoaded, this);
    }
    unregisterListeners() {
      this.hls.off(Events2.MEDIA_ATTACHED, this.onMediaAttached, this);
      this.hls.off(Events2.MEDIA_DETACHED, this.onMediaDetached, this);
      this.hls.off(Events2.MANIFEST_LOADING, this.onManifestLoading, this);
      this.hls.off(Events2.MANIFEST_LOADED, this.onManifestLoaded, this);
    }
    getLicenseServerUrl(keySystem) {
      const {
        drmSystems,
        widevineLicenseUrl
      } = this.config;
      const keySystemConfiguration = drmSystems[keySystem];
      if (keySystemConfiguration) {
        return keySystemConfiguration.licenseUrl;
      }
      if (keySystem === KeySystems.WIDEVINE && widevineLicenseUrl) {
        return widevineLicenseUrl;
      }
      throw new Error(`no license server URL configured for key-system "${keySystem}"`);
    }
    getServerCertificateUrl(keySystem) {
      const {
        drmSystems
      } = this.config;
      const keySystemConfiguration = drmSystems[keySystem];
      if (keySystemConfiguration) {
        return keySystemConfiguration.serverCertificateUrl;
      } else {
        this.log(`No Server Certificate in config.drmSystems["${keySystem}"]`);
      }
    }
    attemptKeySystemAccess(keySystemsToAttempt) {
      const levels = this.hls.levels;
      const uniqueCodec = (value, i, a) => !!value && a.indexOf(value) === i;
      const audioCodecs = levels.map((level) => level.audioCodec).filter(uniqueCodec);
      const videoCodecs = levels.map((level) => level.videoCodec).filter(uniqueCodec);
      if (audioCodecs.length + videoCodecs.length === 0) {
        videoCodecs.push("avc1.42e01e");
      }
      return new Promise((resolve, reject) => {
        const attempt = (keySystems) => {
          const keySystem = keySystems.shift();
          this.getMediaKeysPromise(keySystem, audioCodecs, videoCodecs).then((mediaKeys) => resolve({
            keySystem,
            mediaKeys
          })).catch((error) => {
            if (keySystems.length) {
              attempt(keySystems);
            } else if (error instanceof EMEKeyError) {
              reject(error);
            } else {
              reject(new EMEKeyError({
                type: ErrorTypes.KEY_SYSTEM_ERROR,
                details: ErrorDetails.KEY_SYSTEM_NO_ACCESS,
                error,
                fatal: true
              }, error.message));
            }
          });
        };
        attempt(keySystemsToAttempt);
      });
    }
    requestMediaKeySystemAccess(keySystem, supportedConfigurations) {
      const {
        requestMediaKeySystemAccessFunc
      } = this.config;
      if (!(typeof requestMediaKeySystemAccessFunc === "function")) {
        let errMessage = `Configured requestMediaKeySystemAccess is not a function ${requestMediaKeySystemAccessFunc}`;
        if (requestMediaKeySystemAccess === null && self.location.protocol === "http:") {
          errMessage = `navigator.requestMediaKeySystemAccess is not available over insecure protocol ${location.protocol}`;
        }
        return Promise.reject(new Error(errMessage));
      }
      return requestMediaKeySystemAccessFunc(keySystem, supportedConfigurations);
    }
    getMediaKeysPromise(keySystem, audioCodecs, videoCodecs) {
      const mediaKeySystemConfigs = getSupportedMediaKeySystemConfigurations(keySystem, audioCodecs, videoCodecs, this.config.drmSystemOptions);
      const keySystemAccessPromises = this.keySystemAccessPromises[keySystem];
      let keySystemAccess = keySystemAccessPromises == null ? void 0 : keySystemAccessPromises.keySystemAccess;
      if (!keySystemAccess) {
        this.log(`Requesting encrypted media "${keySystem}" key-system access with config: ${JSON.stringify(mediaKeySystemConfigs)}`);
        keySystemAccess = this.requestMediaKeySystemAccess(keySystem, mediaKeySystemConfigs);
        const _keySystemAccessPromises = this.keySystemAccessPromises[keySystem] = {
          keySystemAccess
        };
        keySystemAccess.catch((error) => {
          this.log(`Failed to obtain access to key-system "${keySystem}": ${error}`);
        });
        return keySystemAccess.then((mediaKeySystemAccess) => {
          this.log(`Access for key-system "${mediaKeySystemAccess.keySystem}" obtained`);
          const certificateRequest = this.fetchServerCertificate(keySystem);
          this.log(`Create media-keys for "${keySystem}"`);
          _keySystemAccessPromises.mediaKeys = mediaKeySystemAccess.createMediaKeys().then((mediaKeys) => {
            this.log(`Media-keys created for "${keySystem}"`);
            return certificateRequest.then((certificate) => {
              if (certificate) {
                return this.setMediaKeysServerCertificate(mediaKeys, keySystem, certificate);
              }
              return mediaKeys;
            });
          });
          _keySystemAccessPromises.mediaKeys.catch((error) => {
            this.error(`Failed to create media-keys for "${keySystem}"}: ${error}`);
          });
          return _keySystemAccessPromises.mediaKeys;
        });
      }
      return keySystemAccess.then(() => keySystemAccessPromises.mediaKeys);
    }
    createMediaKeySessionContext({
      decryptdata,
      keySystem,
      mediaKeys
    }) {
      this.log(`Creating key-system session "${keySystem}" keyId: ${Hex.hexDump(decryptdata.keyId || [])}`);
      const mediaKeysSession = mediaKeys.createSession();
      const mediaKeySessionContext = {
        decryptdata,
        keySystem,
        mediaKeys,
        mediaKeysSession,
        keyStatus: "status-pending"
      };
      this.mediaKeySessions.push(mediaKeySessionContext);
      return mediaKeySessionContext;
    }
    renewKeySession(mediaKeySessionContext) {
      const decryptdata = mediaKeySessionContext.decryptdata;
      if (decryptdata.pssh) {
        const keySessionContext = this.createMediaKeySessionContext(mediaKeySessionContext);
        const keyId = this.getKeyIdString(decryptdata);
        const scheme = "cenc";
        this.keyIdToKeySessionPromise[keyId] = this.generateRequestWithPreferredKeySession(keySessionContext, scheme, decryptdata.pssh, "expired");
      } else {
        this.warn(`Could not renew expired session. Missing pssh initData.`);
      }
      this.removeSession(mediaKeySessionContext);
    }
    getKeyIdString(decryptdata) {
      if (!decryptdata) {
        throw new Error("Could not read keyId of undefined decryptdata");
      }
      if (decryptdata.keyId === null) {
        throw new Error("keyId is null");
      }
      return Hex.hexDump(decryptdata.keyId);
    }
    updateKeySession(mediaKeySessionContext, data) {
      var _mediaKeySessionConte;
      const keySession = mediaKeySessionContext.mediaKeysSession;
      this.log(`Updating key-session "${keySession.sessionId}" for keyID ${Hex.hexDump(((_mediaKeySessionConte = mediaKeySessionContext.decryptdata) == null ? void 0 : _mediaKeySessionConte.keyId) || [])}
      } (data length: ${data ? data.byteLength : data})`);
      return keySession.update(data);
    }
    selectKeySystemFormat(frag) {
      const keyFormats = Object.keys(frag.levelkeys || {});
      if (!this.keyFormatPromise) {
        this.log(`Selecting key-system from fragment (sn: ${frag.sn} ${frag.type}: ${frag.level}) key formats ${keyFormats.join(", ")}`);
        this.keyFormatPromise = this.getKeyFormatPromise(keyFormats);
      }
      return this.keyFormatPromise;
    }
    getKeyFormatPromise(keyFormats) {
      return new Promise((resolve, reject) => {
        const keySystemsInConfig = getKeySystemsForConfig(this.config);
        const keySystemsToAttempt = keyFormats.map(keySystemFormatToKeySystemDomain).filter((value) => !!value && keySystemsInConfig.indexOf(value) !== -1);
        return this.getKeySystemSelectionPromise(keySystemsToAttempt).then(({
          keySystem
        }) => {
          const keySystemFormat = keySystemDomainToKeySystemFormat(keySystem);
          if (keySystemFormat) {
            resolve(keySystemFormat);
          } else {
            reject(new Error(`Unable to find format for key-system "${keySystem}"`));
          }
        }).catch(reject);
      });
    }
    loadKey(data) {
      const decryptdata = data.keyInfo.decryptdata;
      const keyId = this.getKeyIdString(decryptdata);
      const keyDetails = `(keyId: ${keyId} format: "${decryptdata.keyFormat}" method: ${decryptdata.method} uri: ${decryptdata.uri})`;
      this.log(`Starting session for key ${keyDetails}`);
      let keySessionContextPromise = this.keyIdToKeySessionPromise[keyId];
      if (!keySessionContextPromise) {
        keySessionContextPromise = this.keyIdToKeySessionPromise[keyId] = this.getKeySystemForKeyPromise(decryptdata).then(({
          keySystem,
          mediaKeys
        }) => {
          this.throwIfDestroyed();
          this.log(`Handle encrypted media sn: ${data.frag.sn} ${data.frag.type}: ${data.frag.level} using key ${keyDetails}`);
          return this.attemptSetMediaKeys(keySystem, mediaKeys).then(() => {
            this.throwIfDestroyed();
            const keySessionContext = this.createMediaKeySessionContext({
              keySystem,
              mediaKeys,
              decryptdata
            });
            const scheme = "cenc";
            return this.generateRequestWithPreferredKeySession(keySessionContext, scheme, decryptdata.pssh, "playlist-key");
          });
        });
        keySessionContextPromise.catch((error) => this.handleError(error));
      }
      return keySessionContextPromise;
    }
    throwIfDestroyed(message = "Invalid state") {
      if (!this.hls) {
        throw new Error("invalid state");
      }
    }
    handleError(error) {
      if (!this.hls) {
        return;
      }
      this.error(error.message);
      if (error instanceof EMEKeyError) {
        this.hls.trigger(Events2.ERROR, error.data);
      } else {
        this.hls.trigger(Events2.ERROR, {
          type: ErrorTypes.KEY_SYSTEM_ERROR,
          details: ErrorDetails.KEY_SYSTEM_NO_KEYS,
          error,
          fatal: true
        });
      }
    }
    getKeySystemForKeyPromise(decryptdata) {
      const keyId = this.getKeyIdString(decryptdata);
      const mediaKeySessionContext = this.keyIdToKeySessionPromise[keyId];
      if (!mediaKeySessionContext) {
        const keySystem = keySystemFormatToKeySystemDomain(decryptdata.keyFormat);
        const keySystemsToAttempt = keySystem ? [keySystem] : getKeySystemsForConfig(this.config);
        return this.attemptKeySystemAccess(keySystemsToAttempt);
      }
      return mediaKeySessionContext;
    }
    getKeySystemSelectionPromise(keySystemsToAttempt) {
      if (!keySystemsToAttempt.length) {
        keySystemsToAttempt = getKeySystemsForConfig(this.config);
      }
      if (keySystemsToAttempt.length === 0) {
        throw new EMEKeyError({
          type: ErrorTypes.KEY_SYSTEM_ERROR,
          details: ErrorDetails.KEY_SYSTEM_NO_CONFIGURED_LICENSE,
          fatal: true
        }, `Missing key-system license configuration options ${JSON.stringify({
          drmSystems: this.config.drmSystems
        })}`);
      }
      return this.attemptKeySystemAccess(keySystemsToAttempt);
    }
    _onMediaEncrypted(event) {
      const {
        initDataType,
        initData
      } = event;
      const logMessage = `"${event.type}" event: init data type: "${initDataType}"`;
      this.debug(logMessage);
      if (initData === null) {
        return;
      }
      let keyId;
      let keySystemDomain;
      if (initDataType === "sinf" && this.config.drmSystems[KeySystems.FAIRPLAY]) {
        const json = bin2str(new Uint8Array(initData));
        try {
          const sinf = base64Decode(JSON.parse(json).sinf);
          const tenc = parseSinf(new Uint8Array(sinf));
          if (!tenc) {
            throw new Error(`'schm' box missing or not cbcs/cenc with schi > tenc`);
          }
          keyId = tenc.subarray(8, 24);
          keySystemDomain = KeySystems.FAIRPLAY;
        } catch (error) {
          this.warn(`${logMessage} Failed to parse sinf: ${error}`);
          return;
        }
      } else {
        const psshResults = parseMultiPssh(initData);
        const psshInfo = psshResults.filter((pssh) => pssh.systemId === KeySystemIds.WIDEVINE)[0];
        if (!psshInfo) {
          if (psshResults.length === 0 || psshResults.some((pssh) => !pssh.systemId)) {
            this.warn(`${logMessage} contains incomplete or invalid pssh data`);
          } else {
            this.log(`ignoring ${logMessage} for ${psshResults.map((pssh) => keySystemIdToKeySystemDomain(pssh.systemId)).join(",")} pssh data in favor of playlist keys`);
          }
          return;
        }
        keySystemDomain = keySystemIdToKeySystemDomain(psshInfo.systemId);
        if (psshInfo.version === 0 && psshInfo.data) {
          const offset = psshInfo.data.length - 22;
          keyId = psshInfo.data.subarray(offset, offset + 16);
        }
      }
      if (!keySystemDomain || !keyId) {
        return;
      }
      const keyIdHex = Hex.hexDump(keyId);
      const {
        keyIdToKeySessionPromise,
        mediaKeySessions
      } = this;
      let keySessionContextPromise = keyIdToKeySessionPromise[keyIdHex];
      for (let i = 0; i < mediaKeySessions.length; i++) {
        const keyContext = mediaKeySessions[i];
        const decryptdata = keyContext.decryptdata;
        if (!decryptdata.keyId) {
          continue;
        }
        const oldKeyIdHex = Hex.hexDump(decryptdata.keyId);
        if (keyIdHex === oldKeyIdHex || decryptdata.uri.replace(/-/g, "").indexOf(keyIdHex) !== -1) {
          keySessionContextPromise = keyIdToKeySessionPromise[oldKeyIdHex];
          if (decryptdata.pssh) {
            break;
          }
          delete keyIdToKeySessionPromise[oldKeyIdHex];
          decryptdata.pssh = new Uint8Array(initData);
          decryptdata.keyId = keyId;
          keySessionContextPromise = keyIdToKeySessionPromise[keyIdHex] = keySessionContextPromise.then(() => {
            return this.generateRequestWithPreferredKeySession(keyContext, initDataType, initData, "encrypted-event-key-match");
          });
          break;
        }
      }
      if (!keySessionContextPromise) {
        keySessionContextPromise = keyIdToKeySessionPromise[keyIdHex] = this.getKeySystemSelectionPromise([keySystemDomain]).then(({
          keySystem,
          mediaKeys
        }) => {
          var _keySystemToKeySystem;
          this.throwIfDestroyed();
          const decryptdata = new LevelKey("ISO-23001-7", keyIdHex, (_keySystemToKeySystem = keySystemDomainToKeySystemFormat(keySystem)) != null ? _keySystemToKeySystem : "");
          decryptdata.pssh = new Uint8Array(initData);
          decryptdata.keyId = keyId;
          return this.attemptSetMediaKeys(keySystem, mediaKeys).then(() => {
            this.throwIfDestroyed();
            const keySessionContext = this.createMediaKeySessionContext({
              decryptdata,
              keySystem,
              mediaKeys
            });
            return this.generateRequestWithPreferredKeySession(keySessionContext, initDataType, initData, "encrypted-event-no-match");
          });
        });
      }
      keySessionContextPromise.catch((error) => this.handleError(error));
    }
    _onWaitingForKey(event) {
      this.log(`"${event.type}" event`);
    }
    attemptSetMediaKeys(keySystem, mediaKeys) {
      const queue = this.setMediaKeysQueue.slice();
      this.log(`Setting media-keys for "${keySystem}"`);
      const setMediaKeysPromise = Promise.all(queue).then(() => {
        if (!this.media) {
          throw new Error("Attempted to set mediaKeys without media element attached");
        }
        return this.media.setMediaKeys(mediaKeys);
      });
      this.setMediaKeysQueue.push(setMediaKeysPromise);
      return setMediaKeysPromise.then(() => {
        this.log(`Media-keys set for "${keySystem}"`);
        queue.push(setMediaKeysPromise);
        this.setMediaKeysQueue = this.setMediaKeysQueue.filter((p) => queue.indexOf(p) === -1);
      });
    }
    generateRequestWithPreferredKeySession(context, initDataType, initData, reason) {
      var _this$config$drmSyste, _this$config$drmSyste2;
      const generateRequestFilter = (_this$config$drmSyste = this.config.drmSystems) == null ? void 0 : (_this$config$drmSyste2 = _this$config$drmSyste[context.keySystem]) == null ? void 0 : _this$config$drmSyste2.generateRequest;
      if (generateRequestFilter) {
        try {
          const mappedInitData = generateRequestFilter.call(this.hls, initDataType, initData, context);
          if (!mappedInitData) {
            throw new Error("Invalid response from configured generateRequest filter");
          }
          initDataType = mappedInitData.initDataType;
          initData = context.decryptdata.pssh = mappedInitData.initData ? new Uint8Array(mappedInitData.initData) : null;
        } catch (error) {
          var _this$hls;
          this.warn(error.message);
          if ((_this$hls = this.hls) != null && _this$hls.config.debug) {
            throw error;
          }
        }
      }
      if (initData === null) {
        this.log(`Skipping key-session request for "${reason}" (no initData)`);
        return Promise.resolve(context);
      }
      const keyId = this.getKeyIdString(context.decryptdata);
      this.log(`Generating key-session request for "${reason}": ${keyId} (init data type: ${initDataType} length: ${initData ? initData.byteLength : null})`);
      const licenseStatus = new EventEmitter();
      const onmessage = context._onmessage = (event) => {
        const keySession = context.mediaKeysSession;
        if (!keySession) {
          licenseStatus.emit("error", new Error("invalid state"));
          return;
        }
        const {
          messageType,
          message
        } = event;
        this.log(`"${messageType}" message event for session "${keySession.sessionId}" message size: ${message.byteLength}`);
        if (messageType === "license-request" || messageType === "license-renewal") {
          this.renewLicense(context, message).catch((error) => {
            this.handleError(error);
            licenseStatus.emit("error", error);
          });
        } else if (messageType === "license-release") {
          if (context.keySystem === KeySystems.FAIRPLAY) {
            this.updateKeySession(context, strToUtf8array("acknowledged"));
            this.removeSession(context);
          }
        } else {
          this.warn(`unhandled media key message type "${messageType}"`);
        }
      };
      const onkeystatuseschange = context._onkeystatuseschange = (event) => {
        const keySession = context.mediaKeysSession;
        if (!keySession) {
          licenseStatus.emit("error", new Error("invalid state"));
          return;
        }
        this.onKeyStatusChange(context);
        const keyStatus = context.keyStatus;
        licenseStatus.emit("keyStatus", keyStatus);
        if (keyStatus === "expired") {
          this.warn(`${context.keySystem} expired for key ${keyId}`);
          this.renewKeySession(context);
        }
      };
      context.mediaKeysSession.addEventListener("message", onmessage);
      context.mediaKeysSession.addEventListener("keystatuseschange", onkeystatuseschange);
      const keyUsablePromise = new Promise((resolve, reject) => {
        licenseStatus.on("error", reject);
        licenseStatus.on("keyStatus", (keyStatus) => {
          if (keyStatus.startsWith("usable")) {
            resolve();
          } else if (keyStatus === "output-restricted") {
            reject(new EMEKeyError({
              type: ErrorTypes.KEY_SYSTEM_ERROR,
              details: ErrorDetails.KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED,
              fatal: false
            }, "HDCP level output restricted"));
          } else if (keyStatus === "internal-error") {
            reject(new EMEKeyError({
              type: ErrorTypes.KEY_SYSTEM_ERROR,
              details: ErrorDetails.KEY_SYSTEM_STATUS_INTERNAL_ERROR,
              fatal: true
            }, `key status changed to "${keyStatus}"`));
          } else if (keyStatus === "expired") {
            reject(new Error("key expired while generating request"));
          } else {
            this.warn(`unhandled key status change "${keyStatus}"`);
          }
        });
      });
      return context.mediaKeysSession.generateRequest(initDataType, initData).then(() => {
        var _context$mediaKeysSes;
        this.log(`Request generated for key-session "${(_context$mediaKeysSes = context.mediaKeysSession) == null ? void 0 : _context$mediaKeysSes.sessionId}" keyId: ${keyId}`);
      }).catch((error) => {
        throw new EMEKeyError({
          type: ErrorTypes.KEY_SYSTEM_ERROR,
          details: ErrorDetails.KEY_SYSTEM_NO_SESSION,
          error,
          fatal: false
        }, `Error generating key-session request: ${error}`);
      }).then(() => keyUsablePromise).catch((error) => {
        licenseStatus.removeAllListeners();
        this.removeSession(context);
        throw error;
      }).then(() => {
        licenseStatus.removeAllListeners();
        return context;
      });
    }
    onKeyStatusChange(mediaKeySessionContext) {
      mediaKeySessionContext.mediaKeysSession.keyStatuses.forEach((status2, keyId) => {
        this.log(`key status change "${status2}" for keyStatuses keyId: ${Hex.hexDump("buffer" in keyId ? new Uint8Array(keyId.buffer, keyId.byteOffset, keyId.byteLength) : new Uint8Array(keyId))} session keyId: ${Hex.hexDump(new Uint8Array(mediaKeySessionContext.decryptdata.keyId || []))} uri: ${mediaKeySessionContext.decryptdata.uri}`);
        mediaKeySessionContext.keyStatus = status2;
      });
    }
    fetchServerCertificate(keySystem) {
      const config = this.config;
      const Loader = config.loader;
      const certLoader = new Loader(config);
      const url = this.getServerCertificateUrl(keySystem);
      if (!url) {
        return Promise.resolve();
      }
      this.log(`Fetching server certificate for "${keySystem}"`);
      return new Promise((resolve, reject) => {
        const loaderContext = {
          responseType: "arraybuffer",
          url
        };
        const loadPolicy = config.certLoadPolicy.default;
        const loaderConfig = {
          loadPolicy,
          timeout: loadPolicy.maxLoadTimeMs,
          maxRetry: 0,
          retryDelay: 0,
          maxRetryDelay: 0
        };
        const loaderCallbacks = {
          onSuccess: (response, stats, context, networkDetails) => {
            resolve(response.data);
          },
          onError: (response, contex, networkDetails, stats) => {
            reject(new EMEKeyError({
              type: ErrorTypes.KEY_SYSTEM_ERROR,
              details: ErrorDetails.KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED,
              fatal: true,
              networkDetails,
              response: _objectSpread2({
                url: loaderContext.url,
                data: void 0
              }, response)
            }, `"${keySystem}" certificate request failed (${url}). Status: ${response.code} (${response.text})`));
          },
          onTimeout: (stats, context, networkDetails) => {
            reject(new EMEKeyError({
              type: ErrorTypes.KEY_SYSTEM_ERROR,
              details: ErrorDetails.KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED,
              fatal: true,
              networkDetails,
              response: {
                url: loaderContext.url,
                data: void 0
              }
            }, `"${keySystem}" certificate request timed out (${url})`));
          },
          onAbort: (stats, context, networkDetails) => {
            reject(new Error("aborted"));
          }
        };
        certLoader.load(loaderContext, loaderConfig, loaderCallbacks);
      });
    }
    setMediaKeysServerCertificate(mediaKeys, keySystem, cert) {
      return new Promise((resolve, reject) => {
        mediaKeys.setServerCertificate(cert).then((success) => {
          this.log(`setServerCertificate ${success ? "success" : "not supported by CDM"} (${cert == null ? void 0 : cert.byteLength}) on "${keySystem}"`);
          resolve(mediaKeys);
        }).catch((error) => {
          reject(new EMEKeyError({
            type: ErrorTypes.KEY_SYSTEM_ERROR,
            details: ErrorDetails.KEY_SYSTEM_SERVER_CERTIFICATE_UPDATE_FAILED,
            error,
            fatal: true
          }, error.message));
        });
      });
    }
    renewLicense(context, keyMessage) {
      return this.requestLicense(context, new Uint8Array(keyMessage)).then((data) => {
        return this.updateKeySession(context, new Uint8Array(data)).catch((error) => {
          throw new EMEKeyError({
            type: ErrorTypes.KEY_SYSTEM_ERROR,
            details: ErrorDetails.KEY_SYSTEM_SESSION_UPDATE_FAILED,
            error,
            fatal: true
          }, error.message);
        });
      });
    }
    unpackPlayReadyKeyMessage(xhr, licenseChallenge) {
      const xmlString = String.fromCharCode.apply(null, new Uint16Array(licenseChallenge.buffer));
      if (!xmlString.includes("PlayReadyKeyMessage")) {
        xhr.setRequestHeader("Content-Type", "text/xml; charset=utf-8");
        return licenseChallenge;
      }
      const keyMessageXml = new DOMParser().parseFromString(xmlString, "application/xml");
      const headers = keyMessageXml.querySelectorAll("HttpHeader");
      if (headers.length > 0) {
        let header;
        for (let i = 0, len = headers.length; i < len; i++) {
          var _header$querySelector, _header$querySelector2;
          header = headers[i];
          const name = (_header$querySelector = header.querySelector("name")) == null ? void 0 : _header$querySelector.textContent;
          const value = (_header$querySelector2 = header.querySelector("value")) == null ? void 0 : _header$querySelector2.textContent;
          if (name && value) {
            xhr.setRequestHeader(name, value);
          }
        }
      }
      const challengeElement = keyMessageXml.querySelector("Challenge");
      const challengeText = challengeElement == null ? void 0 : challengeElement.textContent;
      if (!challengeText) {
        throw new Error(`Cannot find <Challenge> in key message`);
      }
      return strToUtf8array(atob(challengeText));
    }
    setupLicenseXHR(xhr, url, keysListItem, licenseChallenge) {
      const licenseXhrSetup = this.config.licenseXhrSetup;
      if (!licenseXhrSetup) {
        xhr.open("POST", url, true);
        return Promise.resolve({
          xhr,
          licenseChallenge
        });
      }
      return Promise.resolve().then(() => {
        if (!keysListItem.decryptdata) {
          throw new Error("Key removed");
        }
        return licenseXhrSetup.call(this.hls, xhr, url, keysListItem, licenseChallenge);
      }).catch((error) => {
        if (!keysListItem.decryptdata) {
          throw error;
        }
        xhr.open("POST", url, true);
        return licenseXhrSetup.call(this.hls, xhr, url, keysListItem, licenseChallenge);
      }).then((licenseXhrSetupResult) => {
        if (!xhr.readyState) {
          xhr.open("POST", url, true);
        }
        const finalLicenseChallenge = licenseXhrSetupResult ? licenseXhrSetupResult : licenseChallenge;
        return {
          xhr,
          licenseChallenge: finalLicenseChallenge
        };
      });
    }
    requestLicense(keySessionContext, licenseChallenge) {
      const keyLoadPolicy = this.config.keyLoadPolicy.default;
      return new Promise((resolve, reject) => {
        const url = this.getLicenseServerUrl(keySessionContext.keySystem);
        this.log(`Sending license request to URL: ${url}`);
        const xhr = new XMLHttpRequest();
        xhr.responseType = "arraybuffer";
        xhr.onreadystatechange = () => {
          if (!this.hls || !keySessionContext.mediaKeysSession) {
            return reject(new Error("invalid state"));
          }
          if (xhr.readyState === 4) {
            if (xhr.status === 200) {
              this._requestLicenseFailureCount = 0;
              let data = xhr.response;
              this.log(`License received ${data instanceof ArrayBuffer ? data.byteLength : data}`);
              const licenseResponseCallback = this.config.licenseResponseCallback;
              if (licenseResponseCallback) {
                try {
                  data = licenseResponseCallback.call(this.hls, xhr, url, keySessionContext);
                } catch (error) {
                  this.error(error);
                }
              }
              resolve(data);
            } else {
              const retryConfig = keyLoadPolicy.errorRetry;
              const maxNumRetry = retryConfig ? retryConfig.maxNumRetry : 0;
              this._requestLicenseFailureCount++;
              if (this._requestLicenseFailureCount > maxNumRetry || xhr.status >= 400 && xhr.status < 500) {
                reject(new EMEKeyError({
                  type: ErrorTypes.KEY_SYSTEM_ERROR,
                  details: ErrorDetails.KEY_SYSTEM_LICENSE_REQUEST_FAILED,
                  fatal: true,
                  networkDetails: xhr,
                  response: {
                    url,
                    data: void 0,
                    code: xhr.status,
                    text: xhr.statusText
                  }
                }, `License Request XHR failed (${url}). Status: ${xhr.status} (${xhr.statusText})`));
              } else {
                const attemptsLeft = maxNumRetry - this._requestLicenseFailureCount + 1;
                this.warn(`Retrying license request, ${attemptsLeft} attempts left`);
                this.requestLicense(keySessionContext, licenseChallenge).then(resolve, reject);
              }
            }
          }
        };
        if (keySessionContext.licenseXhr && keySessionContext.licenseXhr.readyState !== XMLHttpRequest.DONE) {
          keySessionContext.licenseXhr.abort();
        }
        keySessionContext.licenseXhr = xhr;
        this.setupLicenseXHR(xhr, url, keySessionContext, licenseChallenge).then(({
          xhr: xhr2,
          licenseChallenge: licenseChallenge2
        }) => {
          if (keySessionContext.keySystem == KeySystems.PLAYREADY) {
            licenseChallenge2 = this.unpackPlayReadyKeyMessage(xhr2, licenseChallenge2);
          }
          xhr2.send(licenseChallenge2);
        });
      });
    }
    onMediaAttached(event, data) {
      if (!this.config.emeEnabled) {
        return;
      }
      const media = data.media;
      this.media = media;
      media.addEventListener("encrypted", this.onMediaEncrypted);
      media.addEventListener("waitingforkey", this.onWaitingForKey);
    }
    onMediaDetached() {
      const media = this.media;
      const mediaKeysList = this.mediaKeySessions;
      if (media) {
        media.removeEventListener("encrypted", this.onMediaEncrypted);
        media.removeEventListener("waitingforkey", this.onWaitingForKey);
        this.media = null;
      }
      this._requestLicenseFailureCount = 0;
      this.setMediaKeysQueue = [];
      this.mediaKeySessions = [];
      this.keyIdToKeySessionPromise = {};
      LevelKey.clearKeyUriToKeyIdMap();
      const keySessionCount = mediaKeysList.length;
      _EMEController.CDMCleanupPromise = Promise.all(mediaKeysList.map((mediaKeySessionContext) => this.removeSession(mediaKeySessionContext)).concat(media == null ? void 0 : media.setMediaKeys(null).catch((error) => {
        this.log(`Could not clear media keys: ${error}`);
      }))).then(() => {
        if (keySessionCount) {
          this.log("finished closing key sessions and clearing media keys");
          mediaKeysList.length = 0;
        }
      }).catch((error) => {
        this.log(`Could not close sessions and clear media keys: ${error}`);
      });
    }
    onManifestLoading() {
      this.keyFormatPromise = null;
    }
    onManifestLoaded(event, {
      sessionKeys
    }) {
      if (!sessionKeys || !this.config.emeEnabled) {
        return;
      }
      if (!this.keyFormatPromise) {
        const keyFormats = sessionKeys.reduce((formats, sessionKey) => {
          if (formats.indexOf(sessionKey.keyFormat) === -1) {
            formats.push(sessionKey.keyFormat);
          }
          return formats;
        }, []);
        this.log(`Selecting key-system from session-keys ${keyFormats.join(", ")}`);
        this.keyFormatPromise = this.getKeyFormatPromise(keyFormats);
      }
    }
    removeSession(mediaKeySessionContext) {
      const {
        mediaKeysSession,
        licenseXhr
      } = mediaKeySessionContext;
      if (mediaKeysSession) {
        this.log(`Remove licenses and keys and close session ${mediaKeysSession.sessionId}`);
        if (mediaKeySessionContext._onmessage) {
          mediaKeysSession.removeEventListener("message", mediaKeySessionContext._onmessage);
          mediaKeySessionContext._onmessage = void 0;
        }
        if (mediaKeySessionContext._onkeystatuseschange) {
          mediaKeysSession.removeEventListener("keystatuseschange", mediaKeySessionContext._onkeystatuseschange);
          mediaKeySessionContext._onkeystatuseschange = void 0;
        }
        if (licenseXhr && licenseXhr.readyState !== XMLHttpRequest.DONE) {
          licenseXhr.abort();
        }
        mediaKeySessionContext.mediaKeysSession = mediaKeySessionContext.decryptdata = mediaKeySessionContext.licenseXhr = void 0;
        const index = this.mediaKeySessions.indexOf(mediaKeySessionContext);
        if (index > -1) {
          this.mediaKeySessions.splice(index, 1);
        }
        return mediaKeysSession.remove().catch((error) => {
          this.log(`Could not remove session: ${error}`);
        }).then(() => {
          return mediaKeysSession.close();
        }).catch((error) => {
          this.log(`Could not close session: ${error}`);
        });
      }
    }
  };
  EMEController.CDMCleanupPromise = void 0;
  var EMEKeyError = class extends Error {
    constructor(data, message) {
      super(message);
      this.data = void 0;
      data.error || (data.error = new Error(message));
      this.data = data;
      data.err = data.error;
    }
  };
  var CmObjectType;
  (function(CmObjectType2) {
    CmObjectType2["MANIFEST"] = "m";
    CmObjectType2["AUDIO"] = "a";
    CmObjectType2["VIDEO"] = "v";
    CmObjectType2["MUXED"] = "av";
    CmObjectType2["INIT"] = "i";
    CmObjectType2["CAPTION"] = "c";
    CmObjectType2["TIMED_TEXT"] = "tt";
    CmObjectType2["KEY"] = "k";
    CmObjectType2["OTHER"] = "o";
  })(CmObjectType || (CmObjectType = {}));
  var CmStreamingFormat;
  (function(CmStreamingFormat2) {
    CmStreamingFormat2["DASH"] = "d";
    CmStreamingFormat2["HLS"] = "h";
    CmStreamingFormat2["SMOOTH"] = "s";
    CmStreamingFormat2["OTHER"] = "o";
  })(CmStreamingFormat || (CmStreamingFormat = {}));
  var CmcdHeaderField;
  (function(CmcdHeaderField2) {
    CmcdHeaderField2["OBJECT"] = "CMCD-Object";
    CmcdHeaderField2["REQUEST"] = "CMCD-Request";
    CmcdHeaderField2["SESSION"] = "CMCD-Session";
    CmcdHeaderField2["STATUS"] = "CMCD-Status";
  })(CmcdHeaderField || (CmcdHeaderField = {}));
  var CmcdHeaderMap = {
    [CmcdHeaderField.OBJECT]: ["br", "d", "ot", "tb"],
    [CmcdHeaderField.REQUEST]: ["bl", "dl", "mtp", "nor", "nrr", "su"],
    [CmcdHeaderField.SESSION]: ["cid", "pr", "sf", "sid", "st", "v"],
    [CmcdHeaderField.STATUS]: ["bs", "rtp"]
  };
  var SfItem = class _SfItem {
    constructor(value, params) {
      this.value = void 0;
      this.params = void 0;
      if (Array.isArray(value)) {
        value = value.map((v) => v instanceof _SfItem ? v : new _SfItem(v));
      }
      this.value = value;
      this.params = params;
    }
  };
  var SfToken = class {
    constructor(description) {
      this.description = void 0;
      this.description = description;
    }
  };
  var DICT = "Dict";
  function format(value) {
    if (Array.isArray(value)) {
      return JSON.stringify(value);
    }
    if (value instanceof Map) {
      return "Map{}";
    }
    if (value instanceof Set) {
      return "Set{}";
    }
    if (typeof value === "object") {
      return JSON.stringify(value);
    }
    return String(value);
  }
  function throwError(action, src, type, cause) {
    return new Error(`failed to ${action} "${format(src)}" as ${type}`, {
      cause
    });
  }
  var BARE_ITEM = "Bare Item";
  var BOOLEAN = "Boolean";
  var BYTES = "Byte Sequence";
  var DECIMAL = "Decimal";
  var INTEGER = "Integer";
  function isInvalidInt(value) {
    return value < -999999999999999 || 999999999999999 < value;
  }
  var STRING_REGEX = /[\x00-\x1f\x7f]+/;
  var TOKEN = "Token";
  var KEY = "Key";
  function serializeError(src, type, cause) {
    return throwError("serialize", src, type, cause);
  }
  function serializeBoolean(value) {
    if (typeof value !== "boolean") {
      throw serializeError(value, BOOLEAN);
    }
    return value ? "?1" : "?0";
  }
  function base64encode(binary) {
    return btoa(String.fromCharCode(...binary));
  }
  function serializeByteSequence(value) {
    if (ArrayBuffer.isView(value) === false) {
      throw serializeError(value, BYTES);
    }
    return `:${base64encode(value)}:`;
  }
  function serializeInteger(value) {
    if (isInvalidInt(value)) {
      throw serializeError(value, INTEGER);
    }
    return value.toString();
  }
  function serializeDate(value) {
    return `@${serializeInteger(value.getTime() / 1e3)}`;
  }
  function roundToEven(value, precision) {
    if (value < 0) {
      return -roundToEven(-value, precision);
    }
    const decimalShift = Math.pow(10, precision);
    const isEquidistant = Math.abs(value * decimalShift % 1 - 0.5) < Number.EPSILON;
    if (isEquidistant) {
      const flooredValue = Math.floor(value * decimalShift);
      return (flooredValue % 2 === 0 ? flooredValue : flooredValue + 1) / decimalShift;
    } else {
      return Math.round(value * decimalShift) / decimalShift;
    }
  }
  function serializeDecimal(value) {
    const roundedValue = roundToEven(value, 3);
    if (Math.floor(Math.abs(roundedValue)).toString().length > 12) {
      throw serializeError(value, DECIMAL);
    }
    const stringValue = roundedValue.toString();
    return stringValue.includes(".") ? stringValue : `${stringValue}.0`;
  }
  var STRING = "String";
  function serializeString(value) {
    if (STRING_REGEX.test(value)) {
      throw serializeError(value, STRING);
    }
    return `"${value.replace(/\\/g, `\\\\`).replace(/"/g, `\\"`)}"`;
  }
  function symbolToStr(symbol) {
    return symbol.description || symbol.toString().slice(7, -1);
  }
  function serializeToken(token) {
    const value = symbolToStr(token);
    if (/^([a-zA-Z*])([!#$%&'*+\-.^_`|~\w:/]*)$/.test(value) === false) {
      throw serializeError(value, TOKEN);
    }
    return value;
  }
  function serializeBareItem(value) {
    switch (typeof value) {
      case "number":
        if (!isFiniteNumber(value)) {
          throw serializeError(value, BARE_ITEM);
        }
        if (Number.isInteger(value)) {
          return serializeInteger(value);
        }
        return serializeDecimal(value);
      case "string":
        return serializeString(value);
      case "symbol":
        return serializeToken(value);
      case "boolean":
        return serializeBoolean(value);
      case "object":
        if (value instanceof Date) {
          return serializeDate(value);
        }
        if (value instanceof Uint8Array) {
          return serializeByteSequence(value);
        }
        if (value instanceof SfToken) {
          return serializeToken(value);
        }
      default:
        throw serializeError(value, BARE_ITEM);
    }
  }
  function serializeKey(value) {
    if (/^[a-z*][a-z0-9\-_.*]*$/.test(value) === false) {
      throw serializeError(value, KEY);
    }
    return value;
  }
  function serializeParams(params) {
    if (params == null) {
      return "";
    }
    return Object.entries(params).map(([key, value]) => {
      if (value === true) {
        return `;${serializeKey(key)}`;
      }
      return `;${serializeKey(key)}=${serializeBareItem(value)}`;
    }).join("");
  }
  function serializeItem(value) {
    if (value instanceof SfItem) {
      return `${serializeBareItem(value.value)}${serializeParams(value.params)}`;
    } else {
      return serializeBareItem(value);
    }
  }
  function serializeInnerList(value) {
    return `(${value.value.map(serializeItem).join(" ")})${serializeParams(value.params)}`;
  }
  function serializeDict(dict, options = {
    whitespace: true
  }) {
    if (typeof dict !== "object") {
      throw serializeError(dict, DICT);
    }
    const entries = dict instanceof Map ? dict.entries() : Object.entries(dict);
    const optionalWhiteSpace = options != null && options.whitespace ? " " : "";
    return Array.from(entries).map(([key, item]) => {
      if (item instanceof SfItem === false) {
        item = new SfItem(item);
      }
      let output = serializeKey(key);
      if (item.value === true) {
        output += serializeParams(item.params);
      } else {
        output += "=";
        if (Array.isArray(item.value)) {
          output += serializeInnerList(item);
        } else {
          output += serializeItem(item);
        }
      }
      return output;
    }).join(`,${optionalWhiteSpace}`);
  }
  function encodeSfDict(value, options) {
    return serializeDict(value, options);
  }
  var isTokenField = (key) => key === "ot" || key === "sf" || key === "st";
  var isValid = (value) => {
    if (typeof value === "number") {
      return isFiniteNumber(value);
    }
    return value != null && value !== "" && value !== false;
  };
  function urlToRelativePath(url, base) {
    const to = new URL(url);
    const from = new URL(base);
    if (to.origin !== from.origin) {
      return url;
    }
    const toPath = to.pathname.split("/").slice(1);
    const fromPath = from.pathname.split("/").slice(1, -1);
    while (toPath[0] === fromPath[0]) {
      toPath.shift();
      fromPath.shift();
    }
    while (fromPath.length) {
      fromPath.shift();
      toPath.unshift("..");
    }
    return toPath.join("/");
  }
  function uuid() {
    try {
      return crypto.randomUUID();
    } catch (error) {
      try {
        const url = URL.createObjectURL(new Blob());
        const uuid2 = url.toString();
        URL.revokeObjectURL(url);
        return uuid2.slice(uuid2.lastIndexOf("/") + 1);
      } catch (error2) {
        let dt = (/* @__PURE__ */ new Date()).getTime();
        const uuid2 = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
          const r = (dt + Math.random() * 16) % 16 | 0;
          dt = Math.floor(dt / 16);
          return (c == "x" ? r : r & 3 | 8).toString(16);
        });
        return uuid2;
      }
    }
  }
  var toRounded = (value) => Math.round(value);
  var toUrlSafe = (value, options) => {
    if (options != null && options.baseUrl) {
      value = urlToRelativePath(value, options.baseUrl);
    }
    return encodeURIComponent(value);
  };
  var toHundred = (value) => toRounded(value / 100) * 100;
  var CmcdFormatters = {
    /**
     * Bitrate (kbps) rounded integer
     */
    br: toRounded,
    /**
     * Duration (milliseconds) rounded integer
     */
    d: toRounded,
    /**
     * Buffer Length (milliseconds) rounded nearest 100ms
     */
    bl: toHundred,
    /**
     * Deadline (milliseconds) rounded nearest 100ms
     */
    dl: toHundred,
    /**
     * Measured Throughput (kbps) rounded nearest 100kbps
     */
    mtp: toHundred,
    /**
     * Next Object Request URL encoded
     */
    nor: toUrlSafe,
    /**
     * Requested maximum throughput (kbps) rounded nearest 100kbps
     */
    rtp: toHundred,
    /**
     * Top Bitrate (kbps) rounded integer
     */
    tb: toRounded
  };
  function processCmcd(obj, options) {
    const results = {};
    if (obj == null || typeof obj !== "object") {
      return results;
    }
    const keys = Object.keys(obj).sort();
    const formatters = _extends({}, CmcdFormatters, options == null ? void 0 : options.formatters);
    const filter = options == null ? void 0 : options.filter;
    keys.forEach((key) => {
      if (filter != null && filter(key)) {
        return;
      }
      let value = obj[key];
      const formatter = formatters[key];
      if (formatter) {
        value = formatter(value, options);
      }
      if (key === "v" && value === 1) {
        return;
      }
      if (key == "pr" && value === 1) {
        return;
      }
      if (!isValid(value)) {
        return;
      }
      if (isTokenField(key) && typeof value === "string") {
        value = new SfToken(value);
      }
      results[key] = value;
    });
    return results;
  }
  function encodeCmcd(cmcd, options = {}) {
    if (!cmcd) {
      return "";
    }
    return encodeSfDict(processCmcd(cmcd, options), _extends({
      whitespace: false
    }, options));
  }
  function toCmcdHeaders(cmcd, options = {}) {
    if (!cmcd) {
      return {};
    }
    const entries = Object.entries(cmcd);
    const headerMap = Object.entries(CmcdHeaderMap).concat(Object.entries((options == null ? void 0 : options.customHeaderMap) || {}));
    const shards = entries.reduce((acc, entry) => {
      var _headerMap$find, _acc$field;
      const [key, value] = entry;
      const field = ((_headerMap$find = headerMap.find((entry2) => entry2[1].includes(key))) == null ? void 0 : _headerMap$find[0]) || CmcdHeaderField.REQUEST;
      (_acc$field = acc[field]) != null ? _acc$field : acc[field] = {};
      acc[field][key] = value;
      return acc;
    }, {});
    return Object.entries(shards).reduce((acc, [field, value]) => {
      acc[field] = encodeCmcd(value, options);
      return acc;
    }, {});
  }
  function appendCmcdHeaders(headers, cmcd, options) {
    return _extends(headers, toCmcdHeaders(cmcd, options));
  }
  var CMCD_PARAM = "CMCD";
  function toCmcdQuery(cmcd, options = {}) {
    if (!cmcd) {
      return "";
    }
    const params = encodeCmcd(cmcd, options);
    return `${CMCD_PARAM}=${encodeURIComponent(params)}`;
  }
  var REGEX = /CMCD=[^&#]+/;
  function appendCmcdQuery(url, cmcd, options) {
    const query = toCmcdQuery(cmcd, options);
    if (!query) {
      return url;
    }
    if (REGEX.test(url)) {
      return url.replace(REGEX, query);
    }
    const separator = url.includes("?") ? "&" : "?";
    return `${url}${separator}${query}`;
  }
  var CMCDController = class {
    // eslint-disable-line no-restricted-globals
    constructor(hls) {
      this.hls = void 0;
      this.config = void 0;
      this.media = void 0;
      this.sid = void 0;
      this.cid = void 0;
      this.useHeaders = false;
      this.includeKeys = void 0;
      this.initialized = false;
      this.starved = false;
      this.buffering = true;
      this.audioBuffer = void 0;
      this.videoBuffer = void 0;
      this.onWaiting = () => {
        if (this.initialized) {
          this.starved = true;
        }
        this.buffering = true;
      };
      this.onPlaying = () => {
        if (!this.initialized) {
          this.initialized = true;
        }
        this.buffering = false;
      };
      this.applyPlaylistData = (context) => {
        try {
          this.apply(context, {
            ot: CmObjectType.MANIFEST,
            su: !this.initialized
          });
        } catch (error) {
          logger.warn("Could not generate manifest CMCD data.", error);
        }
      };
      this.applyFragmentData = (context) => {
        try {
          const fragment = context.frag;
          const level = this.hls.levels[fragment.level];
          const ot = this.getObjectType(fragment);
          const data = {
            d: fragment.duration * 1e3,
            ot
          };
          if (ot === CmObjectType.VIDEO || ot === CmObjectType.AUDIO || ot == CmObjectType.MUXED) {
            data.br = level.bitrate / 1e3;
            data.tb = this.getTopBandwidth(ot) / 1e3;
            data.bl = this.getBufferLength(ot);
          }
          this.apply(context, data);
        } catch (error) {
          logger.warn("Could not generate segment CMCD data.", error);
        }
      };
      this.hls = hls;
      const config = this.config = hls.config;
      const {
        cmcd
      } = config;
      if (cmcd != null) {
        config.pLoader = this.createPlaylistLoader();
        config.fLoader = this.createFragmentLoader();
        this.sid = cmcd.sessionId || uuid();
        this.cid = cmcd.contentId;
        this.useHeaders = cmcd.useHeaders === true;
        this.includeKeys = cmcd.includeKeys;
        this.registerListeners();
      }
    }
    registerListeners() {
      const hls = this.hls;
      hls.on(Events2.MEDIA_ATTACHED, this.onMediaAttached, this);
      hls.on(Events2.MEDIA_DETACHED, this.onMediaDetached, this);
      hls.on(Events2.BUFFER_CREATED, this.onBufferCreated, this);
    }
    unregisterListeners() {
      const hls = this.hls;
      hls.off(Events2.MEDIA_ATTACHED, this.onMediaAttached, this);
      hls.off(Events2.MEDIA_DETACHED, this.onMediaDetached, this);
      hls.off(Events2.BUFFER_CREATED, this.onBufferCreated, this);
    }
    destroy() {
      this.unregisterListeners();
      this.onMediaDetached();
      this.hls = this.config = this.audioBuffer = this.videoBuffer = null;
      this.onWaiting = this.onPlaying = null;
    }
    onMediaAttached(event, data) {
      this.media = data.media;
      this.media.addEventListener("waiting", this.onWaiting);
      this.media.addEventListener("playing", this.onPlaying);
    }
    onMediaDetached() {
      if (!this.media) {
        return;
      }
      this.media.removeEventListener("waiting", this.onWaiting);
      this.media.removeEventListener("playing", this.onPlaying);
      this.media = null;
    }
    onBufferCreated(event, data) {
      var _data$tracks$audio, _data$tracks$video;
      this.audioBuffer = (_data$tracks$audio = data.tracks.audio) == null ? void 0 : _data$tracks$audio.buffer;
      this.videoBuffer = (_data$tracks$video = data.tracks.video) == null ? void 0 : _data$tracks$video.buffer;
    }
    /**
     * Create baseline CMCD data
     */
    createData() {
      var _this$media;
      return {
        v: 1,
        sf: CmStreamingFormat.HLS,
        sid: this.sid,
        cid: this.cid,
        pr: (_this$media = this.media) == null ? void 0 : _this$media.playbackRate,
        mtp: this.hls.bandwidthEstimate / 1e3
      };
    }
    /**
     * Apply CMCD data to a request.
     */
    apply(context, data = {}) {
      _extends(data, this.createData());
      const isVideo = data.ot === CmObjectType.INIT || data.ot === CmObjectType.VIDEO || data.ot === CmObjectType.MUXED;
      if (this.starved && isVideo) {
        data.bs = true;
        data.su = true;
        this.starved = false;
      }
      if (data.su == null) {
        data.su = this.buffering;
      }
      const {
        includeKeys
      } = this;
      if (includeKeys) {
        data = Object.keys(data).reduce((acc, key) => {
          includeKeys.includes(key) && (acc[key] = data[key]);
          return acc;
        }, {});
      }
      if (this.useHeaders) {
        if (!context.headers) {
          context.headers = {};
        }
        appendCmcdHeaders(context.headers, data);
      } else {
        context.url = appendCmcdQuery(context.url, data);
      }
    }
    /**
     * The CMCD object type.
     */
    getObjectType(fragment) {
      const {
        type
      } = fragment;
      if (type === "subtitle") {
        return CmObjectType.TIMED_TEXT;
      }
      if (fragment.sn === "initSegment") {
        return CmObjectType.INIT;
      }
      if (type === "audio") {
        return CmObjectType.AUDIO;
      }
      if (type === "main") {
        if (!this.hls.audioTracks.length) {
          return CmObjectType.MUXED;
        }
        return CmObjectType.VIDEO;
      }
      return void 0;
    }
    /**
     * Get the highest bitrate.
     */
    getTopBandwidth(type) {
      let bitrate = 0;
      let levels;
      const hls = this.hls;
      if (type === CmObjectType.AUDIO) {
        levels = hls.audioTracks;
      } else {
        const max = hls.maxAutoLevel;
        const len = max > -1 ? max + 1 : hls.levels.length;
        levels = hls.levels.slice(0, len);
      }
      for (const level of levels) {
        if (level.bitrate > bitrate) {
          bitrate = level.bitrate;
        }
      }
      return bitrate > 0 ? bitrate : NaN;
    }
    /**
     * Get the buffer length for a media type in milliseconds
     */
    getBufferLength(type) {
      const media = this.hls.media;
      const buffer = type === CmObjectType.AUDIO ? this.audioBuffer : this.videoBuffer;
      if (!buffer || !media) {
        return NaN;
      }
      const info = BufferHelper.bufferInfo(buffer, media.currentTime, this.config.maxBufferHole);
      return info.len * 1e3;
    }
    /**
     * Create a playlist loader
     */
    createPlaylistLoader() {
      const {
        pLoader
      } = this.config;
      const apply = this.applyPlaylistData;
      const Ctor = pLoader || this.config.loader;
      return class CmcdPlaylistLoader {
        constructor(config) {
          this.loader = void 0;
          this.loader = new Ctor(config);
        }
        get stats() {
          return this.loader.stats;
        }
        get context() {
          return this.loader.context;
        }
        destroy() {
          this.loader.destroy();
        }
        abort() {
          this.loader.abort();
        }
        load(context, config, callbacks) {
          apply(context);
          this.loader.load(context, config, callbacks);
        }
      };
    }
    /**
     * Create a playlist loader
     */
    createFragmentLoader() {
      const {
        fLoader
      } = this.config;
      const apply = this.applyFragmentData;
      const Ctor = fLoader || this.config.loader;
      return class CmcdFragmentLoader {
        constructor(config) {
          this.loader = void 0;
          this.loader = new Ctor(config);
        }
        get stats() {
          return this.loader.stats;
        }
        get context() {
          return this.loader.context;
        }
        destroy() {
          this.loader.destroy();
        }
        abort() {
          this.loader.abort();
        }
        load(context, config, callbacks) {
          apply(context);
          this.loader.load(context, config, callbacks);
        }
      };
    }
  };
  var PATHWAY_PENALTY_DURATION_MS = 3e5;
  var ContentSteeringController = class {
    constructor(hls) {
      this.hls = void 0;
      this.log = void 0;
      this.loader = null;
      this.uri = null;
      this.pathwayId = ".";
      this.pathwayPriority = null;
      this.timeToLoad = 300;
      this.reloadTimer = -1;
      this.updated = 0;
      this.started = false;
      this.enabled = true;
      this.levels = null;
      this.audioTracks = null;
      this.subtitleTracks = null;
      this.penalizedPathways = {};
      this.hls = hls;
      this.log = logger.log.bind(logger, `[content-steering]:`);
      this.registerListeners();
    }
    registerListeners() {
      const hls = this.hls;
      hls.on(Events2.MANIFEST_LOADING, this.onManifestLoading, this);
      hls.on(Events2.MANIFEST_LOADED, this.onManifestLoaded, this);
      hls.on(Events2.MANIFEST_PARSED, this.onManifestParsed, this);
      hls.on(Events2.ERROR, this.onError, this);
    }
    unregisterListeners() {
      const hls = this.hls;
      if (!hls) {
        return;
      }
      hls.off(Events2.MANIFEST_LOADING, this.onManifestLoading, this);
      hls.off(Events2.MANIFEST_LOADED, this.onManifestLoaded, this);
      hls.off(Events2.MANIFEST_PARSED, this.onManifestParsed, this);
      hls.off(Events2.ERROR, this.onError, this);
    }
    startLoad() {
      this.started = true;
      this.clearTimeout();
      if (this.enabled && this.uri) {
        if (this.updated) {
          const ttl = this.timeToLoad * 1e3 - (performance.now() - this.updated);
          if (ttl > 0) {
            this.scheduleRefresh(this.uri, ttl);
            return;
          }
        }
        this.loadSteeringManifest(this.uri);
      }
    }
    stopLoad() {
      this.started = false;
      if (this.loader) {
        this.loader.destroy();
        this.loader = null;
      }
      this.clearTimeout();
    }
    clearTimeout() {
      if (this.reloadTimer !== -1) {
        self.clearTimeout(this.reloadTimer);
        this.reloadTimer = -1;
      }
    }
    destroy() {
      this.unregisterListeners();
      this.stopLoad();
      this.hls = null;
      this.levels = this.audioTracks = this.subtitleTracks = null;
    }
    removeLevel(levelToRemove) {
      const levels = this.levels;
      if (levels) {
        this.levels = levels.filter((level) => level !== levelToRemove);
      }
    }
    onManifestLoading() {
      this.stopLoad();
      this.enabled = true;
      this.timeToLoad = 300;
      this.updated = 0;
      this.uri = null;
      this.pathwayId = ".";
      this.levels = this.audioTracks = this.subtitleTracks = null;
    }
    onManifestLoaded(event, data) {
      const {
        contentSteering
      } = data;
      if (contentSteering === null) {
        return;
      }
      this.pathwayId = contentSteering.pathwayId;
      this.uri = contentSteering.uri;
      if (this.started) {
        this.startLoad();
      }
    }
    onManifestParsed(event, data) {
      this.audioTracks = data.audioTracks;
      this.subtitleTracks = data.subtitleTracks;
    }
    onError(event, data) {
      const {
        errorAction
      } = data;
      if ((errorAction == null ? void 0 : errorAction.action) === NetworkErrorAction.SendAlternateToPenaltyBox && errorAction.flags === ErrorActionFlags.MoveAllAlternatesMatchingHost) {
        const levels = this.levels;
        let pathwayPriority = this.pathwayPriority;
        let errorPathway = this.pathwayId;
        if (data.context) {
          const {
            groupId,
            pathwayId,
            type
          } = data.context;
          if (groupId && levels) {
            errorPathway = this.getPathwayForGroupId(groupId, type, errorPathway);
          } else if (pathwayId) {
            errorPathway = pathwayId;
          }
        }
        if (!(errorPathway in this.penalizedPathways)) {
          this.penalizedPathways[errorPathway] = performance.now();
        }
        if (!pathwayPriority && levels) {
          pathwayPriority = levels.reduce((pathways, level) => {
            if (pathways.indexOf(level.pathwayId) === -1) {
              pathways.push(level.pathwayId);
            }
            return pathways;
          }, []);
        }
        if (pathwayPriority && pathwayPriority.length > 1) {
          this.updatePathwayPriority(pathwayPriority);
          errorAction.resolved = this.pathwayId !== errorPathway;
        }
        if (!errorAction.resolved) {
          logger.warn(`Could not resolve ${data.details} ("${data.error.message}") with content-steering for Pathway: ${errorPathway} levels: ${levels ? levels.length : levels} priorities: ${JSON.stringify(pathwayPriority)} penalized: ${JSON.stringify(this.penalizedPathways)}`);
        }
      }
    }
    filterParsedLevels(levels) {
      this.levels = levels;
      let pathwayLevels = this.getLevelsForPathway(this.pathwayId);
      if (pathwayLevels.length === 0) {
        const pathwayId = levels[0].pathwayId;
        this.log(`No levels found in Pathway ${this.pathwayId}. Setting initial Pathway to "${pathwayId}"`);
        pathwayLevels = this.getLevelsForPathway(pathwayId);
        this.pathwayId = pathwayId;
      }
      if (pathwayLevels.length !== levels.length) {
        this.log(`Found ${pathwayLevels.length}/${levels.length} levels in Pathway "${this.pathwayId}"`);
      }
      return pathwayLevels;
    }
    getLevelsForPathway(pathwayId) {
      if (this.levels === null) {
        return [];
      }
      return this.levels.filter((level) => pathwayId === level.pathwayId);
    }
    updatePathwayPriority(pathwayPriority) {
      this.pathwayPriority = pathwayPriority;
      let levels;
      const penalizedPathways = this.penalizedPathways;
      const now2 = performance.now();
      Object.keys(penalizedPathways).forEach((pathwayId) => {
        if (now2 - penalizedPathways[pathwayId] > PATHWAY_PENALTY_DURATION_MS) {
          delete penalizedPathways[pathwayId];
        }
      });
      for (let i = 0; i < pathwayPriority.length; i++) {
        const pathwayId = pathwayPriority[i];
        if (pathwayId in penalizedPathways) {
          continue;
        }
        if (pathwayId === this.pathwayId) {
          return;
        }
        const selectedIndex = this.hls.nextLoadLevel;
        const selectedLevel = this.hls.levels[selectedIndex];
        levels = this.getLevelsForPathway(pathwayId);
        if (levels.length > 0) {
          this.log(`Setting Pathway to "${pathwayId}"`);
          this.pathwayId = pathwayId;
          reassignFragmentLevelIndexes(levels);
          this.hls.trigger(Events2.LEVELS_UPDATED, {
            levels
          });
          const levelAfterChange = this.hls.levels[selectedIndex];
          if (selectedLevel && levelAfterChange && this.levels) {
            if (levelAfterChange.attrs["STABLE-VARIANT-ID"] !== selectedLevel.attrs["STABLE-VARIANT-ID"] && levelAfterChange.bitrate !== selectedLevel.bitrate) {
              this.log(`Unstable Pathways change from bitrate ${selectedLevel.bitrate} to ${levelAfterChange.bitrate}`);
            }
            this.hls.nextLoadLevel = selectedIndex;
          }
          break;
        }
      }
    }
    getPathwayForGroupId(groupId, type, defaultPathway) {
      const levels = this.getLevelsForPathway(defaultPathway).concat(this.levels || []);
      for (let i = 0; i < levels.length; i++) {
        if (type === PlaylistContextType.AUDIO_TRACK && levels[i].hasAudioGroup(groupId) || type === PlaylistContextType.SUBTITLE_TRACK && levels[i].hasSubtitleGroup(groupId)) {
          return levels[i].pathwayId;
        }
      }
      return defaultPathway;
    }
    clonePathways(pathwayClones) {
      const levels = this.levels;
      if (!levels) {
        return;
      }
      const audioGroupCloneMap = {};
      const subtitleGroupCloneMap = {};
      pathwayClones.forEach((pathwayClone) => {
        const {
          ID: cloneId,
          "BASE-ID": baseId,
          "URI-REPLACEMENT": uriReplacement
        } = pathwayClone;
        if (levels.some((level) => level.pathwayId === cloneId)) {
          return;
        }
        const clonedVariants = this.getLevelsForPathway(baseId).map((baseLevel) => {
          const attributes = new AttrList(baseLevel.attrs);
          attributes["PATHWAY-ID"] = cloneId;
          const clonedAudioGroupId = attributes.AUDIO && `${attributes.AUDIO}_clone_${cloneId}`;
          const clonedSubtitleGroupId = attributes.SUBTITLES && `${attributes.SUBTITLES}_clone_${cloneId}`;
          if (clonedAudioGroupId) {
            audioGroupCloneMap[attributes.AUDIO] = clonedAudioGroupId;
            attributes.AUDIO = clonedAudioGroupId;
          }
          if (clonedSubtitleGroupId) {
            subtitleGroupCloneMap[attributes.SUBTITLES] = clonedSubtitleGroupId;
            attributes.SUBTITLES = clonedSubtitleGroupId;
          }
          const url = performUriReplacement(baseLevel.uri, attributes["STABLE-VARIANT-ID"], "PER-VARIANT-URIS", uriReplacement);
          const clonedLevel = new Level({
            attrs: attributes,
            audioCodec: baseLevel.audioCodec,
            bitrate: baseLevel.bitrate,
            height: baseLevel.height,
            name: baseLevel.name,
            url,
            videoCodec: baseLevel.videoCodec,
            width: baseLevel.width
          });
          if (baseLevel.audioGroups) {
            for (let i = 1; i < baseLevel.audioGroups.length; i++) {
              clonedLevel.addGroupId("audio", `${baseLevel.audioGroups[i]}_clone_${cloneId}`);
            }
          }
          if (baseLevel.subtitleGroups) {
            for (let i = 1; i < baseLevel.subtitleGroups.length; i++) {
              clonedLevel.addGroupId("text", `${baseLevel.subtitleGroups[i]}_clone_${cloneId}`);
            }
          }
          return clonedLevel;
        });
        levels.push(...clonedVariants);
        cloneRenditionGroups(this.audioTracks, audioGroupCloneMap, uriReplacement, cloneId);
        cloneRenditionGroups(this.subtitleTracks, subtitleGroupCloneMap, uriReplacement, cloneId);
      });
    }
    loadSteeringManifest(uri) {
      const config = this.hls.config;
      const Loader = config.loader;
      if (this.loader) {
        this.loader.destroy();
      }
      this.loader = new Loader(config);
      let url;
      try {
        url = new self.URL(uri);
      } catch (error) {
        this.enabled = false;
        this.log(`Failed to parse Steering Manifest URI: ${uri}`);
        return;
      }
      if (url.protocol !== "data:") {
        const throughput = (this.hls.bandwidthEstimate || config.abrEwmaDefaultEstimate) | 0;
        url.searchParams.set("_HLS_pathway", this.pathwayId);
        url.searchParams.set("_HLS_throughput", "" + throughput);
      }
      const context = {
        responseType: "json",
        url: url.href
      };
      const loadPolicy = config.steeringManifestLoadPolicy.default;
      const legacyRetryCompatibility = loadPolicy.errorRetry || loadPolicy.timeoutRetry || {};
      const loaderConfig = {
        loadPolicy,
        timeout: loadPolicy.maxLoadTimeMs,
        maxRetry: legacyRetryCompatibility.maxNumRetry || 0,
        retryDelay: legacyRetryCompatibility.retryDelayMs || 0,
        maxRetryDelay: legacyRetryCompatibility.maxRetryDelayMs || 0
      };
      const callbacks = {
        onSuccess: (response, stats, context2, networkDetails) => {
          this.log(`Loaded steering manifest: "${url}"`);
          const steeringData = response.data;
          if (steeringData.VERSION !== 1) {
            this.log(`Steering VERSION ${steeringData.VERSION} not supported!`);
            return;
          }
          this.updated = performance.now();
          this.timeToLoad = steeringData.TTL;
          const {
            "RELOAD-URI": reloadUri,
            "PATHWAY-CLONES": pathwayClones,
            "PATHWAY-PRIORITY": pathwayPriority
          } = steeringData;
          if (reloadUri) {
            try {
              this.uri = new self.URL(reloadUri, url).href;
            } catch (error) {
              this.enabled = false;
              this.log(`Failed to parse Steering Manifest RELOAD-URI: ${reloadUri}`);
              return;
            }
          }
          this.scheduleRefresh(this.uri || context2.url);
          if (pathwayClones) {
            this.clonePathways(pathwayClones);
          }
          const loadedSteeringData = {
            steeringManifest: steeringData,
            url: url.toString()
          };
          this.hls.trigger(Events2.STEERING_MANIFEST_LOADED, loadedSteeringData);
          if (pathwayPriority) {
            this.updatePathwayPriority(pathwayPriority);
          }
        },
        onError: (error, context2, networkDetails, stats) => {
          this.log(`Error loading steering manifest: ${error.code} ${error.text} (${context2.url})`);
          this.stopLoad();
          if (error.code === 410) {
            this.enabled = false;
            this.log(`Steering manifest ${context2.url} no longer available`);
            return;
          }
          let ttl = this.timeToLoad * 1e3;
          if (error.code === 429) {
            const loader = this.loader;
            if (typeof (loader == null ? void 0 : loader.getResponseHeader) === "function") {
              const retryAfter = loader.getResponseHeader("Retry-After");
              if (retryAfter) {
                ttl = parseFloat(retryAfter) * 1e3;
              }
            }
            this.log(`Steering manifest ${context2.url} rate limited`);
            return;
          }
          this.scheduleRefresh(this.uri || context2.url, ttl);
        },
        onTimeout: (stats, context2, networkDetails) => {
          this.log(`Timeout loading steering manifest (${context2.url})`);
          this.scheduleRefresh(this.uri || context2.url);
        }
      };
      this.log(`Requesting steering manifest: ${url}`);
      this.loader.load(context, loaderConfig, callbacks);
    }
    scheduleRefresh(uri, ttlMs = this.timeToLoad * 1e3) {
      this.clearTimeout();
      this.reloadTimer = self.setTimeout(() => {
        var _this$hls;
        const media = (_this$hls = this.hls) == null ? void 0 : _this$hls.media;
        if (media && !media.ended) {
          this.loadSteeringManifest(uri);
          return;
        }
        this.scheduleRefresh(uri, this.timeToLoad * 1e3);
      }, ttlMs);
    }
  };
  function cloneRenditionGroups(tracks, groupCloneMap, uriReplacement, cloneId) {
    if (!tracks) {
      return;
    }
    Object.keys(groupCloneMap).forEach((audioGroupId) => {
      const clonedTracks = tracks.filter((track) => track.groupId === audioGroupId).map((track) => {
        const clonedTrack = _extends({}, track);
        clonedTrack.details = void 0;
        clonedTrack.attrs = new AttrList(clonedTrack.attrs);
        clonedTrack.url = clonedTrack.attrs.URI = performUriReplacement(track.url, track.attrs["STABLE-RENDITION-ID"], "PER-RENDITION-URIS", uriReplacement);
        clonedTrack.groupId = clonedTrack.attrs["GROUP-ID"] = groupCloneMap[audioGroupId];
        clonedTrack.attrs["PATHWAY-ID"] = cloneId;
        return clonedTrack;
      });
      tracks.push(...clonedTracks);
    });
  }
  function performUriReplacement(uri, stableId, perOptionKey, uriReplacement) {
    const {
      HOST: host,
      PARAMS: params,
      [perOptionKey]: perOptionUris
    } = uriReplacement;
    let perVariantUri;
    if (stableId) {
      perVariantUri = perOptionUris == null ? void 0 : perOptionUris[stableId];
      if (perVariantUri) {
        uri = perVariantUri;
      }
    }
    const url = new self.URL(uri);
    if (host && !perVariantUri) {
      url.host = host;
    }
    if (params) {
      Object.keys(params).sort().forEach((key) => {
        if (key) {
          url.searchParams.set(key, params[key]);
        }
      });
    }
    return url.href;
  }
  var AGE_HEADER_LINE_REGEX = /^age:\s*[\d.]+\s*$/im;
  var XhrLoader = class {
    constructor(config) {
      this.xhrSetup = void 0;
      this.requestTimeout = void 0;
      this.retryTimeout = void 0;
      this.retryDelay = void 0;
      this.config = null;
      this.callbacks = null;
      this.context = null;
      this.loader = null;
      this.stats = void 0;
      this.xhrSetup = config ? config.xhrSetup || null : null;
      this.stats = new LoadStats();
      this.retryDelay = 0;
    }
    destroy() {
      this.callbacks = null;
      this.abortInternal();
      this.loader = null;
      this.config = null;
      this.context = null;
      this.xhrSetup = null;
    }
    abortInternal() {
      const loader = this.loader;
      self.clearTimeout(this.requestTimeout);
      self.clearTimeout(this.retryTimeout);
      if (loader) {
        loader.onreadystatechange = null;
        loader.onprogress = null;
        if (loader.readyState !== 4) {
          this.stats.aborted = true;
          loader.abort();
        }
      }
    }
    abort() {
      var _this$callbacks;
      this.abortInternal();
      if ((_this$callbacks = this.callbacks) != null && _this$callbacks.onAbort) {
        this.callbacks.onAbort(this.stats, this.context, this.loader);
      }
    }
    load(context, config, callbacks) {
      if (this.stats.loading.start) {
        throw new Error("Loader can only be used once.");
      }
      this.stats.loading.start = self.performance.now();
      this.context = context;
      this.config = config;
      this.callbacks = callbacks;
      this.loadInternal();
    }
    loadInternal() {
      const {
        config,
        context
      } = this;
      if (!config || !context) {
        return;
      }
      const xhr = this.loader = new self.XMLHttpRequest();
      const stats = this.stats;
      stats.loading.first = 0;
      stats.loaded = 0;
      stats.aborted = false;
      const xhrSetup = this.xhrSetup;
      if (xhrSetup) {
        Promise.resolve().then(() => {
          if (this.loader !== xhr || this.stats.aborted) return;
          return xhrSetup(xhr, context.url);
        }).catch((error) => {
          if (this.loader !== xhr || this.stats.aborted) return;
          xhr.open("GET", context.url, true);
          return xhrSetup(xhr, context.url);
        }).then(() => {
          if (this.loader !== xhr || this.stats.aborted) return;
          this.openAndSendXhr(xhr, context, config);
        }).catch((error) => {
          this.callbacks.onError({
            code: xhr.status,
            text: error.message
          }, context, xhr, stats);
          return;
        });
      } else {
        this.openAndSendXhr(xhr, context, config);
      }
    }
    openAndSendXhr(xhr, context, config) {
      if (!xhr.readyState) {
        xhr.open("GET", context.url, true);
      }
      const headers = context.headers;
      const {
        maxTimeToFirstByteMs,
        maxLoadTimeMs
      } = config.loadPolicy;
      if (headers) {
        for (const header in headers) {
          xhr.setRequestHeader(header, headers[header]);
        }
      }
      if (context.rangeEnd) {
        xhr.setRequestHeader("Range", "bytes=" + context.rangeStart + "-" + (context.rangeEnd - 1));
      }
      xhr.onreadystatechange = this.readystatechange.bind(this);
      xhr.onprogress = this.loadprogress.bind(this);
      xhr.responseType = context.responseType;
      self.clearTimeout(this.requestTimeout);
      config.timeout = maxTimeToFirstByteMs && isFiniteNumber(maxTimeToFirstByteMs) ? maxTimeToFirstByteMs : maxLoadTimeMs;
      this.requestTimeout = self.setTimeout(this.loadtimeout.bind(this), config.timeout);
      xhr.send();
    }
    readystatechange() {
      const {
        context,
        loader: xhr,
        stats
      } = this;
      if (!context || !xhr) {
        return;
      }
      const readyState = xhr.readyState;
      const config = this.config;
      if (stats.aborted) {
        return;
      }
      if (readyState >= 2) {
        if (stats.loading.first === 0) {
          stats.loading.first = Math.max(self.performance.now(), stats.loading.start);
          if (config.timeout !== config.loadPolicy.maxLoadTimeMs) {
            self.clearTimeout(this.requestTimeout);
            config.timeout = config.loadPolicy.maxLoadTimeMs;
            this.requestTimeout = self.setTimeout(this.loadtimeout.bind(this), config.loadPolicy.maxLoadTimeMs - (stats.loading.first - stats.loading.start));
          }
        }
        if (readyState === 4) {
          self.clearTimeout(this.requestTimeout);
          xhr.onreadystatechange = null;
          xhr.onprogress = null;
          const status2 = xhr.status;
          const useResponseText = xhr.responseType === "text" ? xhr.responseText : null;
          if (status2 >= 200 && status2 < 300) {
            const data = useResponseText != null ? useResponseText : xhr.response;
            if (data != null) {
              stats.loading.end = Math.max(self.performance.now(), stats.loading.first);
              const len = xhr.responseType === "arraybuffer" ? data.byteLength : data.length;
              stats.loaded = stats.total = len;
              stats.bwEstimate = stats.total * 8e3 / (stats.loading.end - stats.loading.first);
              if (!this.callbacks) {
                return;
              }
              const onProgress = this.callbacks.onProgress;
              if (onProgress) {
                onProgress(stats, context, data, xhr);
              }
              if (!this.callbacks) {
                return;
              }
              const _response = {
                url: xhr.responseURL,
                data,
                code: status2
              };
              this.callbacks.onSuccess(_response, stats, context, xhr);
              return;
            }
          }
          const retryConfig = config.loadPolicy.errorRetry;
          const retryCount = stats.retry;
          const response = {
            url: context.url,
            data: void 0,
            code: status2
          };
          if (shouldRetry(retryConfig, retryCount, false, response)) {
            this.retry(retryConfig);
          } else {
            logger.error(`${status2} while loading ${context.url}`);
            this.callbacks.onError({
              code: status2,
              text: xhr.statusText
            }, context, xhr, stats);
          }
        }
      }
    }
    loadtimeout() {
      if (!this.config) return;
      const retryConfig = this.config.loadPolicy.timeoutRetry;
      const retryCount = this.stats.retry;
      if (shouldRetry(retryConfig, retryCount, true)) {
        this.retry(retryConfig);
      } else {
        var _this$context;
        logger.warn(`timeout while loading ${(_this$context = this.context) == null ? void 0 : _this$context.url}`);
        const callbacks = this.callbacks;
        if (callbacks) {
          this.abortInternal();
          callbacks.onTimeout(this.stats, this.context, this.loader);
        }
      }
    }
    retry(retryConfig) {
      const {
        context,
        stats
      } = this;
      this.retryDelay = getRetryDelay(retryConfig, stats.retry);
      stats.retry++;
      logger.warn(`${status ? "HTTP Status " + status : "Timeout"} while loading ${context == null ? void 0 : context.url}, retrying ${stats.retry}/${retryConfig.maxNumRetry} in ${this.retryDelay}ms`);
      this.abortInternal();
      this.loader = null;
      self.clearTimeout(this.retryTimeout);
      this.retryTimeout = self.setTimeout(this.loadInternal.bind(this), this.retryDelay);
    }
    loadprogress(event) {
      const stats = this.stats;
      stats.loaded = event.loaded;
      if (event.lengthComputable) {
        stats.total = event.total;
      }
    }
    getCacheAge() {
      let result = null;
      if (this.loader && AGE_HEADER_LINE_REGEX.test(this.loader.getAllResponseHeaders())) {
        const ageHeader = this.loader.getResponseHeader("age");
        result = ageHeader ? parseFloat(ageHeader) : null;
      }
      return result;
    }
    getResponseHeader(name) {
      if (this.loader && new RegExp(`^${name}:\\s*[\\d.]+\\s*$`, "im").test(this.loader.getAllResponseHeaders())) {
        return this.loader.getResponseHeader(name);
      }
      return null;
    }
  };
  function fetchSupported() {
    if (
      // @ts-ignore
      self.fetch && self.AbortController && self.ReadableStream && self.Request
    ) {
      try {
        new self.ReadableStream({});
        return true;
      } catch (e) {
      }
    }
    return false;
  }
  var BYTERANGE = /(\d+)-(\d+)\/(\d+)/;
  var FetchLoader = class {
    constructor(config) {
      this.fetchSetup = void 0;
      this.requestTimeout = void 0;
      this.request = null;
      this.response = null;
      this.controller = void 0;
      this.context = null;
      this.config = null;
      this.callbacks = null;
      this.stats = void 0;
      this.loader = null;
      this.fetchSetup = config.fetchSetup || getRequest;
      this.controller = new self.AbortController();
      this.stats = new LoadStats();
    }
    destroy() {
      this.loader = this.callbacks = this.context = this.config = this.request = null;
      this.abortInternal();
      this.response = null;
      this.fetchSetup = this.controller = this.stats = null;
    }
    abortInternal() {
      if (this.controller && !this.stats.loading.end) {
        this.stats.aborted = true;
        this.controller.abort();
      }
    }
    abort() {
      var _this$callbacks;
      this.abortInternal();
      if ((_this$callbacks = this.callbacks) != null && _this$callbacks.onAbort) {
        this.callbacks.onAbort(this.stats, this.context, this.response);
      }
    }
    load(context, config, callbacks) {
      const stats = this.stats;
      if (stats.loading.start) {
        throw new Error("Loader can only be used once.");
      }
      stats.loading.start = self.performance.now();
      const initParams = getRequestParameters(context, this.controller.signal);
      const onProgress = callbacks.onProgress;
      const isArrayBuffer = context.responseType === "arraybuffer";
      const LENGTH = isArrayBuffer ? "byteLength" : "length";
      const {
        maxTimeToFirstByteMs,
        maxLoadTimeMs
      } = config.loadPolicy;
      this.context = context;
      this.config = config;
      this.callbacks = callbacks;
      this.request = this.fetchSetup(context, initParams);
      self.clearTimeout(this.requestTimeout);
      config.timeout = maxTimeToFirstByteMs && isFiniteNumber(maxTimeToFirstByteMs) ? maxTimeToFirstByteMs : maxLoadTimeMs;
      this.requestTimeout = self.setTimeout(() => {
        this.abortInternal();
        callbacks.onTimeout(stats, context, this.response);
      }, config.timeout);
      self.fetch(this.request).then((response) => {
        this.response = this.loader = response;
        const first = Math.max(self.performance.now(), stats.loading.start);
        self.clearTimeout(this.requestTimeout);
        config.timeout = maxLoadTimeMs;
        this.requestTimeout = self.setTimeout(() => {
          this.abortInternal();
          callbacks.onTimeout(stats, context, this.response);
        }, maxLoadTimeMs - (first - stats.loading.start));
        if (!response.ok) {
          const {
            status: status2,
            statusText
          } = response;
          throw new FetchError(statusText || "fetch, bad network response", status2, response);
        }
        stats.loading.first = first;
        stats.total = getContentLength(response.headers) || stats.total;
        if (onProgress && isFiniteNumber(config.highWaterMark)) {
          return this.loadProgressively(response, stats, context, config.highWaterMark, onProgress);
        }
        if (isArrayBuffer) {
          return response.arrayBuffer();
        }
        if (context.responseType === "json") {
          return response.json();
        }
        return response.text();
      }).then((responseData) => {
        const response = this.response;
        if (!response) {
          throw new Error("loader destroyed");
        }
        self.clearTimeout(this.requestTimeout);
        stats.loading.end = Math.max(self.performance.now(), stats.loading.first);
        const total = responseData[LENGTH];
        if (total) {
          stats.loaded = stats.total = total;
        }
        const loaderResponse = {
          url: response.url,
          data: responseData,
          code: response.status
        };
        if (onProgress && !isFiniteNumber(config.highWaterMark)) {
          onProgress(stats, context, responseData, response);
        }
        callbacks.onSuccess(loaderResponse, stats, context, response);
      }).catch((error) => {
        self.clearTimeout(this.requestTimeout);
        if (stats.aborted) {
          return;
        }
        const code = !error ? 0 : error.code || 0;
        const text = !error ? null : error.message;
        callbacks.onError({
          code,
          text
        }, context, error ? error.details : null, stats);
      });
    }
    getCacheAge() {
      let result = null;
      if (this.response) {
        const ageHeader = this.response.headers.get("age");
        result = ageHeader ? parseFloat(ageHeader) : null;
      }
      return result;
    }
    getResponseHeader(name) {
      return this.response ? this.response.headers.get(name) : null;
    }
    loadProgressively(response, stats, context, highWaterMark = 0, onProgress) {
      const chunkCache = new ChunkCache();
      const reader = response.body.getReader();
      const pump = () => {
        return reader.read().then((data) => {
          if (data.done) {
            if (chunkCache.dataLength) {
              onProgress(stats, context, chunkCache.flush(), response);
            }
            return Promise.resolve(new ArrayBuffer(0));
          }
          const chunk = data.value;
          const len = chunk.length;
          stats.loaded += len;
          if (len < highWaterMark || chunkCache.dataLength) {
            chunkCache.push(chunk);
            if (chunkCache.dataLength >= highWaterMark) {
              onProgress(stats, context, chunkCache.flush(), response);
            }
          } else {
            onProgress(stats, context, chunk, response);
          }
          return pump();
        }).catch(() => {
          return Promise.reject();
        });
      };
      return pump();
    }
  };
  function getRequestParameters(context, signal) {
    const initParams = {
      method: "GET",
      mode: "cors",
      credentials: "same-origin",
      signal,
      headers: new self.Headers(_extends({}, context.headers))
    };
    if (context.rangeEnd) {
      initParams.headers.set("Range", "bytes=" + context.rangeStart + "-" + String(context.rangeEnd - 1));
    }
    return initParams;
  }
  function getByteRangeLength(byteRangeHeader) {
    const result = BYTERANGE.exec(byteRangeHeader);
    if (result) {
      return parseInt(result[2]) - parseInt(result[1]) + 1;
    }
  }
  function getContentLength(headers) {
    const contentRange = headers.get("Content-Range");
    if (contentRange) {
      const byteRangeLength = getByteRangeLength(contentRange);
      if (isFiniteNumber(byteRangeLength)) {
        return byteRangeLength;
      }
    }
    const contentLength = headers.get("Content-Length");
    if (contentLength) {
      return parseInt(contentLength);
    }
  }
  function getRequest(context, initParams) {
    return new self.Request(context.url, initParams);
  }
  var FetchError = class extends Error {
    constructor(message, code, details) {
      super(message);
      this.code = void 0;
      this.details = void 0;
      this.code = code;
      this.details = details;
    }
  };
  var WHITESPACE_CHAR = /\s/;
  var Cues = {
    newCue(track, startTime, endTime, captionScreen) {
      const result = [];
      let row;
      let cue;
      let indenting;
      let indent;
      let text;
      const Cue = self.VTTCue || self.TextTrackCue;
      for (let r = 0; r < captionScreen.rows.length; r++) {
        row = captionScreen.rows[r];
        indenting = true;
        indent = 0;
        text = "";
        if (!row.isEmpty()) {
          var _track$cues;
          for (let c = 0; c < row.chars.length; c++) {
            if (WHITESPACE_CHAR.test(row.chars[c].uchar) && indenting) {
              indent++;
            } else {
              text += row.chars[c].uchar;
              indenting = false;
            }
          }
          row.cueStartTime = startTime;
          if (startTime === endTime) {
            endTime += 1e-4;
          }
          if (indent >= 16) {
            indent--;
          } else {
            indent++;
          }
          const cueText = fixLineBreaks(text.trim());
          const id = generateCueId(startTime, endTime, cueText);
          if (!(track != null && (_track$cues = track.cues) != null && _track$cues.getCueById(id))) {
            cue = new Cue(startTime, endTime, cueText);
            cue.id = id;
            cue.line = r + 1;
            cue.align = "left";
            cue.position = 10 + Math.min(80, Math.floor(indent * 8 / 32) * 10);
            result.push(cue);
          }
        }
      }
      if (track && result.length) {
        result.sort((cueA, cueB) => {
          if (cueA.line === "auto" || cueB.line === "auto") {
            return 0;
          }
          if (cueA.line > 8 && cueB.line > 8) {
            return cueB.line - cueA.line;
          }
          return cueA.line - cueB.line;
        });
        result.forEach((cue2) => addCueToTrack(track, cue2));
      }
      return result;
    }
  };
  var defaultLoadPolicy = {
    maxTimeToFirstByteMs: 8e3,
    maxLoadTimeMs: 2e4,
    timeoutRetry: null,
    errorRetry: null
  };
  var hlsDefaultConfig = _objectSpread2(_objectSpread2({
    autoStartLoad: true,
    // used by stream-controller
    startPosition: -1,
    // used by stream-controller
    defaultAudioCodec: void 0,
    // used by stream-controller
    debug: false,
    // used by logger
    capLevelOnFPSDrop: false,
    // used by fps-controller
    capLevelToPlayerSize: false,
    // used by cap-level-controller
    ignoreDevicePixelRatio: false,
    // used by cap-level-controller
    preferManagedMediaSource: true,
    initialLiveManifestSize: 1,
    // used by stream-controller
    maxBufferLength: 30,
    // used by stream-controller
    backBufferLength: Infinity,
    // used by buffer-controller
    frontBufferFlushThreshold: Infinity,
    maxBufferSize: 60 * 1e3 * 1e3,
    // used by stream-controller
    maxBufferHole: 0.1,
    // used by stream-controller
    highBufferWatchdogPeriod: 2,
    // used by stream-controller
    nudgeOffset: 0.1,
    // used by stream-controller
    nudgeMaxRetry: 3,
    // used by stream-controller
    maxFragLookUpTolerance: 0.25,
    // used by stream-controller
    liveSyncDurationCount: 3,
    // used by latency-controller
    liveMaxLatencyDurationCount: Infinity,
    // used by latency-controller
    liveSyncDuration: void 0,
    // used by latency-controller
    liveMaxLatencyDuration: void 0,
    // used by latency-controller
    maxLiveSyncPlaybackRate: 1,
    // used by latency-controller
    liveDurationInfinity: false,
    // used by buffer-controller
    /**
     * @deprecated use backBufferLength
     */
    liveBackBufferLength: null,
    // used by buffer-controller
    maxMaxBufferLength: 600,
    // used by stream-controller
    enableWorker: true,
    // used by transmuxer
    workerPath: null,
    // used by transmuxer
    enableSoftwareAES: true,
    // used by decrypter
    startLevel: void 0,
    // used by level-controller
    startFragPrefetch: false,
    // used by stream-controller
    fpsDroppedMonitoringPeriod: 5e3,
    // used by fps-controller
    fpsDroppedMonitoringThreshold: 0.2,
    // used by fps-controller
    appendErrorMaxRetry: 3,
    // used by buffer-controller
    loader: XhrLoader,
    // loader: FetchLoader,
    fLoader: void 0,
    // used by fragment-loader
    pLoader: void 0,
    // used by playlist-loader
    xhrSetup: void 0,
    // used by xhr-loader
    licenseXhrSetup: void 0,
    // used by eme-controller
    licenseResponseCallback: void 0,
    // used by eme-controller
    abrController: AbrController,
    bufferController: BufferController,
    capLevelController: CapLevelController,
    errorController: ErrorController,
    fpsController: FPSController,
    stretchShortVideoTrack: false,
    // used by mp4-remuxer
    maxAudioFramesDrift: 1,
    // used by mp4-remuxer
    forceKeyFrameOnDiscontinuity: true,
    // used by ts-demuxer
    abrEwmaFastLive: 3,
    // used by abr-controller
    abrEwmaSlowLive: 9,
    // used by abr-controller
    abrEwmaFastVoD: 3,
    // used by abr-controller
    abrEwmaSlowVoD: 9,
    // used by abr-controller
    abrEwmaDefaultEstimate: 5e5,
    // 500 kbps  // used by abr-controller
    abrEwmaDefaultEstimateMax: 5e6,
    // 5 mbps
    abrBandWidthFactor: 0.95,
    // used by abr-controller
    abrBandWidthUpFactor: 0.7,
    // used by abr-controller
    abrMaxWithRealBitrate: false,
    // used by abr-controller
    maxStarvationDelay: 4,
    // used by abr-controller
    maxLoadingDelay: 4,
    // used by abr-controller
    minAutoBitrate: 0,
    // used by hls
    emeEnabled: false,
    // used by eme-controller
    widevineLicenseUrl: void 0,
    // used by eme-controller
    drmSystems: {},
    // used by eme-controller
    drmSystemOptions: {},
    // used by eme-controller
    requestMediaKeySystemAccessFunc: requestMediaKeySystemAccess,
    // used by eme-controller
    testBandwidth: true,
    progressive: false,
    lowLatencyMode: true,
    cmcd: void 0,
    enableDateRangeMetadataCues: true,
    enableEmsgMetadataCues: true,
    enableID3MetadataCues: true,
    useMediaCapabilities: true,
    certLoadPolicy: {
      default: defaultLoadPolicy
    },
    keyLoadPolicy: {
      default: {
        maxTimeToFirstByteMs: 8e3,
        maxLoadTimeMs: 2e4,
        timeoutRetry: {
          maxNumRetry: 1,
          retryDelayMs: 1e3,
          maxRetryDelayMs: 2e4,
          backoff: "linear"
        },
        errorRetry: {
          maxNumRetry: 8,
          retryDelayMs: 1e3,
          maxRetryDelayMs: 2e4,
          backoff: "linear"
        }
      }
    },
    manifestLoadPolicy: {
      default: {
        maxTimeToFirstByteMs: Infinity,
        maxLoadTimeMs: 2e4,
        timeoutRetry: {
          maxNumRetry: 2,
          retryDelayMs: 0,
          maxRetryDelayMs: 0
        },
        errorRetry: {
          maxNumRetry: 1,
          retryDelayMs: 1e3,
          maxRetryDelayMs: 8e3
        }
      }
    },
    playlistLoadPolicy: {
      default: {
        maxTimeToFirstByteMs: 1e4,
        maxLoadTimeMs: 2e4,
        timeoutRetry: {
          maxNumRetry: 2,
          retryDelayMs: 0,
          maxRetryDelayMs: 0
        },
        errorRetry: {
          maxNumRetry: 2,
          retryDelayMs: 1e3,
          maxRetryDelayMs: 8e3
        }
      }
    },
    fragLoadPolicy: {
      default: {
        maxTimeToFirstByteMs: 1e4,
        maxLoadTimeMs: 12e4,
        timeoutRetry: {
          maxNumRetry: 4,
          retryDelayMs: 0,
          maxRetryDelayMs: 0
        },
        errorRetry: {
          maxNumRetry: 6,
          retryDelayMs: 1e3,
          maxRetryDelayMs: 8e3
        }
      }
    },
    steeringManifestLoadPolicy: {
      default: {
        maxTimeToFirstByteMs: 1e4,
        maxLoadTimeMs: 2e4,
        timeoutRetry: {
          maxNumRetry: 2,
          retryDelayMs: 0,
          maxRetryDelayMs: 0
        },
        errorRetry: {
          maxNumRetry: 1,
          retryDelayMs: 1e3,
          maxRetryDelayMs: 8e3
        }
      }
    },
    // These default settings are deprecated in favor of the above policies
    // and are maintained for backwards compatibility
    manifestLoadingTimeOut: 1e4,
    manifestLoadingMaxRetry: 1,
    manifestLoadingRetryDelay: 1e3,
    manifestLoadingMaxRetryTimeout: 64e3,
    levelLoadingTimeOut: 1e4,
    levelLoadingMaxRetry: 4,
    levelLoadingRetryDelay: 1e3,
    levelLoadingMaxRetryTimeout: 64e3,
    fragLoadingTimeOut: 2e4,
    fragLoadingMaxRetry: 6,
    fragLoadingRetryDelay: 1e3,
    fragLoadingMaxRetryTimeout: 64e3
  }, timelineConfig()), {}, {
    subtitleStreamController: SubtitleStreamController,
    subtitleTrackController: SubtitleTrackController,
    timelineController: TimelineController,
    audioStreamController: AudioStreamController,
    audioTrackController: AudioTrackController,
    emeController: EMEController,
    cmcdController: CMCDController,
    contentSteeringController: ContentSteeringController
  });
  function timelineConfig() {
    return {
      cueHandler: Cues,
      // used by timeline-controller
      enableWebVTT: true,
      // used by timeline-controller
      enableIMSC1: true,
      // used by timeline-controller
      enableCEA708Captions: true,
      // used by timeline-controller
      captionsTextTrack1Label: "English",
      // used by timeline-controller
      captionsTextTrack1LanguageCode: "en",
      // used by timeline-controller
      captionsTextTrack2Label: "Spanish",
      // used by timeline-controller
      captionsTextTrack2LanguageCode: "es",
      // used by timeline-controller
      captionsTextTrack3Label: "Unknown CC",
      // used by timeline-controller
      captionsTextTrack3LanguageCode: "",
      // used by timeline-controller
      captionsTextTrack4Label: "Unknown CC",
      // used by timeline-controller
      captionsTextTrack4LanguageCode: "",
      // used by timeline-controller
      renderTextTracksNatively: true
    };
  }
  function mergeConfig(defaultConfig, userConfig) {
    if ((userConfig.liveSyncDurationCount || userConfig.liveMaxLatencyDurationCount) && (userConfig.liveSyncDuration || userConfig.liveMaxLatencyDuration)) {
      throw new Error("Illegal hls.js config: don't mix up liveSyncDurationCount/liveMaxLatencyDurationCount and liveSyncDuration/liveMaxLatencyDuration");
    }
    if (userConfig.liveMaxLatencyDurationCount !== void 0 && (userConfig.liveSyncDurationCount === void 0 || userConfig.liveMaxLatencyDurationCount <= userConfig.liveSyncDurationCount)) {
      throw new Error('Illegal hls.js config: "liveMaxLatencyDurationCount" must be greater than "liveSyncDurationCount"');
    }
    if (userConfig.liveMaxLatencyDuration !== void 0 && (userConfig.liveSyncDuration === void 0 || userConfig.liveMaxLatencyDuration <= userConfig.liveSyncDuration)) {
      throw new Error('Illegal hls.js config: "liveMaxLatencyDuration" must be greater than "liveSyncDuration"');
    }
    const defaultsCopy = deepCpy(defaultConfig);
    const deprecatedSettingTypes = ["manifest", "level", "frag"];
    const deprecatedSettings = ["TimeOut", "MaxRetry", "RetryDelay", "MaxRetryTimeout"];
    deprecatedSettingTypes.forEach((type) => {
      const policyName = `${type === "level" ? "playlist" : type}LoadPolicy`;
      const policyNotSet = userConfig[policyName] === void 0;
      const report = [];
      deprecatedSettings.forEach((setting) => {
        const deprecatedSetting = `${type}Loading${setting}`;
        const value = userConfig[deprecatedSetting];
        if (value !== void 0 && policyNotSet) {
          report.push(deprecatedSetting);
          const settings = defaultsCopy[policyName].default;
          userConfig[policyName] = {
            default: settings
          };
          switch (setting) {
            case "TimeOut":
              settings.maxLoadTimeMs = value;
              settings.maxTimeToFirstByteMs = value;
              break;
            case "MaxRetry":
              settings.errorRetry.maxNumRetry = value;
              settings.timeoutRetry.maxNumRetry = value;
              break;
            case "RetryDelay":
              settings.errorRetry.retryDelayMs = value;
              settings.timeoutRetry.retryDelayMs = value;
              break;
            case "MaxRetryTimeout":
              settings.errorRetry.maxRetryDelayMs = value;
              settings.timeoutRetry.maxRetryDelayMs = value;
              break;
          }
        }
      });
      if (report.length) {
        logger.warn(`hls.js config: "${report.join('", "')}" setting(s) are deprecated, use "${policyName}": ${JSON.stringify(userConfig[policyName])}`);
      }
    });
    return _objectSpread2(_objectSpread2({}, defaultsCopy), userConfig);
  }
  function deepCpy(obj) {
    if (obj && typeof obj === "object") {
      if (Array.isArray(obj)) {
        return obj.map(deepCpy);
      }
      return Object.keys(obj).reduce((result, key) => {
        result[key] = deepCpy(obj[key]);
        return result;
      }, {});
    }
    return obj;
  }
  function enableStreamingMode(config) {
    const currentLoader = config.loader;
    if (currentLoader !== FetchLoader && currentLoader !== XhrLoader) {
      logger.log("[config]: Custom loader detected, cannot enable progressive streaming");
      config.progressive = false;
    } else {
      const canStreamProgressively = fetchSupported();
      if (canStreamProgressively) {
        config.loader = FetchLoader;
        config.progressive = true;
        config.enableSoftwareAES = true;
        logger.log("[config]: Progressive streaming enabled, using FetchLoader");
      }
    }
  }
  var chromeOrFirefox;
  var LevelController = class extends BasePlaylistController {
    constructor(hls, contentSteeringController) {
      super(hls, "[level-controller]");
      this._levels = [];
      this._firstLevel = -1;
      this._maxAutoLevel = -1;
      this._startLevel = void 0;
      this.currentLevel = null;
      this.currentLevelIndex = -1;
      this.manualLevelIndex = -1;
      this.steering = void 0;
      this.onParsedComplete = void 0;
      this.steering = contentSteeringController;
      this._registerListeners();
    }
    _registerListeners() {
      const {
        hls
      } = this;
      hls.on(Events2.MANIFEST_LOADING, this.onManifestLoading, this);
      hls.on(Events2.MANIFEST_LOADED, this.onManifestLoaded, this);
      hls.on(Events2.LEVEL_LOADED, this.onLevelLoaded, this);
      hls.on(Events2.LEVELS_UPDATED, this.onLevelsUpdated, this);
      hls.on(Events2.FRAG_BUFFERED, this.onFragBuffered, this);
      hls.on(Events2.ERROR, this.onError, this);
    }
    _unregisterListeners() {
      const {
        hls
      } = this;
      hls.off(Events2.MANIFEST_LOADING, this.onManifestLoading, this);
      hls.off(Events2.MANIFEST_LOADED, this.onManifestLoaded, this);
      hls.off(Events2.LEVEL_LOADED, this.onLevelLoaded, this);
      hls.off(Events2.LEVELS_UPDATED, this.onLevelsUpdated, this);
      hls.off(Events2.FRAG_BUFFERED, this.onFragBuffered, this);
      hls.off(Events2.ERROR, this.onError, this);
    }
    destroy() {
      this._unregisterListeners();
      this.steering = null;
      this.resetLevels();
      super.destroy();
    }
    stopLoad() {
      const levels = this._levels;
      levels.forEach((level) => {
        level.loadError = 0;
        level.fragmentError = 0;
      });
      super.stopLoad();
    }
    resetLevels() {
      this._startLevel = void 0;
      this.manualLevelIndex = -1;
      this.currentLevelIndex = -1;
      this.currentLevel = null;
      this._levels = [];
      this._maxAutoLevel = -1;
    }
    onManifestLoading(event, data) {
      this.resetLevels();
    }
    onManifestLoaded(event, data) {
      const preferManagedMediaSource = this.hls.config.preferManagedMediaSource;
      const levels = [];
      const redundantSet = {};
      const generatePathwaySet = {};
      let resolutionFound = false;
      let videoCodecFound = false;
      let audioCodecFound = false;
      data.levels.forEach((levelParsed) => {
        var _audioCodec, _videoCodec;
        const attributes = levelParsed.attrs;
        let {
          audioCodec,
          videoCodec
        } = levelParsed;
        if (((_audioCodec = audioCodec) == null ? void 0 : _audioCodec.indexOf("mp4a.40.34")) !== -1) {
          chromeOrFirefox || (chromeOrFirefox = /chrome|firefox/i.test(navigator.userAgent));
          if (chromeOrFirefox) {
            levelParsed.audioCodec = audioCodec = void 0;
          }
        }
        if (audioCodec) {
          levelParsed.audioCodec = audioCodec = getCodecCompatibleName(audioCodec, preferManagedMediaSource);
        }
        if (((_videoCodec = videoCodec) == null ? void 0 : _videoCodec.indexOf("avc1")) === 0) {
          videoCodec = levelParsed.videoCodec = convertAVC1ToAVCOTI(videoCodec);
        }
        const {
          width,
          height,
          unknownCodecs
        } = levelParsed;
        resolutionFound || (resolutionFound = !!(width && height));
        videoCodecFound || (videoCodecFound = !!videoCodec);
        audioCodecFound || (audioCodecFound = !!audioCodec);
        if (unknownCodecs != null && unknownCodecs.length || audioCodec && !areCodecsMediaSourceSupported(audioCodec, "audio", preferManagedMediaSource) || videoCodec && !areCodecsMediaSourceSupported(videoCodec, "video", preferManagedMediaSource)) {
          return;
        }
        const {
          CODECS,
          "FRAME-RATE": FRAMERATE,
          "HDCP-LEVEL": HDCP,
          "PATHWAY-ID": PATHWAY,
          RESOLUTION,
          "VIDEO-RANGE": VIDEO_RANGE
        } = attributes;
        const contentSteeringPrefix = `${PATHWAY || "."}-`;
        const levelKey = `${contentSteeringPrefix}${levelParsed.bitrate}-${RESOLUTION}-${FRAMERATE}-${CODECS}-${VIDEO_RANGE}-${HDCP}`;
        if (!redundantSet[levelKey]) {
          const level = new Level(levelParsed);
          redundantSet[levelKey] = level;
          generatePathwaySet[levelKey] = 1;
          levels.push(level);
        } else if (redundantSet[levelKey].uri !== levelParsed.url && !levelParsed.attrs["PATHWAY-ID"]) {
          const pathwayCount = generatePathwaySet[levelKey] += 1;
          levelParsed.attrs["PATHWAY-ID"] = new Array(pathwayCount + 1).join(".");
          const level = new Level(levelParsed);
          redundantSet[levelKey] = level;
          levels.push(level);
        } else {
          redundantSet[levelKey].addGroupId("audio", attributes.AUDIO);
          redundantSet[levelKey].addGroupId("text", attributes.SUBTITLES);
        }
      });
      this.filterAndSortMediaOptions(levels, data, resolutionFound, videoCodecFound, audioCodecFound);
    }
    filterAndSortMediaOptions(filteredLevels, data, resolutionFound, videoCodecFound, audioCodecFound) {
      let audioTracks = [];
      let subtitleTracks = [];
      let levels = filteredLevels;
      if ((resolutionFound || videoCodecFound) && audioCodecFound) {
        levels = levels.filter(({
          videoCodec,
          videoRange,
          width,
          height
        }) => (!!videoCodec || !!(width && height)) && isVideoRange(videoRange));
      }
      if (levels.length === 0) {
        Promise.resolve().then(() => {
          if (this.hls) {
            if (data.levels.length) {
              this.warn(`One or more CODECS in variant not supported: ${JSON.stringify(data.levels[0].attrs)}`);
            }
            const error = new Error("no level with compatible codecs found in manifest");
            this.hls.trigger(Events2.ERROR, {
              type: ErrorTypes.MEDIA_ERROR,
              details: ErrorDetails.MANIFEST_INCOMPATIBLE_CODECS_ERROR,
              fatal: true,
              url: data.url,
              error,
              reason: error.message
            });
          }
        });
        return;
      }
      if (data.audioTracks) {
        const {
          preferManagedMediaSource
        } = this.hls.config;
        audioTracks = data.audioTracks.filter((track) => !track.audioCodec || areCodecsMediaSourceSupported(track.audioCodec, "audio", preferManagedMediaSource));
        assignTrackIdsByGroup(audioTracks);
      }
      if (data.subtitles) {
        subtitleTracks = data.subtitles;
        assignTrackIdsByGroup(subtitleTracks);
      }
      const unsortedLevels = levels.slice(0);
      levels.sort((a, b) => {
        if (a.attrs["HDCP-LEVEL"] !== b.attrs["HDCP-LEVEL"]) {
          return (a.attrs["HDCP-LEVEL"] || "") > (b.attrs["HDCP-LEVEL"] || "") ? 1 : -1;
        }
        if (resolutionFound && a.height !== b.height) {
          return a.height - b.height;
        }
        if (a.frameRate !== b.frameRate) {
          return a.frameRate - b.frameRate;
        }
        if (a.videoRange !== b.videoRange) {
          return VideoRangeValues.indexOf(a.videoRange) - VideoRangeValues.indexOf(b.videoRange);
        }
        if (a.videoCodec !== b.videoCodec) {
          const valueA = videoCodecPreferenceValue(a.videoCodec);
          const valueB = videoCodecPreferenceValue(b.videoCodec);
          if (valueA !== valueB) {
            return valueB - valueA;
          }
        }
        if (a.uri === b.uri && a.codecSet !== b.codecSet) {
          const valueA = codecsSetSelectionPreferenceValue(a.codecSet);
          const valueB = codecsSetSelectionPreferenceValue(b.codecSet);
          if (valueA !== valueB) {
            return valueB - valueA;
          }
        }
        if (a.averageBitrate !== b.averageBitrate) {
          return a.averageBitrate - b.averageBitrate;
        }
        return 0;
      });
      let firstLevelInPlaylist = unsortedLevels[0];
      if (this.steering) {
        levels = this.steering.filterParsedLevels(levels);
        if (levels.length !== unsortedLevels.length) {
          for (let i = 0; i < unsortedLevels.length; i++) {
            if (unsortedLevels[i].pathwayId === levels[0].pathwayId) {
              firstLevelInPlaylist = unsortedLevels[i];
              break;
            }
          }
        }
      }
      this._levels = levels;
      for (let i = 0; i < levels.length; i++) {
        if (levels[i] === firstLevelInPlaylist) {
          var _this$hls$userConfig;
          this._firstLevel = i;
          const firstLevelBitrate = firstLevelInPlaylist.bitrate;
          const bandwidthEstimate = this.hls.bandwidthEstimate;
          this.log(`manifest loaded, ${levels.length} level(s) found, first bitrate: ${firstLevelBitrate}`);
          if (((_this$hls$userConfig = this.hls.userConfig) == null ? void 0 : _this$hls$userConfig.abrEwmaDefaultEstimate) === void 0) {
            const startingBwEstimate = Math.min(firstLevelBitrate, this.hls.config.abrEwmaDefaultEstimateMax);
            if (startingBwEstimate > bandwidthEstimate && bandwidthEstimate === hlsDefaultConfig.abrEwmaDefaultEstimate) {
              this.hls.bandwidthEstimate = startingBwEstimate;
            }
          }
          break;
        }
      }
      const audioOnly = audioCodecFound && !videoCodecFound;
      const edata = {
        levels,
        audioTracks,
        subtitleTracks,
        sessionData: data.sessionData,
        sessionKeys: data.sessionKeys,
        firstLevel: this._firstLevel,
        stats: data.stats,
        audio: audioCodecFound,
        video: videoCodecFound,
        altAudio: !audioOnly && audioTracks.some((t2) => !!t2.url)
      };
      this.hls.trigger(Events2.MANIFEST_PARSED, edata);
      if (this.hls.config.autoStartLoad || this.hls.forceStartLoad) {
        this.hls.startLoad(this.hls.config.startPosition);
      }
    }
    get levels() {
      if (this._levels.length === 0) {
        return null;
      }
      return this._levels;
    }
    get level() {
      return this.currentLevelIndex;
    }
    set level(newLevel) {
      const levels = this._levels;
      if (levels.length === 0) {
        return;
      }
      if (newLevel < 0 || newLevel >= levels.length) {
        const error = new Error("invalid level idx");
        const fatal = newLevel < 0;
        this.hls.trigger(Events2.ERROR, {
          type: ErrorTypes.OTHER_ERROR,
          details: ErrorDetails.LEVEL_SWITCH_ERROR,
          level: newLevel,
          fatal,
          error,
          reason: error.message
        });
        if (fatal) {
          return;
        }
        newLevel = Math.min(newLevel, levels.length - 1);
      }
      const lastLevelIndex = this.currentLevelIndex;
      const lastLevel = this.currentLevel;
      const lastPathwayId = lastLevel ? lastLevel.attrs["PATHWAY-ID"] : void 0;
      const level = levels[newLevel];
      const pathwayId = level.attrs["PATHWAY-ID"];
      this.currentLevelIndex = newLevel;
      this.currentLevel = level;
      if (lastLevelIndex === newLevel && level.details && lastLevel && lastPathwayId === pathwayId) {
        return;
      }
      this.log(`Switching to level ${newLevel} (${level.height ? level.height + "p " : ""}${level.videoRange ? level.videoRange + " " : ""}${level.codecSet ? level.codecSet + " " : ""}@${level.bitrate})${pathwayId ? " with Pathway " + pathwayId : ""} from level ${lastLevelIndex}${lastPathwayId ? " with Pathway " + lastPathwayId : ""}`);
      const levelSwitchingData = {
        level: newLevel,
        attrs: level.attrs,
        details: level.details,
        bitrate: level.bitrate,
        averageBitrate: level.averageBitrate,
        maxBitrate: level.maxBitrate,
        realBitrate: level.realBitrate,
        width: level.width,
        height: level.height,
        codecSet: level.codecSet,
        audioCodec: level.audioCodec,
        videoCodec: level.videoCodec,
        audioGroups: level.audioGroups,
        subtitleGroups: level.subtitleGroups,
        loaded: level.loaded,
        loadError: level.loadError,
        fragmentError: level.fragmentError,
        name: level.name,
        id: level.id,
        uri: level.uri,
        url: level.url,
        urlId: 0,
        audioGroupIds: level.audioGroupIds,
        textGroupIds: level.textGroupIds
      };
      this.hls.trigger(Events2.LEVEL_SWITCHING, levelSwitchingData);
      const levelDetails = level.details;
      if (!levelDetails || levelDetails.live) {
        const hlsUrlParameters = this.switchParams(level.uri, lastLevel == null ? void 0 : lastLevel.details, levelDetails);
        this.loadPlaylist(hlsUrlParameters);
      }
    }
    get manualLevel() {
      return this.manualLevelIndex;
    }
    set manualLevel(newLevel) {
      this.manualLevelIndex = newLevel;
      if (this._startLevel === void 0) {
        this._startLevel = newLevel;
      }
      if (newLevel !== -1) {
        this.level = newLevel;
      }
    }
    get firstLevel() {
      return this._firstLevel;
    }
    set firstLevel(newLevel) {
      this._firstLevel = newLevel;
    }
    get startLevel() {
      if (this._startLevel === void 0) {
        const configStartLevel = this.hls.config.startLevel;
        if (configStartLevel !== void 0) {
          return configStartLevel;
        }
        return this.hls.firstAutoLevel;
      }
      return this._startLevel;
    }
    set startLevel(newLevel) {
      this._startLevel = newLevel;
    }
    onError(event, data) {
      if (data.fatal || !data.context) {
        return;
      }
      if (data.context.type === PlaylistContextType.LEVEL && data.context.level === this.level) {
        this.checkRetry(data);
      }
    }
    // reset errors on the successful load of a fragment
    onFragBuffered(event, {
      frag
    }) {
      if (frag !== void 0 && frag.type === PlaylistLevelType.MAIN) {
        const el = frag.elementaryStreams;
        if (!Object.keys(el).some((type) => !!el[type])) {
          return;
        }
        const level = this._levels[frag.level];
        if (level != null && level.loadError) {
          this.log(`Resetting level error count of ${level.loadError} on frag buffered`);
          level.loadError = 0;
        }
      }
    }
    onLevelLoaded(event, data) {
      var _data$deliveryDirecti2;
      const {
        level,
        details
      } = data;
      const curLevel = this._levels[level];
      if (!curLevel) {
        var _data$deliveryDirecti;
        this.warn(`Invalid level index ${level}`);
        if ((_data$deliveryDirecti = data.deliveryDirectives) != null && _data$deliveryDirecti.skip) {
          details.deltaUpdateFailed = true;
        }
        return;
      }
      if (level === this.currentLevelIndex) {
        if (curLevel.fragmentError === 0) {
          curLevel.loadError = 0;
        }
        this.playlistLoaded(level, data, curLevel.details);
      } else if ((_data$deliveryDirecti2 = data.deliveryDirectives) != null && _data$deliveryDirecti2.skip) {
        details.deltaUpdateFailed = true;
      }
    }
    loadPlaylist(hlsUrlParameters) {
      super.loadPlaylist();
      const currentLevelIndex = this.currentLevelIndex;
      const currentLevel = this.currentLevel;
      if (currentLevel && this.shouldLoadPlaylist(currentLevel)) {
        let url = currentLevel.uri;
        if (hlsUrlParameters) {
          try {
            url = hlsUrlParameters.addDirectives(url);
          } catch (error) {
            this.warn(`Could not construct new URL with HLS Delivery Directives: ${error}`);
          }
        }
        const pathwayId = currentLevel.attrs["PATHWAY-ID"];
        this.log(`Loading level index ${currentLevelIndex}${(hlsUrlParameters == null ? void 0 : hlsUrlParameters.msn) !== void 0 ? " at sn " + hlsUrlParameters.msn + " part " + hlsUrlParameters.part : ""} with${pathwayId ? " Pathway " + pathwayId : ""} ${url}`);
        this.clearTimer();
        this.hls.trigger(Events2.LEVEL_LOADING, {
          url,
          level: currentLevelIndex,
          pathwayId: currentLevel.attrs["PATHWAY-ID"],
          id: 0,
          // Deprecated Level urlId
          deliveryDirectives: hlsUrlParameters || null
        });
      }
    }
    get nextLoadLevel() {
      if (this.manualLevelIndex !== -1) {
        return this.manualLevelIndex;
      } else {
        return this.hls.nextAutoLevel;
      }
    }
    set nextLoadLevel(nextLevel) {
      this.level = nextLevel;
      if (this.manualLevelIndex === -1) {
        this.hls.nextAutoLevel = nextLevel;
      }
    }
    removeLevel(levelIndex) {
      var _this$currentLevel;
      const levels = this._levels.filter((level, index) => {
        if (index !== levelIndex) {
          return true;
        }
        if (this.steering) {
          this.steering.removeLevel(level);
        }
        if (level === this.currentLevel) {
          this.currentLevel = null;
          this.currentLevelIndex = -1;
          if (level.details) {
            level.details.fragments.forEach((f) => f.level = -1);
          }
        }
        return false;
      });
      reassignFragmentLevelIndexes(levels);
      this._levels = levels;
      if (this.currentLevelIndex > -1 && (_this$currentLevel = this.currentLevel) != null && _this$currentLevel.details) {
        this.currentLevelIndex = this.currentLevel.details.fragments[0].level;
      }
      this.hls.trigger(Events2.LEVELS_UPDATED, {
        levels
      });
    }
    onLevelsUpdated(event, {
      levels
    }) {
      this._levels = levels;
    }
    checkMaxAutoUpdated() {
      const {
        autoLevelCapping,
        maxAutoLevel,
        maxHdcpLevel
      } = this.hls;
      if (this._maxAutoLevel !== maxAutoLevel) {
        this._maxAutoLevel = maxAutoLevel;
        this.hls.trigger(Events2.MAX_AUTO_LEVEL_UPDATED, {
          autoLevelCapping,
          levels: this.levels,
          maxAutoLevel,
          minAutoLevel: this.hls.minAutoLevel,
          maxHdcpLevel
        });
      }
    }
  };
  function assignTrackIdsByGroup(tracks) {
    const groups = {};
    tracks.forEach((track) => {
      const groupId = track.groupId || "";
      track.id = groups[groupId] = groups[groupId] || 0;
      groups[groupId]++;
    });
  }
  var KeyLoader = class {
    constructor(config) {
      this.config = void 0;
      this.keyUriToKeyInfo = {};
      this.emeController = null;
      this.config = config;
    }
    abort(type) {
      for (const uri in this.keyUriToKeyInfo) {
        const loader = this.keyUriToKeyInfo[uri].loader;
        if (loader) {
          var _loader$context;
          if (type && type !== ((_loader$context = loader.context) == null ? void 0 : _loader$context.frag.type)) {
            return;
          }
          loader.abort();
        }
      }
    }
    detach() {
      for (const uri in this.keyUriToKeyInfo) {
        const keyInfo = this.keyUriToKeyInfo[uri];
        if (keyInfo.mediaKeySessionContext || keyInfo.decryptdata.isCommonEncryption) {
          delete this.keyUriToKeyInfo[uri];
        }
      }
    }
    destroy() {
      this.detach();
      for (const uri in this.keyUriToKeyInfo) {
        const loader = this.keyUriToKeyInfo[uri].loader;
        if (loader) {
          loader.destroy();
        }
      }
      this.keyUriToKeyInfo = {};
    }
    createKeyLoadError(frag, details = ErrorDetails.KEY_LOAD_ERROR, error, networkDetails, response) {
      return new LoadError({
        type: ErrorTypes.NETWORK_ERROR,
        details,
        fatal: false,
        frag,
        response,
        error,
        networkDetails
      });
    }
    loadClear(loadingFrag, encryptedFragments) {
      if (this.emeController && this.config.emeEnabled) {
        const {
          sn,
          cc
        } = loadingFrag;
        for (let i = 0; i < encryptedFragments.length; i++) {
          const frag = encryptedFragments[i];
          if (cc <= frag.cc && (sn === "initSegment" || frag.sn === "initSegment" || sn < frag.sn)) {
            this.emeController.selectKeySystemFormat(frag).then((keySystemFormat) => {
              frag.setKeyFormat(keySystemFormat);
            });
            break;
          }
        }
      }
    }
    load(frag) {
      if (!frag.decryptdata && frag.encrypted && this.emeController) {
        return this.emeController.selectKeySystemFormat(frag).then((keySystemFormat) => {
          return this.loadInternal(frag, keySystemFormat);
        });
      }
      return this.loadInternal(frag);
    }
    loadInternal(frag, keySystemFormat) {
      var _keyInfo, _keyInfo2;
      if (keySystemFormat) {
        frag.setKeyFormat(keySystemFormat);
      }
      const decryptdata = frag.decryptdata;
      if (!decryptdata) {
        const error = new Error(keySystemFormat ? `Expected frag.decryptdata to be defined after setting format ${keySystemFormat}` : "Missing decryption data on fragment in onKeyLoading");
        return Promise.reject(this.createKeyLoadError(frag, ErrorDetails.KEY_LOAD_ERROR, error));
      }
      const uri = decryptdata.uri;
      if (!uri) {
        return Promise.reject(this.createKeyLoadError(frag, ErrorDetails.KEY_LOAD_ERROR, new Error(`Invalid key URI: "${uri}"`)));
      }
      let keyInfo = this.keyUriToKeyInfo[uri];
      if ((_keyInfo = keyInfo) != null && _keyInfo.decryptdata.key) {
        decryptdata.key = keyInfo.decryptdata.key;
        return Promise.resolve({
          frag,
          keyInfo
        });
      }
      if ((_keyInfo2 = keyInfo) != null && _keyInfo2.keyLoadPromise) {
        var _keyInfo$mediaKeySess;
        switch ((_keyInfo$mediaKeySess = keyInfo.mediaKeySessionContext) == null ? void 0 : _keyInfo$mediaKeySess.keyStatus) {
          case void 0:
          case "status-pending":
          case "usable":
          case "usable-in-future":
            return keyInfo.keyLoadPromise.then((keyLoadedData) => {
              decryptdata.key = keyLoadedData.keyInfo.decryptdata.key;
              return {
                frag,
                keyInfo
              };
            });
        }
      }
      keyInfo = this.keyUriToKeyInfo[uri] = {
        decryptdata,
        keyLoadPromise: null,
        loader: null,
        mediaKeySessionContext: null
      };
      switch (decryptdata.method) {
        case "ISO-23001-7":
        case "SAMPLE-AES":
        case "SAMPLE-AES-CENC":
        case "SAMPLE-AES-CTR":
          if (decryptdata.keyFormat === "identity") {
            return this.loadKeyHTTP(keyInfo, frag);
          }
          return this.loadKeyEME(keyInfo, frag);
        case "AES-128":
          return this.loadKeyHTTP(keyInfo, frag);
        default:
          return Promise.reject(this.createKeyLoadError(frag, ErrorDetails.KEY_LOAD_ERROR, new Error(`Key supplied with unsupported METHOD: "${decryptdata.method}"`)));
      }
    }
    loadKeyEME(keyInfo, frag) {
      const keyLoadedData = {
        frag,
        keyInfo
      };
      if (this.emeController && this.config.emeEnabled) {
        const keySessionContextPromise = this.emeController.loadKey(keyLoadedData);
        if (keySessionContextPromise) {
          return (keyInfo.keyLoadPromise = keySessionContextPromise.then((keySessionContext) => {
            keyInfo.mediaKeySessionContext = keySessionContext;
            return keyLoadedData;
          })).catch((error) => {
            keyInfo.keyLoadPromise = null;
            throw error;
          });
        }
      }
      return Promise.resolve(keyLoadedData);
    }
    loadKeyHTTP(keyInfo, frag) {
      const config = this.config;
      const Loader = config.loader;
      const keyLoader = new Loader(config);
      frag.keyLoader = keyInfo.loader = keyLoader;
      return keyInfo.keyLoadPromise = new Promise((resolve, reject) => {
        const loaderContext = {
          keyInfo,
          frag,
          responseType: "arraybuffer",
          url: keyInfo.decryptdata.uri
        };
        const loadPolicy = config.keyLoadPolicy.default;
        const loaderConfig = {
          loadPolicy,
          timeout: loadPolicy.maxLoadTimeMs,
          maxRetry: 0,
          retryDelay: 0,
          maxRetryDelay: 0
        };
        const loaderCallbacks = {
          onSuccess: (response, stats, context, networkDetails) => {
            const {
              frag: frag2,
              keyInfo: keyInfo2,
              url: uri
            } = context;
            if (!frag2.decryptdata || keyInfo2 !== this.keyUriToKeyInfo[uri]) {
              return reject(this.createKeyLoadError(frag2, ErrorDetails.KEY_LOAD_ERROR, new Error("after key load, decryptdata unset or changed"), networkDetails));
            }
            keyInfo2.decryptdata.key = frag2.decryptdata.key = new Uint8Array(response.data);
            frag2.keyLoader = null;
            keyInfo2.loader = null;
            resolve({
              frag: frag2,
              keyInfo: keyInfo2
            });
          },
          onError: (response, context, networkDetails, stats) => {
            this.resetLoader(context);
            reject(this.createKeyLoadError(frag, ErrorDetails.KEY_LOAD_ERROR, new Error(`HTTP Error ${response.code} loading key ${response.text}`), networkDetails, _objectSpread2({
              url: loaderContext.url,
              data: void 0
            }, response)));
          },
          onTimeout: (stats, context, networkDetails) => {
            this.resetLoader(context);
            reject(this.createKeyLoadError(frag, ErrorDetails.KEY_LOAD_TIMEOUT, new Error("key loading timed out"), networkDetails));
          },
          onAbort: (stats, context, networkDetails) => {
            this.resetLoader(context);
            reject(this.createKeyLoadError(frag, ErrorDetails.INTERNAL_ABORTED, new Error("key loading aborted"), networkDetails));
          }
        };
        keyLoader.load(loaderContext, loaderConfig, loaderCallbacks);
      });
    }
    resetLoader(context) {
      const {
        frag,
        keyInfo,
        url: uri
      } = context;
      const loader = keyInfo.loader;
      if (frag.keyLoader === loader) {
        frag.keyLoader = null;
        keyInfo.loader = null;
      }
      delete this.keyUriToKeyInfo[uri];
      if (loader) {
        loader.destroy();
      }
    }
  };
  function getSourceBuffer() {
    return self.SourceBuffer || self.WebKitSourceBuffer;
  }
  function isMSESupported() {
    const mediaSource = getMediaSource();
    if (!mediaSource) {
      return false;
    }
    const sourceBuffer = getSourceBuffer();
    return !sourceBuffer || sourceBuffer.prototype && typeof sourceBuffer.prototype.appendBuffer === "function" && typeof sourceBuffer.prototype.remove === "function";
  }
  function isSupported() {
    if (!isMSESupported()) {
      return false;
    }
    const mediaSource = getMediaSource();
    return typeof (mediaSource == null ? void 0 : mediaSource.isTypeSupported) === "function" && (["avc1.42E01E,mp4a.40.2", "av01.0.01M.08", "vp09.00.50.08"].some((codecsForVideoContainer) => mediaSource.isTypeSupported(mimeTypeForCodec(codecsForVideoContainer, "video"))) || ["mp4a.40.2", "fLaC"].some((codecForAudioContainer) => mediaSource.isTypeSupported(mimeTypeForCodec(codecForAudioContainer, "audio"))));
  }
  function changeTypeSupported() {
    var _sourceBuffer$prototy;
    const sourceBuffer = getSourceBuffer();
    return typeof (sourceBuffer == null ? void 0 : (_sourceBuffer$prototy = sourceBuffer.prototype) == null ? void 0 : _sourceBuffer$prototy.changeType) === "function";
  }
  var STALL_MINIMUM_DURATION_MS = 250;
  var MAX_START_GAP_JUMP = 2;
  var SKIP_BUFFER_HOLE_STEP_SECONDS = 0.1;
  var SKIP_BUFFER_RANGE_START = 0.05;
  var GapController = class {
    constructor(config, media, fragmentTracker, hls) {
      this.config = void 0;
      this.media = null;
      this.fragmentTracker = void 0;
      this.hls = void 0;
      this.nudgeRetry = 0;
      this.stallReported = false;
      this.stalled = null;
      this.moved = false;
      this.seeking = false;
      this.config = config;
      this.media = media;
      this.fragmentTracker = fragmentTracker;
      this.hls = hls;
    }
    destroy() {
      this.media = null;
      this.hls = this.fragmentTracker = null;
    }
    /**
     * Checks if the playhead is stuck within a gap, and if so, attempts to free it.
     * A gap is an unbuffered range between two buffered ranges (or the start and the first buffered range).
     *
     * @param lastCurrentTime - Previously read playhead position
     */
    poll(lastCurrentTime, activeFrag) {
      const {
        config,
        media,
        stalled
      } = this;
      if (media === null) {
        return;
      }
      const {
        currentTime,
        seeking
      } = media;
      const seeked = this.seeking && !seeking;
      const beginSeek = !this.seeking && seeking;
      this.seeking = seeking;
      if (currentTime !== lastCurrentTime) {
        this.moved = true;
        if (!seeking) {
          this.nudgeRetry = 0;
        }
        if (stalled !== null) {
          if (this.stallReported) {
            const _stalledDuration = self.performance.now() - stalled;
            logger.warn(`playback not stuck anymore @${currentTime}, after ${Math.round(_stalledDuration)}ms`);
            this.stallReported = false;
          }
          this.stalled = null;
        }
        return;
      }
      if (beginSeek || seeked) {
        this.stalled = null;
        return;
      }
      if (media.paused && !seeking || media.ended || media.playbackRate === 0 || !BufferHelper.getBuffered(media).length) {
        this.nudgeRetry = 0;
        return;
      }
      const bufferInfo = BufferHelper.bufferInfo(media, currentTime, 0);
      const nextStart = bufferInfo.nextStart || 0;
      if (seeking) {
        const hasEnoughBuffer = bufferInfo.len > MAX_START_GAP_JUMP;
        const noBufferGap = !nextStart || activeFrag && activeFrag.start <= currentTime || nextStart - currentTime > MAX_START_GAP_JUMP && !this.fragmentTracker.getPartialFragment(currentTime);
        if (hasEnoughBuffer || noBufferGap) {
          return;
        }
        this.moved = false;
      }
      if (!this.moved && this.stalled !== null) {
        var _level$details;
        const isBuffered = bufferInfo.len > 0;
        if (!isBuffered && !nextStart) {
          return;
        }
        const startJump = Math.max(nextStart, bufferInfo.start || 0) - currentTime;
        const level = this.hls.levels ? this.hls.levels[this.hls.currentLevel] : null;
        const isLive = level == null ? void 0 : (_level$details = level.details) == null ? void 0 : _level$details.live;
        const maxStartGapJump = isLive ? level.details.targetduration * 2 : MAX_START_GAP_JUMP;
        const partialOrGap = this.fragmentTracker.getPartialFragment(currentTime);
        if (startJump > 0 && (startJump <= maxStartGapJump || partialOrGap)) {
          if (!media.paused) {
            this._trySkipBufferHole(partialOrGap);
          }
          return;
        }
      }
      const tnow = self.performance.now();
      if (stalled === null) {
        this.stalled = tnow;
        return;
      }
      const stalledDuration = tnow - stalled;
      if (!seeking && stalledDuration >= STALL_MINIMUM_DURATION_MS) {
        this._reportStall(bufferInfo);
        if (!this.media) {
          return;
        }
      }
      const bufferedWithHoles = BufferHelper.bufferInfo(media, currentTime, config.maxBufferHole);
      this._tryFixBufferStall(bufferedWithHoles, stalledDuration);
    }
    /**
     * Detects and attempts to fix known buffer stalling issues.
     * @param bufferInfo - The properties of the current buffer.
     * @param stalledDurationMs - The amount of time Hls.js has been stalling for.
     * @private
     */
    _tryFixBufferStall(bufferInfo, stalledDurationMs) {
      const {
        config,
        fragmentTracker,
        media
      } = this;
      if (media === null) {
        return;
      }
      const currentTime = media.currentTime;
      const partial = fragmentTracker.getPartialFragment(currentTime);
      if (partial) {
        const targetTime = this._trySkipBufferHole(partial);
        if (targetTime || !this.media) {
          return;
        }
      }
      if ((bufferInfo.len > config.maxBufferHole || bufferInfo.nextStart && bufferInfo.nextStart - currentTime < config.maxBufferHole) && stalledDurationMs > config.highBufferWatchdogPeriod * 1e3) {
        logger.warn("Trying to nudge playhead over buffer-hole");
        this.stalled = null;
        this._tryNudgeBuffer();
      }
    }
    /**
     * Triggers a BUFFER_STALLED_ERROR event, but only once per stall period.
     * @param bufferLen - The playhead distance from the end of the current buffer segment.
     * @private
     */
    _reportStall(bufferInfo) {
      const {
        hls,
        media,
        stallReported
      } = this;
      if (!stallReported && media) {
        this.stallReported = true;
        const error = new Error(`Playback stalling at @${media.currentTime} due to low buffer (${JSON.stringify(bufferInfo)})`);
        logger.warn(error.message);
        hls.trigger(Events2.ERROR, {
          type: ErrorTypes.MEDIA_ERROR,
          details: ErrorDetails.BUFFER_STALLED_ERROR,
          fatal: false,
          error,
          buffer: bufferInfo.len
        });
      }
    }
    /**
     * Attempts to fix buffer stalls by jumping over known gaps caused by partial fragments
     * @param partial - The partial fragment found at the current time (where playback is stalling).
     * @private
     */
    _trySkipBufferHole(partial) {
      const {
        config,
        hls,
        media
      } = this;
      if (media === null) {
        return 0;
      }
      const currentTime = media.currentTime;
      const bufferInfo = BufferHelper.bufferInfo(media, currentTime, 0);
      const startTime = currentTime < bufferInfo.start ? bufferInfo.start : bufferInfo.nextStart;
      if (startTime) {
        const bufferStarved = bufferInfo.len <= config.maxBufferHole;
        const waiting = bufferInfo.len > 0 && bufferInfo.len < 1 && media.readyState < 3;
        const gapLength = startTime - currentTime;
        if (gapLength > 0 && (bufferStarved || waiting)) {
          if (gapLength > config.maxBufferHole) {
            const {
              fragmentTracker
            } = this;
            let startGap = false;
            if (currentTime === 0) {
              const startFrag = fragmentTracker.getAppendedFrag(0, PlaylistLevelType.MAIN);
              if (startFrag && startTime < startFrag.end) {
                startGap = true;
              }
            }
            if (!startGap) {
              const startProvisioned = partial || fragmentTracker.getAppendedFrag(currentTime, PlaylistLevelType.MAIN);
              if (startProvisioned) {
                let moreToLoad = false;
                let pos = startProvisioned.end;
                while (pos < startTime) {
                  const provisioned = fragmentTracker.getPartialFragment(pos);
                  if (provisioned) {
                    pos += provisioned.duration;
                  } else {
                    moreToLoad = true;
                    break;
                  }
                }
                if (moreToLoad) {
                  return 0;
                }
              }
            }
          }
          const targetTime = Math.max(startTime + SKIP_BUFFER_RANGE_START, currentTime + SKIP_BUFFER_HOLE_STEP_SECONDS);
          logger.warn(`skipping hole, adjusting currentTime from ${currentTime} to ${targetTime}`);
          this.moved = true;
          this.stalled = null;
          media.currentTime = targetTime;
          if (partial && !partial.gap) {
            const error = new Error(`fragment loaded with buffer holes, seeking from ${currentTime} to ${targetTime}`);
            hls.trigger(Events2.ERROR, {
              type: ErrorTypes.MEDIA_ERROR,
              details: ErrorDetails.BUFFER_SEEK_OVER_HOLE,
              fatal: false,
              error,
              reason: error.message,
              frag: partial
            });
          }
          return targetTime;
        }
      }
      return 0;
    }
    /**
     * Attempts to fix buffer stalls by advancing the mediaElement's current time by a small amount.
     * @private
     */
    _tryNudgeBuffer() {
      const {
        config,
        hls,
        media,
        nudgeRetry
      } = this;
      if (media === null) {
        return;
      }
      const currentTime = media.currentTime;
      this.nudgeRetry++;
      if (nudgeRetry < config.nudgeMaxRetry) {
        const targetTime = currentTime + (nudgeRetry + 1) * config.nudgeOffset;
        const error = new Error(`Nudging 'currentTime' from ${currentTime} to ${targetTime}`);
        logger.warn(error.message);
        media.currentTime = targetTime;
        hls.trigger(Events2.ERROR, {
          type: ErrorTypes.MEDIA_ERROR,
          details: ErrorDetails.BUFFER_NUDGE_ON_STALL,
          error,
          fatal: false
        });
      } else {
        const error = new Error(`Playhead still not moving while enough data buffered @${currentTime} after ${config.nudgeMaxRetry} nudges`);
        logger.error(error.message);
        hls.trigger(Events2.ERROR, {
          type: ErrorTypes.MEDIA_ERROR,
          details: ErrorDetails.BUFFER_STALLED_ERROR,
          error,
          fatal: true
        });
      }
    }
  };
  var TICK_INTERVAL = 100;
  var StreamController = class extends BaseStreamController {
    constructor(hls, fragmentTracker, keyLoader) {
      super(hls, fragmentTracker, keyLoader, "[stream-controller]", PlaylistLevelType.MAIN);
      this.audioCodecSwap = false;
      this.gapController = null;
      this.level = -1;
      this._forceStartLoad = false;
      this.altAudio = false;
      this.audioOnly = false;
      this.fragPlaying = null;
      this.onvplaying = null;
      this.onvseeked = null;
      this.fragLastKbps = 0;
      this.couldBacktrack = false;
      this.backtrackFragment = null;
      this.audioCodecSwitch = false;
      this.videoBuffer = null;
      this._registerListeners();
    }
    _registerListeners() {
      const {
        hls
      } = this;
      hls.on(Events2.MEDIA_ATTACHED, this.onMediaAttached, this);
      hls.on(Events2.MEDIA_DETACHING, this.onMediaDetaching, this);
      hls.on(Events2.MANIFEST_LOADING, this.onManifestLoading, this);
      hls.on(Events2.MANIFEST_PARSED, this.onManifestParsed, this);
      hls.on(Events2.LEVEL_LOADING, this.onLevelLoading, this);
      hls.on(Events2.LEVEL_LOADED, this.onLevelLoaded, this);
      hls.on(Events2.FRAG_LOAD_EMERGENCY_ABORTED, this.onFragLoadEmergencyAborted, this);
      hls.on(Events2.ERROR, this.onError, this);
      hls.on(Events2.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this);
      hls.on(Events2.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this);
      hls.on(Events2.BUFFER_CREATED, this.onBufferCreated, this);
      hls.on(Events2.BUFFER_FLUSHED, this.onBufferFlushed, this);
      hls.on(Events2.LEVELS_UPDATED, this.onLevelsUpdated, this);
      hls.on(Events2.FRAG_BUFFERED, this.onFragBuffered, this);
    }
    _unregisterListeners() {
      const {
        hls
      } = this;
      hls.off(Events2.MEDIA_ATTACHED, this.onMediaAttached, this);
      hls.off(Events2.MEDIA_DETACHING, this.onMediaDetaching, this);
      hls.off(Events2.MANIFEST_LOADING, this.onManifestLoading, this);
      hls.off(Events2.MANIFEST_PARSED, this.onManifestParsed, this);
      hls.off(Events2.LEVEL_LOADED, this.onLevelLoaded, this);
      hls.off(Events2.FRAG_LOAD_EMERGENCY_ABORTED, this.onFragLoadEmergencyAborted, this);
      hls.off(Events2.ERROR, this.onError, this);
      hls.off(Events2.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this);
      hls.off(Events2.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this);
      hls.off(Events2.BUFFER_CREATED, this.onBufferCreated, this);
      hls.off(Events2.BUFFER_FLUSHED, this.onBufferFlushed, this);
      hls.off(Events2.LEVELS_UPDATED, this.onLevelsUpdated, this);
      hls.off(Events2.FRAG_BUFFERED, this.onFragBuffered, this);
    }
    onHandlerDestroying() {
      this._unregisterListeners();
      super.onHandlerDestroying();
    }
    startLoad(startPosition) {
      if (this.levels) {
        const {
          lastCurrentTime,
          hls
        } = this;
        this.stopLoad();
        this.setInterval(TICK_INTERVAL);
        this.level = -1;
        if (!this.startFragRequested) {
          let startLevel = hls.startLevel;
          if (startLevel === -1) {
            if (hls.config.testBandwidth && this.levels.length > 1) {
              startLevel = 0;
              this.bitrateTest = true;
            } else {
              startLevel = hls.firstAutoLevel;
            }
          }
          hls.nextLoadLevel = startLevel;
          this.level = hls.loadLevel;
          this.loadedmetadata = false;
        }
        if (lastCurrentTime > 0 && startPosition === -1) {
          this.log(`Override startPosition with lastCurrentTime @${lastCurrentTime.toFixed(3)}`);
          startPosition = lastCurrentTime;
        }
        this.state = State.IDLE;
        this.nextLoadPosition = this.startPosition = this.lastCurrentTime = startPosition;
        this.tick();
      } else {
        this._forceStartLoad = true;
        this.state = State.STOPPED;
      }
    }
    stopLoad() {
      this._forceStartLoad = false;
      super.stopLoad();
    }
    doTick() {
      switch (this.state) {
        case State.WAITING_LEVEL: {
          const {
            levels,
            level
          } = this;
          const currentLevel = levels == null ? void 0 : levels[level];
          const details = currentLevel == null ? void 0 : currentLevel.details;
          if (details && (!details.live || this.levelLastLoaded === currentLevel)) {
            if (this.waitForCdnTuneIn(details)) {
              break;
            }
            this.state = State.IDLE;
            break;
          } else if (this.hls.nextLoadLevel !== this.level) {
            this.state = State.IDLE;
            break;
          }
          break;
        }
        case State.FRAG_LOADING_WAITING_RETRY:
          {
            var _this$media;
            const now2 = self.performance.now();
            const retryDate = this.retryDate;
            if (!retryDate || now2 >= retryDate || (_this$media = this.media) != null && _this$media.seeking) {
              const {
                levels,
                level
              } = this;
              const currentLevel = levels == null ? void 0 : levels[level];
              this.resetStartWhenNotLoaded(currentLevel || null);
              this.state = State.IDLE;
            }
          }
          break;
      }
      if (this.state === State.IDLE) {
        this.doTickIdle();
      }
      this.onTickEnd();
    }
    onTickEnd() {
      super.onTickEnd();
      this.checkBuffer();
      this.checkFragmentChanged();
    }
    doTickIdle() {
      const {
        hls,
        levelLastLoaded,
        levels,
        media
      } = this;
      if (levelLastLoaded === null || !media && (this.startFragRequested || !hls.config.startFragPrefetch)) {
        return;
      }
      if (this.altAudio && this.audioOnly) {
        return;
      }
      const level = this.buffering ? hls.nextLoadLevel : hls.loadLevel;
      if (!(levels != null && levels[level])) {
        return;
      }
      const levelInfo = levels[level];
      const bufferInfo = this.getMainFwdBufferInfo();
      if (bufferInfo === null) {
        return;
      }
      const lastDetails = this.getLevelDetails();
      if (lastDetails && this._streamEnded(bufferInfo, lastDetails)) {
        const data = {};
        if (this.altAudio) {
          data.type = "video";
        }
        this.hls.trigger(Events2.BUFFER_EOS, data);
        this.state = State.ENDED;
        return;
      }
      if (!this.buffering) {
        return;
      }
      if (hls.loadLevel !== level && hls.manualLevel === -1) {
        this.log(`Adapting to level ${level} from level ${this.level}`);
      }
      this.level = hls.nextLoadLevel = level;
      const levelDetails = levelInfo.details;
      if (!levelDetails || this.state === State.WAITING_LEVEL || levelDetails.live && this.levelLastLoaded !== levelInfo) {
        this.level = level;
        this.state = State.WAITING_LEVEL;
        return;
      }
      const bufferLen = bufferInfo.len;
      const maxBufLen = this.getMaxBufferLength(levelInfo.maxBitrate);
      if (bufferLen >= maxBufLen) {
        return;
      }
      if (this.backtrackFragment && this.backtrackFragment.start > bufferInfo.end) {
        this.backtrackFragment = null;
      }
      const targetBufferTime = this.backtrackFragment ? this.backtrackFragment.start : bufferInfo.end;
      let frag = this.getNextFragment(targetBufferTime, levelDetails);
      if (this.couldBacktrack && !this.fragPrevious && frag && frag.sn !== "initSegment" && this.fragmentTracker.getState(frag) !== FragmentState.OK) {
        var _this$backtrackFragme;
        const backtrackSn = ((_this$backtrackFragme = this.backtrackFragment) != null ? _this$backtrackFragme : frag).sn;
        const fragIdx = backtrackSn - levelDetails.startSN;
        const backtrackFrag = levelDetails.fragments[fragIdx - 1];
        if (backtrackFrag && frag.cc === backtrackFrag.cc) {
          frag = backtrackFrag;
          this.fragmentTracker.removeFragment(backtrackFrag);
        }
      } else if (this.backtrackFragment && bufferInfo.len) {
        this.backtrackFragment = null;
      }
      if (frag && this.isLoopLoading(frag, targetBufferTime)) {
        const gapStart = frag.gap;
        if (!gapStart) {
          const type = this.audioOnly && !this.altAudio ? ElementaryStreamTypes.AUDIO : ElementaryStreamTypes.VIDEO;
          const mediaBuffer = (type === ElementaryStreamTypes.VIDEO ? this.videoBuffer : this.mediaBuffer) || this.media;
          if (mediaBuffer) {
            this.afterBufferFlushed(mediaBuffer, type, PlaylistLevelType.MAIN);
          }
        }
        frag = this.getNextFragmentLoopLoading(frag, levelDetails, bufferInfo, PlaylistLevelType.MAIN, maxBufLen);
      }
      if (!frag) {
        return;
      }
      if (frag.initSegment && !frag.initSegment.data && !this.bitrateTest) {
        frag = frag.initSegment;
      }
      this.loadFragment(frag, levelInfo, targetBufferTime);
    }
    loadFragment(frag, level, targetBufferTime) {
      const fragState = this.fragmentTracker.getState(frag);
      this.fragCurrent = frag;
      if (fragState === FragmentState.NOT_LOADED || fragState === FragmentState.PARTIAL) {
        if (frag.sn === "initSegment") {
          this._loadInitSegment(frag, level);
        } else if (this.bitrateTest) {
          this.log(`Fragment ${frag.sn} of level ${frag.level} is being downloaded to test bitrate and will not be buffered`);
          this._loadBitrateTestFrag(frag, level);
        } else {
          this.startFragRequested = true;
          super.loadFragment(frag, level, targetBufferTime);
        }
      } else {
        this.clearTrackerIfNeeded(frag);
      }
    }
    getBufferedFrag(position) {
      return this.fragmentTracker.getBufferedFrag(position, PlaylistLevelType.MAIN);
    }
    followingBufferedFrag(frag) {
      if (frag) {
        return this.getBufferedFrag(frag.end + 0.5);
      }
      return null;
    }
    /*
      on immediate level switch :
       - pause playback if playing
       - cancel any pending load request
       - and trigger a buffer flush
    */
    immediateLevelSwitch() {
      this.abortCurrentFrag();
      this.flushMainBuffer(0, Number.POSITIVE_INFINITY);
    }
    /**
     * try to switch ASAP without breaking video playback:
     * in order to ensure smooth but quick level switching,
     * we need to find the next flushable buffer range
     * we should take into account new segment fetch time
     */
    nextLevelSwitch() {
      const {
        levels,
        media
      } = this;
      if (media != null && media.readyState) {
        let fetchdelay;
        const fragPlayingCurrent = this.getAppendedFrag(media.currentTime);
        if (fragPlayingCurrent && fragPlayingCurrent.start > 1) {
          this.flushMainBuffer(0, fragPlayingCurrent.start - 1);
        }
        const levelDetails = this.getLevelDetails();
        if (levelDetails != null && levelDetails.live) {
          const bufferInfo = this.getMainFwdBufferInfo();
          if (!bufferInfo || bufferInfo.len < levelDetails.targetduration * 2) {
            return;
          }
        }
        if (!media.paused && levels) {
          const nextLevelId = this.hls.nextLoadLevel;
          const nextLevel = levels[nextLevelId];
          const fragLastKbps = this.fragLastKbps;
          if (fragLastKbps && this.fragCurrent) {
            fetchdelay = this.fragCurrent.duration * nextLevel.maxBitrate / (1e3 * fragLastKbps) + 1;
          } else {
            fetchdelay = 0;
          }
        } else {
          fetchdelay = 0;
        }
        const bufferedFrag = this.getBufferedFrag(media.currentTime + fetchdelay);
        if (bufferedFrag) {
          const nextBufferedFrag = this.followingBufferedFrag(bufferedFrag);
          if (nextBufferedFrag) {
            this.abortCurrentFrag();
            const maxStart = nextBufferedFrag.maxStartPTS ? nextBufferedFrag.maxStartPTS : nextBufferedFrag.start;
            const fragDuration = nextBufferedFrag.duration;
            const startPts = Math.max(bufferedFrag.end, maxStart + Math.min(Math.max(fragDuration - this.config.maxFragLookUpTolerance, fragDuration * (this.couldBacktrack ? 0.5 : 0.125)), fragDuration * (this.couldBacktrack ? 0.75 : 0.25)));
            this.flushMainBuffer(startPts, Number.POSITIVE_INFINITY);
          }
        }
      }
    }
    abortCurrentFrag() {
      const fragCurrent = this.fragCurrent;
      this.fragCurrent = null;
      this.backtrackFragment = null;
      if (fragCurrent) {
        fragCurrent.abortRequests();
        this.fragmentTracker.removeFragment(fragCurrent);
      }
      switch (this.state) {
        case State.KEY_LOADING:
        case State.FRAG_LOADING:
        case State.FRAG_LOADING_WAITING_RETRY:
        case State.PARSING:
        case State.PARSED:
          this.state = State.IDLE;
          break;
      }
      this.nextLoadPosition = this.getLoadPosition();
    }
    flushMainBuffer(startOffset, endOffset) {
      super.flushMainBuffer(startOffset, endOffset, this.altAudio ? "video" : null);
    }
    onMediaAttached(event, data) {
      super.onMediaAttached(event, data);
      const media = data.media;
      this.onvplaying = this.onMediaPlaying.bind(this);
      this.onvseeked = this.onMediaSeeked.bind(this);
      media.addEventListener("playing", this.onvplaying);
      media.addEventListener("seeked", this.onvseeked);
      this.gapController = new GapController(this.config, media, this.fragmentTracker, this.hls);
    }
    onMediaDetaching() {
      const {
        media
      } = this;
      if (media && this.onvplaying && this.onvseeked) {
        media.removeEventListener("playing", this.onvplaying);
        media.removeEventListener("seeked", this.onvseeked);
        this.onvplaying = this.onvseeked = null;
        this.videoBuffer = null;
      }
      this.fragPlaying = null;
      if (this.gapController) {
        this.gapController.destroy();
        this.gapController = null;
      }
      super.onMediaDetaching();
    }
    onMediaPlaying() {
      this.tick();
    }
    onMediaSeeked() {
      const media = this.media;
      const currentTime = media ? media.currentTime : null;
      if (isFiniteNumber(currentTime)) {
        this.log(`Media seeked to ${currentTime.toFixed(3)}`);
      }
      const bufferInfo = this.getMainFwdBufferInfo();
      if (bufferInfo === null || bufferInfo.len === 0) {
        this.warn(`Main forward buffer length on "seeked" event ${bufferInfo ? bufferInfo.len : "empty"})`);
        return;
      }
      this.tick();
    }
    onManifestLoading() {
      this.log("Trigger BUFFER_RESET");
      this.hls.trigger(Events2.BUFFER_RESET, void 0);
      this.fragmentTracker.removeAllFragments();
      this.couldBacktrack = false;
      this.startPosition = this.lastCurrentTime = this.fragLastKbps = 0;
      this.levels = this.fragPlaying = this.backtrackFragment = this.levelLastLoaded = null;
      this.altAudio = this.audioOnly = this.startFragRequested = false;
    }
    onManifestParsed(event, data) {
      let aac = false;
      let heaac = false;
      data.levels.forEach((level) => {
        const codec = level.audioCodec;
        if (codec) {
          aac = aac || codec.indexOf("mp4a.40.2") !== -1;
          heaac = heaac || codec.indexOf("mp4a.40.5") !== -1;
        }
      });
      this.audioCodecSwitch = aac && heaac && !changeTypeSupported();
      if (this.audioCodecSwitch) {
        this.log("Both AAC/HE-AAC audio found in levels; declaring level codec as HE-AAC");
      }
      this.levels = data.levels;
      this.startFragRequested = false;
    }
    onLevelLoading(event, data) {
      const {
        levels
      } = this;
      if (!levels || this.state !== State.IDLE) {
        return;
      }
      const level = levels[data.level];
      if (!level.details || level.details.live && this.levelLastLoaded !== level || this.waitForCdnTuneIn(level.details)) {
        this.state = State.WAITING_LEVEL;
      }
    }
    onLevelLoaded(event, data) {
      var _curLevel$details;
      const {
        levels
      } = this;
      const newLevelId = data.level;
      const newDetails = data.details;
      const duration = newDetails.totalduration;
      if (!levels) {
        this.warn(`Levels were reset while loading level ${newLevelId}`);
        return;
      }
      this.log(`Level ${newLevelId} loaded [${newDetails.startSN},${newDetails.endSN}]${newDetails.lastPartSn ? `[part-${newDetails.lastPartSn}-${newDetails.lastPartIndex}]` : ""}, cc [${newDetails.startCC}, ${newDetails.endCC}] duration:${duration}`);
      const curLevel = levels[newLevelId];
      const fragCurrent = this.fragCurrent;
      if (fragCurrent && (this.state === State.FRAG_LOADING || this.state === State.FRAG_LOADING_WAITING_RETRY)) {
        if (fragCurrent.level !== data.level && fragCurrent.loader) {
          this.abortCurrentFrag();
        }
      }
      let sliding = 0;
      if (newDetails.live || (_curLevel$details = curLevel.details) != null && _curLevel$details.live) {
        var _this$levelLastLoaded;
        this.checkLiveUpdate(newDetails);
        if (newDetails.deltaUpdateFailed) {
          return;
        }
        sliding = this.alignPlaylists(newDetails, curLevel.details, (_this$levelLastLoaded = this.levelLastLoaded) == null ? void 0 : _this$levelLastLoaded.details);
      }
      curLevel.details = newDetails;
      this.levelLastLoaded = curLevel;
      this.hls.trigger(Events2.LEVEL_UPDATED, {
        details: newDetails,
        level: newLevelId
      });
      if (this.state === State.WAITING_LEVEL) {
        if (this.waitForCdnTuneIn(newDetails)) {
          return;
        }
        this.state = State.IDLE;
      }
      if (!this.startFragRequested) {
        this.setStartPosition(newDetails, sliding);
      } else if (newDetails.live) {
        this.synchronizeToLiveEdge(newDetails);
      }
      this.tick();
    }
    _handleFragmentLoadProgress(data) {
      var _frag$initSegment;
      const {
        frag,
        part,
        payload
      } = data;
      const {
        levels
      } = this;
      if (!levels) {
        this.warn(`Levels were reset while fragment load was in progress. Fragment ${frag.sn} of level ${frag.level} will not be buffered`);
        return;
      }
      const currentLevel = levels[frag.level];
      const details = currentLevel.details;
      if (!details) {
        this.warn(`Dropping fragment ${frag.sn} of level ${frag.level} after level details were reset`);
        this.fragmentTracker.removeFragment(frag);
        return;
      }
      const videoCodec = currentLevel.videoCodec;
      const accurateTimeOffset = details.PTSKnown || !details.live;
      const initSegmentData = (_frag$initSegment = frag.initSegment) == null ? void 0 : _frag$initSegment.data;
      const audioCodec = this._getAudioCodec(currentLevel);
      const transmuxer = this.transmuxer = this.transmuxer || new TransmuxerInterface(this.hls, PlaylistLevelType.MAIN, this._handleTransmuxComplete.bind(this), this._handleTransmuxerFlush.bind(this));
      const partIndex = part ? part.index : -1;
      const partial = partIndex !== -1;
      const chunkMeta = new ChunkMetadata(frag.level, frag.sn, frag.stats.chunkCount, payload.byteLength, partIndex, partial);
      const initPTS = this.initPTS[frag.cc];
      transmuxer.push(payload, initSegmentData, audioCodec, videoCodec, frag, part, details.totalduration, accurateTimeOffset, chunkMeta, initPTS);
    }
    onAudioTrackSwitching(event, data) {
      const fromAltAudio = this.altAudio;
      const altAudio = !!data.url;
      if (!altAudio) {
        if (this.mediaBuffer !== this.media) {
          this.log("Switching on main audio, use media.buffered to schedule main fragment loading");
          this.mediaBuffer = this.media;
          const fragCurrent = this.fragCurrent;
          if (fragCurrent) {
            this.log("Switching to main audio track, cancel main fragment load");
            fragCurrent.abortRequests();
            this.fragmentTracker.removeFragment(fragCurrent);
          }
          this.resetTransmuxer();
          this.resetLoadingState();
        } else if (this.audioOnly) {
          this.resetTransmuxer();
        }
        const hls = this.hls;
        if (fromAltAudio) {
          hls.trigger(Events2.BUFFER_FLUSHING, {
            startOffset: 0,
            endOffset: Number.POSITIVE_INFINITY,
            type: null
          });
          this.fragmentTracker.removeAllFragments();
        }
        hls.trigger(Events2.AUDIO_TRACK_SWITCHED, data);
      }
    }
    onAudioTrackSwitched(event, data) {
      const trackId = data.id;
      const altAudio = !!this.hls.audioTracks[trackId].url;
      if (altAudio) {
        const videoBuffer = this.videoBuffer;
        if (videoBuffer && this.mediaBuffer !== videoBuffer) {
          this.log("Switching on alternate audio, use video.buffered to schedule main fragment loading");
          this.mediaBuffer = videoBuffer;
        }
      }
      this.altAudio = altAudio;
      this.tick();
    }
    onBufferCreated(event, data) {
      const tracks = data.tracks;
      let mediaTrack;
      let name;
      let alternate = false;
      for (const type in tracks) {
        const track = tracks[type];
        if (track.id === "main") {
          name = type;
          mediaTrack = track;
          if (type === "video") {
            const videoTrack = tracks[type];
            if (videoTrack) {
              this.videoBuffer = videoTrack.buffer;
            }
          }
        } else {
          alternate = true;
        }
      }
      if (alternate && mediaTrack) {
        this.log(`Alternate track found, use ${name}.buffered to schedule main fragment loading`);
        this.mediaBuffer = mediaTrack.buffer;
      } else {
        this.mediaBuffer = this.media;
      }
    }
    onFragBuffered(event, data) {
      const {
        frag,
        part
      } = data;
      if (frag && frag.type !== PlaylistLevelType.MAIN) {
        return;
      }
      if (this.fragContextChanged(frag)) {
        this.warn(`Fragment ${frag.sn}${part ? " p: " + part.index : ""} of level ${frag.level} finished buffering, but was aborted. state: ${this.state}`);
        if (this.state === State.PARSED) {
          this.state = State.IDLE;
        }
        return;
      }
      const stats = part ? part.stats : frag.stats;
      this.fragLastKbps = Math.round(8 * stats.total / (stats.buffering.end - stats.loading.first));
      if (frag.sn !== "initSegment") {
        this.fragPrevious = frag;
      }
      this.fragBufferedComplete(frag, part);
    }
    onError(event, data) {
      var _data$context;
      if (data.fatal) {
        this.state = State.ERROR;
        return;
      }
      switch (data.details) {
        case ErrorDetails.FRAG_GAP:
        case ErrorDetails.FRAG_PARSING_ERROR:
        case ErrorDetails.FRAG_DECRYPT_ERROR:
        case ErrorDetails.FRAG_LOAD_ERROR:
        case ErrorDetails.FRAG_LOAD_TIMEOUT:
        case ErrorDetails.KEY_LOAD_ERROR:
        case ErrorDetails.KEY_LOAD_TIMEOUT:
          this.onFragmentOrKeyLoadError(PlaylistLevelType.MAIN, data);
          break;
        case ErrorDetails.LEVEL_LOAD_ERROR:
        case ErrorDetails.LEVEL_LOAD_TIMEOUT:
        case ErrorDetails.LEVEL_PARSING_ERROR:
          if (!data.levelRetry && this.state === State.WAITING_LEVEL && ((_data$context = data.context) == null ? void 0 : _data$context.type) === PlaylistContextType.LEVEL) {
            this.state = State.IDLE;
          }
          break;
        case ErrorDetails.BUFFER_APPEND_ERROR:
        case ErrorDetails.BUFFER_FULL_ERROR:
          if (!data.parent || data.parent !== "main") {
            return;
          }
          if (data.details === ErrorDetails.BUFFER_APPEND_ERROR) {
            this.resetLoadingState();
            return;
          }
          if (this.reduceLengthAndFlushBuffer(data)) {
            this.flushMainBuffer(0, Number.POSITIVE_INFINITY);
          }
          break;
        case ErrorDetails.INTERNAL_EXCEPTION:
          this.recoverWorkerError(data);
          break;
      }
    }
    // Checks the health of the buffer and attempts to resolve playback stalls.
    checkBuffer() {
      const {
        media,
        gapController
      } = this;
      if (!media || !gapController || !media.readyState) {
        return;
      }
      if (this.loadedmetadata || !BufferHelper.getBuffered(media).length) {
        const activeFrag = this.state !== State.IDLE ? this.fragCurrent : null;
        gapController.poll(this.lastCurrentTime, activeFrag);
      }
      this.lastCurrentTime = media.currentTime;
    }
    onFragLoadEmergencyAborted() {
      this.state = State.IDLE;
      if (!this.loadedmetadata) {
        this.startFragRequested = false;
        this.nextLoadPosition = this.startPosition;
      }
      this.tickImmediate();
    }
    onBufferFlushed(event, {
      type
    }) {
      if (type !== ElementaryStreamTypes.AUDIO || this.audioOnly && !this.altAudio) {
        const mediaBuffer = (type === ElementaryStreamTypes.VIDEO ? this.videoBuffer : this.mediaBuffer) || this.media;
        this.afterBufferFlushed(mediaBuffer, type, PlaylistLevelType.MAIN);
        this.tick();
      }
    }
    onLevelsUpdated(event, data) {
      if (this.level > -1 && this.fragCurrent) {
        this.level = this.fragCurrent.level;
      }
      this.levels = data.levels;
    }
    swapAudioCodec() {
      this.audioCodecSwap = !this.audioCodecSwap;
    }
    /**
     * Seeks to the set startPosition if not equal to the mediaElement's current time.
     */
    seekToStartPos() {
      const {
        media
      } = this;
      if (!media) {
        return;
      }
      const currentTime = media.currentTime;
      let startPosition = this.startPosition;
      if (startPosition >= 0 && currentTime < startPosition) {
        if (media.seeking) {
          this.log(`could not seek to ${startPosition}, already seeking at ${currentTime}`);
          return;
        }
        const buffered = BufferHelper.getBuffered(media);
        const bufferStart = buffered.length ? buffered.start(0) : 0;
        const delta = bufferStart - startPosition;
        if (delta > 0 && (delta < this.config.maxBufferHole || delta < this.config.maxFragLookUpTolerance)) {
          this.log(`adjusting start position by ${delta} to match buffer start`);
          startPosition += delta;
          this.startPosition = startPosition;
        }
        this.log(`seek to target start position ${startPosition} from current time ${currentTime}`);
        media.currentTime = startPosition;
      }
    }
    _getAudioCodec(currentLevel) {
      let audioCodec = this.config.defaultAudioCodec || currentLevel.audioCodec;
      if (this.audioCodecSwap && audioCodec) {
        this.log("Swapping audio codec");
        if (audioCodec.indexOf("mp4a.40.5") !== -1) {
          audioCodec = "mp4a.40.2";
        } else {
          audioCodec = "mp4a.40.5";
        }
      }
      return audioCodec;
    }
    _loadBitrateTestFrag(frag, level) {
      frag.bitrateTest = true;
      this._doFragLoad(frag, level).then((data) => {
        const {
          hls
        } = this;
        if (!data || this.fragContextChanged(frag)) {
          return;
        }
        level.fragmentError = 0;
        this.state = State.IDLE;
        this.startFragRequested = false;
        this.bitrateTest = false;
        const stats = frag.stats;
        stats.parsing.start = stats.parsing.end = stats.buffering.start = stats.buffering.end = self.performance.now();
        hls.trigger(Events2.FRAG_LOADED, data);
        frag.bitrateTest = false;
      });
    }
    _handleTransmuxComplete(transmuxResult) {
      var _id3$samples;
      const id = "main";
      const {
        hls
      } = this;
      const {
        remuxResult,
        chunkMeta
      } = transmuxResult;
      const context = this.getCurrentContext(chunkMeta);
      if (!context) {
        this.resetWhenMissingContext(chunkMeta);
        return;
      }
      const {
        frag,
        part,
        level
      } = context;
      const {
        video,
        text,
        id3,
        initSegment
      } = remuxResult;
      const {
        details
      } = level;
      const audio = this.altAudio ? void 0 : remuxResult.audio;
      if (this.fragContextChanged(frag)) {
        this.fragmentTracker.removeFragment(frag);
        return;
      }
      this.state = State.PARSING;
      if (initSegment) {
        if (initSegment != null && initSegment.tracks) {
          const mapFragment = frag.initSegment || frag;
          this._bufferInitSegment(level, initSegment.tracks, mapFragment, chunkMeta);
          hls.trigger(Events2.FRAG_PARSING_INIT_SEGMENT, {
            frag: mapFragment,
            id,
            tracks: initSegment.tracks
          });
        }
        const initPTS = initSegment.initPTS;
        const timescale = initSegment.timescale;
        if (isFiniteNumber(initPTS)) {
          this.initPTS[frag.cc] = {
            baseTime: initPTS,
            timescale
          };
          hls.trigger(Events2.INIT_PTS_FOUND, {
            frag,
            id,
            initPTS,
            timescale
          });
        }
      }
      if (video && details && frag.sn !== "initSegment") {
        const prevFrag = details.fragments[frag.sn - 1 - details.startSN];
        const isFirstFragment = frag.sn === details.startSN;
        const isFirstInDiscontinuity = !prevFrag || frag.cc > prevFrag.cc;
        if (remuxResult.independent !== false) {
          const {
            startPTS,
            endPTS,
            startDTS,
            endDTS
          } = video;
          if (part) {
            part.elementaryStreams[video.type] = {
              startPTS,
              endPTS,
              startDTS,
              endDTS
            };
          } else {
            if (video.firstKeyFrame && video.independent && chunkMeta.id === 1 && !isFirstInDiscontinuity) {
              this.couldBacktrack = true;
            }
            if (video.dropped && video.independent) {
              const bufferInfo = this.getMainFwdBufferInfo();
              const targetBufferTime = (bufferInfo ? bufferInfo.end : this.getLoadPosition()) + this.config.maxBufferHole;
              const startTime = video.firstKeyFramePTS ? video.firstKeyFramePTS : startPTS;
              if (!isFirstFragment && targetBufferTime < startTime - this.config.maxBufferHole && !isFirstInDiscontinuity) {
                this.backtrack(frag);
                return;
              } else if (isFirstInDiscontinuity) {
                frag.gap = true;
              }
              frag.setElementaryStreamInfo(video.type, frag.start, endPTS, frag.start, endDTS, true);
            } else if (isFirstFragment && startPTS > MAX_START_GAP_JUMP) {
              frag.gap = true;
            }
          }
          frag.setElementaryStreamInfo(video.type, startPTS, endPTS, startDTS, endDTS);
          if (this.backtrackFragment) {
            this.backtrackFragment = frag;
          }
          this.bufferFragmentData(video, frag, part, chunkMeta, isFirstFragment || isFirstInDiscontinuity);
        } else if (isFirstFragment || isFirstInDiscontinuity) {
          frag.gap = true;
        } else {
          this.backtrack(frag);
          return;
        }
      }
      if (audio) {
        const {
          startPTS,
          endPTS,
          startDTS,
          endDTS
        } = audio;
        if (part) {
          part.elementaryStreams[ElementaryStreamTypes.AUDIO] = {
            startPTS,
            endPTS,
            startDTS,
            endDTS
          };
        }
        frag.setElementaryStreamInfo(ElementaryStreamTypes.AUDIO, startPTS, endPTS, startDTS, endDTS);
        this.bufferFragmentData(audio, frag, part, chunkMeta);
      }
      if (details && id3 != null && (_id3$samples = id3.samples) != null && _id3$samples.length) {
        const emittedID3 = {
          id,
          frag,
          details,
          samples: id3.samples
        };
        hls.trigger(Events2.FRAG_PARSING_METADATA, emittedID3);
      }
      if (details && text) {
        const emittedText = {
          id,
          frag,
          details,
          samples: text.samples
        };
        hls.trigger(Events2.FRAG_PARSING_USERDATA, emittedText);
      }
    }
    _bufferInitSegment(currentLevel, tracks, frag, chunkMeta) {
      if (this.state !== State.PARSING) {
        return;
      }
      this.audioOnly = !!tracks.audio && !tracks.video;
      if (this.altAudio && !this.audioOnly) {
        delete tracks.audio;
      }
      const {
        audio,
        video,
        audiovideo
      } = tracks;
      if (audio) {
        let audioCodec = currentLevel.audioCodec;
        const ua = navigator.userAgent.toLowerCase();
        if (this.audioCodecSwitch) {
          if (audioCodec) {
            if (audioCodec.indexOf("mp4a.40.5") !== -1) {
              audioCodec = "mp4a.40.2";
            } else {
              audioCodec = "mp4a.40.5";
            }
          }
          const audioMetadata = audio.metadata;
          if (audioMetadata && "channelCount" in audioMetadata && (audioMetadata.channelCount || 1) !== 1 && ua.indexOf("firefox") === -1) {
            audioCodec = "mp4a.40.5";
          }
        }
        if (audioCodec && audioCodec.indexOf("mp4a.40.5") !== -1 && ua.indexOf("android") !== -1 && audio.container !== "audio/mpeg") {
          audioCodec = "mp4a.40.2";
          this.log(`Android: force audio codec to ${audioCodec}`);
        }
        if (currentLevel.audioCodec && currentLevel.audioCodec !== audioCodec) {
          this.log(`Swapping manifest audio codec "${currentLevel.audioCodec}" for "${audioCodec}"`);
        }
        audio.levelCodec = audioCodec;
        audio.id = "main";
        this.log(`Init audio buffer, container:${audio.container}, codecs[selected/level/parsed]=[${audioCodec || ""}/${currentLevel.audioCodec || ""}/${audio.codec}]`);
      }
      if (video) {
        video.levelCodec = currentLevel.videoCodec;
        video.id = "main";
        this.log(`Init video buffer, container:${video.container}, codecs[level/parsed]=[${currentLevel.videoCodec || ""}/${video.codec}]`);
      }
      if (audiovideo) {
        this.log(`Init audiovideo buffer, container:${audiovideo.container}, codecs[level/parsed]=[${currentLevel.codecs}/${audiovideo.codec}]`);
      }
      this.hls.trigger(Events2.BUFFER_CODECS, tracks);
      Object.keys(tracks).forEach((trackName) => {
        const track = tracks[trackName];
        const initSegment = track.initSegment;
        if (initSegment != null && initSegment.byteLength) {
          this.hls.trigger(Events2.BUFFER_APPENDING, {
            type: trackName,
            data: initSegment,
            frag,
            part: null,
            chunkMeta,
            parent: frag.type
          });
        }
      });
      this.tickImmediate();
    }
    getMainFwdBufferInfo() {
      return this.getFwdBufferInfo(this.mediaBuffer ? this.mediaBuffer : this.media, PlaylistLevelType.MAIN);
    }
    backtrack(frag) {
      this.couldBacktrack = true;
      this.backtrackFragment = frag;
      this.resetTransmuxer();
      this.flushBufferGap(frag);
      this.fragmentTracker.removeFragment(frag);
      this.fragPrevious = null;
      this.nextLoadPosition = frag.start;
      this.state = State.IDLE;
    }
    checkFragmentChanged() {
      const video = this.media;
      let fragPlayingCurrent = null;
      if (video && video.readyState > 1 && video.seeking === false) {
        const currentTime = video.currentTime;
        if (BufferHelper.isBuffered(video, currentTime)) {
          fragPlayingCurrent = this.getAppendedFrag(currentTime);
        } else if (BufferHelper.isBuffered(video, currentTime + 0.1)) {
          fragPlayingCurrent = this.getAppendedFrag(currentTime + 0.1);
        }
        if (fragPlayingCurrent) {
          this.backtrackFragment = null;
          const fragPlaying = this.fragPlaying;
          const fragCurrentLevel = fragPlayingCurrent.level;
          if (!fragPlaying || fragPlayingCurrent.sn !== fragPlaying.sn || fragPlaying.level !== fragCurrentLevel) {
            this.fragPlaying = fragPlayingCurrent;
            this.hls.trigger(Events2.FRAG_CHANGED, {
              frag: fragPlayingCurrent
            });
            if (!fragPlaying || fragPlaying.level !== fragCurrentLevel) {
              this.hls.trigger(Events2.LEVEL_SWITCHED, {
                level: fragCurrentLevel
              });
            }
          }
        }
      }
    }
    get nextLevel() {
      const frag = this.nextBufferedFrag;
      if (frag) {
        return frag.level;
      }
      return -1;
    }
    get currentFrag() {
      const media = this.media;
      if (media) {
        return this.fragPlaying || this.getAppendedFrag(media.currentTime);
      }
      return null;
    }
    get currentProgramDateTime() {
      const media = this.media;
      if (media) {
        const currentTime = media.currentTime;
        const frag = this.currentFrag;
        if (frag && isFiniteNumber(currentTime) && isFiniteNumber(frag.programDateTime)) {
          const epocMs = frag.programDateTime + (currentTime - frag.start) * 1e3;
          return new Date(epocMs);
        }
      }
      return null;
    }
    get currentLevel() {
      const frag = this.currentFrag;
      if (frag) {
        return frag.level;
      }
      return -1;
    }
    get nextBufferedFrag() {
      const frag = this.currentFrag;
      if (frag) {
        return this.followingBufferedFrag(frag);
      }
      return null;
    }
    get forceStartLoad() {
      return this._forceStartLoad;
    }
  };
  var Hls = class _Hls {
    /**
     * Get the video-dev/hls.js package version.
     */
    static get version() {
      return "1.5.18";
    }
    /**
     * Check if the required MediaSource Extensions are available.
     */
    static isMSESupported() {
      return isMSESupported();
    }
    /**
     * Check if MediaSource Extensions are available and isTypeSupported checks pass for any baseline codecs.
     */
    static isSupported() {
      return isSupported();
    }
    /**
     * Get the MediaSource global used for MSE playback (ManagedMediaSource, MediaSource, or WebKitMediaSource).
     */
    static getMediaSource() {
      return getMediaSource();
    }
    static get Events() {
      return Events2;
    }
    static get ErrorTypes() {
      return ErrorTypes;
    }
    static get ErrorDetails() {
      return ErrorDetails;
    }
    /**
     * Get the default configuration applied to new instances.
     */
    static get DefaultConfig() {
      if (!_Hls.defaultConfig) {
        return hlsDefaultConfig;
      }
      return _Hls.defaultConfig;
    }
    /**
     * Replace the default configuration applied to new instances.
     */
    static set DefaultConfig(defaultConfig) {
      _Hls.defaultConfig = defaultConfig;
    }
    /**
     * Creates an instance of an HLS client that can attach to exactly one `HTMLMediaElement`.
     * @param userConfig - Configuration options applied over `Hls.DefaultConfig`
     */
    constructor(userConfig = {}) {
      this.config = void 0;
      this.userConfig = void 0;
      this.coreComponents = void 0;
      this.networkControllers = void 0;
      this.started = false;
      this._emitter = new EventEmitter();
      this._autoLevelCapping = -1;
      this._maxHdcpLevel = null;
      this.abrController = void 0;
      this.bufferController = void 0;
      this.capLevelController = void 0;
      this.latencyController = void 0;
      this.levelController = void 0;
      this.streamController = void 0;
      this.audioTrackController = void 0;
      this.subtitleTrackController = void 0;
      this.emeController = void 0;
      this.cmcdController = void 0;
      this._media = null;
      this.url = null;
      this.triggeringException = void 0;
      enableLogs(userConfig.debug || false, "Hls instance");
      const config = this.config = mergeConfig(_Hls.DefaultConfig, userConfig);
      this.userConfig = userConfig;
      if (config.progressive) {
        enableStreamingMode(config);
      }
      const {
        abrController: ConfigAbrController,
        bufferController: ConfigBufferController,
        capLevelController: ConfigCapLevelController,
        errorController: ConfigErrorController,
        fpsController: ConfigFpsController
      } = config;
      const errorController = new ConfigErrorController(this);
      const abrController = this.abrController = new ConfigAbrController(this);
      const bufferController = this.bufferController = new ConfigBufferController(this);
      const capLevelController = this.capLevelController = new ConfigCapLevelController(this);
      const fpsController = new ConfigFpsController(this);
      const playListLoader = new PlaylistLoader(this);
      const id3TrackController = new ID3TrackController(this);
      const ConfigContentSteeringController = config.contentSteeringController;
      const contentSteering = ConfigContentSteeringController ? new ConfigContentSteeringController(this) : null;
      const levelController = this.levelController = new LevelController(this, contentSteering);
      const fragmentTracker = new FragmentTracker(this);
      const keyLoader = new KeyLoader(this.config);
      const streamController = this.streamController = new StreamController(this, fragmentTracker, keyLoader);
      capLevelController.setStreamController(streamController);
      fpsController.setStreamController(streamController);
      const networkControllers = [playListLoader, levelController, streamController];
      if (contentSteering) {
        networkControllers.splice(1, 0, contentSteering);
      }
      this.networkControllers = networkControllers;
      const coreComponents = [abrController, bufferController, capLevelController, fpsController, id3TrackController, fragmentTracker];
      this.audioTrackController = this.createController(config.audioTrackController, networkControllers);
      const AudioStreamControllerClass = config.audioStreamController;
      if (AudioStreamControllerClass) {
        networkControllers.push(new AudioStreamControllerClass(this, fragmentTracker, keyLoader));
      }
      this.subtitleTrackController = this.createController(config.subtitleTrackController, networkControllers);
      const SubtitleStreamControllerClass = config.subtitleStreamController;
      if (SubtitleStreamControllerClass) {
        networkControllers.push(new SubtitleStreamControllerClass(this, fragmentTracker, keyLoader));
      }
      this.createController(config.timelineController, coreComponents);
      keyLoader.emeController = this.emeController = this.createController(config.emeController, coreComponents);
      this.cmcdController = this.createController(config.cmcdController, coreComponents);
      this.latencyController = this.createController(LatencyController, coreComponents);
      this.coreComponents = coreComponents;
      networkControllers.push(errorController);
      const onErrorOut = errorController.onErrorOut;
      if (typeof onErrorOut === "function") {
        this.on(Events2.ERROR, onErrorOut, errorController);
      }
    }
    createController(ControllerClass, components) {
      if (ControllerClass) {
        const controllerInstance = new ControllerClass(this);
        if (components) {
          components.push(controllerInstance);
        }
        return controllerInstance;
      }
      return null;
    }
    // Delegate the EventEmitter through the public API of Hls.js
    on(event, listener, context = this) {
      this._emitter.on(event, listener, context);
    }
    once(event, listener, context = this) {
      this._emitter.once(event, listener, context);
    }
    removeAllListeners(event) {
      this._emitter.removeAllListeners(event);
    }
    off(event, listener, context = this, once) {
      this._emitter.off(event, listener, context, once);
    }
    listeners(event) {
      return this._emitter.listeners(event);
    }
    emit(event, name, eventObject) {
      return this._emitter.emit(event, name, eventObject);
    }
    trigger(event, eventObject) {
      if (this.config.debug) {
        return this.emit(event, event, eventObject);
      } else {
        try {
          return this.emit(event, event, eventObject);
        } catch (error) {
          logger.error("An internal error happened while handling event " + event + '. Error message: "' + error.message + '". Here is a stacktrace:', error);
          if (!this.triggeringException) {
            this.triggeringException = true;
            const fatal = event === Events2.ERROR;
            this.trigger(Events2.ERROR, {
              type: ErrorTypes.OTHER_ERROR,
              details: ErrorDetails.INTERNAL_EXCEPTION,
              fatal,
              event,
              error
            });
            this.triggeringException = false;
          }
        }
      }
      return false;
    }
    listenerCount(event) {
      return this._emitter.listenerCount(event);
    }
    /**
     * Dispose of the instance
     */
    destroy() {
      logger.log("destroy");
      this.trigger(Events2.DESTROYING, void 0);
      this.detachMedia();
      this.removeAllListeners();
      this._autoLevelCapping = -1;
      this.url = null;
      this.networkControllers.forEach((component) => component.destroy());
      this.networkControllers.length = 0;
      this.coreComponents.forEach((component) => component.destroy());
      this.coreComponents.length = 0;
      const config = this.config;
      config.xhrSetup = config.fetchSetup = void 0;
      this.userConfig = null;
    }
    /**
     * Attaches Hls.js to a media element
     */
    attachMedia(media) {
      logger.log("attachMedia");
      this._media = media;
      this.trigger(Events2.MEDIA_ATTACHING, {
        media
      });
    }
    /**
     * Detach Hls.js from the media
     */
    detachMedia() {
      logger.log("detachMedia");
      this.trigger(Events2.MEDIA_DETACHING, void 0);
      this._media = null;
    }
    /**
     * Set the source URL. Can be relative or absolute.
     */
    loadSource(url) {
      this.stopLoad();
      const media = this.media;
      const loadedSource = this.url;
      const loadingSource = this.url = urlToolkitExports.buildAbsoluteURL(self.location.href, url, {
        alwaysNormalize: true
      });
      this._autoLevelCapping = -1;
      this._maxHdcpLevel = null;
      logger.log(`loadSource:${loadingSource}`);
      if (media && loadedSource && (loadedSource !== loadingSource || this.bufferController.hasSourceTypes())) {
        this.detachMedia();
        this.attachMedia(media);
      }
      this.trigger(Events2.MANIFEST_LOADING, {
        url
      });
    }
    /**
     * Start loading data from the stream source.
     * Depending on default config, client starts loading automatically when a source is set.
     *
     * @param startPosition - Set the start position to stream from.
     * Defaults to -1 (None: starts from earliest point)
     */
    startLoad(startPosition = -1) {
      logger.log(`startLoad(${startPosition})`);
      this.started = true;
      this.resumeBuffering();
      for (let i = 0; i < this.networkControllers.length; i++) {
        this.networkControllers[i].startLoad(startPosition);
        if (!this.started || !this.networkControllers) {
          break;
        }
      }
    }
    /**
     * Stop loading of any stream data.
     */
    stopLoad() {
      logger.log("stopLoad");
      this.started = false;
      for (let i = 0; i < this.networkControllers.length; i++) {
        this.networkControllers[i].stopLoad();
        if (this.started || !this.networkControllers) {
          break;
        }
      }
    }
    /**
     * Resumes stream controller segment loading after `pauseBuffering` has been called.
     */
    resumeBuffering() {
      logger.log(`resume buffering`);
      this.networkControllers.forEach((controller) => {
        if (controller.resumeBuffering) {
          controller.resumeBuffering();
        }
      });
    }
    /**
     * Prevents stream controller from loading new segments until `resumeBuffering` is called.
     * This allows for media buffering to be paused without interupting playlist loading.
     */
    pauseBuffering() {
      logger.log(`pause buffering`);
      this.networkControllers.forEach((controller) => {
        if (controller.pauseBuffering) {
          controller.pauseBuffering();
        }
      });
    }
    /**
     * Swap through possible audio codecs in the stream (for example to switch from stereo to 5.1)
     */
    swapAudioCodec() {
      logger.log("swapAudioCodec");
      this.streamController.swapAudioCodec();
    }
    /**
     * When the media-element fails, this allows to detach and then re-attach it
     * as one call (convenience method).
     *
     * Automatic recovery of media-errors by this process is configurable.
     */
    recoverMediaError() {
      logger.log("recoverMediaError");
      const media = this._media;
      this.detachMedia();
      if (media) {
        this.attachMedia(media);
      }
    }
    removeLevel(levelIndex) {
      this.levelController.removeLevel(levelIndex);
    }
    /**
     * @returns an array of levels (variants) sorted by HDCP-LEVEL, RESOLUTION (height), FRAME-RATE, CODECS, VIDEO-RANGE, and BANDWIDTH
     */
    get levels() {
      const levels = this.levelController.levels;
      return levels ? levels : [];
    }
    /**
     * Index of quality level (variant) currently played
     */
    get currentLevel() {
      return this.streamController.currentLevel;
    }
    /**
     * Set quality level index immediately. This will flush the current buffer to replace the quality asap. That means playback will interrupt at least shortly to re-buffer and re-sync eventually. Set to -1 for automatic level selection.
     */
    set currentLevel(newLevel) {
      logger.log(`set currentLevel:${newLevel}`);
      this.levelController.manualLevel = newLevel;
      this.streamController.immediateLevelSwitch();
    }
    /**
     * Index of next quality level loaded as scheduled by stream controller.
     */
    get nextLevel() {
      return this.streamController.nextLevel;
    }
    /**
     * Set quality level index for next loaded data.
     * This will switch the video quality asap, without interrupting playback.
     * May abort current loading of data, and flush parts of buffer (outside currently played fragment region).
     * @param newLevel - Pass -1 for automatic level selection
     */
    set nextLevel(newLevel) {
      logger.log(`set nextLevel:${newLevel}`);
      this.levelController.manualLevel = newLevel;
      this.streamController.nextLevelSwitch();
    }
    /**
     * Return the quality level of the currently or last (of none is loaded currently) segment
     */
    get loadLevel() {
      return this.levelController.level;
    }
    /**
     * Set quality level index for next loaded data in a conservative way.
     * This will switch the quality without flushing, but interrupt current loading.
     * Thus the moment when the quality switch will appear in effect will only be after the already existing buffer.
     * @param newLevel - Pass -1 for automatic level selection
     */
    set loadLevel(newLevel) {
      logger.log(`set loadLevel:${newLevel}`);
      this.levelController.manualLevel = newLevel;
    }
    /**
     * get next quality level loaded
     */
    get nextLoadLevel() {
      return this.levelController.nextLoadLevel;
    }
    /**
     * Set quality level of next loaded segment in a fully "non-destructive" way.
     * Same as `loadLevel` but will wait for next switch (until current loading is done).
     */
    set nextLoadLevel(level) {
      this.levelController.nextLoadLevel = level;
    }
    /**
     * Return "first level": like a default level, if not set,
     * falls back to index of first level referenced in manifest
     */
    get firstLevel() {
      return Math.max(this.levelController.firstLevel, this.minAutoLevel);
    }
    /**
     * Sets "first-level", see getter.
     */
    set firstLevel(newLevel) {
      logger.log(`set firstLevel:${newLevel}`);
      this.levelController.firstLevel = newLevel;
    }
    /**
     * Return the desired start level for the first fragment that will be loaded.
     * The default value of -1 indicates automatic start level selection.
     * Setting hls.nextAutoLevel without setting a startLevel will result in
     * the nextAutoLevel value being used for one fragment load.
     */
    get startLevel() {
      const startLevel = this.levelController.startLevel;
      if (startLevel === -1 && this.abrController.forcedAutoLevel > -1) {
        return this.abrController.forcedAutoLevel;
      }
      return startLevel;
    }
    /**
     * set  start level (level of first fragment that will be played back)
     * if not overrided by user, first level appearing in manifest will be used as start level
     * if -1 : automatic start level selection, playback will start from level matching download bandwidth
     * (determined from download of first segment)
     */
    set startLevel(newLevel) {
      logger.log(`set startLevel:${newLevel}`);
      if (newLevel !== -1) {
        newLevel = Math.max(newLevel, this.minAutoLevel);
      }
      this.levelController.startLevel = newLevel;
    }
    /**
     * Whether level capping is enabled.
     * Default value is set via `config.capLevelToPlayerSize`.
     */
    get capLevelToPlayerSize() {
      return this.config.capLevelToPlayerSize;
    }
    /**
     * Enables or disables level capping. If disabled after previously enabled, `nextLevelSwitch` will be immediately called.
     */
    set capLevelToPlayerSize(shouldStartCapping) {
      const newCapLevelToPlayerSize = !!shouldStartCapping;
      if (newCapLevelToPlayerSize !== this.config.capLevelToPlayerSize) {
        if (newCapLevelToPlayerSize) {
          this.capLevelController.startCapping();
        } else {
          this.capLevelController.stopCapping();
          this.autoLevelCapping = -1;
          this.streamController.nextLevelSwitch();
        }
        this.config.capLevelToPlayerSize = newCapLevelToPlayerSize;
      }
    }
    /**
     * Capping/max level value that should be used by automatic level selection algorithm (`ABRController`)
     */
    get autoLevelCapping() {
      return this._autoLevelCapping;
    }
    /**
     * Returns the current bandwidth estimate in bits per second, when available. Otherwise, `NaN` is returned.
     */
    get bandwidthEstimate() {
      const {
        bwEstimator
      } = this.abrController;
      if (!bwEstimator) {
        return NaN;
      }
      return bwEstimator.getEstimate();
    }
    set bandwidthEstimate(abrEwmaDefaultEstimate) {
      this.abrController.resetEstimator(abrEwmaDefaultEstimate);
    }
    /**
     * get time to first byte estimate
     * @type {number}
     */
    get ttfbEstimate() {
      const {
        bwEstimator
      } = this.abrController;
      if (!bwEstimator) {
        return NaN;
      }
      return bwEstimator.getEstimateTTFB();
    }
    /**
     * Capping/max level value that should be used by automatic level selection algorithm (`ABRController`)
     */
    set autoLevelCapping(newLevel) {
      if (this._autoLevelCapping !== newLevel) {
        logger.log(`set autoLevelCapping:${newLevel}`);
        this._autoLevelCapping = newLevel;
        this.levelController.checkMaxAutoUpdated();
      }
    }
    get maxHdcpLevel() {
      return this._maxHdcpLevel;
    }
    set maxHdcpLevel(value) {
      if (isHdcpLevel(value) && this._maxHdcpLevel !== value) {
        this._maxHdcpLevel = value;
        this.levelController.checkMaxAutoUpdated();
      }
    }
    /**
     * True when automatic level selection enabled
     */
    get autoLevelEnabled() {
      return this.levelController.manualLevel === -1;
    }
    /**
     * Level set manually (if any)
     */
    get manualLevel() {
      return this.levelController.manualLevel;
    }
    /**
     * min level selectable in auto mode according to config.minAutoBitrate
     */
    get minAutoLevel() {
      const {
        levels,
        config: {
          minAutoBitrate
        }
      } = this;
      if (!levels) return 0;
      const len = levels.length;
      for (let i = 0; i < len; i++) {
        if (levels[i].maxBitrate >= minAutoBitrate) {
          return i;
        }
      }
      return 0;
    }
    /**
     * max level selectable in auto mode according to autoLevelCapping
     */
    get maxAutoLevel() {
      const {
        levels,
        autoLevelCapping,
        maxHdcpLevel
      } = this;
      let maxAutoLevel;
      if (autoLevelCapping === -1 && levels != null && levels.length) {
        maxAutoLevel = levels.length - 1;
      } else {
        maxAutoLevel = autoLevelCapping;
      }
      if (maxHdcpLevel) {
        for (let i = maxAutoLevel; i--; ) {
          const hdcpLevel = levels[i].attrs["HDCP-LEVEL"];
          if (hdcpLevel && hdcpLevel <= maxHdcpLevel) {
            return i;
          }
        }
      }
      return maxAutoLevel;
    }
    get firstAutoLevel() {
      return this.abrController.firstAutoLevel;
    }
    /**
     * next automatically selected quality level
     */
    get nextAutoLevel() {
      return this.abrController.nextAutoLevel;
    }
    /**
     * this setter is used to force next auto level.
     * this is useful to force a switch down in auto mode:
     * in case of load error on level N, hls.js can set nextAutoLevel to N-1 for example)
     * forced value is valid for one fragment. upon successful frag loading at forced level,
     * this value will be resetted to -1 by ABR controller.
     */
    set nextAutoLevel(nextLevel) {
      this.abrController.nextAutoLevel = nextLevel;
    }
    /**
     * get the datetime value relative to media.currentTime for the active level Program Date Time if present
     */
    get playingDate() {
      return this.streamController.currentProgramDateTime;
    }
    get mainForwardBufferInfo() {
      return this.streamController.getMainFwdBufferInfo();
    }
    /**
     * Find and select the best matching audio track, making a level switch when a Group change is necessary.
     * Updates `hls.config.audioPreference`. Returns the selected track, or null when no matching track is found.
     */
    setAudioOption(audioOption) {
      var _this$audioTrackContr;
      return (_this$audioTrackContr = this.audioTrackController) == null ? void 0 : _this$audioTrackContr.setAudioOption(audioOption);
    }
    /**
     * Find and select the best matching subtitle track, making a level switch when a Group change is necessary.
     * Updates `hls.config.subtitlePreference`. Returns the selected track, or null when no matching track is found.
     */
    setSubtitleOption(subtitleOption) {
      var _this$subtitleTrackCo;
      (_this$subtitleTrackCo = this.subtitleTrackController) == null ? void 0 : _this$subtitleTrackCo.setSubtitleOption(subtitleOption);
      return null;
    }
    /**
     * Get the complete list of audio tracks across all media groups
     */
    get allAudioTracks() {
      const audioTrackController = this.audioTrackController;
      return audioTrackController ? audioTrackController.allAudioTracks : [];
    }
    /**
     * Get the list of selectable audio tracks
     */
    get audioTracks() {
      const audioTrackController = this.audioTrackController;
      return audioTrackController ? audioTrackController.audioTracks : [];
    }
    /**
     * index of the selected audio track (index in audio track lists)
     */
    get audioTrack() {
      const audioTrackController = this.audioTrackController;
      return audioTrackController ? audioTrackController.audioTrack : -1;
    }
    /**
     * selects an audio track, based on its index in audio track lists
     */
    set audioTrack(audioTrackId) {
      const audioTrackController = this.audioTrackController;
      if (audioTrackController) {
        audioTrackController.audioTrack = audioTrackId;
      }
    }
    /**
     * get the complete list of subtitle tracks across all media groups
     */
    get allSubtitleTracks() {
      const subtitleTrackController = this.subtitleTrackController;
      return subtitleTrackController ? subtitleTrackController.allSubtitleTracks : [];
    }
    /**
     * get alternate subtitle tracks list from playlist
     */
    get subtitleTracks() {
      const subtitleTrackController = this.subtitleTrackController;
      return subtitleTrackController ? subtitleTrackController.subtitleTracks : [];
    }
    /**
     * index of the selected subtitle track (index in subtitle track lists)
     */
    get subtitleTrack() {
      const subtitleTrackController = this.subtitleTrackController;
      return subtitleTrackController ? subtitleTrackController.subtitleTrack : -1;
    }
    get media() {
      return this._media;
    }
    /**
     * select an subtitle track, based on its index in subtitle track lists
     */
    set subtitleTrack(subtitleTrackId) {
      const subtitleTrackController = this.subtitleTrackController;
      if (subtitleTrackController) {
        subtitleTrackController.subtitleTrack = subtitleTrackId;
      }
    }
    /**
     * Whether subtitle display is enabled or not
     */
    get subtitleDisplay() {
      const subtitleTrackController = this.subtitleTrackController;
      return subtitleTrackController ? subtitleTrackController.subtitleDisplay : false;
    }
    /**
     * Enable/disable subtitle display rendering
     */
    set subtitleDisplay(value) {
      const subtitleTrackController = this.subtitleTrackController;
      if (subtitleTrackController) {
        subtitleTrackController.subtitleDisplay = value;
      }
    }
    /**
     * get mode for Low-Latency HLS loading
     */
    get lowLatencyMode() {
      return this.config.lowLatencyMode;
    }
    /**
     * Enable/disable Low-Latency HLS part playlist and segment loading, and start live streams at playlist PART-HOLD-BACK rather than HOLD-BACK.
     */
    set lowLatencyMode(mode) {
      this.config.lowLatencyMode = mode;
    }
    /**
     * Position (in seconds) of live sync point (ie edge of live position minus safety delay defined by ```hls.config.liveSyncDuration```)
     * @returns null prior to loading live Playlist
     */
    get liveSyncPosition() {
      return this.latencyController.liveSyncPosition;
    }
    /**
     * Estimated position (in seconds) of live edge (ie edge of live playlist plus time sync playlist advanced)
     * @returns 0 before first playlist is loaded
     */
    get latency() {
      return this.latencyController.latency;
    }
    /**
     * maximum distance from the edge before the player seeks forward to ```hls.liveSyncPosition```
     * configured using ```liveMaxLatencyDurationCount``` (multiple of target duration) or ```liveMaxLatencyDuration```
     * @returns 0 before first playlist is loaded
     */
    get maxLatency() {
      return this.latencyController.maxLatency;
    }
    /**
     * target distance from the edge as calculated by the latency controller
     */
    get targetLatency() {
      return this.latencyController.targetLatency;
    }
    /**
     * the rate at which the edge of the current live playlist is advancing or 1 if there is none
     */
    get drift() {
      return this.latencyController.drift;
    }
    /**
     * set to true when startLoad is called before MANIFEST_PARSED event
     */
    get forceStartLoad() {
      return this.streamController.forceStartLoad;
    }
  };
  Hls.defaultConfig = void 0;

  // ../../node_modules/hls-video-element/hls-video-element.js
  var HlsVideoMixin = (superclass) => {
    return class HlsVideo extends superclass {
      static shadowRootOptions = { ...superclass.shadowRootOptions };
      static getTemplateHTML = (attrs) => {
        const { src, ...rest } = attrs;
        return superclass.getTemplateHTML(rest);
      };
      #airplaySourceEl = null;
      attributeChangedCallback(attrName, oldValue, newValue) {
        if (attrName !== "src") {
          super.attributeChangedCallback(attrName, oldValue, newValue);
        }
        if (attrName === "src" && oldValue != newValue) {
          this.load();
        }
      }
      #destroy() {
        this.#airplaySourceEl?.remove();
        this.nativeEl?.removeEventListener(
          "webkitcurrentplaybacktargetiswirelesschanged",
          this.#toggleHlsLoad
        );
        if (this.api) {
          this.api.detachMedia();
          this.api.destroy();
          this.api = null;
        }
      }
      async load() {
        this.#destroy();
        if (!this.src) {
          return;
        }
        if (Hls.isSupported()) {
          this.api = new Hls({
            // Mimic the media element with an Infinity duration for live streams.
            liveDurationInfinity: true,
            // Disable auto quality level/fragment loading.
            autoStartLoad: false
          });
          await Promise.resolve();
          this.api.loadSource(this.src);
          this.api.attachMedia(this.nativeEl);
          switch (this.nativeEl.preload) {
            case "none": {
              const loadSourceOnPlay = () => this.api.startLoad();
              this.nativeEl.addEventListener("play", loadSourceOnPlay, {
                once: true
              });
              this.api.on(Hls.Events.DESTROYING, () => {
                this.nativeEl.removeEventListener("play", loadSourceOnPlay);
              });
              break;
            }
            case "metadata": {
              const originalLength = this.api.config.maxBufferLength;
              const originalSize = this.api.config.maxBufferSize;
              this.api.config.maxBufferLength = 1;
              this.api.config.maxBufferSize = 1;
              const increaseBufferOnPlay = () => {
                this.api.config.maxBufferLength = originalLength;
                this.api.config.maxBufferSize = originalSize;
              };
              this.nativeEl.addEventListener("play", increaseBufferOnPlay, {
                once: true
              });
              this.api.on(Hls.Events.DESTROYING, () => {
                this.nativeEl.removeEventListener("play", increaseBufferOnPlay);
              });
              this.api.startLoad();
              break;
            }
            default:
              this.api.startLoad();
          }
          if (this.nativeEl.webkitCurrentPlaybackTargetIsWireless) {
            this.api.stopLoad();
          }
          this.nativeEl.addEventListener(
            "webkitcurrentplaybacktargetiswirelesschanged",
            this.#toggleHlsLoad
          );
          this.#airplaySourceEl = document.createElement("source");
          this.#airplaySourceEl.setAttribute("type", "application/x-mpegURL");
          this.#airplaySourceEl.setAttribute("src", this.src);
          this.nativeEl.disableRemotePlayback = false;
          this.nativeEl.append(this.#airplaySourceEl);
          const levelIdMap = /* @__PURE__ */ new WeakMap();
          this.api.on(Hls.Events.MANIFEST_PARSED, (event, data) => {
            removeAllMediaTracks();
            let videoTrack = this.videoTracks.getTrackById("main");
            if (!videoTrack) {
              videoTrack = this.addVideoTrack("main");
              videoTrack.id = "main";
              videoTrack.selected = true;
            }
            for (const [id, level] of data.levels.entries()) {
              const videoRendition = videoTrack.addRendition(
                level.url[0],
                level.width,
                level.height,
                level.videoCodec,
                level.bitrate
              );
              levelIdMap.set(level, `${id}`);
              videoRendition.id = `${id}`;
            }
            for (let [id, a] of data.audioTracks.entries()) {
              const kind = a.default ? "main" : "alternative";
              const audioTrack = this.addAudioTrack(kind, a.name, a.lang);
              audioTrack.id = `${id}`;
              if (a.default) {
                audioTrack.enabled = true;
              }
            }
          });
          this.audioTracks.addEventListener("change", () => {
            const audioTrackId = +[...this.audioTracks].find((t2) => t2.enabled)?.id;
            const availableIds = this.api.audioTracks.map((t2) => t2.id);
            if (audioTrackId != this.api.audioTrack && availableIds.includes(audioTrackId)) {
              this.api.audioTrack = audioTrackId;
            }
          });
          this.api.on(Hls.Events.LEVELS_UPDATED, (event, data) => {
            const videoTrack = this.videoTracks[this.videoTracks.selectedIndex ?? 0];
            if (!videoTrack) return;
            const levelIds = data.levels.map((l) => levelIdMap.get(l));
            for (const rendition of this.videoRenditions) {
              if (rendition.id && !levelIds.includes(rendition.id)) {
                videoTrack.removeRendition(rendition);
              }
            }
          });
          const switchRendition = (event) => {
            const level = event.target.selectedIndex;
            if (level != this.api.nextLevel) {
              smoothSwitch(level);
            }
          };
          const smoothSwitch = (levelIndex) => {
            const currentTime = this.currentTime;
            let flushedFwdBuffer = false;
            const callback = (event, data) => {
              flushedFwdBuffer ||= !Number.isFinite(data.endOffset);
            };
            this.api.on(Hls.Events.BUFFER_FLUSHING, callback);
            this.api.nextLevel = levelIndex;
            this.api.off(Hls.Events.BUFFER_FLUSHING, callback);
            if (!flushedFwdBuffer) {
              this.api.trigger(Hls.Events.BUFFER_FLUSHING, {
                startOffset: currentTime + 10,
                endOffset: Infinity,
                type: "video"
              });
            }
          };
          this.videoRenditions?.addEventListener("change", switchRendition);
          const removeAllMediaTracks = () => {
            for (const videoTrack of this.videoTracks) {
              this.removeVideoTrack(videoTrack);
            }
            for (const audioTrack of this.audioTracks) {
              this.removeAudioTrack(audioTrack);
            }
          };
          this.api.once(Hls.Events.DESTROYING, removeAllMediaTracks);
          return;
        }
        await Promise.resolve();
        if (this.nativeEl.canPlayType("application/vnd.apple.mpegurl")) {
          this.nativeEl.src = this.src;
        }
      }
      #toggleHlsLoad = () => {
        if (this.nativeEl?.webkitCurrentPlaybackTargetIsWireless) {
          this.api?.stopLoad();
        } else {
          this.api?.startLoad();
        }
      };
    };
  };
  var HlsVideoElement = HlsVideoMixin(MediaTracksMixin(CustomVideoElement));
  if (globalThis.customElements && !globalThis.customElements.get("hls-video")) {
    globalThis.customElements.define("hls-video", HlsVideoElement);
  }

  // ../../node_modules/media-chrome/dist/constants.js
  var MediaUIEvents = {
    MEDIA_PLAY_REQUEST: "mediaplayrequest",
    MEDIA_PAUSE_REQUEST: "mediapauserequest",
    MEDIA_MUTE_REQUEST: "mediamuterequest",
    MEDIA_UNMUTE_REQUEST: "mediaunmuterequest",
    MEDIA_VOLUME_REQUEST: "mediavolumerequest",
    MEDIA_SEEK_REQUEST: "mediaseekrequest",
    MEDIA_AIRPLAY_REQUEST: "mediaairplayrequest",
    MEDIA_ENTER_FULLSCREEN_REQUEST: "mediaenterfullscreenrequest",
    MEDIA_EXIT_FULLSCREEN_REQUEST: "mediaexitfullscreenrequest",
    MEDIA_PREVIEW_REQUEST: "mediapreviewrequest",
    MEDIA_ENTER_PIP_REQUEST: "mediaenterpiprequest",
    MEDIA_EXIT_PIP_REQUEST: "mediaexitpiprequest",
    MEDIA_ENTER_CAST_REQUEST: "mediaentercastrequest",
    MEDIA_EXIT_CAST_REQUEST: "mediaexitcastrequest",
    MEDIA_SHOW_TEXT_TRACKS_REQUEST: "mediashowtexttracksrequest",
    MEDIA_HIDE_TEXT_TRACKS_REQUEST: "mediahidetexttracksrequest",
    MEDIA_SHOW_SUBTITLES_REQUEST: "mediashowsubtitlesrequest",
    MEDIA_DISABLE_SUBTITLES_REQUEST: "mediadisablesubtitlesrequest",
    MEDIA_TOGGLE_SUBTITLES_REQUEST: "mediatogglesubtitlesrequest",
    MEDIA_PLAYBACK_RATE_REQUEST: "mediaplaybackraterequest",
    MEDIA_RENDITION_REQUEST: "mediarenditionrequest",
    MEDIA_AUDIO_TRACK_REQUEST: "mediaaudiotrackrequest",
    MEDIA_SEEK_TO_LIVE_REQUEST: "mediaseektoliverequest",
    REGISTER_MEDIA_STATE_RECEIVER: "registermediastatereceiver",
    UNREGISTER_MEDIA_STATE_RECEIVER: "unregistermediastatereceiver"
  };
  var MediaStateReceiverAttributes = {
    MEDIA_CHROME_ATTRIBUTES: "mediachromeattributes",
    MEDIA_CONTROLLER: "mediacontroller"
  };
  var MediaUIProps = {
    MEDIA_AIRPLAY_UNAVAILABLE: "mediaAirplayUnavailable",
    MEDIA_AUDIO_TRACK_ENABLED: "mediaAudioTrackEnabled",
    MEDIA_AUDIO_TRACK_LIST: "mediaAudioTrackList",
    MEDIA_AUDIO_TRACK_UNAVAILABLE: "mediaAudioTrackUnavailable",
    MEDIA_BUFFERED: "mediaBuffered",
    MEDIA_CAST_UNAVAILABLE: "mediaCastUnavailable",
    MEDIA_CHAPTERS_CUES: "mediaChaptersCues",
    MEDIA_CURRENT_TIME: "mediaCurrentTime",
    MEDIA_DURATION: "mediaDuration",
    MEDIA_ENDED: "mediaEnded",
    MEDIA_ERROR: "mediaError",
    MEDIA_ERROR_CODE: "mediaErrorCode",
    MEDIA_ERROR_MESSAGE: "mediaErrorMessage",
    MEDIA_FULLSCREEN_UNAVAILABLE: "mediaFullscreenUnavailable",
    MEDIA_HAS_PLAYED: "mediaHasPlayed",
    MEDIA_HEIGHT: "mediaHeight",
    MEDIA_IS_AIRPLAYING: "mediaIsAirplaying",
    MEDIA_IS_CASTING: "mediaIsCasting",
    MEDIA_IS_FULLSCREEN: "mediaIsFullscreen",
    MEDIA_IS_PIP: "mediaIsPip",
    MEDIA_LOADING: "mediaLoading",
    MEDIA_MUTED: "mediaMuted",
    MEDIA_PAUSED: "mediaPaused",
    MEDIA_PIP_UNAVAILABLE: "mediaPipUnavailable",
    MEDIA_PLAYBACK_RATE: "mediaPlaybackRate",
    MEDIA_PREVIEW_CHAPTER: "mediaPreviewChapter",
    MEDIA_PREVIEW_COORDS: "mediaPreviewCoords",
    MEDIA_PREVIEW_IMAGE: "mediaPreviewImage",
    MEDIA_PREVIEW_TIME: "mediaPreviewTime",
    MEDIA_RENDITION_LIST: "mediaRenditionList",
    MEDIA_RENDITION_SELECTED: "mediaRenditionSelected",
    MEDIA_RENDITION_UNAVAILABLE: "mediaRenditionUnavailable",
    MEDIA_SEEKABLE: "mediaSeekable",
    MEDIA_STREAM_TYPE: "mediaStreamType",
    MEDIA_SUBTITLES_LIST: "mediaSubtitlesList",
    MEDIA_SUBTITLES_SHOWING: "mediaSubtitlesShowing",
    MEDIA_TARGET_LIVE_WINDOW: "mediaTargetLiveWindow",
    MEDIA_TIME_IS_LIVE: "mediaTimeIsLive",
    MEDIA_VOLUME: "mediaVolume",
    MEDIA_VOLUME_LEVEL: "mediaVolumeLevel",
    MEDIA_VOLUME_UNAVAILABLE: "mediaVolumeUnavailable",
    MEDIA_WIDTH: "mediaWidth"
  };
  var MediaUIPropsEntries = Object.entries(
    MediaUIProps
  );
  var MediaUIAttributes = MediaUIPropsEntries.reduce(
    (dictObj, [key, propName]) => {
      dictObj[key] = propName.toLowerCase();
      return dictObj;
    },
    {}
  );
  var AdditionalStateChangeEvents = {
    USER_INACTIVE_CHANGE: "userinactivechange",
    BREAKPOINTS_CHANGE: "breakpointchange",
    BREAKPOINTS_COMPUTED: "breakpointscomputed"
  };
  var MediaStateChangeEvents = MediaUIPropsEntries.reduce(
    (dictObj, [key, propName]) => {
      dictObj[key] = propName.toLowerCase();
      return dictObj;
    },
    { ...AdditionalStateChangeEvents }
  );
  var StateChangeEventToAttributeMap = Object.entries(
    MediaStateChangeEvents
  ).reduce(
    (mapObj, [key, eventType]) => {
      const attrName = MediaUIAttributes[key];
      if (attrName) {
        mapObj[eventType] = attrName;
      }
      return mapObj;
    },
    { userinactivechange: "userinactive" }
  );
  var AttributeToStateChangeEventMap = Object.entries(
    MediaUIAttributes
  ).reduce(
    (mapObj, [key, attrName]) => {
      const evtType = MediaStateChangeEvents[key];
      if (evtType) {
        mapObj[attrName] = evtType;
      }
      return mapObj;
    },
    { userinactive: "userinactivechange" }
  );
  var TextTrackKinds = {
    SUBTITLES: "subtitles",
    CAPTIONS: "captions",
    DESCRIPTIONS: "descriptions",
    CHAPTERS: "chapters",
    METADATA: "metadata"
  };
  var TextTrackModes = {
    DISABLED: "disabled",
    HIDDEN: "hidden",
    SHOWING: "showing"
  };
  var PointerTypes = {
    MOUSE: "mouse",
    PEN: "pen",
    TOUCH: "touch"
  };
  var AvailabilityStates = {
    UNAVAILABLE: "unavailable",
    UNSUPPORTED: "unsupported"
  };
  var StreamTypes = {
    LIVE: "live",
    ON_DEMAND: "on-demand",
    UNKNOWN: "unknown"
  };
  var WebkitPresentationModes = {
    INLINE: "inline",
    FULLSCREEN: "fullscreen",
    PICTURE_IN_PICTURE: "picture-in-picture"
  };

  // ../../node_modules/media-chrome/dist/utils/utils.js
  function stringifyRenditionList(renditions) {
    return renditions == null ? void 0 : renditions.map(stringifyRendition).join(" ");
  }
  function parseRenditionList(renditions) {
    return renditions == null ? void 0 : renditions.split(/\s+/).map(parseRendition);
  }
  function stringifyRendition(rendition) {
    if (rendition) {
      const { id, width, height } = rendition;
      return [id, width, height].filter((a) => a != null).join(":");
    }
  }
  function parseRendition(rendition) {
    if (rendition) {
      const [id, width, height] = rendition.split(":");
      return { id, width: +width, height: +height };
    }
  }
  function stringifyAudioTrackList(audioTracks) {
    return audioTracks == null ? void 0 : audioTracks.map(stringifyAudioTrack).join(" ");
  }
  function parseAudioTrackList(audioTracks) {
    return audioTracks == null ? void 0 : audioTracks.split(/\s+/).map(parseAudioTrack);
  }
  function stringifyAudioTrack(audioTrack) {
    if (audioTrack) {
      const { id, kind, language, label } = audioTrack;
      return [id, kind, language, label].filter((a) => a != null).join(":");
    }
  }
  function parseAudioTrack(audioTrack) {
    if (audioTrack) {
      const [id, kind, language, label] = audioTrack.split(":");
      return {
        id,
        kind,
        language,
        label
      };
    }
  }
  function camelCase(name) {
    return name.replace(/[-_]([a-z])/g, ($0, $1) => $1.toUpperCase());
  }
  function isValidNumber(x) {
    return typeof x === "number" && !Number.isNaN(x) && Number.isFinite(x);
  }
  function isNumericString(str) {
    if (typeof str != "string")
      return false;
    return !isNaN(str) && !isNaN(parseFloat(str));
  }
  var delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

  // ../../node_modules/media-chrome/dist/utils/time.js
  var UnitLabels = [
    {
      singular: "hour",
      plural: "hours"
    },
    {
      singular: "minute",
      plural: "minutes"
    },
    {
      singular: "second",
      plural: "seconds"
    }
  ];
  var toTimeUnitPhrase = (timeUnitValue, unitIndex) => {
    const unitLabel = timeUnitValue === 1 ? UnitLabels[unitIndex].singular : UnitLabels[unitIndex].plural;
    return `${timeUnitValue} ${unitLabel}`;
  };
  var formatAsTimePhrase = (seconds) => {
    if (!isValidNumber(seconds))
      return "";
    const positiveSeconds = Math.abs(seconds);
    const negative = positiveSeconds !== seconds;
    const secondsDateTime = new Date(0, 0, 0, 0, 0, positiveSeconds, 0);
    const timeParts = [
      secondsDateTime.getHours(),
      secondsDateTime.getMinutes(),
      secondsDateTime.getSeconds()
    ];
    const timeString = timeParts.map(
      (timeUnitValue, index) => timeUnitValue && toTimeUnitPhrase(timeUnitValue, index)
    ).filter((x) => x).join(", ");
    const negativeSuffix = negative ? " remaining" : "";
    return `${timeString}${negativeSuffix}`;
  };
  function formatTime(seconds, guide) {
    let negative = false;
    if (seconds < 0) {
      negative = true;
      seconds = 0 - seconds;
    }
    seconds = seconds < 0 ? 0 : seconds;
    let s = Math.floor(seconds % 60);
    let m = Math.floor(seconds / 60 % 60);
    let h = Math.floor(seconds / 3600);
    const gm = Math.floor(guide / 60 % 60);
    const gh = Math.floor(guide / 3600);
    if (isNaN(seconds) || seconds === Infinity) {
      h = m = s = "0";
    }
    h = h > 0 || gh > 0 ? h + ":" : "";
    m = ((h || gm >= 10) && m < 10 ? "0" + m : m) + ":";
    s = s < 10 ? "0" + s : s;
    return (negative ? "-" : "") + h + m + s;
  }
  var emptyTimeRanges = Object.freeze({
    length: 0,
    start(index) {
      const unsignedIdx = index >>> 0;
      if (unsignedIdx >= this.length) {
        throw new DOMException(
          `Failed to execute 'start' on 'TimeRanges': The index provided (${unsignedIdx}) is greater than or equal to the maximum bound (${this.length}).`
        );
      }
      return 0;
    },
    end(index) {
      const unsignedIdx = index >>> 0;
      if (unsignedIdx >= this.length) {
        throw new DOMException(
          `Failed to execute 'end' on 'TimeRanges': The index provided (${unsignedIdx}) is greater than or equal to the maximum bound (${this.length}).`
        );
      }
      return 0;
    }
  });

  // ../../node_modules/media-chrome/dist/lang/en.js
  var En = {
    "Start airplay": "Start airplay",
    "Stop airplay": "Stop airplay",
    Audio: "Audio",
    Captions: "Captions",
    "Enable captions": "Enable captions",
    "Disable captions": "Disable captions",
    "Start casting": "Start casting",
    "Stop casting": "Stop casting",
    "Enter fullscreen mode": "Enter fullscreen mode",
    "Exit fullscreen mode": "Exit fullscreen mode",
    Mute: "Mute",
    Unmute: "Unmute",
    "Enter picture in picture mode": "Enter picture in picture mode",
    "Exit picture in picture mode": "Exit picture in picture mode",
    Play: "Play",
    Pause: "Pause",
    "Playback rate": "Playback rate",
    "Playback rate {playbackRate}": "Playback rate {playbackRate}",
    Quality: "Quality",
    "Seek backward": "Seek backward",
    "Seek forward": "Seek forward",
    Settings: "Settings",
    "audio player": "audio player",
    "video player": "video player",
    volume: "volume",
    seek: "seek",
    "closed captions": "closed captions",
    "current playback rate": "current playback rate",
    "playback time": "playback time",
    "media loading": "media loading",
    settings: "settings",
    "audio tracks": "audio tracks",
    quality: "quality",
    play: "play",
    pause: "pause",
    mute: "mute",
    unmute: "unmute",
    live: "live",
    "start airplay": "start airplay",
    "stop airplay": "stop airplay",
    "start casting": "start casting",
    "stop casting": "stop casting",
    "enter fullscreen mode": "enter fullscreen mode",
    "exit fullscreen mode": "exit fullscreen mode",
    "enter picture in picture mode": "enter picture in picture mode",
    "exit picture in picture mode": "exit picture in picture mode",
    "seek to live": "seek to live",
    "playing live": "playing live",
    "seek back {seekOffset} seconds": "seek back {seekOffset} seconds",
    "seek forward {seekOffset} seconds": "seek forward {seekOffset} seconds",
    "Network Error": "Network Error",
    "Decode Error": "Decode Error",
    "Source Not Supported": "Source Not Supported",
    "Encryption Error": "Encryption Error",
    "A network error caused the media download to fail.": "A network error caused the media download to fail.",
    "A media error caused playback to be aborted. The media could be corrupt or your browser does not support this format.": "A media error caused playback to be aborted. The media could be corrupt or your browser does not support this format.",
    "An unsupported error occurred. The server or network failed, or your browser does not support this format.": "An unsupported error occurred. The server or network failed, or your browser does not support this format.",
    "The media is encrypted and there are no keys to decrypt it.": "The media is encrypted and there are no keys to decrypt it."
  };

  // ../../node_modules/media-chrome/dist/utils/i18n.js
  var _a;
  var _b;
  var translationsLanguages = {
    en: En
  };
  var currentLanguage = ((_b = (_a = globalThis.navigator) == null ? void 0 : _a.language) == null ? void 0 : _b.split("-")[0]) || "en";
  var setLanguage = (langCode) => {
    currentLanguage = langCode;
  };
  var t = (key, variables = {}) => {
    var _a22;
    const result = ((_a22 = translationsLanguages[currentLanguage]) == null ? void 0 : _a22[key]) || En[key];
    return result.replace(
      /\{(\w+)\}/g,
      (_, varName) => variables[varName] !== void 0 ? String(variables[varName]) : `{${varName}}`
    );
  };

  // ../../node_modules/media-chrome/dist/utils/server-safe-globals.js
  var EventTarget2 = class {
    addEventListener() {
    }
    removeEventListener() {
    }
    dispatchEvent() {
      return true;
    }
  };
  var Node = class extends EventTarget2 {
  };
  var Element = class extends Node {
    constructor() {
      super(...arguments);
      this.role = null;
    }
  };
  var ResizeObserver = class {
    observe() {
    }
    unobserve() {
    }
    disconnect() {
    }
  };
  var documentShim = {
    createElement: function() {
      return new globalThisShim.HTMLElement();
    },
    createElementNS: function() {
      return new globalThisShim.HTMLElement();
    },
    addEventListener() {
    },
    removeEventListener() {
    },
    dispatchEvent(_event) {
      return false;
    }
  };
  var globalThisShim = {
    ResizeObserver,
    document: documentShim,
    Node,
    Element,
    HTMLElement: class HTMLElement2 extends Element {
      constructor() {
        super(...arguments);
        this.innerHTML = "";
      }
      get content() {
        return new globalThisShim.DocumentFragment();
      }
    },
    DocumentFragment: class DocumentFragment extends EventTarget2 {
    },
    customElements: {
      get: function() {
      },
      define: function() {
      },
      whenDefined: function() {
      }
    },
    localStorage: {
      getItem(_key) {
        return null;
      },
      setItem(_key, _value2) {
      },
      removeItem(_key) {
      }
    },
    CustomEvent: function CustomEvent2() {
    },
    getComputedStyle: function() {
    },
    navigator: {
      languages: [],
      get userAgent() {
        return "";
      }
    },
    matchMedia(media) {
      return {
        matches: false,
        media
      };
    }
  };
  var isServer = typeof window === "undefined" || typeof window.customElements === "undefined";
  var isShimmed = Object.keys(globalThisShim).every((key) => key in globalThis);
  var GlobalThis = isServer && !isShimmed ? globalThisShim : globalThis;
  var Document2 = isServer && !isShimmed ? documentShim : globalThis.document;

  // ../../node_modules/media-chrome/dist/utils/resize-observer.js
  var callbacksMap = /* @__PURE__ */ new WeakMap();
  var getCallbacks = (element) => {
    let callbacks = callbacksMap.get(element);
    if (!callbacks)
      callbacksMap.set(element, callbacks = /* @__PURE__ */ new Set());
    return callbacks;
  };
  var observer = new GlobalThis.ResizeObserver(
    (entries) => {
      for (const entry of entries) {
        for (const callback of getCallbacks(entry.target)) {
          callback(entry);
        }
      }
    }
  );
  function observeResize(element, callback) {
    getCallbacks(element).add(callback);
    observer.observe(element);
  }
  function unobserveResize(element, callback) {
    const callbacks = getCallbacks(element);
    callbacks.delete(callback);
    if (!callbacks.size) {
      observer.unobserve(element);
    }
  }

  // ../../node_modules/media-chrome/dist/utils/element-utils.js
  function namedNodeMapToObject2(namedNodeMap) {
    const obj = {};
    for (const attr of namedNodeMap) {
      obj[attr.name] = attr.value;
    }
    return obj;
  }
  function getMediaController(host) {
    var _a3;
    return (_a3 = getAttributeMediaController(host)) != null ? _a3 : closestComposedNode(host, "media-controller");
  }
  function getAttributeMediaController(host) {
    var _a3;
    const { MEDIA_CONTROLLER } = MediaStateReceiverAttributes;
    const mediaControllerId = host.getAttribute(MEDIA_CONTROLLER);
    if (mediaControllerId) {
      return (_a3 = getDocumentOrShadowRoot(host)) == null ? void 0 : _a3.getElementById(
        mediaControllerId
      );
    }
  }
  var updateIconText = (svg, value, selector = ".value") => {
    const node = svg.querySelector(selector);
    if (!node)
      return;
    node.textContent = value;
  };
  var getAllSlotted = (el, name) => {
    const slotSelector = `slot[name="${name}"]`;
    const slot = el.shadowRoot.querySelector(slotSelector);
    if (!slot)
      return [];
    return slot.children;
  };
  var getSlotted = (el, name) => getAllSlotted(el, name)[0];
  var containsComposedNode = (rootNode, childNode) => {
    if (!rootNode || !childNode)
      return false;
    if (rootNode == null ? void 0 : rootNode.contains(childNode))
      return true;
    return containsComposedNode(
      rootNode,
      childNode.getRootNode().host
    );
  };
  var closestComposedNode = (childNode, selector) => {
    if (!childNode)
      return null;
    const closest = childNode.closest(selector);
    if (closest)
      return closest;
    return closestComposedNode(
      childNode.getRootNode().host,
      selector
    );
  };
  function getActiveElement(root = document) {
    var _a3;
    const activeEl = root == null ? void 0 : root.activeElement;
    if (!activeEl)
      return null;
    return (_a3 = getActiveElement(activeEl.shadowRoot)) != null ? _a3 : activeEl;
  }
  function getDocumentOrShadowRoot(node) {
    var _a3;
    const rootNode = (_a3 = node == null ? void 0 : node.getRootNode) == null ? void 0 : _a3.call(node);
    if (rootNode instanceof ShadowRoot || rootNode instanceof Document) {
      return rootNode;
    }
    return null;
  }
  function isElementVisible(element, { depth = 3, checkOpacity = true, checkVisibilityCSS = true } = {}) {
    if (element.checkVisibility) {
      return element.checkVisibility({
        checkOpacity,
        checkVisibilityCSS
      });
    }
    let el = element;
    while (el && depth > 0) {
      const style = getComputedStyle(el);
      if (checkOpacity && style.opacity === "0" || checkVisibilityCSS && style.visibility === "hidden" || style.display === "none") {
        return false;
      }
      el = el.parentElement;
      depth--;
    }
    return true;
  }
  function getPointProgressOnLine(x, y, p1, p2) {
    const dx = p2.x - p1.x;
    const dy = p2.y - p1.y;
    const lengthSquared = dx * dx + dy * dy;
    if (lengthSquared === 0)
      return 0;
    const projection = ((x - p1.x) * dx + (y - p1.y) * dy) / lengthSquared;
    return Math.max(0, Math.min(1, projection));
  }
  function getOrInsertCSSRule(styleParent, selectorText) {
    const cssRule = getCSSRule(styleParent, (st) => st === selectorText);
    if (cssRule)
      return cssRule;
    return insertCSSRule(styleParent, selectorText);
  }
  function getCSSRule(styleParent, predicate) {
    var _a3, _b2;
    let style;
    for (style of (_a3 = styleParent.querySelectorAll("style:not([media])")) != null ? _a3 : []) {
      let cssRules;
      try {
        cssRules = (_b2 = style.sheet) == null ? void 0 : _b2.cssRules;
      } catch {
        continue;
      }
      for (const rule of cssRules != null ? cssRules : []) {
        if (predicate(rule.selectorText))
          return rule;
      }
    }
  }
  function insertCSSRule(styleParent, selectorText) {
    var _a3, _b2;
    const styles = (_a3 = styleParent.querySelectorAll("style:not([media])")) != null ? _a3 : [];
    const style = styles == null ? void 0 : styles[styles.length - 1];
    if (!(style == null ? void 0 : style.sheet)) {
      console.warn(
        "Media Chrome: No style sheet found on style tag of",
        styleParent
      );
      return {
        // @ts-ignore
        style: {
          setProperty: () => {
          },
          removeProperty: () => "",
          getPropertyValue: () => ""
        }
      };
    }
    style == null ? void 0 : style.sheet.insertRule(`${selectorText}{}`, style.sheet.cssRules.length);
    return (
      /** @type {CSSStyleRule} */
      (_b2 = style.sheet.cssRules) == null ? void 0 : _b2[style.sheet.cssRules.length - 1]
    );
  }
  function getNumericAttr(el, attrName, defaultValue = Number.NaN) {
    const attrVal = el.getAttribute(attrName);
    return attrVal != null ? +attrVal : defaultValue;
  }
  function setNumericAttr(el, attrName, value) {
    const nextNumericValue = +value;
    if (value == null || Number.isNaN(nextNumericValue)) {
      if (el.hasAttribute(attrName)) {
        el.removeAttribute(attrName);
      }
      return;
    }
    if (getNumericAttr(el, attrName, void 0) === nextNumericValue)
      return;
    el.setAttribute(attrName, `${nextNumericValue}`);
  }
  function getBooleanAttr(el, attrName) {
    return el.hasAttribute(attrName);
  }
  function setBooleanAttr(el, attrName, value) {
    if (value == null) {
      if (el.hasAttribute(attrName)) {
        el.removeAttribute(attrName);
      }
      return;
    }
    if (getBooleanAttr(el, attrName) == value)
      return;
    el.toggleAttribute(attrName, value);
  }
  function getStringAttr(el, attrName, defaultValue = null) {
    var _a3;
    return (_a3 = el.getAttribute(attrName)) != null ? _a3 : defaultValue;
  }
  function setStringAttr(el, attrName, value) {
    if (value == null) {
      if (el.hasAttribute(attrName)) {
        el.removeAttribute(attrName);
      }
      return;
    }
    const nextValue = `${value}`;
    if (getStringAttr(el, attrName, void 0) === nextValue)
      return;
    el.setAttribute(attrName, nextValue);
  }

  // ../../node_modules/media-chrome/dist/media-gesture-receiver.js
  var __accessCheck = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet = (obj, member, getter) => {
    __accessCheck(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet = (obj, member, value, setter) => {
    __accessCheck(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var _mediaController;
  var template = Document2.createElement("template");
  template.innerHTML = /*html*/
  `
<style>
  :host {
    display: var(--media-control-display, var(--media-gesture-receiver-display, inline-block));
    box-sizing: border-box;
  }
</style>
`;
  var MediaGestureReceiver = class extends GlobalThis.HTMLElement {
    constructor(options = {}) {
      super();
      __privateAdd(this, _mediaController, void 0);
      if (!this.shadowRoot) {
        const shadow = this.attachShadow({ mode: "open" });
        const buttonHTML = template.content.cloneNode(true);
        this.nativeEl = buttonHTML;
        let slotTemplate17 = options.slotTemplate;
        if (!slotTemplate17) {
          slotTemplate17 = Document2.createElement("template");
          slotTemplate17.innerHTML = `<slot>${options.defaultContent || ""}</slot>`;
        }
        this.nativeEl.appendChild(slotTemplate17.content.cloneNode(true));
        shadow.appendChild(buttonHTML);
      }
    }
    // NOTE: Currently "baking in" actions + attrs until we come up with
    // a more robust architecture (CJP)
    static get observedAttributes() {
      return [
        MediaStateReceiverAttributes.MEDIA_CONTROLLER,
        MediaUIAttributes.MEDIA_PAUSED
      ];
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      var _a3, _b2, _c, _d, _e;
      if (attrName === MediaStateReceiverAttributes.MEDIA_CONTROLLER) {
        if (oldValue) {
          (_b2 = (_a3 = __privateGet(this, _mediaController)) == null ? void 0 : _a3.unassociateElement) == null ? void 0 : _b2.call(_a3, this);
          __privateSet(this, _mediaController, null);
        }
        if (newValue && this.isConnected) {
          __privateSet(this, _mediaController, (_c = this.getRootNode()) == null ? void 0 : _c.getElementById(newValue));
          (_e = (_d = __privateGet(this, _mediaController)) == null ? void 0 : _d.associateElement) == null ? void 0 : _e.call(_d, this);
        }
      }
    }
    connectedCallback() {
      var _a3, _b2, _c, _d;
      this.tabIndex = -1;
      this.setAttribute("aria-hidden", "true");
      __privateSet(this, _mediaController, getMediaControllerEl(this));
      if (this.getAttribute(MediaStateReceiverAttributes.MEDIA_CONTROLLER)) {
        (_b2 = (_a3 = __privateGet(this, _mediaController)) == null ? void 0 : _a3.associateElement) == null ? void 0 : _b2.call(_a3, this);
      }
      (_c = __privateGet(this, _mediaController)) == null ? void 0 : _c.addEventListener("pointerdown", this);
      (_d = __privateGet(this, _mediaController)) == null ? void 0 : _d.addEventListener("click", this);
    }
    disconnectedCallback() {
      var _a3, _b2, _c, _d;
      if (this.getAttribute(MediaStateReceiverAttributes.MEDIA_CONTROLLER)) {
        (_b2 = (_a3 = __privateGet(this, _mediaController)) == null ? void 0 : _a3.unassociateElement) == null ? void 0 : _b2.call(_a3, this);
      }
      (_c = __privateGet(this, _mediaController)) == null ? void 0 : _c.removeEventListener("pointerdown", this);
      (_d = __privateGet(this, _mediaController)) == null ? void 0 : _d.removeEventListener("click", this);
      __privateSet(this, _mediaController, null);
    }
    handleEvent(event) {
      var _a3;
      const composedTarget = (_a3 = event.composedPath()) == null ? void 0 : _a3[0];
      const allowList = ["video", "media-controller"];
      if (!allowList.includes(composedTarget == null ? void 0 : composedTarget.localName))
        return;
      if (event.type === "pointerdown") {
        this._pointerType = event.pointerType;
      } else if (event.type === "click") {
        const { clientX, clientY } = event;
        const { left, top, width, height } = this.getBoundingClientRect();
        const x = clientX - left;
        const y = clientY - top;
        if (x < 0 || y < 0 || x > width || y > height || // In case this element has no dimensions (or display: none) return.
        width === 0 && height === 0) {
          return;
        }
        const { pointerType = this._pointerType } = event;
        this._pointerType = void 0;
        if (pointerType === PointerTypes.TOUCH) {
          this.handleTap(event);
          return;
        } else if (pointerType === PointerTypes.MOUSE) {
          this.handleMouseClick(event);
          return;
        }
      }
    }
    /**
     * @type {boolean} Is the media paused
     */
    get mediaPaused() {
      return getBooleanAttr(this, MediaUIAttributes.MEDIA_PAUSED);
    }
    set mediaPaused(value) {
      setBooleanAttr(this, MediaUIAttributes.MEDIA_PAUSED, value);
    }
    // NOTE: Currently "baking in" actions + attrs until we come up with
    // a more robust architecture (CJP)
    /**
     * @abstract
     * @argument {Event} e
     */
    handleTap(e) {
    }
    // eslint-disable-line
    // eslint-disable-next-line
    handleMouseClick(e) {
      const eventName = this.mediaPaused ? MediaUIEvents.MEDIA_PLAY_REQUEST : MediaUIEvents.MEDIA_PAUSE_REQUEST;
      this.dispatchEvent(
        new GlobalThis.CustomEvent(eventName, { composed: true, bubbles: true })
      );
    }
  };
  _mediaController = /* @__PURE__ */ new WeakMap();
  function getMediaControllerEl(controlEl) {
    var _a3;
    const mediaControllerId = controlEl.getAttribute(
      MediaStateReceiverAttributes.MEDIA_CONTROLLER
    );
    if (mediaControllerId) {
      return (_a3 = controlEl.getRootNode()) == null ? void 0 : _a3.getElementById(mediaControllerId);
    }
    return closestComposedNode(controlEl, "media-controller");
  }
  if (!GlobalThis.customElements.get("media-gesture-receiver")) {
    GlobalThis.customElements.define(
      "media-gesture-receiver",
      MediaGestureReceiver
    );
  }

  // ../../node_modules/media-chrome/dist/media-container.js
  var __accessCheck2 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet2 = (obj, member, getter) => {
    __accessCheck2(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd2 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet2 = (obj, member, value, setter) => {
    __accessCheck2(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var __privateMethod = (obj, member, method) => {
    __accessCheck2(obj, member, "access private method");
    return method;
  };
  var _pointerDownTimeStamp;
  var _currentMedia;
  var _inactiveTimeout;
  var _autohide;
  var _mutationObserver;
  var _handleMutation;
  var handleMutation_fn;
  var _isResizePending;
  var _handleResize;
  var _handlePointerMove;
  var handlePointerMove_fn;
  var _handlePointerUp;
  var handlePointerUp_fn;
  var _setInactive;
  var setInactive_fn;
  var _setActive;
  var setActive_fn;
  var _scheduleInactive;
  var scheduleInactive_fn;
  var Attributes = {
    AUDIO: "audio",
    AUTOHIDE: "autohide",
    BREAKPOINTS: "breakpoints",
    GESTURES_DISABLED: "gesturesdisabled",
    KEYBOARD_CONTROL: "keyboardcontrol",
    NO_AUTOHIDE: "noautohide",
    USER_INACTIVE: "userinactive",
    AUTOHIDE_OVER_CONTROLS: "autohideovercontrols"
  };
  var template2 = Document2.createElement("template");
  template2.innerHTML = /*html*/
  `
  <style>
    ${/*
  * outline on media is turned off because it is allowed to get focus to faciliate hotkeys.
  * However, on keyboard interactions, the focus outline is shown,
  * which is particularly noticeable when going fullscreen via hotkeys.
  */
  ""}
    :host([${MediaUIAttributes.MEDIA_IS_FULLSCREEN}]) ::slotted([slot=media]) {
      outline: none;
    }

    :host {
      box-sizing: border-box;
      position: relative;
      display: inline-block;
      line-height: 0;
      background-color: var(--media-background-color, #000);
    }

    :host(:not([${Attributes.AUDIO}])) [part~=layer]:not([part~=media-layer]) {
      position: absolute;
      top: 0;
      left: 0;
      bottom: 0;
      right: 0;
      display: flex;
      flex-flow: column nowrap;
      align-items: start;
      pointer-events: none;
      background: none;
    }

    slot[name=media] {
      display: var(--media-slot-display, contents);
    }

    ${/*
  * when in audio mode, hide the slotted media element by default
  */
  ""}
    :host([${Attributes.AUDIO}]) slot[name=media] {
      display: var(--media-slot-display, none);
    }

    ${/*
  * when in audio mode, hide the gesture-layer which causes media-controller to be taller than the control bar
  */
  ""}
    :host([${Attributes.AUDIO}]) [part~=layer][part~=gesture-layer] {
      height: 0;
      display: block;
    }

    ${/*
  * if gestures are disabled, don't accept pointer-events
  */
  ""}
    :host(:not([${Attributes.AUDIO}])[${Attributes.GESTURES_DISABLED}]) ::slotted([slot=gestures-chrome]),
    :host(:not([${Attributes.AUDIO}])[${Attributes.GESTURES_DISABLED}]) media-gesture-receiver[slot=gestures-chrome] {
      display: none;
    }

    ${/*
  * any slotted element that isn't a poster or media slot should be pointer-events auto
  * we'll want to add here any slotted elements that shouldn't get pointer-events by default when slotted
  */
  ""}
    ::slotted(:not([slot=media]):not([slot=poster]):not(media-loading-indicator):not([role=dialog]):not([hidden])) {
      pointer-events: auto;
    }

    :host(:not([${Attributes.AUDIO}])) *[part~=layer][part~=centered-layer] {
      align-items: center;
      justify-content: center;
    }

    :host(:not([${Attributes.AUDIO}])) ::slotted(media-gesture-receiver[slot=gestures-chrome]),
    :host(:not([${Attributes.AUDIO}])) media-gesture-receiver[slot=gestures-chrome] {
      align-self: stretch;
      flex-grow: 1;
    }

    slot[name=middle-chrome] {
      display: inline;
      flex-grow: 1;
      pointer-events: none;
      background: none;
    }

    ${/* Position the media and poster elements to fill the container */
  ""}
    ::slotted([slot=media]),
    ::slotted([slot=poster]) {
      width: 100%;
      height: 100%;
    }

    ${/* Video specific styles */
  ""}
    :host(:not([${Attributes.AUDIO}])) .spacer {
      flex-grow: 1;
    }

    ${/* Safari needs this to actually make the element fill the window */
  ""}
    :host(:-webkit-full-screen) {
      ${/* Needs to use !important otherwise easy to break */
  ""}
      width: 100% !important;
      height: 100% !important;
    }

    ${/* Only add these if auto hide is not disabled */
  ""}
    ::slotted(:not([slot=media]):not([slot=poster]):not([${Attributes.NO_AUTOHIDE}]):not([hidden]):not([role=dialog])) {
      opacity: 1;
      transition: var(--media-control-transition-in, opacity 0.25s);
    }

    ${/* Hide controls when inactive, not paused, not audio and auto hide not disabled */
  ""}
    :host([${Attributes.USER_INACTIVE}]:not([${MediaUIAttributes.MEDIA_PAUSED}]):not([${MediaUIAttributes.MEDIA_IS_AIRPLAYING}]):not([${MediaUIAttributes.MEDIA_IS_CASTING}]):not([${Attributes.AUDIO}])) ::slotted(:not([slot=media]):not([slot=poster]):not([${Attributes.NO_AUTOHIDE}]):not([role=dialog])) {
      opacity: 0;
      transition: var(--media-control-transition-out, opacity 1s);
    }

    :host([${Attributes.USER_INACTIVE}]:not([${Attributes.NO_AUTOHIDE}]):not([${MediaUIAttributes.MEDIA_PAUSED}]):not([${MediaUIAttributes.MEDIA_IS_CASTING}]):not([${Attributes.AUDIO}])) ::slotted([slot=media]) {
      cursor: none;
    }

    :host([${Attributes.USER_INACTIVE}][${Attributes.AUTOHIDE_OVER_CONTROLS}]:not([${Attributes.NO_AUTOHIDE}]):not([${MediaUIAttributes.MEDIA_PAUSED}]):not([${MediaUIAttributes.MEDIA_IS_CASTING}]):not([${Attributes.AUDIO}])) * {
     --media-cursor: none;
     cursor: none;
    }


    ::slotted(media-control-bar)  {
      align-self: stretch;
    }

    ${/* ::slotted([slot=poster]) doesn't work for slot fallback content so hide parent slot instead */
  ""}
    :host(:not([${Attributes.AUDIO}])[${MediaUIAttributes.MEDIA_HAS_PLAYED}]) slot[name=poster] {
      display: none;
    }

    ::slotted([role=dialog]) {
      width: 100%;
      height: 100%;
      align-self: center;
    }

    ::slotted([role=menu]) {
      align-self: end;
    }
  </style>

  <slot name="media" part="layer media-layer"></slot>
  <slot name="poster" part="layer poster-layer"></slot>
  <slot name="gestures-chrome" part="layer gesture-layer">
    <media-gesture-receiver slot="gestures-chrome"></media-gesture-receiver>
  </slot>
  <span part="layer vertical-layer">
    <slot name="top-chrome" part="top chrome"></slot>
    <slot name="middle-chrome" part="middle chrome"></slot>
    <slot name="centered-chrome" part="layer centered-layer center centered chrome"></slot>
    ${/* default, effectively "bottom-chrome" */
  ""}
    <slot part="bottom chrome"></slot>
  </span>
  <slot name="dialog" part="layer dialog-layer"></slot>
`;
  var MEDIA_UI_ATTRIBUTE_NAMES = Object.values(MediaUIAttributes);
  var defaultBreakpoints = "sm:384 md:576 lg:768 xl:960";
  function resizeCallback(entry) {
    setBreakpoints(entry.target, entry.contentRect.width);
  }
  function setBreakpoints(container, width) {
    var _a3;
    if (!container.isConnected)
      return;
    const breakpoints = (_a3 = container.getAttribute(Attributes.BREAKPOINTS)) != null ? _a3 : defaultBreakpoints;
    const ranges = createBreakpointMap(breakpoints);
    const activeBreakpoints = getBreakpoints(ranges, width);
    let changed = false;
    Object.keys(ranges).forEach((name) => {
      if (activeBreakpoints.includes(name)) {
        if (!container.hasAttribute(`breakpoint${name}`)) {
          container.setAttribute(`breakpoint${name}`, "");
          changed = true;
        }
        return;
      }
      if (container.hasAttribute(`breakpoint${name}`)) {
        container.removeAttribute(`breakpoint${name}`);
        changed = true;
      }
    });
    if (changed) {
      const evt = new CustomEvent(MediaStateChangeEvents.BREAKPOINTS_CHANGE, {
        detail: activeBreakpoints
      });
      container.dispatchEvent(evt);
    }
    if (!container.breakpointsComputed) {
      container.breakpointsComputed = true;
      container.dispatchEvent(
        new CustomEvent(MediaStateChangeEvents.BREAKPOINTS_COMPUTED, {
          bubbles: true,
          composed: true
        })
      );
    }
  }
  function createBreakpointMap(breakpoints) {
    const pairs = breakpoints.split(/\s+/);
    return Object.fromEntries(pairs.map((pair) => pair.split(":")));
  }
  function getBreakpoints(breakpoints, width) {
    return Object.keys(breakpoints).filter((name) => {
      return width >= parseInt(breakpoints[name]);
    });
  }
  var MediaContainer = class extends GlobalThis.HTMLElement {
    constructor() {
      super();
      __privateAdd2(this, _handleMutation);
      __privateAdd2(this, _handlePointerMove);
      __privateAdd2(this, _handlePointerUp);
      __privateAdd2(this, _setInactive);
      __privateAdd2(this, _setActive);
      __privateAdd2(this, _scheduleInactive);
      __privateAdd2(this, _pointerDownTimeStamp, 0);
      __privateAdd2(this, _currentMedia, null);
      __privateAdd2(this, _inactiveTimeout, null);
      __privateAdd2(this, _autohide, void 0);
      this.breakpointsComputed = false;
      __privateAdd2(this, _mutationObserver, new MutationObserver(__privateMethod(this, _handleMutation, handleMutation_fn).bind(this)));
      __privateAdd2(this, _isResizePending, false);
      __privateAdd2(this, _handleResize, (entry) => {
        if (__privateGet2(this, _isResizePending))
          return;
        setTimeout(() => {
          resizeCallback(entry);
          __privateSet2(this, _isResizePending, false);
        }, 0);
        __privateSet2(this, _isResizePending, true);
      });
      if (!this.shadowRoot) {
        this.attachShadow({ mode: "open" });
        this.shadowRoot.appendChild(template2.content.cloneNode(true));
      }
      const chainedSlot = this.querySelector(
        ":scope > slot[slot=media]"
      );
      if (chainedSlot) {
        chainedSlot.addEventListener("slotchange", () => {
          const slotEls = chainedSlot.assignedElements({ flatten: true });
          if (!slotEls.length) {
            if (__privateGet2(this, _currentMedia)) {
              this.mediaUnsetCallback(__privateGet2(this, _currentMedia));
            }
            return;
          }
          this.handleMediaUpdated(this.media);
        });
      }
    }
    static get observedAttributes() {
      return [Attributes.AUTOHIDE, Attributes.GESTURES_DISABLED].concat(MEDIA_UI_ATTRIBUTE_NAMES).filter(
        (name) => ![
          MediaUIAttributes.MEDIA_RENDITION_LIST,
          MediaUIAttributes.MEDIA_AUDIO_TRACK_LIST,
          MediaUIAttributes.MEDIA_CHAPTERS_CUES,
          MediaUIAttributes.MEDIA_WIDTH,
          MediaUIAttributes.MEDIA_HEIGHT,
          MediaUIAttributes.MEDIA_ERROR,
          MediaUIAttributes.MEDIA_ERROR_MESSAGE
        ].includes(name)
      );
    }
    // Could share this code with media-chrome-html-element instead
    attributeChangedCallback(attrName, _oldValue, newValue) {
      if (attrName.toLowerCase() == Attributes.AUTOHIDE) {
        this.autohide = newValue;
      }
    }
    // First direct child with slot=media, or null
    get media() {
      let media = this.querySelector(":scope > [slot=media]");
      if ((media == null ? void 0 : media.nodeName) == "SLOT")
        media = media.assignedElements({ flatten: true })[0];
      return media;
    }
    async handleMediaUpdated(media) {
      if (!media)
        return;
      __privateSet2(this, _currentMedia, media);
      if (media.localName.includes("-")) {
        await GlobalThis.customElements.whenDefined(media.localName);
      }
      this.mediaSetCallback(media);
    }
    connectedCallback() {
      var _a3;
      __privateGet2(this, _mutationObserver).observe(this, { childList: true, subtree: true });
      observeResize(this, __privateGet2(this, _handleResize));
      const isAudioChrome = this.getAttribute(Attributes.AUDIO) != null;
      const label = isAudioChrome ? t("audio player") : t("video player");
      this.setAttribute("role", "region");
      this.setAttribute("aria-label", label);
      this.handleMediaUpdated(this.media);
      this.setAttribute(Attributes.USER_INACTIVE, "");
      setBreakpoints(this, this.getBoundingClientRect().width);
      this.addEventListener("pointerdown", this);
      this.addEventListener("pointermove", this);
      this.addEventListener("pointerup", this);
      this.addEventListener("mouseleave", this);
      this.addEventListener("keyup", this);
      (_a3 = GlobalThis.window) == null ? void 0 : _a3.addEventListener("mouseup", this);
    }
    disconnectedCallback() {
      var _a3;
      __privateGet2(this, _mutationObserver).disconnect();
      unobserveResize(this, __privateGet2(this, _handleResize));
      if (this.media) {
        this.mediaUnsetCallback(this.media);
      }
      (_a3 = GlobalThis.window) == null ? void 0 : _a3.removeEventListener("mouseup", this);
    }
    /**
     * @abstract
     */
    mediaSetCallback(_media) {
    }
    mediaUnsetCallback(_media) {
      __privateSet2(this, _currentMedia, null);
    }
    handleEvent(event) {
      switch (event.type) {
        case "pointerdown":
          __privateSet2(this, _pointerDownTimeStamp, event.timeStamp);
          break;
        case "pointermove":
          __privateMethod(this, _handlePointerMove, handlePointerMove_fn).call(this, event);
          break;
        case "pointerup":
          __privateMethod(this, _handlePointerUp, handlePointerUp_fn).call(this, event);
          break;
        case "mouseleave":
          __privateMethod(this, _setInactive, setInactive_fn).call(this);
          break;
        case "mouseup":
          this.removeAttribute(Attributes.KEYBOARD_CONTROL);
          break;
        case "keyup":
          __privateMethod(this, _scheduleInactive, scheduleInactive_fn).call(this);
          this.setAttribute(Attributes.KEYBOARD_CONTROL, "");
          break;
      }
    }
    set autohide(seconds) {
      const parsedSeconds = Number(seconds);
      __privateSet2(this, _autohide, isNaN(parsedSeconds) ? 0 : parsedSeconds);
    }
    get autohide() {
      return (__privateGet2(this, _autohide) === void 0 ? 2 : __privateGet2(this, _autohide)).toString();
    }
    get breakpoints() {
      return getStringAttr(this, Attributes.BREAKPOINTS);
    }
    set breakpoints(value) {
      setStringAttr(this, Attributes.BREAKPOINTS, value);
    }
    get audio() {
      return getBooleanAttr(this, Attributes.AUDIO);
    }
    set audio(value) {
      setBooleanAttr(this, Attributes.AUDIO, value);
    }
    get gesturesDisabled() {
      return getBooleanAttr(this, Attributes.GESTURES_DISABLED);
    }
    set gesturesDisabled(value) {
      setBooleanAttr(this, Attributes.GESTURES_DISABLED, value);
    }
    get keyboardControl() {
      return getBooleanAttr(this, Attributes.KEYBOARD_CONTROL);
    }
    set keyboardControl(value) {
      setBooleanAttr(this, Attributes.KEYBOARD_CONTROL, value);
    }
    get noAutohide() {
      return getBooleanAttr(this, Attributes.NO_AUTOHIDE);
    }
    set noAutohide(value) {
      setBooleanAttr(this, Attributes.NO_AUTOHIDE, value);
    }
    get autohideOverControls() {
      return getBooleanAttr(this, Attributes.AUTOHIDE_OVER_CONTROLS);
    }
    set autohideOverControls(value) {
      setBooleanAttr(this, Attributes.AUTOHIDE_OVER_CONTROLS, value);
    }
    get userInteractive() {
      return getBooleanAttr(this, Attributes.USER_INACTIVE);
    }
    set userInteractive(value) {
      setBooleanAttr(this, Attributes.USER_INACTIVE, value);
    }
  };
  _pointerDownTimeStamp = /* @__PURE__ */ new WeakMap();
  _currentMedia = /* @__PURE__ */ new WeakMap();
  _inactiveTimeout = /* @__PURE__ */ new WeakMap();
  _autohide = /* @__PURE__ */ new WeakMap();
  _mutationObserver = /* @__PURE__ */ new WeakMap();
  _handleMutation = /* @__PURE__ */ new WeakSet();
  handleMutation_fn = function(mutationsList) {
    const media = this.media;
    for (const mutation of mutationsList) {
      if (mutation.type !== "childList")
        continue;
      const removedNodes = mutation.removedNodes;
      for (const node of removedNodes) {
        if (node.slot != "media" || mutation.target != this)
          continue;
        let previousSibling = mutation.previousSibling && mutation.previousSibling.previousElementSibling;
        if (!previousSibling || !media) {
          this.mediaUnsetCallback(node);
        } else {
          let wasFirst = previousSibling.slot !== "media";
          while ((previousSibling = previousSibling.previousSibling) !== null) {
            if (previousSibling.slot == "media")
              wasFirst = false;
          }
          if (wasFirst)
            this.mediaUnsetCallback(node);
        }
      }
      if (media) {
        for (const node of mutation.addedNodes) {
          if (node === media)
            this.handleMediaUpdated(media);
        }
      }
    }
  };
  _isResizePending = /* @__PURE__ */ new WeakMap();
  _handleResize = /* @__PURE__ */ new WeakMap();
  _handlePointerMove = /* @__PURE__ */ new WeakSet();
  handlePointerMove_fn = function(event) {
    if (event.pointerType !== "mouse") {
      const MAX_TAP_DURATION = 250;
      if (event.timeStamp - __privateGet2(this, _pointerDownTimeStamp) < MAX_TAP_DURATION)
        return;
    }
    __privateMethod(this, _setActive, setActive_fn).call(this);
    clearTimeout(__privateGet2(this, _inactiveTimeout));
    const autohideOverControls = this.hasAttribute(
      Attributes.AUTOHIDE_OVER_CONTROLS
    );
    if ([this, this.media].includes(event.target) || autohideOverControls) {
      __privateMethod(this, _scheduleInactive, scheduleInactive_fn).call(this);
    }
  };
  _handlePointerUp = /* @__PURE__ */ new WeakSet();
  handlePointerUp_fn = function(event) {
    if (event.pointerType === "touch") {
      const controlsVisible = !this.hasAttribute(Attributes.USER_INACTIVE);
      if ([this, this.media].includes(event.target) && controlsVisible) {
        __privateMethod(this, _setInactive, setInactive_fn).call(this);
      } else {
        __privateMethod(this, _scheduleInactive, scheduleInactive_fn).call(this);
      }
    } else if (event.composedPath().some(
      (el) => ["media-play-button", "media-fullscreen-button"].includes(
        el == null ? void 0 : el.localName
      )
    )) {
      __privateMethod(this, _scheduleInactive, scheduleInactive_fn).call(this);
    }
  };
  _setInactive = /* @__PURE__ */ new WeakSet();
  setInactive_fn = function() {
    if (__privateGet2(this, _autohide) < 0)
      return;
    if (this.hasAttribute(Attributes.USER_INACTIVE))
      return;
    this.setAttribute(Attributes.USER_INACTIVE, "");
    const evt = new GlobalThis.CustomEvent(
      MediaStateChangeEvents.USER_INACTIVE_CHANGE,
      { composed: true, bubbles: true, detail: true }
    );
    this.dispatchEvent(evt);
  };
  _setActive = /* @__PURE__ */ new WeakSet();
  setActive_fn = function() {
    if (!this.hasAttribute(Attributes.USER_INACTIVE))
      return;
    this.removeAttribute(Attributes.USER_INACTIVE);
    const evt = new GlobalThis.CustomEvent(
      MediaStateChangeEvents.USER_INACTIVE_CHANGE,
      { composed: true, bubbles: true, detail: false }
    );
    this.dispatchEvent(evt);
  };
  _scheduleInactive = /* @__PURE__ */ new WeakSet();
  scheduleInactive_fn = function() {
    __privateMethod(this, _setActive, setActive_fn).call(this);
    clearTimeout(__privateGet2(this, _inactiveTimeout));
    const autohide = parseInt(this.autohide);
    if (autohide < 0)
      return;
    __privateSet2(this, _inactiveTimeout, setTimeout(() => {
      __privateMethod(this, _setInactive, setInactive_fn).call(this);
    }, autohide * 1e3));
  };
  if (!GlobalThis.customElements.get("media-container")) {
    GlobalThis.customElements.define("media-container", MediaContainer);
  }

  // ../../node_modules/media-chrome/dist/utils/attribute-token-list.js
  var __accessCheck3 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet3 = (obj, member, getter) => {
    __accessCheck3(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd3 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet3 = (obj, member, value, setter) => {
    __accessCheck3(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var _el;
  var _attr;
  var _defaultSet;
  var _tokenSet;
  var _tokens;
  var tokens_get;
  var AttributeTokenList = class {
    constructor(el, attr, { defaultValue } = { defaultValue: void 0 }) {
      __privateAdd3(this, _tokens);
      __privateAdd3(this, _el, void 0);
      __privateAdd3(this, _attr, void 0);
      __privateAdd3(this, _defaultSet, void 0);
      __privateAdd3(this, _tokenSet, /* @__PURE__ */ new Set());
      __privateSet3(this, _el, el);
      __privateSet3(this, _attr, attr);
      __privateSet3(this, _defaultSet, new Set(defaultValue));
    }
    [Symbol.iterator]() {
      return __privateGet3(this, _tokens, tokens_get).values();
    }
    get length() {
      return __privateGet3(this, _tokens, tokens_get).size;
    }
    get value() {
      var _a3;
      return (_a3 = [...__privateGet3(this, _tokens, tokens_get)].join(" ")) != null ? _a3 : "";
    }
    set value(val) {
      var _a3;
      if (val === this.value)
        return;
      __privateSet3(this, _tokenSet, /* @__PURE__ */ new Set());
      this.add(...(_a3 = val == null ? void 0 : val.split(" ")) != null ? _a3 : []);
    }
    toString() {
      return this.value;
    }
    item(index) {
      return [...__privateGet3(this, _tokens, tokens_get)][index];
    }
    values() {
      return __privateGet3(this, _tokens, tokens_get).values();
    }
    forEach(callback, thisArg) {
      __privateGet3(this, _tokens, tokens_get).forEach(callback, thisArg);
    }
    add(...tokens) {
      var _a3, _b2;
      tokens.forEach((t2) => __privateGet3(this, _tokenSet).add(t2));
      if (this.value === "" && !((_a3 = __privateGet3(this, _el)) == null ? void 0 : _a3.hasAttribute(`${__privateGet3(this, _attr)}`))) {
        return;
      }
      (_b2 = __privateGet3(this, _el)) == null ? void 0 : _b2.setAttribute(`${__privateGet3(this, _attr)}`, `${this.value}`);
    }
    remove(...tokens) {
      var _a3;
      tokens.forEach((t2) => __privateGet3(this, _tokenSet).delete(t2));
      (_a3 = __privateGet3(this, _el)) == null ? void 0 : _a3.setAttribute(`${__privateGet3(this, _attr)}`, `${this.value}`);
    }
    contains(token) {
      return __privateGet3(this, _tokens, tokens_get).has(token);
    }
    toggle(token, force) {
      if (typeof force !== "undefined") {
        if (force) {
          this.add(token);
          return true;
        } else {
          this.remove(token);
          return false;
        }
      }
      if (this.contains(token)) {
        this.remove(token);
        return false;
      }
      this.add(token);
      return true;
    }
    replace(oldToken, newToken) {
      this.remove(oldToken);
      this.add(newToken);
      return oldToken === newToken;
    }
  };
  _el = /* @__PURE__ */ new WeakMap();
  _attr = /* @__PURE__ */ new WeakMap();
  _defaultSet = /* @__PURE__ */ new WeakMap();
  _tokenSet = /* @__PURE__ */ new WeakMap();
  _tokens = /* @__PURE__ */ new WeakSet();
  tokens_get = function() {
    return __privateGet3(this, _tokenSet).size ? __privateGet3(this, _tokenSet) : __privateGet3(this, _defaultSet);
  };

  // ../../node_modules/media-chrome/dist/utils/captions.js
  var splitTextTracksStr = (textTracksStr = "") => textTracksStr.split(/\s+/);
  var parseTextTrackStr = (textTrackStr = "") => {
    const [kind, language, encodedLabel] = textTrackStr.split(":");
    const label = encodedLabel ? decodeURIComponent(encodedLabel) : void 0;
    return {
      kind: kind === "cc" ? TextTrackKinds.CAPTIONS : TextTrackKinds.SUBTITLES,
      language,
      label
    };
  };
  var parseTextTracksStr = (textTracksStr = "", textTrackLikeObj = {}) => {
    return splitTextTracksStr(textTracksStr).map((textTrackStr) => {
      const textTrackObj = parseTextTrackStr(textTrackStr);
      return {
        ...textTrackLikeObj,
        ...textTrackObj
      };
    });
  };
  var parseTracks = (trackOrTracks) => {
    if (!trackOrTracks)
      return [];
    if (Array.isArray(trackOrTracks)) {
      return trackOrTracks.map((trackObjOrStr) => {
        if (typeof trackObjOrStr === "string") {
          return parseTextTrackStr(trackObjOrStr);
        }
        return trackObjOrStr;
      });
    }
    if (typeof trackOrTracks === "string") {
      return parseTextTracksStr(trackOrTracks);
    }
    return [trackOrTracks];
  };
  var formatTextTrackObj = ({ kind, label, language } = { kind: "subtitles" }) => {
    if (!label)
      return language;
    return `${kind === "captions" ? "cc" : "sb"}:${language}:${encodeURIComponent(
      label
    )}`;
  };
  var stringifyTextTrackList = (textTracks = []) => {
    return Array.prototype.map.call(textTracks, formatTextTrackObj).join(" ");
  };
  var isMatchingPropOf = (key, value) => (obj) => obj[key] === value;
  var textTrackObjAsPred = (filterObj) => {
    const preds = Object.entries(filterObj).map(([key, value]) => {
      return isMatchingPropOf(key, value);
    });
    return (textTrack) => preds.every((pred) => pred(textTrack));
  };
  var updateTracksModeTo = (mode, tracks = [], tracksToUpdate = []) => {
    const preds = parseTracks(tracksToUpdate).map(textTrackObjAsPred);
    const isTrackToUpdate = (textTrack) => {
      return preds.some((pred) => pred(textTrack));
    };
    Array.from(tracks).filter(isTrackToUpdate).forEach((textTrack) => {
      textTrack.mode = mode;
    });
  };
  var getTextTracksList = (media, filterPredOrObj = () => true) => {
    if (!(media == null ? void 0 : media.textTracks))
      return [];
    const filterPred = typeof filterPredOrObj === "function" ? filterPredOrObj : textTrackObjAsPred(filterPredOrObj);
    return Array.from(media.textTracks).filter(filterPred);
  };
  var areSubsOn = (el) => {
    var _a3;
    const showingSubtitles = !!((_a3 = el.mediaSubtitlesShowing) == null ? void 0 : _a3.length) || el.hasAttribute(MediaUIAttributes.MEDIA_SUBTITLES_SHOWING);
    return showingSubtitles;
  };

  // ../../node_modules/media-chrome/dist/utils/fullscreen-api.js
  var enterFullscreen = (stateOwners) => {
    var _a3;
    const { media, fullscreenElement } = stateOwners;
    try {
      const enterFullscreenKey = fullscreenElement && "requestFullscreen" in fullscreenElement ? "requestFullscreen" : fullscreenElement && "webkitRequestFullScreen" in fullscreenElement ? "webkitRequestFullScreen" : void 0;
      if (enterFullscreenKey) {
        const maybePromise = (_a3 = fullscreenElement[enterFullscreenKey]) == null ? void 0 : _a3.call(fullscreenElement);
        if (maybePromise instanceof Promise) {
          return maybePromise.catch(() => {
          });
        }
      } else if (media == null ? void 0 : media.webkitEnterFullscreen) {
        media.webkitEnterFullscreen();
      } else if (media == null ? void 0 : media.requestFullscreen) {
        media.requestFullscreen();
      }
    } catch (e) {
      console.error(e);
    }
  };
  var exitFullscreenKey = "exitFullscreen" in Document2 ? "exitFullscreen" : "webkitExitFullscreen" in Document2 ? "webkitExitFullscreen" : "webkitCancelFullScreen" in Document2 ? "webkitCancelFullScreen" : void 0;
  var exitFullscreen = (stateOwners) => {
    var _a3;
    const { documentElement } = stateOwners;
    if (exitFullscreenKey) {
      const maybePromise = (_a3 = documentElement == null ? void 0 : documentElement[exitFullscreenKey]) == null ? void 0 : _a3.call(documentElement);
      if (maybePromise instanceof Promise) {
        return maybePromise.catch(() => {
        });
      }
    }
  };
  var fullscreenElementKey = "fullscreenElement" in Document2 ? "fullscreenElement" : "webkitFullscreenElement" in Document2 ? "webkitFullscreenElement" : void 0;
  var getFullscreenElement = (stateOwners) => {
    const { documentElement, media } = stateOwners;
    const docFullscreenElement = documentElement == null ? void 0 : documentElement[fullscreenElementKey];
    if (!docFullscreenElement && "webkitDisplayingFullscreen" in media && "webkitPresentationMode" in media && media.webkitDisplayingFullscreen && media.webkitPresentationMode === WebkitPresentationModes.FULLSCREEN) {
      return media;
    }
    return docFullscreenElement;
  };
  var isFullscreen = (stateOwners) => {
    var _a3;
    const { media, documentElement, fullscreenElement = media } = stateOwners;
    if (!media || !documentElement)
      return false;
    const currentFullscreenElement = getFullscreenElement(stateOwners);
    if (!currentFullscreenElement)
      return false;
    if (currentFullscreenElement === fullscreenElement || currentFullscreenElement === media) {
      return true;
    }
    if (currentFullscreenElement.localName.includes("-")) {
      let currentRoot = currentFullscreenElement.shadowRoot;
      if (!(fullscreenElementKey in currentRoot)) {
        return containsComposedNode(
          currentFullscreenElement,
          /** @TODO clean up type assumptions (e.g. Node) (CJP) */
          // @ts-ignore
          fullscreenElement
        );
      }
      while (currentRoot == null ? void 0 : currentRoot[fullscreenElementKey]) {
        if (currentRoot[fullscreenElementKey] === fullscreenElement)
          return true;
        currentRoot = (_a3 = currentRoot[fullscreenElementKey]) == null ? void 0 : _a3.shadowRoot;
      }
    }
    return false;
  };
  var fullscreenEnabledKey = "fullscreenEnabled" in Document2 ? "fullscreenEnabled" : "webkitFullscreenEnabled" in Document2 ? "webkitFullscreenEnabled" : void 0;
  var isFullscreenEnabled = (stateOwners) => {
    const { documentElement, media } = stateOwners;
    return !!(documentElement == null ? void 0 : documentElement[fullscreenEnabledKey]) || media && "webkitSupportsFullscreen" in media;
  };

  // ../../node_modules/media-chrome/dist/utils/platform-tests.js
  var testMediaEl;
  var getTestMediaEl = () => {
    var _a3, _b2;
    if (testMediaEl)
      return testMediaEl;
    testMediaEl = (_b2 = (_a3 = Document2) == null ? void 0 : _a3.createElement) == null ? void 0 : _b2.call(_a3, "video");
    return testMediaEl;
  };
  var hasVolumeSupportAsync = async (mediaEl = getTestMediaEl()) => {
    if (!mediaEl)
      return false;
    const prevVolume = mediaEl.volume;
    mediaEl.volume = prevVolume / 2 + 0.1;
    const abortController = new AbortController();
    const volumeSupported2 = await Promise.race([
      dispatchedVolumeChange(mediaEl, abortController.signal),
      volumeChanged(mediaEl, prevVolume)
    ]);
    abortController.abort();
    return volumeSupported2;
  };
  var dispatchedVolumeChange = (mediaEl, signal) => {
    return new Promise((resolve) => {
      mediaEl.addEventListener("volumechange", () => resolve(true), { signal });
    });
  };
  var volumeChanged = async (mediaEl, prevVolume) => {
    for (let i = 0; i < 10; i++) {
      if (mediaEl.volume === prevVolume)
        return false;
      await delay(10);
    }
    return mediaEl.volume !== prevVolume;
  };
  var isSafari = /.*Version\/.*Safari\/.*/.test(
    GlobalThis.navigator.userAgent
  );
  var hasPipSupport = (mediaEl = getTestMediaEl()) => {
    if (GlobalThis.matchMedia("(display-mode: standalone)").matches && isSafari)
      return false;
    return typeof (mediaEl == null ? void 0 : mediaEl.requestPictureInPicture) === "function";
  };
  var hasFullscreenSupport = (mediaEl = getTestMediaEl()) => {
    return isFullscreenEnabled({ documentElement: Document2, media: mediaEl });
  };
  var fullscreenSupported = hasFullscreenSupport();
  var pipSupported = hasPipSupport();
  var airplaySupported = !!GlobalThis.WebKitPlaybackTargetAvailabilityEvent;
  var castSupported = !!GlobalThis.chrome;

  // ../../node_modules/media-chrome/dist/media-store/util.js
  var getSubtitleTracks = (stateOwners) => {
    return getTextTracksList(stateOwners.media, (textTrack) => {
      return [TextTrackKinds.SUBTITLES, TextTrackKinds.CAPTIONS].includes(
        textTrack.kind
      );
    }).sort((a, b) => a.kind >= b.kind ? 1 : -1);
  };
  var getShowingSubtitleTracks = (stateOwners) => {
    return getTextTracksList(stateOwners.media, (textTrack) => {
      return textTrack.mode === TextTrackModes.SHOWING && [TextTrackKinds.SUBTITLES, TextTrackKinds.CAPTIONS].includes(
        textTrack.kind
      );
    });
  };
  var toggleSubtitleTracks = (stateOwners, force) => {
    const tracks = getSubtitleTracks(stateOwners);
    const showingSubitleTracks = getShowingSubtitleTracks(stateOwners);
    const subtitlesShowing = !!showingSubitleTracks.length;
    if (!tracks.length)
      return;
    if (force === false || subtitlesShowing && force !== true) {
      updateTracksModeTo(TextTrackModes.DISABLED, tracks, showingSubitleTracks);
    } else if (force === true || !subtitlesShowing && force !== false) {
      let subTrack = tracks[0];
      const { options } = stateOwners;
      if (!(options == null ? void 0 : options.noSubtitlesLangPref)) {
        const subtitlesPref = globalThis.localStorage.getItem(
          "media-chrome-pref-subtitles-lang"
        );
        const userLangPrefs = subtitlesPref ? [subtitlesPref, ...globalThis.navigator.languages] : globalThis.navigator.languages;
        const preferredAvailableSubs = tracks.filter((textTrack) => {
          return userLangPrefs.some(
            (lang) => textTrack.language.toLowerCase().startsWith(lang.split("-")[0])
          );
        }).sort((textTrackA, textTrackB) => {
          const idxA = userLangPrefs.findIndex(
            (lang) => textTrackA.language.toLowerCase().startsWith(lang.split("-")[0])
          );
          const idxB = userLangPrefs.findIndex(
            (lang) => textTrackB.language.toLowerCase().startsWith(lang.split("-")[0])
          );
          return idxA - idxB;
        });
        if (preferredAvailableSubs[0]) {
          subTrack = preferredAvailableSubs[0];
        }
      }
      const { language, label, kind } = subTrack;
      updateTracksModeTo(TextTrackModes.DISABLED, tracks, showingSubitleTracks);
      updateTracksModeTo(TextTrackModes.SHOWING, tracks, [
        { language, label, kind }
      ]);
    }
  };
  var areValuesEq = (x, y) => {
    if (x === y)
      return true;
    if (x == null || y == null)
      return false;
    if (typeof x !== typeof y)
      return false;
    if (typeof x === "number" && Number.isNaN(x) && Number.isNaN(y))
      return true;
    if (typeof x !== "object")
      return false;
    if (Array.isArray(x))
      return areArraysEq(x, y);
    return Object.entries(x).every(
      // NOTE: Checking key in y to disambiguate between between missing keys and keys whose value are undefined (CJP)
      ([key, value]) => key in y && areValuesEq(value, y[key])
    );
  };
  var areArraysEq = (xs, ys) => {
    const xIsArray = Array.isArray(xs);
    const yIsArray = Array.isArray(ys);
    if (xIsArray !== yIsArray)
      return false;
    if (!(xIsArray || yIsArray))
      return true;
    if (xs.length !== ys.length)
      return false;
    return xs.every((x, i) => areValuesEq(x, ys[i]));
  };

  // ../../node_modules/media-chrome/dist/media-store/state-mediator.js
  var StreamTypeValues = Object.values(StreamTypes);
  var volumeSupported;
  var volumeSupportPromise = hasVolumeSupportAsync().then((supported) => {
    volumeSupported = supported;
    return volumeSupported;
  });
  var prepareStateOwners = async (...stateOwners) => {
    await Promise.all(
      stateOwners.filter((x) => x).map(async (stateOwner) => {
        if (!("localName" in stateOwner && stateOwner instanceof GlobalThis.HTMLElement)) {
          return;
        }
        const name = stateOwner.localName;
        if (!name.includes("-"))
          return;
        const classDef = GlobalThis.customElements.get(name);
        if (classDef && stateOwner instanceof classDef)
          return;
        await GlobalThis.customElements.whenDefined(name);
        GlobalThis.customElements.upgrade(stateOwner);
      })
    );
  };
  var stateMediator = {
    mediaError: {
      get(stateOwners, event) {
        const { media } = stateOwners;
        if ((event == null ? void 0 : event.type) === "playing")
          return;
        return media == null ? void 0 : media.error;
      },
      mediaEvents: ["emptied", "error", "playing"]
    },
    mediaErrorCode: {
      get(stateOwners, event) {
        var _a3;
        const { media } = stateOwners;
        if ((event == null ? void 0 : event.type) === "playing")
          return;
        return (_a3 = media == null ? void 0 : media.error) == null ? void 0 : _a3.code;
      },
      mediaEvents: ["emptied", "error", "playing"]
    },
    mediaErrorMessage: {
      get(stateOwners, event) {
        var _a3, _b2;
        const { media } = stateOwners;
        if ((event == null ? void 0 : event.type) === "playing")
          return;
        return (_b2 = (_a3 = media == null ? void 0 : media.error) == null ? void 0 : _a3.message) != null ? _b2 : "";
      },
      mediaEvents: ["emptied", "error", "playing"]
    },
    mediaWidth: {
      get(stateOwners) {
        var _a3;
        const { media } = stateOwners;
        return (_a3 = media == null ? void 0 : media.videoWidth) != null ? _a3 : 0;
      },
      mediaEvents: ["resize"]
    },
    mediaHeight: {
      get(stateOwners) {
        var _a3;
        const { media } = stateOwners;
        return (_a3 = media == null ? void 0 : media.videoHeight) != null ? _a3 : 0;
      },
      mediaEvents: ["resize"]
    },
    mediaPaused: {
      get(stateOwners) {
        var _a3;
        const { media } = stateOwners;
        return (_a3 = media == null ? void 0 : media.paused) != null ? _a3 : true;
      },
      set(value, stateOwners) {
        var _a3;
        const { media } = stateOwners;
        if (!media)
          return;
        if (value) {
          media.pause();
        } else {
          (_a3 = media.play()) == null ? void 0 : _a3.catch(() => {
          });
        }
      },
      mediaEvents: ["play", "playing", "pause", "emptied"]
    },
    mediaHasPlayed: {
      // We want to let the user know that the media started playing at any point (`media-has-played`).
      // Since these propagators are all called when boostrapping state, let's verify this is
      // a real playing event by checking that 1) there's media and 2) it isn't currently paused.
      get(stateOwners, event) {
        const { media } = stateOwners;
        if (!media)
          return false;
        if (!event)
          return !media.paused;
        return event.type === "playing";
      },
      mediaEvents: ["playing", "emptied"]
    },
    mediaEnded: {
      get(stateOwners) {
        var _a3;
        const { media } = stateOwners;
        return (_a3 = media == null ? void 0 : media.ended) != null ? _a3 : false;
      },
      mediaEvents: ["seeked", "ended", "emptied"]
    },
    mediaPlaybackRate: {
      get(stateOwners) {
        var _a3;
        const { media } = stateOwners;
        return (_a3 = media == null ? void 0 : media.playbackRate) != null ? _a3 : 1;
      },
      set(value, stateOwners) {
        const { media } = stateOwners;
        if (!media)
          return;
        if (!Number.isFinite(+value))
          return;
        media.playbackRate = +value;
      },
      mediaEvents: ["ratechange", "loadstart"]
    },
    mediaMuted: {
      get(stateOwners) {
        var _a3;
        const { media } = stateOwners;
        return (_a3 = media == null ? void 0 : media.muted) != null ? _a3 : false;
      },
      set(value, stateOwners) {
        const { media } = stateOwners;
        if (!media)
          return;
        try {
          GlobalThis.localStorage.setItem(
            "media-chrome-pref-muted",
            value ? "true" : "false"
          );
        } catch (e) {
          console.debug("Error setting muted pref", e);
        }
        media.muted = value;
      },
      mediaEvents: ["volumechange"],
      stateOwnersUpdateHandlers: [
        (handler, stateOwners) => {
          const {
            options: { noMutedPref }
          } = stateOwners;
          const { media } = stateOwners;
          if (!media || media.muted || noMutedPref)
            return;
          try {
            const mutedPref = GlobalThis.localStorage.getItem("media-chrome-pref-muted") === "true";
            stateMediator.mediaMuted.set(mutedPref, stateOwners);
            handler(mutedPref);
          } catch (e) {
            console.debug("Error getting muted pref", e);
          }
        }
      ]
    },
    mediaVolume: {
      get(stateOwners) {
        var _a3;
        const { media } = stateOwners;
        return (_a3 = media == null ? void 0 : media.volume) != null ? _a3 : 1;
      },
      set(value, stateOwners) {
        const { media } = stateOwners;
        if (!media)
          return;
        try {
          if (value == null) {
            GlobalThis.localStorage.removeItem("media-chrome-pref-volume");
          } else {
            GlobalThis.localStorage.setItem(
              "media-chrome-pref-volume",
              value.toString()
            );
          }
        } catch (e) {
          console.debug("Error setting volume pref", e);
        }
        if (!Number.isFinite(+value))
          return;
        media.volume = +value;
      },
      mediaEvents: ["volumechange"],
      stateOwnersUpdateHandlers: [
        (handler, stateOwners) => {
          const {
            options: { noVolumePref }
          } = stateOwners;
          if (noVolumePref)
            return;
          try {
            const { media } = stateOwners;
            if (!media)
              return;
            const volumePref = GlobalThis.localStorage.getItem(
              "media-chrome-pref-volume"
            );
            if (volumePref == null)
              return;
            stateMediator.mediaVolume.set(+volumePref, stateOwners);
            handler(+volumePref);
          } catch (e) {
            console.debug("Error getting volume pref", e);
          }
        }
      ]
    },
    // NOTE: Keeping this roughly equivalent to prior impl to reduce number of changes,
    // however we may want to model "derived" state differently from "primary" state
    // (in this case, derived === mediaVolumeLevel, primary === mediaMuted, mediaVolume) (CJP)
    mediaVolumeLevel: {
      get(stateOwners) {
        const { media } = stateOwners;
        if (typeof (media == null ? void 0 : media.volume) == "undefined")
          return "high";
        if (media.muted || media.volume === 0)
          return "off";
        if (media.volume < 0.5)
          return "low";
        if (media.volume < 0.75)
          return "medium";
        return "high";
      },
      mediaEvents: ["volumechange"]
    },
    mediaCurrentTime: {
      get(stateOwners) {
        var _a3;
        const { media } = stateOwners;
        return (_a3 = media == null ? void 0 : media.currentTime) != null ? _a3 : 0;
      },
      set(value, stateOwners) {
        const { media } = stateOwners;
        if (!media || !isValidNumber(value))
          return;
        media.currentTime = value;
      },
      mediaEvents: ["timeupdate", "loadedmetadata"]
    },
    mediaDuration: {
      get(stateOwners) {
        const { media, options: { defaultDuration } = {} } = stateOwners;
        if (defaultDuration && (!media || !media.duration || Number.isNaN(media.duration) || !Number.isFinite(media.duration))) {
          return defaultDuration;
        }
        return Number.isFinite(media == null ? void 0 : media.duration) ? media.duration : Number.NaN;
      },
      mediaEvents: ["durationchange", "loadedmetadata", "emptied"]
    },
    mediaLoading: {
      get(stateOwners) {
        const { media } = stateOwners;
        return (media == null ? void 0 : media.readyState) < 3;
      },
      mediaEvents: ["waiting", "playing", "emptied"]
    },
    mediaSeekable: {
      get(stateOwners) {
        var _a3;
        const { media } = stateOwners;
        if (!((_a3 = media == null ? void 0 : media.seekable) == null ? void 0 : _a3.length))
          return void 0;
        const start = media.seekable.start(0);
        const end = media.seekable.end(media.seekable.length - 1);
        if (!start && !end)
          return void 0;
        return [Number(start.toFixed(3)), Number(end.toFixed(3))];
      },
      mediaEvents: ["loadedmetadata", "emptied", "progress", "seekablechange"]
    },
    mediaBuffered: {
      get(stateOwners) {
        var _a3;
        const { media } = stateOwners;
        const timeRanges = (_a3 = media == null ? void 0 : media.buffered) != null ? _a3 : [];
        return Array.from(timeRanges).map((_, i) => [
          Number(timeRanges.start(i).toFixed(3)),
          Number(timeRanges.end(i).toFixed(3))
        ]);
      },
      mediaEvents: ["progress", "emptied"]
    },
    mediaStreamType: {
      get(stateOwners) {
        const { media, options: { defaultStreamType } = {} } = stateOwners;
        const usedDefaultStreamType = [
          StreamTypes.LIVE,
          StreamTypes.ON_DEMAND
        ].includes(defaultStreamType) ? defaultStreamType : void 0;
        if (!media)
          return usedDefaultStreamType;
        const { streamType } = media;
        if (StreamTypeValues.includes(streamType)) {
          if (streamType === StreamTypes.UNKNOWN) {
            return usedDefaultStreamType;
          }
          return streamType;
        }
        const duration = media.duration;
        if (duration === Infinity) {
          return StreamTypes.LIVE;
        } else if (Number.isFinite(duration)) {
          return StreamTypes.ON_DEMAND;
        }
        return usedDefaultStreamType;
      },
      mediaEvents: [
        "emptied",
        "durationchange",
        "loadedmetadata",
        "streamtypechange"
      ]
    },
    mediaTargetLiveWindow: {
      get(stateOwners) {
        const { media } = stateOwners;
        if (!media)
          return Number.NaN;
        const { targetLiveWindow } = media;
        const streamType = stateMediator.mediaStreamType.get(stateOwners);
        if ((targetLiveWindow == null || Number.isNaN(targetLiveWindow)) && streamType === StreamTypes.LIVE) {
          return 0;
        }
        return targetLiveWindow;
      },
      mediaEvents: [
        "emptied",
        "durationchange",
        "loadedmetadata",
        "streamtypechange",
        "targetlivewindowchange"
      ]
    },
    mediaTimeIsLive: {
      get(stateOwners) {
        const {
          media,
          // Default to 10 seconds
          options: { liveEdgeOffset = 10 } = {}
        } = stateOwners;
        if (!media)
          return false;
        if (typeof media.liveEdgeStart === "number") {
          if (Number.isNaN(media.liveEdgeStart))
            return false;
          return media.currentTime >= media.liveEdgeStart;
        }
        const live = stateMediator.mediaStreamType.get(stateOwners) === StreamTypes.LIVE;
        if (!live)
          return false;
        const seekable = media.seekable;
        if (!seekable)
          return true;
        if (!seekable.length)
          return false;
        const liveEdgeStart = seekable.end(seekable.length - 1) - liveEdgeOffset;
        return media.currentTime >= liveEdgeStart;
      },
      mediaEvents: ["playing", "timeupdate", "progress", "waiting", "emptied"]
    },
    // Text Tracks modeling
    mediaSubtitlesList: {
      get(stateOwners) {
        return getSubtitleTracks(stateOwners).map(
          ({ kind, label, language }) => ({ kind, label, language })
        );
      },
      mediaEvents: ["loadstart"],
      textTracksEvents: ["addtrack", "removetrack"]
    },
    mediaSubtitlesShowing: {
      get(stateOwners) {
        return getShowingSubtitleTracks(stateOwners).map(
          ({ kind, label, language }) => ({ kind, label, language })
        );
      },
      mediaEvents: ["loadstart"],
      textTracksEvents: ["addtrack", "removetrack", "change"],
      stateOwnersUpdateHandlers: [
        (_handler, stateOwners) => {
          var _a3, _b2;
          const { media, options } = stateOwners;
          if (!media)
            return;
          const updateDefaultSubtitlesCallback = (event) => {
            var _a22;
            if (!options.defaultSubtitles)
              return;
            const nonSubsEvent = event && ![TextTrackKinds.CAPTIONS, TextTrackKinds.SUBTITLES].includes(
              // @ts-ignore
              (_a22 = event == null ? void 0 : event.track) == null ? void 0 : _a22.kind
            );
            if (nonSubsEvent)
              return;
            toggleSubtitleTracks(stateOwners, true);
          };
          media.addEventListener(
            "loadstart",
            updateDefaultSubtitlesCallback
          );
          (_a3 = media.textTracks) == null ? void 0 : _a3.addEventListener(
            "addtrack",
            updateDefaultSubtitlesCallback
          );
          (_b2 = media.textTracks) == null ? void 0 : _b2.addEventListener(
            "removetrack",
            updateDefaultSubtitlesCallback
          );
          return () => {
            var _a22, _b22;
            media.removeEventListener(
              "loadstart",
              updateDefaultSubtitlesCallback
            );
            (_a22 = media.textTracks) == null ? void 0 : _a22.removeEventListener(
              "addtrack",
              updateDefaultSubtitlesCallback
            );
            (_b22 = media.textTracks) == null ? void 0 : _b22.removeEventListener(
              "removetrack",
              updateDefaultSubtitlesCallback
            );
          };
        }
      ]
    },
    mediaChaptersCues: {
      get(stateOwners) {
        var _a3;
        const { media } = stateOwners;
        if (!media)
          return [];
        const [chaptersTrack] = getTextTracksList(media, {
          kind: TextTrackKinds.CHAPTERS
        });
        return Array.from((_a3 = chaptersTrack == null ? void 0 : chaptersTrack.cues) != null ? _a3 : []).map(
          ({ text, startTime, endTime }) => ({
            text,
            startTime,
            endTime
          })
        );
      },
      mediaEvents: ["loadstart", "loadedmetadata"],
      textTracksEvents: ["addtrack", "removetrack", "change"],
      stateOwnersUpdateHandlers: [
        (handler, stateOwners) => {
          var _a3;
          const { media } = stateOwners;
          if (!media)
            return;
          const chaptersTrack = media.querySelector(
            'track[kind="chapters"][default][src]'
          );
          const shadowChaptersTrack = (_a3 = media.shadowRoot) == null ? void 0 : _a3.querySelector(
            ':is(video,audio) > track[kind="chapters"][default][src]'
          );
          chaptersTrack == null ? void 0 : chaptersTrack.addEventListener("load", handler);
          shadowChaptersTrack == null ? void 0 : shadowChaptersTrack.addEventListener("load", handler);
          return () => {
            chaptersTrack == null ? void 0 : chaptersTrack.removeEventListener("load", handler);
            shadowChaptersTrack == null ? void 0 : shadowChaptersTrack.removeEventListener("load", handler);
          };
        }
      ]
    },
    // Modeling state tied to root node
    mediaIsPip: {
      get(stateOwners) {
        var _a3, _b2;
        const { media, documentElement } = stateOwners;
        if (!media || !documentElement)
          return false;
        if (!documentElement.pictureInPictureElement)
          return false;
        if (documentElement.pictureInPictureElement === media)
          return true;
        if (documentElement.pictureInPictureElement instanceof HTMLMediaElement) {
          if (!((_a3 = media.localName) == null ? void 0 : _a3.includes("-")))
            return false;
          return containsComposedNode(
            media,
            documentElement.pictureInPictureElement
          );
        }
        if (documentElement.pictureInPictureElement.localName.includes("-")) {
          let currentRoot = documentElement.pictureInPictureElement.shadowRoot;
          while (currentRoot == null ? void 0 : currentRoot.pictureInPictureElement) {
            if (currentRoot.pictureInPictureElement === media)
              return true;
            currentRoot = (_b2 = currentRoot.pictureInPictureElement) == null ? void 0 : _b2.shadowRoot;
          }
        }
        return false;
      },
      set(value, stateOwners) {
        const { media } = stateOwners;
        if (!media)
          return;
        if (value) {
          if (!Document2.pictureInPictureEnabled) {
            console.warn("MediaChrome: Picture-in-picture is not enabled");
            return;
          }
          if (!media.requestPictureInPicture) {
            console.warn(
              "MediaChrome: The current media does not support picture-in-picture"
            );
            return;
          }
          const warnNotReady = () => {
            console.warn(
              "MediaChrome: The media is not ready for picture-in-picture. It must have a readyState > 0."
            );
          };
          media.requestPictureInPicture().catch((err) => {
            if (err.code === 11) {
              if (!media.src) {
                console.warn(
                  "MediaChrome: The media is not ready for picture-in-picture. It must have a src set."
                );
                return;
              }
              if (media.readyState === 0 && media.preload === "none") {
                const cleanup = () => {
                  media.removeEventListener("loadedmetadata", tryPip);
                  media.preload = "none";
                };
                const tryPip = () => {
                  media.requestPictureInPicture().catch(warnNotReady);
                  cleanup();
                };
                media.addEventListener("loadedmetadata", tryPip);
                media.preload = "metadata";
                setTimeout(() => {
                  if (media.readyState === 0)
                    warnNotReady();
                  cleanup();
                }, 1e3);
              } else {
                throw err;
              }
            } else {
              throw err;
            }
          });
        } else if (Document2.pictureInPictureElement) {
          Document2.exitPictureInPicture();
        }
      },
      mediaEvents: ["enterpictureinpicture", "leavepictureinpicture"]
    },
    mediaRenditionList: {
      get(stateOwners) {
        var _a3;
        const { media } = stateOwners;
        return [...(_a3 = media == null ? void 0 : media.videoRenditions) != null ? _a3 : []].map((videoRendition) => ({
          ...videoRendition
        }));
      },
      mediaEvents: ["emptied", "loadstart"],
      videoRenditionsEvents: ["addrendition", "removerendition"]
    },
    /** @TODO Model this as a derived value? (CJP) */
    mediaRenditionSelected: {
      get(stateOwners) {
        var _a3, _b2, _c;
        const { media } = stateOwners;
        return (_c = (_b2 = media == null ? void 0 : media.videoRenditions) == null ? void 0 : _b2[(_a3 = media.videoRenditions) == null ? void 0 : _a3.selectedIndex]) == null ? void 0 : _c.id;
      },
      set(value, stateOwners) {
        const { media } = stateOwners;
        if (!(media == null ? void 0 : media.videoRenditions)) {
          console.warn(
            "MediaController: Rendition selection not supported by this media."
          );
          return;
        }
        const renditionId = value;
        const index = Array.prototype.findIndex.call(
          media.videoRenditions,
          (r) => r.id == renditionId
        );
        if (media.videoRenditions.selectedIndex != index) {
          media.videoRenditions.selectedIndex = index;
        }
      },
      mediaEvents: ["emptied"],
      videoRenditionsEvents: ["addrendition", "removerendition", "change"]
    },
    mediaAudioTrackList: {
      get(stateOwners) {
        var _a3;
        const { media } = stateOwners;
        return [...(_a3 = media == null ? void 0 : media.audioTracks) != null ? _a3 : []];
      },
      mediaEvents: ["emptied", "loadstart"],
      audioTracksEvents: ["addtrack", "removetrack"]
    },
    mediaAudioTrackEnabled: {
      get(stateOwners) {
        var _a3, _b2;
        const { media } = stateOwners;
        return (_b2 = [...(_a3 = media == null ? void 0 : media.audioTracks) != null ? _a3 : []].find(
          (audioTrack) => audioTrack.enabled
        )) == null ? void 0 : _b2.id;
      },
      set(value, stateOwners) {
        const { media } = stateOwners;
        if (!(media == null ? void 0 : media.audioTracks)) {
          console.warn(
            "MediaChrome: Audio track selection not supported by this media."
          );
          return;
        }
        const audioTrackId = value;
        for (const track of media.audioTracks) {
          track.enabled = audioTrackId == track.id;
        }
      },
      mediaEvents: ["emptied"],
      audioTracksEvents: ["addtrack", "removetrack", "change"]
    },
    mediaIsFullscreen: {
      get(stateOwners) {
        return isFullscreen(stateOwners);
      },
      set(value, stateOwners) {
        if (!value) {
          exitFullscreen(stateOwners);
        } else {
          enterFullscreen(stateOwners);
        }
      },
      // older Safari version may require webkit-specific events
      rootEvents: ["fullscreenchange", "webkitfullscreenchange"],
      // iOS requires webkit-specific events on the video.
      mediaEvents: [
        "webkitbeginfullscreen",
        "webkitendfullscreen",
        "webkitpresentationmodechanged"
      ]
    },
    mediaIsCasting: {
      // Note this relies on a customized castable-video element.
      get(stateOwners) {
        var _a3;
        const { media } = stateOwners;
        if (!(media == null ? void 0 : media.remote) || ((_a3 = media.remote) == null ? void 0 : _a3.state) === "disconnected")
          return false;
        return !!media.remote.state;
      },
      set(value, stateOwners) {
        var _a3, _b2;
        const { media } = stateOwners;
        if (!media)
          return;
        if (value && ((_a3 = media.remote) == null ? void 0 : _a3.state) !== "disconnected")
          return;
        if (!value && ((_b2 = media.remote) == null ? void 0 : _b2.state) !== "connected")
          return;
        if (typeof media.remote.prompt !== "function") {
          console.warn(
            "MediaChrome: Casting is not supported in this environment"
          );
          return;
        }
        media.remote.prompt().catch(() => {
        });
      },
      remoteEvents: ["connect", "connecting", "disconnect"]
    },
    // NOTE: Newly added state for tracking airplaying
    mediaIsAirplaying: {
      // NOTE: Cannot know if airplaying since Safari doesn't fully support HTMLMediaElement::remote yet (e.g. remote::state) (CJP)
      get() {
        return false;
      },
      set(_value2, stateOwners) {
        const { media } = stateOwners;
        if (!media)
          return;
        if (!(media.webkitShowPlaybackTargetPicker && GlobalThis.WebKitPlaybackTargetAvailabilityEvent)) {
          console.error(
            "MediaChrome: received a request to select AirPlay but AirPlay is not supported in this environment"
          );
          return;
        }
        media.webkitShowPlaybackTargetPicker();
      },
      mediaEvents: ["webkitcurrentplaybacktargetiswirelesschanged"]
    },
    mediaFullscreenUnavailable: {
      get(stateOwners) {
        const { media } = stateOwners;
        if (!fullscreenSupported || !hasFullscreenSupport(media))
          return AvailabilityStates.UNSUPPORTED;
        return void 0;
      }
    },
    mediaPipUnavailable: {
      get(stateOwners) {
        const { media } = stateOwners;
        if (!pipSupported || !hasPipSupport(media))
          return AvailabilityStates.UNSUPPORTED;
      }
    },
    mediaVolumeUnavailable: {
      get(stateOwners) {
        const { media } = stateOwners;
        if (volumeSupported === false || (media == null ? void 0 : media.volume) == void 0) {
          return AvailabilityStates.UNSUPPORTED;
        }
        return void 0;
      },
      // NOTE: Slightly different impl here. Added generic support for
      // "stateOwnersUpdateHandlers" since the original impl had to hack around
      // race conditions. (CJP)
      stateOwnersUpdateHandlers: [
        (handler) => {
          if (volumeSupported == null) {
            volumeSupportPromise.then(
              (supported) => handler(supported ? void 0 : AvailabilityStates.UNSUPPORTED)
            );
          }
        }
      ]
    },
    mediaCastUnavailable: {
      // @ts-ignore
      get(stateOwners, { availability = "not-available" } = {}) {
        var _a3;
        const { media } = stateOwners;
        if (!castSupported || !((_a3 = media == null ? void 0 : media.remote) == null ? void 0 : _a3.state)) {
          return AvailabilityStates.UNSUPPORTED;
        }
        if (availability == null || availability === "available")
          return void 0;
        return AvailabilityStates.UNAVAILABLE;
      },
      stateOwnersUpdateHandlers: [
        (handler, stateOwners) => {
          var _a3;
          const { media } = stateOwners;
          if (!media)
            return;
          const remotePlaybackDisabled = media.disableRemotePlayback || media.hasAttribute("disableremoteplayback");
          if (!remotePlaybackDisabled) {
            (_a3 = media == null ? void 0 : media.remote) == null ? void 0 : _a3.watchAvailability((availabilityBool) => {
              const availability = availabilityBool ? "available" : "not-available";
              handler({ availability });
            }).catch((error) => {
              if (error.name === "NotSupportedError") {
                handler({ availability: null });
              } else {
                handler({ availability: "not-available" });
              }
            });
          }
          return () => {
            var _a22;
            (_a22 = media == null ? void 0 : media.remote) == null ? void 0 : _a22.cancelWatchAvailability().catch(() => {
            });
          };
        }
      ]
    },
    mediaAirplayUnavailable: {
      get(_stateOwners, event) {
        if (!airplaySupported)
          return AvailabilityStates.UNSUPPORTED;
        if ((event == null ? void 0 : event.availability) === "not-available") {
          return AvailabilityStates.UNAVAILABLE;
        }
        return void 0;
      },
      // NOTE: Keeping this event, as it's still the documented way of monitoring
      // for AirPlay availability from Apple.
      // See: https://developer.apple.com/documentation/webkitjs/adding_an_airplay_button_to_your_safari_media_controls#2940021 (CJP)
      mediaEvents: ["webkitplaybacktargetavailabilitychanged"],
      stateOwnersUpdateHandlers: [
        (handler, stateOwners) => {
          var _a3;
          const { media } = stateOwners;
          if (!media)
            return;
          const remotePlaybackDisabled = media.disableRemotePlayback || media.hasAttribute("disableremoteplayback");
          if (!remotePlaybackDisabled) {
            (_a3 = media == null ? void 0 : media.remote) == null ? void 0 : _a3.watchAvailability((availabilityBool) => {
              const availability = availabilityBool ? "available" : "not-available";
              handler({ availability });
            }).catch((error) => {
              if (error.name === "NotSupportedError") {
                handler({ availability: null });
              } else {
                handler({ availability: "not-available" });
              }
            });
          }
          return () => {
            var _a22;
            (_a22 = media == null ? void 0 : media.remote) == null ? void 0 : _a22.cancelWatchAvailability().catch(() => {
            });
          };
        }
      ]
    },
    mediaRenditionUnavailable: {
      get(stateOwners) {
        var _a3;
        const { media } = stateOwners;
        if (!(media == null ? void 0 : media.videoRenditions)) {
          return AvailabilityStates.UNSUPPORTED;
        }
        if (!((_a3 = media.videoRenditions) == null ? void 0 : _a3.length)) {
          return AvailabilityStates.UNAVAILABLE;
        }
        return void 0;
      },
      mediaEvents: ["emptied", "loadstart"],
      videoRenditionsEvents: ["addrendition", "removerendition"]
    },
    mediaAudioTrackUnavailable: {
      get(stateOwners) {
        var _a3, _b2;
        const { media } = stateOwners;
        if (!(media == null ? void 0 : media.audioTracks)) {
          return AvailabilityStates.UNSUPPORTED;
        }
        if (((_b2 = (_a3 = media.audioTracks) == null ? void 0 : _a3.length) != null ? _b2 : 0) <= 1) {
          return AvailabilityStates.UNAVAILABLE;
        }
        return void 0;
      },
      mediaEvents: ["emptied", "loadstart"],
      audioTracksEvents: ["addtrack", "removetrack"]
    }
  };

  // ../../node_modules/media-chrome/dist/media-store/request-map.js
  var requestMap = {
    /**
     * @TODO Consider adding state to `StateMediator` for e.g. `mediaThumbnailCues` and use that for derived state here (CJP)
     */
    [MediaUIEvents.MEDIA_PREVIEW_REQUEST](stateMediator2, stateOwners, { detail }) {
      var _a3, _b2, _c;
      const { media } = stateOwners;
      const mediaPreviewTime = detail != null ? detail : void 0;
      let mediaPreviewImage = void 0;
      let mediaPreviewCoords = void 0;
      if (media && mediaPreviewTime != null) {
        const [track] = getTextTracksList(media, {
          kind: TextTrackKinds.METADATA,
          label: "thumbnails"
        });
        const cue = Array.prototype.find.call((_a3 = track == null ? void 0 : track.cues) != null ? _a3 : [], (c, i, cs) => {
          if (i === 0)
            return c.endTime > mediaPreviewTime;
          if (i === cs.length - 1)
            return c.startTime <= mediaPreviewTime;
          return c.startTime <= mediaPreviewTime && c.endTime > mediaPreviewTime;
        });
        if (cue) {
          const base = !/'^(?:[a-z]+:)?\/\//i.test(cue.text) ? (_b2 = media == null ? void 0 : media.querySelector(
            'track[label="thumbnails"]'
          )) == null ? void 0 : _b2.src : void 0;
          const url = new URL(cue.text, base);
          const previewCoordsStr = new URLSearchParams(url.hash).get("#xywh");
          mediaPreviewCoords = previewCoordsStr.split(",").map((numStr) => +numStr);
          mediaPreviewImage = url.href;
        }
      }
      const mediaDuration = stateMediator2.mediaDuration.get(stateOwners);
      const mediaChaptersCues = stateMediator2.mediaChaptersCues.get(stateOwners);
      let mediaPreviewChapter = (_c = mediaChaptersCues.find((c, i, cs) => {
        if (i === cs.length - 1 && mediaDuration === c.endTime) {
          return c.startTime <= mediaPreviewTime && c.endTime >= mediaPreviewTime;
        }
        return c.startTime <= mediaPreviewTime && c.endTime > mediaPreviewTime;
      })) == null ? void 0 : _c.text;
      if (detail != null && mediaPreviewChapter == null) {
        mediaPreviewChapter = "";
      }
      return {
        mediaPreviewTime,
        mediaPreviewImage,
        mediaPreviewCoords,
        mediaPreviewChapter
      };
    },
    [MediaUIEvents.MEDIA_PAUSE_REQUEST](stateMediator2, stateOwners) {
      const key = "mediaPaused";
      const value = true;
      stateMediator2[key].set(value, stateOwners);
    },
    [MediaUIEvents.MEDIA_PLAY_REQUEST](stateMediator2, stateOwners) {
      var _a3, _b2, _c, _d;
      const key = "mediaPaused";
      const value = false;
      const isLive = stateMediator2.mediaStreamType.get(stateOwners) === StreamTypes.LIVE;
      const canAutoSeekToLive = !((_a3 = stateOwners.options) == null ? void 0 : _a3.noAutoSeekToLive);
      const isDVR = stateMediator2.mediaTargetLiveWindow.get(stateOwners) > 0;
      if (isLive && canAutoSeekToLive && !isDVR) {
        const seekableEnd = (_b2 = stateMediator2.mediaSeekable.get(stateOwners)) == null ? void 0 : _b2[1];
        if (seekableEnd) {
          const seekToLiveOffset = (_d = (_c = stateOwners.options) == null ? void 0 : _c.seekToLiveOffset) != null ? _d : 0;
          const liveEdgeTime = seekableEnd - seekToLiveOffset;
          stateMediator2.mediaCurrentTime.set(liveEdgeTime, stateOwners);
        }
      }
      stateMediator2[key].set(value, stateOwners);
    },
    [MediaUIEvents.MEDIA_PLAYBACK_RATE_REQUEST](stateMediator2, stateOwners, { detail }) {
      const key = "mediaPlaybackRate";
      const value = detail;
      stateMediator2[key].set(value, stateOwners);
    },
    [MediaUIEvents.MEDIA_MUTE_REQUEST](stateMediator2, stateOwners) {
      const key = "mediaMuted";
      const value = true;
      stateMediator2[key].set(value, stateOwners);
    },
    [MediaUIEvents.MEDIA_UNMUTE_REQUEST](stateMediator2, stateOwners) {
      const key = "mediaMuted";
      const value = false;
      if (!stateMediator2.mediaVolume.get(stateOwners)) {
        stateMediator2.mediaVolume.set(0.25, stateOwners);
      }
      stateMediator2[key].set(value, stateOwners);
    },
    [MediaUIEvents.MEDIA_VOLUME_REQUEST](stateMediator2, stateOwners, { detail }) {
      const key = "mediaVolume";
      const value = detail;
      if (value && stateMediator2.mediaMuted.get(stateOwners)) {
        stateMediator2.mediaMuted.set(false, stateOwners);
      }
      stateMediator2[key].set(value, stateOwners);
    },
    [MediaUIEvents.MEDIA_SEEK_REQUEST](stateMediator2, stateOwners, { detail }) {
      const key = "mediaCurrentTime";
      const value = detail;
      stateMediator2[key].set(value, stateOwners);
    },
    [MediaUIEvents.MEDIA_SEEK_TO_LIVE_REQUEST](stateMediator2, stateOwners) {
      var _a3, _b2, _c;
      const key = "mediaCurrentTime";
      const seekableEnd = (_a3 = stateMediator2.mediaSeekable.get(stateOwners)) == null ? void 0 : _a3[1];
      if (Number.isNaN(Number(seekableEnd)))
        return;
      const seekToLiveOffset = (_c = (_b2 = stateOwners.options) == null ? void 0 : _b2.seekToLiveOffset) != null ? _c : 0;
      const value = seekableEnd - seekToLiveOffset;
      stateMediator2[key].set(value, stateOwners);
    },
    // Text Tracks state change requests
    [MediaUIEvents.MEDIA_SHOW_SUBTITLES_REQUEST](_stateMediator, stateOwners, { detail }) {
      var _a3;
      const { options } = stateOwners;
      const tracks = getSubtitleTracks(stateOwners);
      const tracksToUpdate = parseTracks(detail);
      const preferredLanguage = (_a3 = tracksToUpdate[0]) == null ? void 0 : _a3.language;
      if (preferredLanguage && !options.noSubtitlesLangPref) {
        GlobalThis.localStorage.setItem(
          "media-chrome-pref-subtitles-lang",
          preferredLanguage
        );
      }
      updateTracksModeTo(TextTrackModes.SHOWING, tracks, tracksToUpdate);
    },
    [MediaUIEvents.MEDIA_DISABLE_SUBTITLES_REQUEST](_stateMediator, stateOwners, { detail }) {
      const tracks = getSubtitleTracks(stateOwners);
      const tracksToUpdate = detail != null ? detail : [];
      updateTracksModeTo(TextTrackModes.DISABLED, tracks, tracksToUpdate);
    },
    [MediaUIEvents.MEDIA_TOGGLE_SUBTITLES_REQUEST](_stateMediator, stateOwners, { detail }) {
      toggleSubtitleTracks(stateOwners, detail);
    },
    // Renditions/Tracks state change requests
    [MediaUIEvents.MEDIA_RENDITION_REQUEST](stateMediator2, stateOwners, { detail }) {
      const key = "mediaRenditionSelected";
      const value = detail;
      stateMediator2[key].set(value, stateOwners);
    },
    [MediaUIEvents.MEDIA_AUDIO_TRACK_REQUEST](stateMediator2, stateOwners, { detail }) {
      const key = "mediaAudioTrackEnabled";
      const value = detail;
      stateMediator2[key].set(value, stateOwners);
    },
    // State change requests dependent on root node
    [MediaUIEvents.MEDIA_ENTER_PIP_REQUEST](stateMediator2, stateOwners) {
      const key = "mediaIsPip";
      const value = true;
      if (stateMediator2.mediaIsFullscreen.get(stateOwners)) {
        stateMediator2.mediaIsFullscreen.set(false, stateOwners);
      }
      stateMediator2[key].set(value, stateOwners);
    },
    [MediaUIEvents.MEDIA_EXIT_PIP_REQUEST](stateMediator2, stateOwners) {
      const key = "mediaIsPip";
      const value = false;
      stateMediator2[key].set(value, stateOwners);
    },
    [MediaUIEvents.MEDIA_ENTER_FULLSCREEN_REQUEST](stateMediator2, stateOwners) {
      const key = "mediaIsFullscreen";
      const value = true;
      if (stateMediator2.mediaIsPip.get(stateOwners)) {
        stateMediator2.mediaIsPip.set(false, stateOwners);
      }
      stateMediator2[key].set(value, stateOwners);
    },
    [MediaUIEvents.MEDIA_EXIT_FULLSCREEN_REQUEST](stateMediator2, stateOwners) {
      const key = "mediaIsFullscreen";
      const value = false;
      stateMediator2[key].set(value, stateOwners);
    },
    [MediaUIEvents.MEDIA_ENTER_CAST_REQUEST](stateMediator2, stateOwners) {
      const key = "mediaIsCasting";
      const value = true;
      if (stateMediator2.mediaIsFullscreen.get(stateOwners)) {
        stateMediator2.mediaIsFullscreen.set(false, stateOwners);
      }
      stateMediator2[key].set(value, stateOwners);
    },
    [MediaUIEvents.MEDIA_EXIT_CAST_REQUEST](stateMediator2, stateOwners) {
      const key = "mediaIsCasting";
      const value = false;
      stateMediator2[key].set(value, stateOwners);
    },
    [MediaUIEvents.MEDIA_AIRPLAY_REQUEST](stateMediator2, stateOwners) {
      const key = "mediaIsAirplaying";
      const value = true;
      stateMediator2[key].set(value, stateOwners);
    }
  };

  // ../../node_modules/media-chrome/dist/media-store/media-store.js
  var createMediaStore = ({
    media,
    fullscreenElement,
    documentElement,
    stateMediator: stateMediator2 = stateMediator,
    requestMap: requestMap2 = requestMap,
    options = {},
    monitorStateOwnersOnlyWithSubscriptions = true
  }) => {
    const callbacks = [];
    const stateOwners = {
      // Spreading options here since folks should not rely on holding onto references
      // for any app-level logic wrt options.
      options: { ...options }
    };
    let state = Object.freeze({
      mediaPreviewTime: void 0,
      mediaPreviewImage: void 0,
      mediaPreviewCoords: void 0,
      mediaPreviewChapter: void 0
    });
    const updateState = (nextStateDelta) => {
      if (nextStateDelta == void 0)
        return;
      if (areValuesEq(nextStateDelta, state)) {
        return;
      }
      state = Object.freeze({
        ...state,
        ...nextStateDelta
      });
      callbacks.forEach((cb) => cb(state));
    };
    const updateStateFromFacade = () => {
      const nextState = Object.entries(stateMediator2).reduce(
        (nextState2, [stateName, { get }]) => {
          nextState2[stateName] = get(stateOwners);
          return nextState2;
        },
        {}
      );
      updateState(nextState);
    };
    const stateUpdateHandlers = {};
    let nextStateOwners = void 0;
    const updateStateOwners = async (nextStateOwnersDelta, nextSubscriberCount) => {
      var _a3, _b2, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p;
      const pendingUpdate = !!nextStateOwners;
      nextStateOwners = {
        ...stateOwners,
        ...nextStateOwners != null ? nextStateOwners : {},
        ...nextStateOwnersDelta
      };
      if (pendingUpdate)
        return;
      await prepareStateOwners(...Object.values(nextStateOwnersDelta));
      const shouldTeardownFromSubscriberCount = callbacks.length > 0 && nextSubscriberCount === 0 && monitorStateOwnersOnlyWithSubscriptions;
      const mediaChanged = stateOwners.media !== nextStateOwners.media;
      const textTracksChanged = ((_a3 = stateOwners.media) == null ? void 0 : _a3.textTracks) !== ((_b2 = nextStateOwners.media) == null ? void 0 : _b2.textTracks);
      const videoRenditionsChanged = ((_c = stateOwners.media) == null ? void 0 : _c.videoRenditions) !== ((_d = nextStateOwners.media) == null ? void 0 : _d.videoRenditions);
      const audioTracksChanged = ((_e = stateOwners.media) == null ? void 0 : _e.audioTracks) !== ((_f = nextStateOwners.media) == null ? void 0 : _f.audioTracks);
      const remoteChanged = ((_g = stateOwners.media) == null ? void 0 : _g.remote) !== ((_h = nextStateOwners.media) == null ? void 0 : _h.remote);
      const rootNodeChanged = stateOwners.documentElement !== nextStateOwners.documentElement;
      const teardownMedia = !!stateOwners.media && (mediaChanged || shouldTeardownFromSubscriberCount);
      const teardownTextTracks = !!((_i = stateOwners.media) == null ? void 0 : _i.textTracks) && (textTracksChanged || shouldTeardownFromSubscriberCount);
      const teardownVideoRenditions = !!((_j = stateOwners.media) == null ? void 0 : _j.videoRenditions) && (videoRenditionsChanged || shouldTeardownFromSubscriberCount);
      const teardownAudioTracks = !!((_k = stateOwners.media) == null ? void 0 : _k.audioTracks) && (audioTracksChanged || shouldTeardownFromSubscriberCount);
      const teardownRemote = !!((_l = stateOwners.media) == null ? void 0 : _l.remote) && (remoteChanged || shouldTeardownFromSubscriberCount);
      const teardownRootNode = !!stateOwners.documentElement && (rootNodeChanged || shouldTeardownFromSubscriberCount);
      const teardownSomething = teardownMedia || teardownTextTracks || teardownVideoRenditions || teardownAudioTracks || teardownRemote || teardownRootNode;
      const shouldSetupFromSubscriberCount = callbacks.length === 0 && nextSubscriberCount === 1 && monitorStateOwnersOnlyWithSubscriptions;
      const setupMedia = !!nextStateOwners.media && (mediaChanged || shouldSetupFromSubscriberCount);
      const setupTextTracks = !!((_m = nextStateOwners.media) == null ? void 0 : _m.textTracks) && (textTracksChanged || shouldSetupFromSubscriberCount);
      const setupVideoRenditions = !!((_n = nextStateOwners.media) == null ? void 0 : _n.videoRenditions) && (videoRenditionsChanged || shouldSetupFromSubscriberCount);
      const setupAudioTracks = !!((_o = nextStateOwners.media) == null ? void 0 : _o.audioTracks) && (audioTracksChanged || shouldSetupFromSubscriberCount);
      const setupRemote = !!((_p = nextStateOwners.media) == null ? void 0 : _p.remote) && (remoteChanged || shouldSetupFromSubscriberCount);
      const setupRootNode = !!nextStateOwners.documentElement && (rootNodeChanged || shouldSetupFromSubscriberCount);
      const setupSomething = setupMedia || setupTextTracks || setupVideoRenditions || setupAudioTracks || setupRemote || setupRootNode;
      const somethingToDo = teardownSomething || setupSomething;
      if (!somethingToDo) {
        Object.entries(nextStateOwners).forEach(
          ([stateOwnerName, stateOwner]) => {
            stateOwners[stateOwnerName] = stateOwner;
          }
        );
        updateStateFromFacade();
        nextStateOwners = void 0;
        return;
      }
      Object.entries(stateMediator2).forEach(
        ([
          stateName,
          {
            get,
            mediaEvents = [],
            textTracksEvents = [],
            videoRenditionsEvents = [],
            audioTracksEvents = [],
            remoteEvents = [],
            rootEvents = [],
            stateOwnersUpdateHandlers = []
          }
        ]) => {
          if (!stateUpdateHandlers[stateName]) {
            stateUpdateHandlers[stateName] = {};
          }
          const handler = (event) => {
            const nextValue = get(stateOwners, event);
            updateState({ [stateName]: nextValue });
          };
          let prevHandler;
          prevHandler = stateUpdateHandlers[stateName].mediaEvents;
          mediaEvents.forEach((eventType) => {
            if (prevHandler && teardownMedia) {
              stateOwners.media.removeEventListener(eventType, prevHandler);
              stateUpdateHandlers[stateName].mediaEvents = void 0;
            }
            if (setupMedia) {
              nextStateOwners.media.addEventListener(eventType, handler);
              stateUpdateHandlers[stateName].mediaEvents = handler;
            }
          });
          prevHandler = stateUpdateHandlers[stateName].textTracksEvents;
          textTracksEvents.forEach((eventType) => {
            var _a22, _b22;
            if (prevHandler && teardownTextTracks) {
              (_a22 = stateOwners.media.textTracks) == null ? void 0 : _a22.removeEventListener(
                eventType,
                prevHandler
              );
              stateUpdateHandlers[stateName].textTracksEvents = void 0;
            }
            if (setupTextTracks) {
              (_b22 = nextStateOwners.media.textTracks) == null ? void 0 : _b22.addEventListener(
                eventType,
                handler
              );
              stateUpdateHandlers[stateName].textTracksEvents = handler;
            }
          });
          prevHandler = stateUpdateHandlers[stateName].videoRenditionsEvents;
          videoRenditionsEvents.forEach((eventType) => {
            var _a22, _b22;
            if (prevHandler && teardownVideoRenditions) {
              (_a22 = stateOwners.media.videoRenditions) == null ? void 0 : _a22.removeEventListener(
                eventType,
                prevHandler
              );
              stateUpdateHandlers[stateName].videoRenditionsEvents = void 0;
            }
            if (setupVideoRenditions) {
              (_b22 = nextStateOwners.media.videoRenditions) == null ? void 0 : _b22.addEventListener(
                eventType,
                handler
              );
              stateUpdateHandlers[stateName].videoRenditionsEvents = handler;
            }
          });
          prevHandler = stateUpdateHandlers[stateName].audioTracksEvents;
          audioTracksEvents.forEach((eventType) => {
            var _a22, _b22;
            if (prevHandler && teardownAudioTracks) {
              (_a22 = stateOwners.media.audioTracks) == null ? void 0 : _a22.removeEventListener(
                eventType,
                prevHandler
              );
              stateUpdateHandlers[stateName].audioTracksEvents = void 0;
            }
            if (setupAudioTracks) {
              (_b22 = nextStateOwners.media.audioTracks) == null ? void 0 : _b22.addEventListener(
                eventType,
                handler
              );
              stateUpdateHandlers[stateName].audioTracksEvents = handler;
            }
          });
          prevHandler = stateUpdateHandlers[stateName].remoteEvents;
          remoteEvents.forEach((eventType) => {
            var _a22, _b22;
            if (prevHandler && teardownRemote) {
              (_a22 = stateOwners.media.remote) == null ? void 0 : _a22.removeEventListener(
                eventType,
                prevHandler
              );
              stateUpdateHandlers[stateName].remoteEvents = void 0;
            }
            if (setupRemote) {
              (_b22 = nextStateOwners.media.remote) == null ? void 0 : _b22.addEventListener(eventType, handler);
              stateUpdateHandlers[stateName].remoteEvents = handler;
            }
          });
          prevHandler = stateUpdateHandlers[stateName].rootEvents;
          rootEvents.forEach((eventType) => {
            if (prevHandler && teardownRootNode) {
              stateOwners.documentElement.removeEventListener(
                eventType,
                prevHandler
              );
              stateUpdateHandlers[stateName].rootEvents = void 0;
            }
            if (setupRootNode) {
              nextStateOwners.documentElement.addEventListener(
                eventType,
                handler
              );
              stateUpdateHandlers[stateName].rootEvents = handler;
            }
          });
          const prevHandlerTeardown = stateUpdateHandlers[stateName].stateOwnersUpdateHandlers;
          stateOwnersUpdateHandlers.forEach((fn) => {
            if (prevHandlerTeardown && teardownSomething) {
              prevHandlerTeardown();
            }
            if (setupSomething) {
              stateUpdateHandlers[stateName].stateOwnersUpdateHandlers = fn(
                handler,
                nextStateOwners
              );
            }
          });
        }
      );
      Object.entries(nextStateOwners).forEach(([stateOwnerName, stateOwner]) => {
        stateOwners[stateOwnerName] = stateOwner;
      });
      updateStateFromFacade();
      nextStateOwners = void 0;
    };
    updateStateOwners({ media, fullscreenElement, documentElement, options });
    return {
      // note that none of these cases directly interact with the media element, root node, full screen element, etc.
      // note these "actions" could just be the events if we wanted, especially if we normalize on "detail" for
      // any payload-relevant values
      // This is roughly equivalent to our used to be in our state requests dictionary object, though much of the
      // "heavy lifting" is now moved into the facade `set()`
      dispatch(action) {
        const { type, detail } = action;
        if (requestMap2[type] && state.mediaErrorCode == null) {
          updateState(requestMap2[type](stateMediator2, stateOwners, action));
          return;
        }
        if (type === "mediaelementchangerequest") {
          updateStateOwners({ media: detail });
        } else if (type === "fullscreenelementchangerequest") {
          updateStateOwners({ fullscreenElement: detail });
        } else if (type === "documentelementchangerequest") {
          updateStateOwners({ documentElement: detail });
        } else if (type === "optionschangerequest") {
          Object.entries(detail != null ? detail : {}).forEach(([optionName, optionValue]) => {
            stateOwners.options[optionName] = optionValue;
          });
        }
      },
      getState() {
        return state;
      },
      subscribe(callback) {
        updateStateOwners({}, callbacks.length + 1);
        callbacks.push(callback);
        callback(state);
        return () => {
          const idx = callbacks.indexOf(callback);
          if (idx >= 0) {
            updateStateOwners({}, callbacks.length - 1);
            callbacks.splice(idx, 1);
          }
        };
      }
    };
  };

  // ../../node_modules/media-chrome/dist/media-controller.js
  var __accessCheck4 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet4 = (obj, member, getter) => {
    __accessCheck4(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd4 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet4 = (obj, member, value, setter) => {
    __accessCheck4(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var __privateMethod2 = (obj, member, method) => {
    __accessCheck4(obj, member, "access private method");
    return method;
  };
  var _hotKeys;
  var _fullscreenElement;
  var _mediaStore;
  var _mediaStateCallback;
  var _mediaStoreUnsubscribe;
  var _mediaStateEventHandler;
  var _setupDefaultStore;
  var setupDefaultStore_fn;
  var _keyUpHandler;
  var keyUpHandler_fn;
  var _keyDownHandler;
  var keyDownHandler_fn;
  var ButtonPressedKeys = [
    "ArrowLeft",
    "ArrowRight",
    "Enter",
    " ",
    "f",
    "m",
    "k",
    "c"
  ];
  var DEFAULT_SEEK_OFFSET = 10;
  var Attributes2 = {
    DEFAULT_SUBTITLES: "defaultsubtitles",
    DEFAULT_STREAM_TYPE: "defaultstreamtype",
    DEFAULT_DURATION: "defaultduration",
    FULLSCREEN_ELEMENT: "fullscreenelement",
    HOTKEYS: "hotkeys",
    KEYS_USED: "keysused",
    LIVE_EDGE_OFFSET: "liveedgeoffset",
    SEEK_TO_LIVE_OFFSET: "seektoliveoffset",
    NO_AUTO_SEEK_TO_LIVE: "noautoseektolive",
    NO_HOTKEYS: "nohotkeys",
    NO_VOLUME_PREF: "novolumepref",
    NO_SUBTITLES_LANG_PREF: "nosubtitleslangpref",
    NO_DEFAULT_STORE: "nodefaultstore",
    KEYBOARD_FORWARD_SEEK_OFFSET: "keyboardforwardseekoffset",
    KEYBOARD_BACKWARD_SEEK_OFFSET: "keyboardbackwardseekoffset",
    LANG: "lang"
  };
  var MediaController = class extends MediaContainer {
    constructor() {
      super();
      __privateAdd4(this, _setupDefaultStore);
      __privateAdd4(this, _keyUpHandler);
      __privateAdd4(this, _keyDownHandler);
      this.mediaStateReceivers = [];
      this.associatedElementSubscriptions = /* @__PURE__ */ new Map();
      __privateAdd4(this, _hotKeys, new AttributeTokenList(this, Attributes2.HOTKEYS));
      __privateAdd4(this, _fullscreenElement, void 0);
      __privateAdd4(this, _mediaStore, void 0);
      __privateAdd4(this, _mediaStateCallback, void 0);
      __privateAdd4(this, _mediaStoreUnsubscribe, void 0);
      __privateAdd4(this, _mediaStateEventHandler, (event) => {
        var _a3;
        (_a3 = __privateGet4(this, _mediaStore)) == null ? void 0 : _a3.dispatch(event);
      });
      this.associateElement(this);
      let prevState = {};
      __privateSet4(this, _mediaStateCallback, (nextState) => {
        Object.entries(nextState).forEach(([stateName, stateValue]) => {
          if (stateName in prevState && prevState[stateName] === stateValue)
            return;
          this.propagateMediaState(stateName, stateValue);
          const attrName = stateName.toLowerCase();
          const evt = new GlobalThis.CustomEvent(
            AttributeToStateChangeEventMap[attrName],
            { composed: true, detail: stateValue }
          );
          this.dispatchEvent(evt);
        });
        prevState = nextState;
      });
      this.enableHotkeys();
    }
    static get observedAttributes() {
      return super.observedAttributes.concat(
        Attributes2.NO_HOTKEYS,
        Attributes2.HOTKEYS,
        Attributes2.DEFAULT_STREAM_TYPE,
        Attributes2.DEFAULT_SUBTITLES,
        Attributes2.DEFAULT_DURATION,
        Attributes2.LANG
      );
    }
    get mediaStore() {
      return __privateGet4(this, _mediaStore);
    }
    set mediaStore(value) {
      var _a3, _b2;
      if (__privateGet4(this, _mediaStore)) {
        (_a3 = __privateGet4(this, _mediaStoreUnsubscribe)) == null ? void 0 : _a3.call(this);
        __privateSet4(this, _mediaStoreUnsubscribe, void 0);
      }
      __privateSet4(this, _mediaStore, value);
      if (!__privateGet4(this, _mediaStore) && !this.hasAttribute(Attributes2.NO_DEFAULT_STORE)) {
        __privateMethod2(this, _setupDefaultStore, setupDefaultStore_fn).call(this);
        return;
      }
      __privateSet4(this, _mediaStoreUnsubscribe, (_b2 = __privateGet4(this, _mediaStore)) == null ? void 0 : _b2.subscribe(
        __privateGet4(this, _mediaStateCallback)
      ));
    }
    get fullscreenElement() {
      var _a3;
      return (_a3 = __privateGet4(this, _fullscreenElement)) != null ? _a3 : this;
    }
    set fullscreenElement(element) {
      var _a3;
      if (this.hasAttribute(Attributes2.FULLSCREEN_ELEMENT)) {
        this.removeAttribute(Attributes2.FULLSCREEN_ELEMENT);
      }
      __privateSet4(this, _fullscreenElement, element);
      (_a3 = __privateGet4(this, _mediaStore)) == null ? void 0 : _a3.dispatch({
        type: "fullscreenelementchangerequest",
        detail: this.fullscreenElement
      });
    }
    get defaultSubtitles() {
      return getBooleanAttr(this, Attributes2.DEFAULT_SUBTITLES);
    }
    set defaultSubtitles(value) {
      setBooleanAttr(this, Attributes2.DEFAULT_SUBTITLES, value);
    }
    get defaultStreamType() {
      return getStringAttr(this, Attributes2.DEFAULT_STREAM_TYPE);
    }
    set defaultStreamType(value) {
      setStringAttr(this, Attributes2.DEFAULT_STREAM_TYPE, value);
    }
    get defaultDuration() {
      return getNumericAttr(this, Attributes2.DEFAULT_DURATION);
    }
    set defaultDuration(value) {
      setNumericAttr(this, Attributes2.DEFAULT_DURATION, value);
    }
    get noHotkeys() {
      return getBooleanAttr(this, Attributes2.NO_HOTKEYS);
    }
    set noHotkeys(value) {
      setBooleanAttr(this, Attributes2.NO_HOTKEYS, value);
    }
    get keysUsed() {
      return getStringAttr(this, Attributes2.KEYS_USED);
    }
    set keysUsed(value) {
      setStringAttr(this, Attributes2.KEYS_USED, value);
    }
    get liveEdgeOffset() {
      return getNumericAttr(this, Attributes2.LIVE_EDGE_OFFSET);
    }
    set liveEdgeOffset(value) {
      setNumericAttr(this, Attributes2.LIVE_EDGE_OFFSET, value);
    }
    get noAutoSeekToLive() {
      return getBooleanAttr(this, Attributes2.NO_AUTO_SEEK_TO_LIVE);
    }
    set noAutoSeekToLive(value) {
      setBooleanAttr(this, Attributes2.NO_AUTO_SEEK_TO_LIVE, value);
    }
    get noVolumePref() {
      return getBooleanAttr(this, Attributes2.NO_VOLUME_PREF);
    }
    set noVolumePref(value) {
      setBooleanAttr(this, Attributes2.NO_VOLUME_PREF, value);
    }
    get noSubtitlesLangPref() {
      return getBooleanAttr(this, Attributes2.NO_SUBTITLES_LANG_PREF);
    }
    set noSubtitlesLangPref(value) {
      setBooleanAttr(this, Attributes2.NO_SUBTITLES_LANG_PREF, value);
    }
    get noDefaultStore() {
      return getBooleanAttr(this, Attributes2.NO_DEFAULT_STORE);
    }
    set noDefaultStore(value) {
      setBooleanAttr(this, Attributes2.NO_DEFAULT_STORE, value);
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      var _a3, _b2, _c, _d, _e, _f, _g, _h;
      super.attributeChangedCallback(attrName, oldValue, newValue);
      if (attrName === Attributes2.NO_HOTKEYS) {
        if (newValue !== oldValue && newValue === "") {
          if (this.hasAttribute(Attributes2.HOTKEYS)) {
            console.warn(
              "Media Chrome: Both `hotkeys` and `nohotkeys` have been set. All hotkeys will be disabled."
            );
          }
          this.disableHotkeys();
        } else if (newValue !== oldValue && newValue === null) {
          this.enableHotkeys();
        }
      } else if (attrName === Attributes2.HOTKEYS) {
        __privateGet4(this, _hotKeys).value = newValue;
      } else if (attrName === Attributes2.DEFAULT_SUBTITLES && newValue !== oldValue) {
        (_a3 = __privateGet4(this, _mediaStore)) == null ? void 0 : _a3.dispatch({
          type: "optionschangerequest",
          detail: {
            defaultSubtitles: this.hasAttribute(Attributes2.DEFAULT_SUBTITLES)
          }
        });
      } else if (attrName === Attributes2.DEFAULT_STREAM_TYPE) {
        (_c = __privateGet4(this, _mediaStore)) == null ? void 0 : _c.dispatch({
          type: "optionschangerequest",
          detail: {
            defaultStreamType: (_b2 = this.getAttribute(Attributes2.DEFAULT_STREAM_TYPE)) != null ? _b2 : void 0
          }
        });
      } else if (attrName === Attributes2.LIVE_EDGE_OFFSET) {
        (_d = __privateGet4(this, _mediaStore)) == null ? void 0 : _d.dispatch({
          type: "optionschangerequest",
          detail: {
            liveEdgeOffset: this.hasAttribute(Attributes2.LIVE_EDGE_OFFSET) ? +this.getAttribute(Attributes2.LIVE_EDGE_OFFSET) : void 0,
            seekToLiveOffset: !this.hasAttribute(Attributes2.SEEK_TO_LIVE_OFFSET) ? +this.getAttribute(Attributes2.LIVE_EDGE_OFFSET) : void 0
          }
        });
      } else if (attrName === Attributes2.SEEK_TO_LIVE_OFFSET) {
        (_e = __privateGet4(this, _mediaStore)) == null ? void 0 : _e.dispatch({
          type: "optionschangerequest",
          detail: {
            seekToLiveOffset: this.hasAttribute(Attributes2.SEEK_TO_LIVE_OFFSET) ? +this.getAttribute(Attributes2.SEEK_TO_LIVE_OFFSET) : void 0
          }
        });
      } else if (attrName === Attributes2.NO_AUTO_SEEK_TO_LIVE) {
        (_f = __privateGet4(this, _mediaStore)) == null ? void 0 : _f.dispatch({
          type: "optionschangerequest",
          detail: {
            noAutoSeekToLive: this.hasAttribute(Attributes2.NO_AUTO_SEEK_TO_LIVE)
          }
        });
      } else if (attrName === Attributes2.FULLSCREEN_ELEMENT) {
        const el = newValue ? (_g = this.getRootNode()) == null ? void 0 : _g.getElementById(newValue) : void 0;
        __privateSet4(this, _fullscreenElement, el);
        (_h = __privateGet4(this, _mediaStore)) == null ? void 0 : _h.dispatch({
          type: "fullscreenelementchangerequest",
          detail: this.fullscreenElement
        });
      } else if (attrName === Attributes2.LANG && newValue !== oldValue) {
        setLanguage(newValue);
      }
    }
    connectedCallback() {
      var _a3, _b2;
      if (!__privateGet4(this, _mediaStore) && !this.hasAttribute(Attributes2.NO_DEFAULT_STORE)) {
        __privateMethod2(this, _setupDefaultStore, setupDefaultStore_fn).call(this);
      }
      (_a3 = __privateGet4(this, _mediaStore)) == null ? void 0 : _a3.dispatch({
        type: "documentelementchangerequest",
        detail: Document2
      });
      super.connectedCallback();
      if (__privateGet4(this, _mediaStore) && !__privateGet4(this, _mediaStoreUnsubscribe)) {
        __privateSet4(this, _mediaStoreUnsubscribe, (_b2 = __privateGet4(this, _mediaStore)) == null ? void 0 : _b2.subscribe(
          __privateGet4(this, _mediaStateCallback)
        ));
      }
      this.enableHotkeys();
    }
    disconnectedCallback() {
      var _a3, _b2, _c, _d;
      (_a3 = super.disconnectedCallback) == null ? void 0 : _a3.call(this);
      if (__privateGet4(this, _mediaStore)) {
        (_b2 = __privateGet4(this, _mediaStore)) == null ? void 0 : _b2.dispatch({
          type: "documentelementchangerequest",
          detail: void 0
        });
        (_c = __privateGet4(this, _mediaStore)) == null ? void 0 : _c.dispatch({
          type: MediaUIEvents.MEDIA_TOGGLE_SUBTITLES_REQUEST,
          detail: false
        });
      }
      if (__privateGet4(this, _mediaStoreUnsubscribe)) {
        (_d = __privateGet4(this, _mediaStoreUnsubscribe)) == null ? void 0 : _d.call(this);
        __privateSet4(this, _mediaStoreUnsubscribe, void 0);
      }
    }
    /**
     * @override
     * @param {HTMLMediaElement} media
     */
    mediaSetCallback(media) {
      var _a3;
      super.mediaSetCallback(media);
      (_a3 = __privateGet4(this, _mediaStore)) == null ? void 0 : _a3.dispatch({
        type: "mediaelementchangerequest",
        detail: media
      });
      if (!media.hasAttribute("tabindex")) {
        media.tabIndex = -1;
      }
    }
    /**
     * @override
     * @param {HTMLMediaElement} media
     */
    mediaUnsetCallback(media) {
      var _a3;
      super.mediaUnsetCallback(media);
      (_a3 = __privateGet4(this, _mediaStore)) == null ? void 0 : _a3.dispatch({
        type: "mediaelementchangerequest",
        detail: void 0
      });
    }
    propagateMediaState(stateName, state) {
      propagateMediaState(this.mediaStateReceivers, stateName, state);
    }
    associateElement(element) {
      if (!element)
        return;
      const { associatedElementSubscriptions } = this;
      if (associatedElementSubscriptions.has(element))
        return;
      const registerMediaStateReceiver = this.registerMediaStateReceiver.bind(this);
      const unregisterMediaStateReceiver = this.unregisterMediaStateReceiver.bind(this);
      const unsubscribe = monitorForMediaStateReceivers(
        element,
        registerMediaStateReceiver,
        unregisterMediaStateReceiver
      );
      Object.values(MediaUIEvents).forEach((eventName) => {
        element.addEventListener(eventName, __privateGet4(this, _mediaStateEventHandler));
      });
      associatedElementSubscriptions.set(element, unsubscribe);
    }
    unassociateElement(element) {
      if (!element)
        return;
      const { associatedElementSubscriptions } = this;
      if (!associatedElementSubscriptions.has(element))
        return;
      const unsubscribe = associatedElementSubscriptions.get(element);
      unsubscribe();
      associatedElementSubscriptions.delete(element);
      Object.values(MediaUIEvents).forEach((eventName) => {
        element.removeEventListener(eventName, __privateGet4(this, _mediaStateEventHandler));
      });
    }
    registerMediaStateReceiver(el) {
      if (!el)
        return;
      const els = this.mediaStateReceivers;
      const index = els.indexOf(el);
      if (index > -1)
        return;
      els.push(el);
      if (__privateGet4(this, _mediaStore)) {
        Object.entries(__privateGet4(this, _mediaStore).getState()).forEach(
          ([stateName, stateValue]) => {
            propagateMediaState([el], stateName, stateValue);
          }
        );
      }
    }
    unregisterMediaStateReceiver(el) {
      const els = this.mediaStateReceivers;
      const index = els.indexOf(el);
      if (index < 0)
        return;
      els.splice(index, 1);
    }
    enableHotkeys() {
      this.addEventListener("keydown", __privateMethod2(this, _keyDownHandler, keyDownHandler_fn));
    }
    disableHotkeys() {
      this.removeEventListener("keydown", __privateMethod2(this, _keyDownHandler, keyDownHandler_fn));
      this.removeEventListener("keyup", __privateMethod2(this, _keyUpHandler, keyUpHandler_fn));
    }
    get hotkeys() {
      return getStringAttr(this, Attributes2.HOTKEYS);
    }
    set hotkeys(value) {
      setStringAttr(this, Attributes2.HOTKEYS, value);
    }
    keyboardShortcutHandler(e) {
      var _a3, _b2, _c, _d, _e;
      const target = e.target;
      const keysUsed = ((_c = (_b2 = (_a3 = target.getAttribute(Attributes2.KEYS_USED)) == null ? void 0 : _a3.split(" ")) != null ? _b2 : target == null ? void 0 : target.keysUsed) != null ? _c : []).map((key) => key === "Space" ? " " : key).filter(Boolean);
      if (keysUsed.includes(e.key)) {
        return;
      }
      let eventName, detail, evt;
      if (__privateGet4(this, _hotKeys).contains(`no${e.key.toLowerCase()}`))
        return;
      if (e.key === " " && __privateGet4(this, _hotKeys).contains(`nospace`))
        return;
      switch (e.key) {
        case " ":
        case "k":
          eventName = __privateGet4(this, _mediaStore).getState().mediaPaused ? MediaUIEvents.MEDIA_PLAY_REQUEST : MediaUIEvents.MEDIA_PAUSE_REQUEST;
          this.dispatchEvent(
            new GlobalThis.CustomEvent(eventName, {
              composed: true,
              bubbles: true
            })
          );
          break;
        case "m":
          eventName = this.mediaStore.getState().mediaVolumeLevel === "off" ? MediaUIEvents.MEDIA_UNMUTE_REQUEST : MediaUIEvents.MEDIA_MUTE_REQUEST;
          this.dispatchEvent(
            new GlobalThis.CustomEvent(eventName, {
              composed: true,
              bubbles: true
            })
          );
          break;
        case "f":
          eventName = this.mediaStore.getState().mediaIsFullscreen ? MediaUIEvents.MEDIA_EXIT_FULLSCREEN_REQUEST : MediaUIEvents.MEDIA_ENTER_FULLSCREEN_REQUEST;
          this.dispatchEvent(
            new GlobalThis.CustomEvent(eventName, {
              composed: true,
              bubbles: true
            })
          );
          break;
        case "c":
          this.dispatchEvent(
            new GlobalThis.CustomEvent(
              MediaUIEvents.MEDIA_TOGGLE_SUBTITLES_REQUEST,
              { composed: true, bubbles: true }
            )
          );
          break;
        case "ArrowLeft": {
          const offsetValue = this.hasAttribute(
            Attributes2.KEYBOARD_BACKWARD_SEEK_OFFSET
          ) ? +this.getAttribute(Attributes2.KEYBOARD_BACKWARD_SEEK_OFFSET) : DEFAULT_SEEK_OFFSET;
          detail = Math.max(
            ((_d = this.mediaStore.getState().mediaCurrentTime) != null ? _d : 0) - offsetValue,
            0
          );
          evt = new GlobalThis.CustomEvent(MediaUIEvents.MEDIA_SEEK_REQUEST, {
            composed: true,
            bubbles: true,
            detail
          });
          this.dispatchEvent(evt);
          break;
        }
        case "ArrowRight": {
          const offsetValue = this.hasAttribute(
            Attributes2.KEYBOARD_FORWARD_SEEK_OFFSET
          ) ? +this.getAttribute(Attributes2.KEYBOARD_FORWARD_SEEK_OFFSET) : DEFAULT_SEEK_OFFSET;
          detail = Math.max(
            ((_e = this.mediaStore.getState().mediaCurrentTime) != null ? _e : 0) + offsetValue,
            0
          );
          evt = new GlobalThis.CustomEvent(MediaUIEvents.MEDIA_SEEK_REQUEST, {
            composed: true,
            bubbles: true,
            detail
          });
          this.dispatchEvent(evt);
          break;
        }
        default:
          break;
      }
    }
  };
  _hotKeys = /* @__PURE__ */ new WeakMap();
  _fullscreenElement = /* @__PURE__ */ new WeakMap();
  _mediaStore = /* @__PURE__ */ new WeakMap();
  _mediaStateCallback = /* @__PURE__ */ new WeakMap();
  _mediaStoreUnsubscribe = /* @__PURE__ */ new WeakMap();
  _mediaStateEventHandler = /* @__PURE__ */ new WeakMap();
  _setupDefaultStore = /* @__PURE__ */ new WeakSet();
  setupDefaultStore_fn = function() {
    var _a3;
    this.mediaStore = createMediaStore({
      media: this.media,
      fullscreenElement: this.fullscreenElement,
      options: {
        defaultSubtitles: this.hasAttribute(Attributes2.DEFAULT_SUBTITLES),
        defaultDuration: this.hasAttribute(Attributes2.DEFAULT_DURATION) ? +this.getAttribute(Attributes2.DEFAULT_DURATION) : void 0,
        defaultStreamType: (
          /** @type {import('./media-store/state-mediator.js').StreamTypeValue} */
          (_a3 = this.getAttribute(
            Attributes2.DEFAULT_STREAM_TYPE
          )) != null ? _a3 : void 0
        ),
        liveEdgeOffset: this.hasAttribute(Attributes2.LIVE_EDGE_OFFSET) ? +this.getAttribute(Attributes2.LIVE_EDGE_OFFSET) : void 0,
        seekToLiveOffset: this.hasAttribute(Attributes2.SEEK_TO_LIVE_OFFSET) ? +this.getAttribute(Attributes2.SEEK_TO_LIVE_OFFSET) : this.hasAttribute(Attributes2.LIVE_EDGE_OFFSET) ? +this.getAttribute(Attributes2.LIVE_EDGE_OFFSET) : void 0,
        noAutoSeekToLive: this.hasAttribute(Attributes2.NO_AUTO_SEEK_TO_LIVE),
        // NOTE: This wasn't updated if it was changed later. Should it be? (CJP)
        noVolumePref: this.hasAttribute(Attributes2.NO_VOLUME_PREF),
        noSubtitlesLangPref: this.hasAttribute(
          Attributes2.NO_SUBTITLES_LANG_PREF
        )
      }
    });
  };
  _keyUpHandler = /* @__PURE__ */ new WeakSet();
  keyUpHandler_fn = function(e) {
    const { key } = e;
    if (!ButtonPressedKeys.includes(key)) {
      this.removeEventListener("keyup", __privateMethod2(this, _keyUpHandler, keyUpHandler_fn));
      return;
    }
    this.keyboardShortcutHandler(e);
  };
  _keyDownHandler = /* @__PURE__ */ new WeakSet();
  keyDownHandler_fn = function(e) {
    const { metaKey, altKey, key } = e;
    if (metaKey || altKey || !ButtonPressedKeys.includes(key)) {
      this.removeEventListener("keyup", __privateMethod2(this, _keyUpHandler, keyUpHandler_fn));
      return;
    }
    if ([" ", "ArrowLeft", "ArrowRight"].includes(key) && !(__privateGet4(this, _hotKeys).contains(`no${key.toLowerCase()}`) || key === " " && __privateGet4(this, _hotKeys).contains("nospace"))) {
      e.preventDefault();
    }
    this.addEventListener("keyup", __privateMethod2(this, _keyUpHandler, keyUpHandler_fn), { once: true });
  };
  var MEDIA_UI_ATTRIBUTE_NAMES2 = Object.values(MediaUIAttributes);
  var MEDIA_UI_PROP_NAMES = Object.values(MediaUIProps);
  var getMediaUIAttributesFrom = (child) => {
    var _a3, _b2, _c, _d;
    let { observedAttributes: observedAttributes2 } = child.constructor;
    if (!observedAttributes2 && ((_a3 = child.nodeName) == null ? void 0 : _a3.includes("-"))) {
      GlobalThis.customElements.upgrade(child);
      ({ observedAttributes: observedAttributes2 } = child.constructor);
    }
    const mediaChromeAttributesList = (_d = (_c = (_b2 = child == null ? void 0 : child.getAttribute) == null ? void 0 : _b2.call(child, MediaStateReceiverAttributes.MEDIA_CHROME_ATTRIBUTES)) == null ? void 0 : _c.split) == null ? void 0 : _d.call(_c, /\s+/);
    if (!Array.isArray(observedAttributes2 || mediaChromeAttributesList))
      return [];
    return (observedAttributes2 || mediaChromeAttributesList).filter(
      (attrName) => MEDIA_UI_ATTRIBUTE_NAMES2.includes(attrName)
    );
  };
  var hasMediaUIProps = (mediaStateReceiverCandidate) => {
    var _a3, _b2;
    if (((_a3 = mediaStateReceiverCandidate.nodeName) == null ? void 0 : _a3.includes("-")) && !!GlobalThis.customElements.get(
      (_b2 = mediaStateReceiverCandidate.nodeName) == null ? void 0 : _b2.toLowerCase()
    ) && !(mediaStateReceiverCandidate instanceof GlobalThis.customElements.get(
      mediaStateReceiverCandidate.nodeName.toLowerCase()
    ))) {
      GlobalThis.customElements.upgrade(mediaStateReceiverCandidate);
    }
    return MEDIA_UI_PROP_NAMES.some(
      (propName) => propName in mediaStateReceiverCandidate
    );
  };
  var isMediaStateReceiver = (child) => {
    return hasMediaUIProps(child) || !!getMediaUIAttributesFrom(child).length;
  };
  var serializeTuple = (tuple) => {
    var _a3;
    return (_a3 = tuple == null ? void 0 : tuple.join) == null ? void 0 : _a3.call(tuple, ":");
  };
  var CustomAttrSerializer = {
    [MediaUIAttributes.MEDIA_SUBTITLES_LIST]: stringifyTextTrackList,
    [MediaUIAttributes.MEDIA_SUBTITLES_SHOWING]: stringifyTextTrackList,
    [MediaUIAttributes.MEDIA_SEEKABLE]: serializeTuple,
    [MediaUIAttributes.MEDIA_BUFFERED]: (tuples) => tuples == null ? void 0 : tuples.map(serializeTuple).join(" "),
    [MediaUIAttributes.MEDIA_PREVIEW_COORDS]: (coords) => coords == null ? void 0 : coords.join(" "),
    [MediaUIAttributes.MEDIA_RENDITION_LIST]: stringifyRenditionList,
    [MediaUIAttributes.MEDIA_AUDIO_TRACK_LIST]: stringifyAudioTrackList
  };
  var setAttr = async (child, attrName, attrValue) => {
    var _a3, _b2;
    if (!child.isConnected) {
      await delay(0);
    }
    if (typeof attrValue === "boolean" || attrValue == null) {
      return setBooleanAttr(child, attrName, attrValue);
    }
    if (typeof attrValue === "number") {
      return setNumericAttr(child, attrName, attrValue);
    }
    if (typeof attrValue === "string") {
      return setStringAttr(child, attrName, attrValue);
    }
    if (Array.isArray(attrValue) && !attrValue.length) {
      return child.removeAttribute(attrName);
    }
    const val = (_b2 = (_a3 = CustomAttrSerializer[attrName]) == null ? void 0 : _a3.call(CustomAttrSerializer, attrValue)) != null ? _b2 : attrValue;
    return child.setAttribute(attrName, val);
  };
  var isMediaSlotElementDescendant = (el) => {
    var _a3;
    return !!((_a3 = el.closest) == null ? void 0 : _a3.call(el, '*[slot="media"]'));
  };
  var traverseForMediaStateReceivers = (rootNode, mediaStateReceiverCallback) => {
    if (isMediaSlotElementDescendant(rootNode)) {
      return;
    }
    const traverseForMediaStateReceiversSync = (rootNode2, mediaStateReceiverCallback2) => {
      var _a3, _b2;
      if (isMediaStateReceiver(rootNode2)) {
        mediaStateReceiverCallback2(rootNode2);
      }
      const { children = [] } = rootNode2 != null ? rootNode2 : {};
      const shadowChildren = (_b2 = (_a3 = rootNode2 == null ? void 0 : rootNode2.shadowRoot) == null ? void 0 : _a3.children) != null ? _b2 : [];
      const allChildren = [...children, ...shadowChildren];
      allChildren.forEach(
        (child) => traverseForMediaStateReceivers(
          child,
          mediaStateReceiverCallback2
        )
      );
    };
    const name = rootNode == null ? void 0 : rootNode.nodeName.toLowerCase();
    if (name.includes("-") && !isMediaStateReceiver(rootNode)) {
      GlobalThis.customElements.whenDefined(name).then(() => {
        traverseForMediaStateReceiversSync(rootNode, mediaStateReceiverCallback);
      });
      return;
    }
    traverseForMediaStateReceiversSync(rootNode, mediaStateReceiverCallback);
  };
  var propagateMediaState = (els, stateName, val) => {
    els.forEach((el) => {
      if (stateName in el) {
        el[stateName] = val;
        return;
      }
      const relevantAttrs = getMediaUIAttributesFrom(el);
      const attrName = stateName.toLowerCase();
      if (!relevantAttrs.includes(attrName))
        return;
      setAttr(el, attrName, val);
    });
  };
  var monitorForMediaStateReceivers = (rootNode, registerMediaStateReceiver, unregisterMediaStateReceiver) => {
    traverseForMediaStateReceivers(rootNode, registerMediaStateReceiver);
    const registerMediaStateReceiverHandler = (evt) => {
      var _a3;
      const el = (_a3 = evt == null ? void 0 : evt.composedPath()[0]) != null ? _a3 : evt.target;
      registerMediaStateReceiver(el);
    };
    const unregisterMediaStateReceiverHandler = (evt) => {
      var _a3;
      const el = (_a3 = evt == null ? void 0 : evt.composedPath()[0]) != null ? _a3 : evt.target;
      unregisterMediaStateReceiver(el);
    };
    rootNode.addEventListener(
      MediaUIEvents.REGISTER_MEDIA_STATE_RECEIVER,
      registerMediaStateReceiverHandler
    );
    rootNode.addEventListener(
      MediaUIEvents.UNREGISTER_MEDIA_STATE_RECEIVER,
      unregisterMediaStateReceiverHandler
    );
    const mutationCallback = (mutationsList) => {
      mutationsList.forEach((mutationRecord) => {
        const {
          addedNodes = [],
          removedNodes = [],
          type,
          target,
          attributeName
        } = mutationRecord;
        if (type === "childList") {
          Array.prototype.forEach.call(
            addedNodes,
            (node) => traverseForMediaStateReceivers(
              node,
              registerMediaStateReceiver
            )
          );
          Array.prototype.forEach.call(
            removedNodes,
            (node) => traverseForMediaStateReceivers(
              node,
              unregisterMediaStateReceiver
            )
          );
        } else if (type === "attributes" && attributeName === MediaStateReceiverAttributes.MEDIA_CHROME_ATTRIBUTES) {
          if (isMediaStateReceiver(target)) {
            registerMediaStateReceiver(target);
          } else {
            unregisterMediaStateReceiver(target);
          }
        }
      });
    };
    let prevSlotted = [];
    const slotChangeHandler = (event) => {
      const slotEl = event.target;
      if (slotEl.name === "media")
        return;
      prevSlotted.forEach(
        (node) => traverseForMediaStateReceivers(node, unregisterMediaStateReceiver)
      );
      prevSlotted = [
        ...slotEl.assignedElements({ flatten: true })
      ];
      prevSlotted.forEach(
        (node) => traverseForMediaStateReceivers(node, registerMediaStateReceiver)
      );
    };
    rootNode.addEventListener("slotchange", slotChangeHandler);
    const observer2 = new MutationObserver(mutationCallback);
    observer2.observe(rootNode, {
      childList: true,
      attributes: true,
      subtree: true
    });
    const unsubscribe = () => {
      traverseForMediaStateReceivers(rootNode, unregisterMediaStateReceiver);
      rootNode.removeEventListener("slotchange", slotChangeHandler);
      observer2.disconnect();
      rootNode.removeEventListener(
        MediaUIEvents.REGISTER_MEDIA_STATE_RECEIVER,
        registerMediaStateReceiverHandler
      );
      rootNode.removeEventListener(
        MediaUIEvents.UNREGISTER_MEDIA_STATE_RECEIVER,
        unregisterMediaStateReceiverHandler
      );
    };
    return unsubscribe;
  };
  if (!GlobalThis.customElements.get("media-controller")) {
    GlobalThis.customElements.define("media-controller", MediaController);
  }

  // ../../node_modules/media-chrome/dist/media-chrome-button.js
  var __accessCheck5 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet5 = (obj, member, getter) => {
    __accessCheck5(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd5 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet5 = (obj, member, value, setter) => {
    __accessCheck5(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var __privateMethod3 = (obj, member, method) => {
    __accessCheck5(obj, member, "access private method");
    return method;
  };
  var _mediaController2;
  var _clickListener;
  var _positionTooltip;
  var _keyupListener;
  var _keydownListener;
  var _setupTooltip;
  var setupTooltip_fn;
  var Attributes3 = {
    TOOLTIP_PLACEMENT: "tooltipplacement",
    DISABLED: "disabled",
    NO_TOOLTIP: "notooltip"
  };
  var template3 = Document2.createElement("template");
  template3.innerHTML = /*html*/
  `
<style>
  :host {
    position: relative;
    font: var(--media-font,
      var(--media-font-weight, bold)
      var(--media-font-size, 14px) /
      var(--media-text-content-height, var(--media-control-height, 24px))
      var(--media-font-family, helvetica neue, segoe ui, roboto, arial, sans-serif));
    color: var(--media-text-color, var(--media-primary-color, rgb(238 238 238)));
    background: var(--media-control-background, var(--media-secondary-color, rgb(20 20 30 / .7)));
    padding: var(--media-button-padding, var(--media-control-padding, 10px));
    justify-content: var(--media-button-justify-content, center);
    display: inline-flex;
    align-items: center;
    vertical-align: middle;
    box-sizing: border-box;
    transition: background .15s linear;
    pointer-events: auto;
    cursor: var(--media-cursor, pointer);
    -webkit-tap-highlight-color: transparent;
  }

  ${/*
    Only show outline when keyboard focusing.
    https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo
  */
  ""}
  :host(:focus-visible) {
    box-shadow: inset 0 0 0 2px rgb(27 127 204 / .9);
    outline: 0;
  }
  ${/*
  * hide default focus ring, particularly when using mouse
  */
  ""}
  :host(:where(:focus)) {
    box-shadow: none;
    outline: 0;
  }

  :host(:hover) {
    background: var(--media-control-hover-background, rgba(50 50 70 / .7));
  }

  svg, img, ::slotted(svg), ::slotted(img) {
    width: var(--media-button-icon-width);
    height: var(--media-button-icon-height, var(--media-control-height, 24px));
    transform: var(--media-button-icon-transform);
    transition: var(--media-button-icon-transition);
    fill: var(--media-icon-color, var(--media-primary-color, rgb(238 238 238)));
    vertical-align: middle;
    max-width: 100%;
    max-height: 100%;
    min-width: 100%;
  }

  media-tooltip {
    ${/** Make sure unpositioned tooltip doesn't cause page overflow (scroll). */
  ""}
    max-width: 0;
    overflow-x: clip;
    opacity: 0;
    transition: opacity .3s, max-width 0s 9s;
  }

  :host(:hover) media-tooltip,
  :host(:focus-visible) media-tooltip {
    max-width: 100vw;
    opacity: 1;
    transition: opacity .3s;
  }

  :host([notooltip]) slot[name="tooltip"] {
    display: none;
  }
</style>

<slot name="tooltip">
  <media-tooltip part="tooltip" aria-hidden="true">
    <slot name="tooltip-content"></slot>
  </media-tooltip>
</slot>
`;
  var MediaChromeButton = class extends GlobalThis.HTMLElement {
    constructor(options = {}) {
      var _a3;
      super();
      __privateAdd5(this, _setupTooltip);
      __privateAdd5(this, _mediaController2, void 0);
      this.preventClick = false;
      this.tooltipEl = null;
      this.tooltipContent = "";
      __privateAdd5(this, _clickListener, (e) => {
        if (!this.preventClick) {
          this.handleClick(e);
        }
        setTimeout(__privateGet5(this, _positionTooltip), 0);
      });
      __privateAdd5(this, _positionTooltip, () => {
        var _a4, _b2;
        (_b2 = (_a4 = this.tooltipEl) == null ? void 0 : _a4.updateXOffset) == null ? void 0 : _b2.call(_a4);
      });
      __privateAdd5(this, _keyupListener, (e) => {
        const { key } = e;
        if (!this.keysUsed.includes(key)) {
          this.removeEventListener("keyup", __privateGet5(this, _keyupListener));
          return;
        }
        if (!this.preventClick) {
          this.handleClick(e);
        }
      });
      __privateAdd5(this, _keydownListener, (e) => {
        const { metaKey, altKey, key } = e;
        if (metaKey || altKey || !this.keysUsed.includes(key)) {
          this.removeEventListener("keyup", __privateGet5(this, _keyupListener));
          return;
        }
        this.addEventListener("keyup", __privateGet5(this, _keyupListener), { once: true });
      });
      if (!this.shadowRoot) {
        this.attachShadow({ mode: "open" });
        const buttonHTML = template3.content.cloneNode(true);
        this.nativeEl = buttonHTML;
        let slotTemplate17 = options.slotTemplate;
        if (!slotTemplate17) {
          slotTemplate17 = Document2.createElement("template");
          slotTemplate17.innerHTML = `<slot>${options.defaultContent || ""}</slot>`;
        }
        if (options.tooltipContent) {
          buttonHTML.querySelector('slot[name="tooltip-content"]').innerHTML = (_a3 = options.tooltipContent) != null ? _a3 : "";
          this.tooltipContent = options.tooltipContent;
        }
        this.nativeEl.appendChild(slotTemplate17.content.cloneNode(true));
        this.shadowRoot.appendChild(buttonHTML);
      }
      this.tooltipEl = this.shadowRoot.querySelector("media-tooltip");
    }
    static get observedAttributes() {
      return [
        "disabled",
        Attributes3.TOOLTIP_PLACEMENT,
        MediaStateReceiverAttributes.MEDIA_CONTROLLER
      ];
    }
    enable() {
      this.addEventListener("click", __privateGet5(this, _clickListener));
      this.addEventListener("keydown", __privateGet5(this, _keydownListener));
      this.tabIndex = 0;
    }
    disable() {
      this.removeEventListener("click", __privateGet5(this, _clickListener));
      this.removeEventListener("keydown", __privateGet5(this, _keydownListener));
      this.removeEventListener("keyup", __privateGet5(this, _keyupListener));
      this.tabIndex = -1;
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      var _a3, _b2, _c, _d, _e;
      if (attrName === MediaStateReceiverAttributes.MEDIA_CONTROLLER) {
        if (oldValue) {
          (_b2 = (_a3 = __privateGet5(this, _mediaController2)) == null ? void 0 : _a3.unassociateElement) == null ? void 0 : _b2.call(_a3, this);
          __privateSet5(this, _mediaController2, null);
        }
        if (newValue && this.isConnected) {
          __privateSet5(this, _mediaController2, (_c = this.getRootNode()) == null ? void 0 : _c.getElementById(newValue));
          (_e = (_d = __privateGet5(this, _mediaController2)) == null ? void 0 : _d.associateElement) == null ? void 0 : _e.call(_d, this);
        }
      } else if (attrName === "disabled" && newValue !== oldValue) {
        if (newValue == null) {
          this.enable();
        } else {
          this.disable();
        }
      } else if (attrName === Attributes3.TOOLTIP_PLACEMENT && this.tooltipEl && newValue !== oldValue) {
        this.tooltipEl.placement = newValue;
      }
      __privateGet5(this, _positionTooltip).call(this);
    }
    connectedCallback() {
      var _a3, _b2, _c;
      const { style } = getOrInsertCSSRule(this.shadowRoot, ":host");
      style.setProperty(
        "display",
        `var(--media-control-display, var(--${this.localName}-display, inline-flex))`
      );
      if (!this.hasAttribute("disabled")) {
        this.enable();
      } else {
        this.disable();
      }
      this.setAttribute("role", "button");
      const mediaControllerId = this.getAttribute(
        MediaStateReceiverAttributes.MEDIA_CONTROLLER
      );
      if (mediaControllerId) {
        __privateSet5(
          this,
          _mediaController2,
          // @ts-ignore
          (_a3 = this.getRootNode()) == null ? void 0 : _a3.getElementById(mediaControllerId)
        );
        (_c = (_b2 = __privateGet5(this, _mediaController2)) == null ? void 0 : _b2.associateElement) == null ? void 0 : _c.call(_b2, this);
      }
      GlobalThis.customElements.whenDefined("media-tooltip").then(() => __privateMethod3(this, _setupTooltip, setupTooltip_fn).call(this));
    }
    disconnectedCallback() {
      var _a3, _b2;
      this.disable();
      (_b2 = (_a3 = __privateGet5(this, _mediaController2)) == null ? void 0 : _a3.unassociateElement) == null ? void 0 : _b2.call(_a3, this);
      __privateSet5(this, _mediaController2, null);
      this.removeEventListener("mouseenter", __privateGet5(this, _positionTooltip));
      this.removeEventListener("focus", __privateGet5(this, _positionTooltip));
      this.removeEventListener("click", __privateGet5(this, _clickListener));
    }
    get keysUsed() {
      return ["Enter", " "];
    }
    /**
     * Get or set tooltip placement
     */
    get tooltipPlacement() {
      return getStringAttr(this, Attributes3.TOOLTIP_PLACEMENT);
    }
    set tooltipPlacement(value) {
      setStringAttr(this, Attributes3.TOOLTIP_PLACEMENT, value);
    }
    get mediaController() {
      return getStringAttr(this, MediaStateReceiverAttributes.MEDIA_CONTROLLER);
    }
    set mediaController(value) {
      setStringAttr(this, MediaStateReceiverAttributes.MEDIA_CONTROLLER, value);
    }
    get disabled() {
      return getBooleanAttr(this, Attributes3.DISABLED);
    }
    set disabled(value) {
      setBooleanAttr(this, Attributes3.DISABLED, value);
    }
    get noTooltip() {
      return getBooleanAttr(this, Attributes3.NO_TOOLTIP);
    }
    set noTooltip(value) {
      setBooleanAttr(this, Attributes3.NO_TOOLTIP, value);
    }
    /**
     * @abstract
     * @argument {Event} e
     */
    handleClick(e) {
    }
    // eslint-disable-line
  };
  _mediaController2 = /* @__PURE__ */ new WeakMap();
  _clickListener = /* @__PURE__ */ new WeakMap();
  _positionTooltip = /* @__PURE__ */ new WeakMap();
  _keyupListener = /* @__PURE__ */ new WeakMap();
  _keydownListener = /* @__PURE__ */ new WeakMap();
  _setupTooltip = /* @__PURE__ */ new WeakSet();
  setupTooltip_fn = function() {
    this.addEventListener("mouseenter", __privateGet5(this, _positionTooltip));
    this.addEventListener("focus", __privateGet5(this, _positionTooltip));
    this.addEventListener("click", __privateGet5(this, _clickListener));
    const initialPlacement = this.tooltipPlacement;
    if (initialPlacement && this.tooltipEl) {
      this.tooltipEl.placement = initialPlacement;
    }
  };
  if (!GlobalThis.customElements.get("media-chrome-button")) {
    GlobalThis.customElements.define("media-chrome-button", MediaChromeButton);
  }

  // ../../node_modules/media-chrome/dist/media-airplay-button.js
  var airplayIcon = `<svg aria-hidden="true" viewBox="0 0 26 24">
  <path d="M22.13 3H3.87a.87.87 0 0 0-.87.87v13.26a.87.87 0 0 0 .87.87h3.4L9 16H5V5h16v11h-4l1.72 2h3.4a.87.87 0 0 0 .87-.87V3.87a.87.87 0 0 0-.86-.87Zm-8.75 11.44a.5.5 0 0 0-.76 0l-4.91 5.73a.5.5 0 0 0 .38.83h9.82a.501.501 0 0 0 .38-.83l-4.91-5.73Z"/>
</svg>
`;
  var slotTemplate = Document2.createElement("template");
  slotTemplate.innerHTML = /*html*/
  `
  <style>
    :host([${MediaUIAttributes.MEDIA_IS_AIRPLAYING}]) slot[name=icon] slot:not([name=exit]) {
      display: none !important;
    }

    ${/* Double negative, but safer if display doesn't equal 'block' */
  ""}
    :host(:not([${MediaUIAttributes.MEDIA_IS_AIRPLAYING}])) slot[name=icon] slot:not([name=enter]) {
      display: none !important;
    }

    :host([${MediaUIAttributes.MEDIA_IS_AIRPLAYING}]) slot[name=tooltip-enter],
    :host(:not([${MediaUIAttributes.MEDIA_IS_AIRPLAYING}])) slot[name=tooltip-exit] {
      display: none;
    }
  </style>

  <slot name="icon">
    <slot name="enter">${airplayIcon}</slot>
    <slot name="exit">${airplayIcon}</slot>
  </slot>
`;
  var tooltipContent = (
    /*html*/
    `
  <slot name="tooltip-enter">${t("start airplay")}</slot>
  <slot name="tooltip-exit">${t("stop airplay")}</slot>
`
  );
  var updateAriaLabel = (el) => {
    const label = el.mediaIsAirplaying ? t("stop airplay") : t("start airplay");
    el.setAttribute("aria-label", label);
  };
  var MediaAirplayButton = class extends MediaChromeButton {
    static get observedAttributes() {
      return [
        ...super.observedAttributes,
        MediaUIAttributes.MEDIA_IS_AIRPLAYING,
        MediaUIAttributes.MEDIA_AIRPLAY_UNAVAILABLE
      ];
    }
    constructor(options = {}) {
      super({ slotTemplate, tooltipContent, ...options });
    }
    connectedCallback() {
      super.connectedCallback();
      updateAriaLabel(this);
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      super.attributeChangedCallback(attrName, oldValue, newValue);
      if (attrName === MediaUIAttributes.MEDIA_IS_AIRPLAYING) {
        updateAriaLabel(this);
      }
    }
    /**
     * Are we currently airplaying
     */
    get mediaIsAirplaying() {
      return getBooleanAttr(this, MediaUIAttributes.MEDIA_IS_AIRPLAYING);
    }
    set mediaIsAirplaying(value) {
      setBooleanAttr(this, MediaUIAttributes.MEDIA_IS_AIRPLAYING, value);
    }
    /**
     * Airplay unavailability state
     */
    get mediaAirplayUnavailable() {
      return getStringAttr(this, MediaUIAttributes.MEDIA_AIRPLAY_UNAVAILABLE);
    }
    set mediaAirplayUnavailable(value) {
      setStringAttr(this, MediaUIAttributes.MEDIA_AIRPLAY_UNAVAILABLE, value);
    }
    handleClick() {
      const evt = new GlobalThis.CustomEvent(
        MediaUIEvents.MEDIA_AIRPLAY_REQUEST,
        {
          composed: true,
          bubbles: true
        }
      );
      this.dispatchEvent(evt);
    }
  };
  if (!GlobalThis.customElements.get("media-airplay-button")) {
    GlobalThis.customElements.define("media-airplay-button", MediaAirplayButton);
  }

  // ../../node_modules/media-chrome/dist/media-captions-button.js
  var ccIconOn = `<svg aria-hidden="true" viewBox="0 0 26 24">
  <path d="M22.83 5.68a2.58 2.58 0 0 0-2.3-2.5c-3.62-.24-11.44-.24-15.06 0a2.58 2.58 0 0 0-2.3 2.5c-.23 4.21-.23 8.43 0 12.64a2.58 2.58 0 0 0 2.3 2.5c3.62.24 11.44.24 15.06 0a2.58 2.58 0 0 0 2.3-2.5c.23-4.21.23-8.43 0-12.64Zm-11.39 9.45a3.07 3.07 0 0 1-1.91.57 3.06 3.06 0 0 1-2.34-1 3.75 3.75 0 0 1-.92-2.67 3.92 3.92 0 0 1 .92-2.77 3.18 3.18 0 0 1 2.43-1 2.94 2.94 0 0 1 2.13.78c.364.359.62.813.74 1.31l-1.43.35a1.49 1.49 0 0 0-1.51-1.17 1.61 1.61 0 0 0-1.29.58 2.79 2.79 0 0 0-.5 1.89 3 3 0 0 0 .49 1.93 1.61 1.61 0 0 0 1.27.58 1.48 1.48 0 0 0 1-.37 2.1 2.1 0 0 0 .59-1.14l1.4.44a3.23 3.23 0 0 1-1.07 1.69Zm7.22 0a3.07 3.07 0 0 1-1.91.57 3.06 3.06 0 0 1-2.34-1 3.75 3.75 0 0 1-.92-2.67 3.88 3.88 0 0 1 .93-2.77 3.14 3.14 0 0 1 2.42-1 3 3 0 0 1 2.16.82 2.8 2.8 0 0 1 .73 1.31l-1.43.35a1.49 1.49 0 0 0-1.51-1.21 1.61 1.61 0 0 0-1.29.58A2.79 2.79 0 0 0 15 12a3 3 0 0 0 .49 1.93 1.61 1.61 0 0 0 1.27.58 1.44 1.44 0 0 0 1-.37 2.1 2.1 0 0 0 .6-1.15l1.4.44a3.17 3.17 0 0 1-1.1 1.7Z"/>
</svg>`;
  var ccIconOff = `<svg aria-hidden="true" viewBox="0 0 26 24">
  <path d="M17.73 14.09a1.4 1.4 0 0 1-1 .37 1.579 1.579 0 0 1-1.27-.58A3 3 0 0 1 15 12a2.8 2.8 0 0 1 .5-1.85 1.63 1.63 0 0 1 1.29-.57 1.47 1.47 0 0 1 1.51 1.2l1.43-.34A2.89 2.89 0 0 0 19 9.07a3 3 0 0 0-2.14-.78 3.14 3.14 0 0 0-2.42 1 3.91 3.91 0 0 0-.93 2.78 3.74 3.74 0 0 0 .92 2.66 3.07 3.07 0 0 0 2.34 1 3.07 3.07 0 0 0 1.91-.57 3.17 3.17 0 0 0 1.07-1.74l-1.4-.45c-.083.43-.3.822-.62 1.12Zm-7.22 0a1.43 1.43 0 0 1-1 .37 1.58 1.58 0 0 1-1.27-.58A3 3 0 0 1 7.76 12a2.8 2.8 0 0 1 .5-1.85 1.63 1.63 0 0 1 1.29-.57 1.47 1.47 0 0 1 1.51 1.2l1.43-.34a2.81 2.81 0 0 0-.74-1.32 2.94 2.94 0 0 0-2.13-.78 3.18 3.18 0 0 0-2.43 1 4 4 0 0 0-.92 2.78 3.74 3.74 0 0 0 .92 2.66 3.07 3.07 0 0 0 2.34 1 3.07 3.07 0 0 0 1.91-.57 3.23 3.23 0 0 0 1.07-1.74l-1.4-.45a2.06 2.06 0 0 1-.6 1.07Zm12.32-8.41a2.59 2.59 0 0 0-2.3-2.51C18.72 3.05 15.86 3 13 3c-2.86 0-5.72.05-7.53.17a2.59 2.59 0 0 0-2.3 2.51c-.23 4.207-.23 8.423 0 12.63a2.57 2.57 0 0 0 2.3 2.5c1.81.13 4.67.19 7.53.19 2.86 0 5.72-.06 7.53-.19a2.57 2.57 0 0 0 2.3-2.5c.23-4.207.23-8.423 0-12.63Zm-1.49 12.53a1.11 1.11 0 0 1-.91 1.11c-1.67.11-4.45.18-7.43.18-2.98 0-5.76-.07-7.43-.18a1.11 1.11 0 0 1-.91-1.11c-.21-4.14-.21-8.29 0-12.43a1.11 1.11 0 0 1 .91-1.11C7.24 4.56 10 4.49 13 4.49s5.76.07 7.43.18a1.11 1.11 0 0 1 .91 1.11c.21 4.14.21 8.29 0 12.43Z"/>
</svg>`;
  var slotTemplate2 = Document2.createElement("template");
  slotTemplate2.innerHTML = /*html*/
  `
  <style>
    :host([aria-checked="true"]) slot[name=off] {
      display: none !important;
    }

    ${/* Double negative, but safer if display doesn't equal 'block' */
  ""}
    :host(:not([aria-checked="true"])) slot[name=on] {
      display: none !important;
    }

    :host([aria-checked="true"]) slot[name=tooltip-enable],
    :host(:not([aria-checked="true"])) slot[name=tooltip-disable] {
      display: none;
    }
  </style>

  <slot name="icon">
    <slot name="on">${ccIconOn}</slot>
    <slot name="off">${ccIconOff}</slot>
  </slot>
`;
  var tooltipContent2 = (
    /*html*/
    `
  <slot name="tooltip-enable">${t("Enable captions")}</slot>
  <slot name="tooltip-disable">${t("Disable captions")}</slot>
`
  );
  var updateAriaChecked = (el) => {
    el.setAttribute("aria-checked", areSubsOn(el).toString());
  };
  var MediaCaptionsButton = class extends MediaChromeButton {
    static get observedAttributes() {
      return [
        ...super.observedAttributes,
        MediaUIAttributes.MEDIA_SUBTITLES_LIST,
        MediaUIAttributes.MEDIA_SUBTITLES_SHOWING
      ];
    }
    constructor(options = {}) {
      super({ slotTemplate: slotTemplate2, tooltipContent: tooltipContent2, ...options });
      this._captionsReady = false;
    }
    connectedCallback() {
      super.connectedCallback();
      this.setAttribute("role", "switch");
      this.setAttribute("aria-label", t("closed captions"));
      updateAriaChecked(this);
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      super.attributeChangedCallback(attrName, oldValue, newValue);
      if (attrName === MediaUIAttributes.MEDIA_SUBTITLES_SHOWING) {
        updateAriaChecked(this);
      }
    }
    /**
     * An array of TextTrack-like objects.
     * Objects must have the properties: kind, language, and label.
     */
    get mediaSubtitlesList() {
      return getSubtitlesListAttr(this, MediaUIAttributes.MEDIA_SUBTITLES_LIST);
    }
    set mediaSubtitlesList(list) {
      setSubtitlesListAttr(this, MediaUIAttributes.MEDIA_SUBTITLES_LIST, list);
    }
    /**
     * An array of TextTrack-like objects.
     * Objects must have the properties: kind, language, and label.
     */
    get mediaSubtitlesShowing() {
      return getSubtitlesListAttr(
        this,
        MediaUIAttributes.MEDIA_SUBTITLES_SHOWING
      );
    }
    set mediaSubtitlesShowing(list) {
      setSubtitlesListAttr(this, MediaUIAttributes.MEDIA_SUBTITLES_SHOWING, list);
    }
    handleClick() {
      this.dispatchEvent(
        new GlobalThis.CustomEvent(MediaUIEvents.MEDIA_TOGGLE_SUBTITLES_REQUEST, {
          composed: true,
          bubbles: true
        })
      );
    }
  };
  var getSubtitlesListAttr = (el, attrName) => {
    const attrVal = el.getAttribute(attrName);
    return attrVal ? parseTextTracksStr(attrVal) : [];
  };
  var setSubtitlesListAttr = (el, attrName, list) => {
    if (!(list == null ? void 0 : list.length)) {
      el.removeAttribute(attrName);
      return;
    }
    const newValStr = stringifyTextTrackList(list);
    const oldVal = el.getAttribute(attrName);
    if (oldVal === newValStr)
      return;
    el.setAttribute(attrName, newValStr);
  };
  if (!GlobalThis.customElements.get("media-captions-button")) {
    GlobalThis.customElements.define(
      "media-captions-button",
      MediaCaptionsButton
    );
  }

  // ../../node_modules/media-chrome/dist/media-cast-button.js
  var enterIcon = `<svg aria-hidden="true" viewBox="0 0 24 24"><g><path class="cast_caf_icon_arch0" d="M1,18 L1,21 L4,21 C4,19.3 2.66,18 1,18 L1,18 Z"/><path class="cast_caf_icon_arch1" d="M1,14 L1,16 C3.76,16 6,18.2 6,21 L8,21 C8,17.13 4.87,14 1,14 L1,14 Z"/><path class="cast_caf_icon_arch2" d="M1,10 L1,12 C5.97,12 10,16.0 10,21 L12,21 C12,14.92 7.07,10 1,10 L1,10 Z"/><path class="cast_caf_icon_box" d="M21,3 L3,3 C1.9,3 1,3.9 1,5 L1,8 L3,8 L3,5 L21,5 L21,19 L14,19 L14,21 L21,21 C22.1,21 23,20.1 23,19 L23,5 C23,3.9 22.1,3 21,3 L21,3 Z"/></g></svg>`;
  var exitIcon = `<svg aria-hidden="true" viewBox="0 0 24 24"><g><path class="cast_caf_icon_arch0" d="M1,18 L1,21 L4,21 C4,19.3 2.66,18 1,18 L1,18 Z"/><path class="cast_caf_icon_arch1" d="M1,14 L1,16 C3.76,16 6,18.2 6,21 L8,21 C8,17.13 4.87,14 1,14 L1,14 Z"/><path class="cast_caf_icon_arch2" d="M1,10 L1,12 C5.97,12 10,16.0 10,21 L12,21 C12,14.92 7.07,10 1,10 L1,10 Z"/><path class="cast_caf_icon_box" d="M21,3 L3,3 C1.9,3 1,3.9 1,5 L1,8 L3,8 L3,5 L21,5 L21,19 L14,19 L14,21 L21,21 C22.1,21 23,20.1 23,19 L23,5 C23,3.9 22.1,3 21,3 L21,3 Z"/><path class="cast_caf_icon_boxfill" d="M5,7 L5,8.63 C8,8.6 13.37,14 13.37,17 L19,17 L19,7 Z"/></g></svg>`;
  var slotTemplate3 = Document2.createElement("template");
  slotTemplate3.innerHTML = /*html*/
  `
  <style>
  :host([${MediaUIAttributes.MEDIA_IS_CASTING}]) slot[name=icon] slot:not([name=exit]) {
    display: none !important;
  }

  ${/* Double negative, but safer if display doesn't equal 'block' */
  ""}
  :host(:not([${MediaUIAttributes.MEDIA_IS_CASTING}])) slot[name=icon] slot:not([name=enter]) {
    display: none !important;
  }

  :host([${MediaUIAttributes.MEDIA_IS_CASTING}]) slot[name=tooltip-enter],
    :host(:not([${MediaUIAttributes.MEDIA_IS_CASTING}])) slot[name=tooltip-exit] {
      display: none;
    }
  </style>

  <slot name="icon">
    <slot name="enter">${enterIcon}</slot>
    <slot name="exit">${exitIcon}</slot>
  </slot>
`;
  var tooltipContent3 = (
    /*html*/
    `
  <slot name="tooltip-enter">${t("Start casting")}</slot>
  <slot name="tooltip-exit">${t("Stop casting")}</slot>
`
  );
  var updateAriaLabel2 = (el) => {
    const label = el.mediaIsCasting ? t("stop casting") : t("start casting");
    el.setAttribute("aria-label", label);
  };
  var MediaCastButton = class extends MediaChromeButton {
    static get observedAttributes() {
      return [
        ...super.observedAttributes,
        MediaUIAttributes.MEDIA_IS_CASTING,
        MediaUIAttributes.MEDIA_CAST_UNAVAILABLE
      ];
    }
    constructor(options = {}) {
      super({ slotTemplate: slotTemplate3, tooltipContent: tooltipContent3, ...options });
    }
    connectedCallback() {
      super.connectedCallback();
      updateAriaLabel2(this);
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      super.attributeChangedCallback(attrName, oldValue, newValue);
      if (attrName === MediaUIAttributes.MEDIA_IS_CASTING) {
        updateAriaLabel2(this);
      }
    }
    /**
     * @type {boolean} Are we currently casting
     */
    get mediaIsCasting() {
      return getBooleanAttr(this, MediaUIAttributes.MEDIA_IS_CASTING);
    }
    set mediaIsCasting(value) {
      setBooleanAttr(this, MediaUIAttributes.MEDIA_IS_CASTING, value);
    }
    /**
     * @type {string | undefined} Cast unavailability state
     */
    get mediaCastUnavailable() {
      return getStringAttr(this, MediaUIAttributes.MEDIA_CAST_UNAVAILABLE);
    }
    set mediaCastUnavailable(value) {
      setStringAttr(this, MediaUIAttributes.MEDIA_CAST_UNAVAILABLE, value);
    }
    handleClick() {
      const eventName = this.mediaIsCasting ? MediaUIEvents.MEDIA_EXIT_CAST_REQUEST : MediaUIEvents.MEDIA_ENTER_CAST_REQUEST;
      this.dispatchEvent(
        new GlobalThis.CustomEvent(eventName, { composed: true, bubbles: true })
      );
    }
  };
  if (!GlobalThis.customElements.get("media-cast-button")) {
    GlobalThis.customElements.define("media-cast-button", MediaCastButton);
  }

  // ../../node_modules/media-chrome/dist/media-chrome-dialog.js
  var __accessCheck6 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet6 = (obj, member, getter) => {
    __accessCheck6(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd6 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet6 = (obj, member, value, setter) => {
    __accessCheck6(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var __privateMethod4 = (obj, member, method) => {
    __accessCheck6(obj, member, "access private method");
    return method;
  };
  var _isInit;
  var _previouslyFocused;
  var _invokerElement;
  var _init;
  var init_fn;
  var _handleOpen;
  var handleOpen_fn;
  var _handleClosed;
  var handleClosed_fn;
  var _handleInvoke;
  var handleInvoke_fn;
  var _handleFocusOut;
  var handleFocusOut_fn;
  var _handleKeyDown;
  var handleKeyDown_fn;
  function getTemplateHTML(_attrs) {
    return (
      /*html*/
      `
    <style>
      :host {
        font: var(--media-font,
          var(--media-font-weight, normal)
          var(--media-font-size, 14px) /
          var(--media-text-content-height, var(--media-control-height, 24px))
          var(--media-font-family, helvetica neue, segoe ui, roboto, arial, sans-serif));
        color: var(--media-text-color, var(--media-primary-color, rgb(238 238 238)));
        display: var(--media-dialog-display, inline-flex);
        justify-content: center;
        align-items: center;
        ${/** The hide transition is defined below after a short delay. */
      ""}
        transition-behavior: allow-discrete;
        visibility: hidden;
        opacity: 0;
        transform: translateY(2px) scale(.99);
        pointer-events: none;
      }

      :host([open]) {
        transition: display .2s, visibility 0s, opacity .2s ease-out, transform .15s ease-out;
        visibility: visible;
        opacity: 1;
        transform: translateY(0) scale(1);
        pointer-events: auto;
      }

      #content {
        display: flex;
        position: relative;
        box-sizing: border-box;
        width: min(320px, 100%);
        word-wrap: break-word;
        max-height: 100%;
        overflow: auto;
        text-align: center;
        line-height: 1.4;
      }
    </style>
    ${this.getSlotTemplateHTML(_attrs)}
  `
    );
  }
  function getSlotTemplateHTML(_attrs) {
    return (
      /*html*/
      `
    <slot id="content"></slot>
  `
    );
  }
  var Attributes4 = {
    OPEN: "open",
    ANCHOR: "anchor"
  };
  var MediaChromeDialog = class extends GlobalThis.HTMLElement {
    constructor() {
      super();
      __privateAdd6(this, _init);
      __privateAdd6(this, _handleOpen);
      __privateAdd6(this, _handleClosed);
      __privateAdd6(this, _handleInvoke);
      __privateAdd6(this, _handleFocusOut);
      __privateAdd6(this, _handleKeyDown);
      __privateAdd6(this, _isInit, false);
      __privateAdd6(this, _previouslyFocused, null);
      __privateAdd6(this, _invokerElement, null);
      this.addEventListener("invoke", this);
      this.addEventListener("focusout", this);
      this.addEventListener("keydown", this);
    }
    static get observedAttributes() {
      return [Attributes4.OPEN, Attributes4.ANCHOR];
    }
    get open() {
      return getBooleanAttr(this, Attributes4.OPEN);
    }
    set open(value) {
      setBooleanAttr(this, Attributes4.OPEN, value);
    }
    handleEvent(event) {
      switch (event.type) {
        case "invoke":
          __privateMethod4(this, _handleInvoke, handleInvoke_fn).call(this, event);
          break;
        case "focusout":
          __privateMethod4(this, _handleFocusOut, handleFocusOut_fn).call(this, event);
          break;
        case "keydown":
          __privateMethod4(this, _handleKeyDown, handleKeyDown_fn).call(this, event);
          break;
      }
    }
    connectedCallback() {
      __privateMethod4(this, _init, init_fn).call(this);
      if (!this.role) {
        this.role = "dialog";
      }
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      __privateMethod4(this, _init, init_fn).call(this);
      if (attrName === Attributes4.OPEN && newValue !== oldValue) {
        if (this.open) {
          __privateMethod4(this, _handleOpen, handleOpen_fn).call(this);
        } else {
          __privateMethod4(this, _handleClosed, handleClosed_fn).call(this);
        }
      }
    }
    focus() {
      __privateSet6(this, _previouslyFocused, getActiveElement());
      const focusCancelled = !this.dispatchEvent(new Event("focus", { composed: true, cancelable: true }));
      const focusInCancelled = !this.dispatchEvent(new Event("focusin", { composed: true, bubbles: true, cancelable: true }));
      if (focusCancelled || focusInCancelled)
        return;
      const focusable = this.querySelector(
        '[autofocus], [tabindex]:not([tabindex="-1"]), [role="menu"]'
      );
      focusable == null ? void 0 : focusable.focus();
    }
    get keysUsed() {
      return ["Escape", "Tab"];
    }
  };
  _isInit = /* @__PURE__ */ new WeakMap();
  _previouslyFocused = /* @__PURE__ */ new WeakMap();
  _invokerElement = /* @__PURE__ */ new WeakMap();
  _init = /* @__PURE__ */ new WeakSet();
  init_fn = function() {
    if (__privateGet6(this, _isInit))
      return;
    __privateSet6(this, _isInit, true);
    if (!this.shadowRoot) {
      this.attachShadow({ mode: "open" });
      const attrs = namedNodeMapToObject2(this.attributes);
      this.shadowRoot.innerHTML = /*html*/
      `
        ${this.constructor.getTemplateHTML(attrs)}
      `;
      queueMicrotask(() => {
        const { style } = getOrInsertCSSRule(this.shadowRoot, ":host");
        style.setProperty(
          "transition",
          `display .15s, visibility .15s, opacity .15s ease-in, transform .15s ease-in`
        );
      });
    }
  };
  _handleOpen = /* @__PURE__ */ new WeakSet();
  handleOpen_fn = function() {
    var _a3;
    (_a3 = __privateGet6(this, _invokerElement)) == null ? void 0 : _a3.setAttribute("aria-expanded", "true");
    this.dispatchEvent(new Event("open", { composed: true, bubbles: true }));
    this.addEventListener("transitionend", () => this.focus(), { once: true });
  };
  _handleClosed = /* @__PURE__ */ new WeakSet();
  handleClosed_fn = function() {
    var _a3;
    (_a3 = __privateGet6(this, _invokerElement)) == null ? void 0 : _a3.setAttribute("aria-expanded", "false");
    this.dispatchEvent(new Event("close", { composed: true, bubbles: true }));
  };
  _handleInvoke = /* @__PURE__ */ new WeakSet();
  handleInvoke_fn = function(event) {
    __privateSet6(this, _invokerElement, event.relatedTarget);
    if (!containsComposedNode(this, event.relatedTarget)) {
      this.open = !this.open;
    }
  };
  _handleFocusOut = /* @__PURE__ */ new WeakSet();
  handleFocusOut_fn = function(event) {
    var _a3;
    if (!containsComposedNode(this, event.relatedTarget)) {
      (_a3 = __privateGet6(this, _previouslyFocused)) == null ? void 0 : _a3.focus();
      if (__privateGet6(this, _invokerElement) && __privateGet6(this, _invokerElement) !== event.relatedTarget && this.open) {
        this.open = false;
      }
    }
  };
  _handleKeyDown = /* @__PURE__ */ new WeakSet();
  handleKeyDown_fn = function(event) {
    var _a3, _b2, _c, _d, _e;
    const { key, ctrlKey, altKey, metaKey } = event;
    if (ctrlKey || altKey || metaKey) {
      return;
    }
    if (!this.keysUsed.includes(key)) {
      return;
    }
    event.preventDefault();
    event.stopPropagation();
    if (key === "Tab") {
      if (event.shiftKey) {
        (_b2 = (_a3 = this.previousElementSibling) == null ? void 0 : _a3.focus) == null ? void 0 : _b2.call(_a3);
      } else {
        (_d = (_c = this.nextElementSibling) == null ? void 0 : _c.focus) == null ? void 0 : _d.call(_c);
      }
      this.blur();
    } else if (key === "Escape") {
      (_e = __privateGet6(this, _previouslyFocused)) == null ? void 0 : _e.focus();
      this.open = false;
    }
  };
  MediaChromeDialog.getTemplateHTML = getTemplateHTML;
  MediaChromeDialog.getSlotTemplateHTML = getSlotTemplateHTML;
  if (!GlobalThis.customElements.get("media-chrome-dialog")) {
    GlobalThis.customElements.define("media-chrome-dialog", MediaChromeDialog);
  }

  // ../../node_modules/media-chrome/dist/media-chrome-range.js
  var __accessCheck7 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet7 = (obj, member, getter) => {
    __accessCheck7(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd7 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet7 = (obj, member, value, setter) => {
    __accessCheck7(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var __privateMethod5 = (obj, member, method) => {
    __accessCheck7(obj, member, "access private method");
    return method;
  };
  var _mediaController3;
  var _isInputTarget;
  var _startpoint;
  var _endpoint;
  var _cssRules;
  var _segments;
  var _onFocusIn;
  var _onFocusOut;
  var _updateComputedStyles;
  var _updateActiveSegment;
  var updateActiveSegment_fn;
  var _enableUserEvents;
  var enableUserEvents_fn;
  var _disableUserEvents;
  var disableUserEvents_fn;
  var _handlePointerDown;
  var handlePointerDown_fn;
  var _handlePointerEnter;
  var handlePointerEnter_fn;
  var _handlePointerUp2;
  var handlePointerUp_fn2;
  var _handlePointerLeave;
  var handlePointerLeave_fn;
  var _handlePointerMove2;
  var handlePointerMove_fn2;
  var template4 = Document2.createElement("template");
  template4.innerHTML = /*html*/
  `
  <style>
    :host {
      --_focus-box-shadow: var(--media-focus-box-shadow, inset 0 0 0 2px rgb(27 127 204 / .9));
      --_media-range-padding: var(--media-range-padding, var(--media-control-padding, 10px));

      box-shadow: var(--_focus-visible-box-shadow, none);
      background: var(--media-control-background, var(--media-secondary-color, rgb(20 20 30 / .7)));
      height: calc(var(--media-control-height, 24px) + 2 * var(--_media-range-padding));
      display: inline-flex;
      align-items: center;
      ${/* Don't horizontal align w/ justify-content! #container can go negative on the x-axis w/ small width. */
  ""}
      vertical-align: middle;
      box-sizing: border-box;
      position: relative;
      width: 100px;
      transition: background .15s linear;
      cursor: var(--media-cursor, pointer);
      pointer-events: auto;
      touch-action: none; ${/* Prevent scrolling when dragging on mobile. */
  ""}
    }

    ${/* Reset before `outline` on track could be set by a CSS var */
  ""}
    input[type=range]:focus {
      outline: 0;
    }
    input[type=range]:focus::-webkit-slider-runnable-track {
      outline: 0;
    }

    :host(:hover) {
      background: var(--media-control-hover-background, rgb(50 50 70 / .7));
    }

    #leftgap {
      padding-left: var(--media-range-padding-left, var(--_media-range-padding));
    }

    #rightgap {
      padding-right: var(--media-range-padding-right, var(--_media-range-padding));
    }

    #startpoint,
    #endpoint {
      position: absolute;
    }

    #endpoint {
      right: 0;
    }

    #container {
      ${/* Not using the CSS `padding` prop makes it easier for slide open volume ranges so the width can be zero. */
  ""}
      width: var(--media-range-track-width, 100%);
      transform: translate(var(--media-range-track-translate-x, 0px), var(--media-range-track-translate-y, 0px));
      position: relative;
      height: 100%;
      display: flex;
      align-items: center;
      min-width: 40px;
    }

    #range {
      ${/* The input range acts as a hover and hit zone for input events. */
  ""}
      display: var(--media-time-range-hover-display, block);
      bottom: var(--media-time-range-hover-bottom, -7px);
      height: var(--media-time-range-hover-height, max(100% + 7px, 25px));
      width: 100%;
      position: absolute;
      cursor: var(--media-cursor, pointer);

      -webkit-appearance: none; ${/* Hides the slider so that custom slider can be made */
  ""}
      -webkit-tap-highlight-color: transparent;
      background: transparent; ${/* Otherwise white in Chrome */
  ""}
      margin: 0;
      z-index: 1;
    }

    @media (hover: hover) {
      #range {
        bottom: var(--media-time-range-hover-bottom, -5px);
        height: var(--media-time-range-hover-height, max(100% + 5px, 20px));
      }
    }

    ${/* Special styling for WebKit/Blink */
  ""}
    ${/* Make thumb width/height small so it has no effect on range click position. */
  ""}
    #range::-webkit-slider-thumb {
      -webkit-appearance: none;
      background: transparent;
      width: .1px;
      height: .1px;
    }

    ${/* The thumb is not positioned relative to the track in Firefox */
  ""}
    #range::-moz-range-thumb {
      background: transparent;
      border: transparent;
      width: .1px;
      height: .1px;
    }

    #appearance {
      height: var(--media-range-track-height, 4px);
      display: flex;
      flex-direction: column;
      justify-content: center;
      width: 100%;
      position: absolute;
      ${/* Required for Safari to stop glitching track height on hover */
  ""}
      will-change: transform;
    }

    #track {
      background: var(--media-range-track-background, rgb(255 255 255 / .2));
      border-radius: var(--media-range-track-border-radius, 1px);
      border: var(--media-range-track-border, none);
      outline: var(--media-range-track-outline);
      outline-offset: var(--media-range-track-outline-offset);
      backdrop-filter: var(--media-range-track-backdrop-filter);
      -webkit-backdrop-filter: var(--media-range-track-backdrop-filter);
      box-shadow: var(--media-range-track-box-shadow, none);
      position: absolute;
      width: 100%;
      height: 100%;
      overflow: hidden;
    }

    #progress,
    #pointer {
      position: absolute;
      height: 100%;
      will-change: width;
    }

    #progress {
      background: var(--media-range-bar-color, var(--media-primary-color, rgb(238 238 238)));
      transition: var(--media-range-track-transition);
    }

    #pointer {
      background: var(--media-range-track-pointer-background);
      border-right: var(--media-range-track-pointer-border-right);
      transition: visibility .25s, opacity .25s;
      visibility: hidden;
      opacity: 0;
    }

    @media (hover: hover) {
      :host(:hover) #pointer {
        transition: visibility .5s, opacity .5s;
        visibility: visible;
        opacity: 1;
      }
    }

    #thumb,
    ::slotted([slot=thumb]) {
      width: var(--media-range-thumb-width, 10px);
      height: var(--media-range-thumb-height, 10px);
      transition: var(--media-range-thumb-transition);
      transform: var(--media-range-thumb-transform, none);
      opacity: var(--media-range-thumb-opacity, 1);
      translate: -50%;
      position: absolute;
      left: 0;
      cursor: var(--media-cursor, pointer);
    }

    #thumb {
      border-radius: var(--media-range-thumb-border-radius, 10px);
      background: var(--media-range-thumb-background, var(--media-primary-color, rgb(238 238 238)));
      box-shadow: var(--media-range-thumb-box-shadow, 1px 1px 1px transparent);
      border: var(--media-range-thumb-border, none);
    }

    :host([disabled]) #thumb {
      background-color: #777;
    }

    .segments #appearance {
      height: var(--media-range-segment-hover-height, 7px);
    }

    #track {
      clip-path: url(#segments-clipping);
    }

    #segments {
      --segments-gap: var(--media-range-segments-gap, 2px);
      position: absolute;
      width: 100%;
      height: 100%;
    }

    #segments-clipping {
      transform: translateX(calc(var(--segments-gap) / 2));
    }

    #segments-clipping:empty {
      display: none;
    }

    #segments-clipping rect {
      height: var(--media-range-track-height, 4px);
      y: calc((var(--media-range-segment-hover-height, 7px) - var(--media-range-track-height, 4px)) / 2);
      transition: var(--media-range-segment-transition, transform .1s ease-in-out);
      transform: var(--media-range-segment-transform, scaleY(1));
      transform-origin: center;
    }
  </style>
  <div id="leftgap"></div>
  <div id="container">
    <div id="startpoint"></div>
    <div id="endpoint"></div>
    <div id="appearance">
      <div id="track" part="track">
        <div id="pointer"></div>
        <div id="progress" part="progress"></div>
      </div>
      <slot name="thumb">
        <div id="thumb" part="thumb"></div>
      </slot>
      <svg id="segments"><clipPath id="segments-clipping"></clipPath></svg>
    </div>
    <input id="range" type="range" min="0" max="1" step="any" value="0">
  </div>
  <div id="rightgap"></div>
`;
  var MediaChromeRange = class extends GlobalThis.HTMLElement {
    constructor() {
      super();
      __privateAdd7(this, _updateActiveSegment);
      __privateAdd7(this, _enableUserEvents);
      __privateAdd7(this, _disableUserEvents);
      __privateAdd7(this, _handlePointerDown);
      __privateAdd7(this, _handlePointerEnter);
      __privateAdd7(this, _handlePointerUp2);
      __privateAdd7(this, _handlePointerLeave);
      __privateAdd7(this, _handlePointerMove2);
      __privateAdd7(this, _mediaController3, void 0);
      __privateAdd7(this, _isInputTarget, void 0);
      __privateAdd7(this, _startpoint, void 0);
      __privateAdd7(this, _endpoint, void 0);
      __privateAdd7(this, _cssRules, {});
      __privateAdd7(this, _segments, []);
      __privateAdd7(this, _onFocusIn, () => {
        if (this.range.matches(":focus-visible")) {
          const { style } = getOrInsertCSSRule(this.shadowRoot, ":host");
          style.setProperty(
            "--_focus-visible-box-shadow",
            "var(--_focus-box-shadow)"
          );
        }
      });
      __privateAdd7(this, _onFocusOut, () => {
        const { style } = getOrInsertCSSRule(this.shadowRoot, ":host");
        style.removeProperty("--_focus-visible-box-shadow");
      });
      __privateAdd7(this, _updateComputedStyles, () => {
        const clipping = this.shadowRoot.querySelector("#segments-clipping");
        if (clipping)
          clipping.parentNode.append(clipping);
      });
      if (!this.shadowRoot) {
        this.attachShadow({ mode: "open" });
        this.shadowRoot.appendChild(template4.content.cloneNode(true));
      }
      this.container = this.shadowRoot.querySelector("#container");
      __privateSet7(this, _startpoint, this.shadowRoot.querySelector("#startpoint"));
      __privateSet7(this, _endpoint, this.shadowRoot.querySelector("#endpoint"));
      this.range = this.shadowRoot.querySelector("#range");
      this.appearance = this.shadowRoot.querySelector("#appearance");
    }
    static get observedAttributes() {
      return [
        "disabled",
        "aria-disabled",
        MediaStateReceiverAttributes.MEDIA_CONTROLLER
      ];
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      var _a3, _b2, _c, _d, _e;
      if (attrName === MediaStateReceiverAttributes.MEDIA_CONTROLLER) {
        if (oldValue) {
          (_b2 = (_a3 = __privateGet7(this, _mediaController3)) == null ? void 0 : _a3.unassociateElement) == null ? void 0 : _b2.call(_a3, this);
          __privateSet7(this, _mediaController3, null);
        }
        if (newValue && this.isConnected) {
          __privateSet7(this, _mediaController3, (_c = this.getRootNode()) == null ? void 0 : _c.getElementById(newValue));
          (_e = (_d = __privateGet7(this, _mediaController3)) == null ? void 0 : _d.associateElement) == null ? void 0 : _e.call(_d, this);
        }
      } else if (attrName === "disabled" || attrName === "aria-disabled" && oldValue !== newValue) {
        if (newValue == null) {
          this.range.removeAttribute(attrName);
          __privateMethod5(this, _enableUserEvents, enableUserEvents_fn).call(this);
        } else {
          this.range.setAttribute(attrName, newValue);
          __privateMethod5(this, _disableUserEvents, disableUserEvents_fn).call(this);
        }
      }
    }
    connectedCallback() {
      var _a3, _b2, _c;
      const { style } = getOrInsertCSSRule(this.shadowRoot, ":host");
      style.setProperty(
        "display",
        `var(--media-control-display, var(--${this.localName}-display, inline-flex))`
      );
      __privateGet7(this, _cssRules).pointer = getOrInsertCSSRule(this.shadowRoot, "#pointer");
      __privateGet7(this, _cssRules).progress = getOrInsertCSSRule(this.shadowRoot, "#progress");
      __privateGet7(this, _cssRules).thumb = getOrInsertCSSRule(
        this.shadowRoot,
        '#thumb, ::slotted([slot="thumb"])'
      );
      __privateGet7(this, _cssRules).activeSegment = getOrInsertCSSRule(
        this.shadowRoot,
        "#segments-clipping rect:nth-child(0)"
      );
      const mediaControllerId = this.getAttribute(
        MediaStateReceiverAttributes.MEDIA_CONTROLLER
      );
      if (mediaControllerId) {
        __privateSet7(this, _mediaController3, (_a3 = this.getRootNode()) == null ? void 0 : _a3.getElementById(
          mediaControllerId
        ));
        (_c = (_b2 = __privateGet7(this, _mediaController3)) == null ? void 0 : _b2.associateElement) == null ? void 0 : _c.call(_b2, this);
      }
      this.updateBar();
      this.shadowRoot.addEventListener("focusin", __privateGet7(this, _onFocusIn));
      this.shadowRoot.addEventListener("focusout", __privateGet7(this, _onFocusOut));
      __privateMethod5(this, _enableUserEvents, enableUserEvents_fn).call(this);
      observeResize(this.container, __privateGet7(this, _updateComputedStyles));
    }
    disconnectedCallback() {
      var _a3, _b2;
      __privateMethod5(this, _disableUserEvents, disableUserEvents_fn).call(this);
      (_b2 = (_a3 = __privateGet7(this, _mediaController3)) == null ? void 0 : _a3.unassociateElement) == null ? void 0 : _b2.call(_a3, this);
      __privateSet7(this, _mediaController3, null);
      this.shadowRoot.removeEventListener("focusin", __privateGet7(this, _onFocusIn));
      this.shadowRoot.removeEventListener("focusout", __privateGet7(this, _onFocusOut));
      unobserveResize(this.container, __privateGet7(this, _updateComputedStyles));
    }
    updatePointerBar(evt) {
      var _a3;
      (_a3 = __privateGet7(this, _cssRules).pointer) == null ? void 0 : _a3.style.setProperty(
        "width",
        `${this.getPointerRatio(evt) * 100}%`
      );
    }
    updateBar() {
      var _a3, _b2;
      const rangePercent = this.range.valueAsNumber * 100;
      (_a3 = __privateGet7(this, _cssRules).progress) == null ? void 0 : _a3.style.setProperty("width", `${rangePercent}%`);
      (_b2 = __privateGet7(this, _cssRules).thumb) == null ? void 0 : _b2.style.setProperty("left", `${rangePercent}%`);
    }
    updateSegments(segments) {
      const clipping = this.shadowRoot.querySelector("#segments-clipping");
      clipping.textContent = "";
      this.container.classList.toggle("segments", !!(segments == null ? void 0 : segments.length));
      if (!(segments == null ? void 0 : segments.length))
        return;
      const normalized = [
        .../* @__PURE__ */ new Set([
          +this.range.min,
          ...segments.flatMap((s) => [s.start, s.end]),
          +this.range.max
        ])
      ];
      __privateSet7(this, _segments, [...normalized]);
      const lastMarker = normalized.pop();
      for (const [i, marker] of normalized.entries()) {
        const [isFirst, isLast] = [i === 0, i === normalized.length - 1];
        const x = isFirst ? "calc(var(--segments-gap) / -1)" : `${marker * 100}%`;
        const x2 = isLast ? lastMarker : normalized[i + 1];
        const width = `calc(${(x2 - marker) * 100}%${isFirst || isLast ? "" : ` - var(--segments-gap)`})`;
        const segmentEl = Document2.createElementNS(
          "http://www.w3.org/2000/svg",
          "rect"
        );
        const cssRule = getOrInsertCSSRule(
          this.shadowRoot,
          `#segments-clipping rect:nth-child(${i + 1})`
        );
        cssRule.style.setProperty("x", x);
        cssRule.style.setProperty("width", width);
        clipping.append(segmentEl);
      }
    }
    getPointerRatio(evt) {
      return getPointProgressOnLine(
        evt.clientX,
        evt.clientY,
        __privateGet7(this, _startpoint).getBoundingClientRect(),
        __privateGet7(this, _endpoint).getBoundingClientRect()
      );
    }
    get dragging() {
      return this.hasAttribute("dragging");
    }
    handleEvent(evt) {
      switch (evt.type) {
        case "pointermove":
          __privateMethod5(this, _handlePointerMove2, handlePointerMove_fn2).call(this, evt);
          break;
        case "input":
          this.updateBar();
          break;
        case "pointerenter":
          __privateMethod5(this, _handlePointerEnter, handlePointerEnter_fn).call(this, evt);
          break;
        case "pointerdown":
          __privateMethod5(this, _handlePointerDown, handlePointerDown_fn).call(this, evt);
          break;
        case "pointerup":
          __privateMethod5(this, _handlePointerUp2, handlePointerUp_fn2).call(this);
          break;
        case "pointerleave":
          __privateMethod5(this, _handlePointerLeave, handlePointerLeave_fn).call(this);
          break;
      }
    }
    get keysUsed() {
      return ["ArrowUp", "ArrowRight", "ArrowDown", "ArrowLeft"];
    }
  };
  _mediaController3 = /* @__PURE__ */ new WeakMap();
  _isInputTarget = /* @__PURE__ */ new WeakMap();
  _startpoint = /* @__PURE__ */ new WeakMap();
  _endpoint = /* @__PURE__ */ new WeakMap();
  _cssRules = /* @__PURE__ */ new WeakMap();
  _segments = /* @__PURE__ */ new WeakMap();
  _onFocusIn = /* @__PURE__ */ new WeakMap();
  _onFocusOut = /* @__PURE__ */ new WeakMap();
  _updateComputedStyles = /* @__PURE__ */ new WeakMap();
  _updateActiveSegment = /* @__PURE__ */ new WeakSet();
  updateActiveSegment_fn = function(evt) {
    const rule = __privateGet7(this, _cssRules).activeSegment;
    if (!rule)
      return;
    const pointerRatio = this.getPointerRatio(evt);
    const segmentIndex = __privateGet7(this, _segments).findIndex((start, i, arr) => {
      const end = arr[i + 1];
      return end != null && pointerRatio >= start && pointerRatio <= end;
    });
    const selectorText = `#segments-clipping rect:nth-child(${segmentIndex + 1})`;
    if (rule.selectorText != selectorText || !rule.style.transform) {
      rule.selectorText = selectorText;
      rule.style.setProperty(
        "transform",
        "var(--media-range-segment-hover-transform, scaleY(2))"
      );
    }
  };
  _enableUserEvents = /* @__PURE__ */ new WeakSet();
  enableUserEvents_fn = function() {
    if (this.hasAttribute("disabled"))
      return;
    this.addEventListener("input", this);
    this.addEventListener("pointerdown", this);
    this.addEventListener("pointerenter", this);
  };
  _disableUserEvents = /* @__PURE__ */ new WeakSet();
  disableUserEvents_fn = function() {
    var _a3, _b2;
    this.removeEventListener("input", this);
    this.removeEventListener("pointerdown", this);
    this.removeEventListener("pointerenter", this);
    (_a3 = GlobalThis.window) == null ? void 0 : _a3.removeEventListener("pointerup", this);
    (_b2 = GlobalThis.window) == null ? void 0 : _b2.removeEventListener("pointermove", this);
  };
  _handlePointerDown = /* @__PURE__ */ new WeakSet();
  handlePointerDown_fn = function(evt) {
    var _a3;
    __privateSet7(this, _isInputTarget, evt.composedPath().includes(this.range));
    (_a3 = GlobalThis.window) == null ? void 0 : _a3.addEventListener("pointerup", this);
  };
  _handlePointerEnter = /* @__PURE__ */ new WeakSet();
  handlePointerEnter_fn = function(evt) {
    var _a3;
    if (evt.pointerType !== "mouse")
      __privateMethod5(this, _handlePointerDown, handlePointerDown_fn).call(this, evt);
    this.addEventListener("pointerleave", this);
    (_a3 = GlobalThis.window) == null ? void 0 : _a3.addEventListener("pointermove", this);
  };
  _handlePointerUp2 = /* @__PURE__ */ new WeakSet();
  handlePointerUp_fn2 = function() {
    var _a3;
    (_a3 = GlobalThis.window) == null ? void 0 : _a3.removeEventListener("pointerup", this);
    this.toggleAttribute("dragging", false);
    this.range.disabled = this.hasAttribute("disabled");
  };
  _handlePointerLeave = /* @__PURE__ */ new WeakSet();
  handlePointerLeave_fn = function() {
    var _a3, _b2;
    this.removeEventListener("pointerleave", this);
    (_a3 = GlobalThis.window) == null ? void 0 : _a3.removeEventListener("pointermove", this);
    this.toggleAttribute("dragging", false);
    this.range.disabled = this.hasAttribute("disabled");
    (_b2 = __privateGet7(this, _cssRules).activeSegment) == null ? void 0 : _b2.style.removeProperty("transform");
  };
  _handlePointerMove2 = /* @__PURE__ */ new WeakSet();
  handlePointerMove_fn2 = function(evt) {
    this.toggleAttribute(
      "dragging",
      evt.buttons === 1 || evt.pointerType !== "mouse"
    );
    this.updatePointerBar(evt);
    __privateMethod5(this, _updateActiveSegment, updateActiveSegment_fn).call(this, evt);
    if (this.dragging && (evt.pointerType !== "mouse" || !__privateGet7(this, _isInputTarget))) {
      this.range.disabled = true;
      this.range.valueAsNumber = this.getPointerRatio(evt);
      this.range.dispatchEvent(
        new Event("input", { bubbles: true, composed: true })
      );
    }
  };
  if (!GlobalThis.customElements.get("media-chrome-range")) {
    GlobalThis.customElements.define("media-chrome-range", MediaChromeRange);
  }

  // ../../node_modules/media-chrome/dist/media-control-bar.js
  var __accessCheck8 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet8 = (obj, member, getter) => {
    __accessCheck8(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd8 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet8 = (obj, member, value, setter) => {
    __accessCheck8(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var _mediaController4;
  var template5 = Document2.createElement("template");
  template5.innerHTML = /*html*/
  `
  <style>
    :host {
      ${/* Need position to display above video for some reason */
  ""}
      box-sizing: border-box;
      display: var(--media-control-display, var(--media-control-bar-display, inline-flex));
      color: var(--media-text-color, var(--media-primary-color, rgb(238 238 238)));
      --media-loading-indicator-icon-height: 44px;
    }

    ::slotted(media-time-range),
    ::slotted(media-volume-range) {
      min-height: 100%;
    }

    ::slotted(media-time-range),
    ::slotted(media-clip-selector) {
      flex-grow: 1;
    }

    ::slotted([role="menu"]) {
      position: absolute;
    }
  </style>

  <slot></slot>
`;
  var MediaControlBar = class extends GlobalThis.HTMLElement {
    constructor() {
      super();
      __privateAdd8(this, _mediaController4, void 0);
      if (!this.shadowRoot) {
        this.attachShadow({ mode: "open" });
        this.shadowRoot.appendChild(template5.content.cloneNode(true));
      }
    }
    static get observedAttributes() {
      return [MediaStateReceiverAttributes.MEDIA_CONTROLLER];
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      var _a3, _b2, _c, _d, _e;
      if (attrName === MediaStateReceiverAttributes.MEDIA_CONTROLLER) {
        if (oldValue) {
          (_b2 = (_a3 = __privateGet8(this, _mediaController4)) == null ? void 0 : _a3.unassociateElement) == null ? void 0 : _b2.call(_a3, this);
          __privateSet8(this, _mediaController4, null);
        }
        if (newValue && this.isConnected) {
          __privateSet8(this, _mediaController4, (_c = this.getRootNode()) == null ? void 0 : _c.getElementById(newValue));
          (_e = (_d = __privateGet8(this, _mediaController4)) == null ? void 0 : _d.associateElement) == null ? void 0 : _e.call(_d, this);
        }
      }
    }
    connectedCallback() {
      var _a3, _b2, _c;
      const mediaControllerId = this.getAttribute(
        MediaStateReceiverAttributes.MEDIA_CONTROLLER
      );
      if (mediaControllerId) {
        __privateSet8(this, _mediaController4, (_a3 = this.getRootNode()) == null ? void 0 : _a3.getElementById(
          mediaControllerId
        ));
        (_c = (_b2 = __privateGet8(this, _mediaController4)) == null ? void 0 : _b2.associateElement) == null ? void 0 : _c.call(_b2, this);
      }
    }
    disconnectedCallback() {
      var _a3, _b2;
      (_b2 = (_a3 = __privateGet8(this, _mediaController4)) == null ? void 0 : _a3.unassociateElement) == null ? void 0 : _b2.call(_a3, this);
      __privateSet8(this, _mediaController4, null);
    }
  };
  _mediaController4 = /* @__PURE__ */ new WeakMap();
  if (!GlobalThis.customElements.get("media-control-bar")) {
    GlobalThis.customElements.define("media-control-bar", MediaControlBar);
  }

  // ../../node_modules/media-chrome/dist/media-text-display.js
  var __accessCheck9 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet9 = (obj, member, getter) => {
    __accessCheck9(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd9 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet9 = (obj, member, value, setter) => {
    __accessCheck9(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var _mediaController5;
  var template6 = Document2.createElement("template");
  template6.innerHTML = /*html*/
  `
  <style>
    :host {
      font: var(--media-font,
        var(--media-font-weight, normal)
        var(--media-font-size, 14px) /
        var(--media-text-content-height, var(--media-control-height, 24px))
        var(--media-font-family, helvetica neue, segoe ui, roboto, arial, sans-serif));
      color: var(--media-text-color, var(--media-primary-color, rgb(238 238 238)));
      background: var(--media-text-background, var(--media-control-background, var(--media-secondary-color, rgb(20 20 30 / .7))));
      padding: var(--media-control-padding, 10px);
      display: inline-flex;
      justify-content: center;
      align-items: center;
      vertical-align: middle;
      box-sizing: border-box;
      text-align: center;
      pointer-events: auto;
    }

    ${/*
    Only show outline when keyboard focusing.
    https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo
  */
  ""}
    :host(:focus-visible) {
      box-shadow: inset 0 0 0 2px rgb(27 127 204 / .9);
      outline: 0;
    }

    ${/*
  * hide default focus ring, particularly when using mouse
  */
  ""}
    :host(:where(:focus)) {
      box-shadow: none;
      outline: 0;
    }
  </style>
  <slot></slot>
`;
  var MediaTextDisplay = class extends GlobalThis.HTMLElement {
    constructor() {
      super();
      __privateAdd9(this, _mediaController5, void 0);
      if (!this.shadowRoot) {
        this.attachShadow({ mode: "open" });
        this.shadowRoot.appendChild(template6.content.cloneNode(true));
      }
    }
    static get observedAttributes() {
      return [MediaStateReceiverAttributes.MEDIA_CONTROLLER];
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      var _a3, _b2, _c, _d, _e;
      if (attrName === MediaStateReceiverAttributes.MEDIA_CONTROLLER) {
        if (oldValue) {
          (_b2 = (_a3 = __privateGet9(this, _mediaController5)) == null ? void 0 : _a3.unassociateElement) == null ? void 0 : _b2.call(_a3, this);
          __privateSet9(this, _mediaController5, null);
        }
        if (newValue && this.isConnected) {
          __privateSet9(this, _mediaController5, (_c = this.getRootNode()) == null ? void 0 : _c.getElementById(newValue));
          (_e = (_d = __privateGet9(this, _mediaController5)) == null ? void 0 : _d.associateElement) == null ? void 0 : _e.call(_d, this);
        }
      }
    }
    connectedCallback() {
      var _a3, _b2, _c;
      const { style } = getOrInsertCSSRule(this.shadowRoot, ":host");
      style.setProperty(
        "display",
        `var(--media-control-display, var(--${this.localName}-display, inline-flex))`
      );
      const mediaControllerId = this.getAttribute(
        MediaStateReceiverAttributes.MEDIA_CONTROLLER
      );
      if (mediaControllerId) {
        __privateSet9(this, _mediaController5, (_a3 = this.getRootNode()) == null ? void 0 : _a3.getElementById(
          mediaControllerId
        ));
        (_c = (_b2 = __privateGet9(this, _mediaController5)) == null ? void 0 : _b2.associateElement) == null ? void 0 : _c.call(_b2, this);
      }
    }
    disconnectedCallback() {
      var _a3, _b2;
      (_b2 = (_a3 = __privateGet9(this, _mediaController5)) == null ? void 0 : _a3.unassociateElement) == null ? void 0 : _b2.call(_a3, this);
      __privateSet9(this, _mediaController5, null);
    }
  };
  _mediaController5 = /* @__PURE__ */ new WeakMap();
  if (!GlobalThis.customElements.get("media-text-display")) {
    GlobalThis.customElements.define("media-text-display", MediaTextDisplay);
  }

  // ../../node_modules/media-chrome/dist/media-duration-display.js
  var __accessCheck10 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet10 = (obj, member, getter) => {
    __accessCheck10(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd10 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet10 = (obj, member, value, setter) => {
    __accessCheck10(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var _slot;
  var MediaDurationDisplay = class extends MediaTextDisplay {
    constructor() {
      super();
      __privateAdd10(this, _slot, void 0);
      __privateSet10(this, _slot, this.shadowRoot.querySelector("slot"));
      __privateGet10(this, _slot).textContent = formatTime(0);
    }
    static get observedAttributes() {
      return [...super.observedAttributes, MediaUIAttributes.MEDIA_DURATION];
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      if (attrName === MediaUIAttributes.MEDIA_DURATION) {
        __privateGet10(this, _slot).textContent = formatTime(+newValue);
      }
      super.attributeChangedCallback(attrName, oldValue, newValue);
    }
    /**
     * @type {number | undefined} In seconds
     */
    get mediaDuration() {
      return getNumericAttr(this, MediaUIAttributes.MEDIA_DURATION);
    }
    set mediaDuration(time) {
      setNumericAttr(this, MediaUIAttributes.MEDIA_DURATION, time);
    }
  };
  _slot = /* @__PURE__ */ new WeakMap();
  if (!GlobalThis.customElements.get("media-duration-display")) {
    GlobalThis.customElements.define(
      "media-duration-display",
      MediaDurationDisplay
    );
  }

  // ../../node_modules/media-chrome/dist/labels/labels.js
  var defaultErrorTitles = {
    2: t("Network Error"),
    3: t("Decode Error"),
    4: t("Source Not Supported"),
    5: t("Encryption Error")
  };
  var defaultErrorMessages = {
    2: t("A network error caused the media download to fail."),
    3: t(
      "A media error caused playback to be aborted. The media could be corrupt or your browser does not support this format."
    ),
    4: t(
      "An unsupported error occurred. The server or network failed, or your browser does not support this format."
    ),
    5: t("The media is encrypted and there are no keys to decrypt it.")
  };
  var formatError = (error) => {
    var _a3, _b2;
    if (error.code === 1)
      return null;
    return {
      title: (_a3 = defaultErrorTitles[error.code]) != null ? _a3 : `Error ${error.code}`,
      message: (_b2 = defaultErrorMessages[error.code]) != null ? _b2 : error.message
    };
  };

  // ../../node_modules/media-chrome/dist/media-error-dialog.js
  var __accessCheck11 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet11 = (obj, member, getter) => {
    __accessCheck11(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd11 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet11 = (obj, member, value, setter) => {
    __accessCheck11(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var _mediaError;
  function getSlotTemplateHTML2(attrs) {
    return (
      /*html*/
      `
    <style>
      :host {
        background: rgb(20 20 30 / .8);
      }

      #content {
        display: block;
        padding: 1.2em 1.5em;
      }

      h3,
      p {
        margin-block: 0 .3em;
      }
    </style>
    <slot name="error-${attrs.mediaerrorcode}" id="content">
      ${formatErrorMessage({ code: +attrs.mediaerrorcode, message: attrs.mediaerrormessage })}
    </slot>
  `
    );
  }
  function shouldOpenErrorDialog(error) {
    return error.code && formatError(error) !== null;
  }
  function formatErrorMessage(error) {
    var _a3;
    const { title, message } = (_a3 = formatError(error)) != null ? _a3 : {};
    let html = "";
    if (title)
      html += `<slot name="error-${error.code}-title"><h3>${title}</h3></slot>`;
    if (message)
      html += `<slot name="error-${error.code}-message"><p>${message}</p></slot>`;
    return html;
  }
  var observedAttributes = [
    MediaUIAttributes.MEDIA_ERROR_CODE,
    MediaUIAttributes.MEDIA_ERROR_MESSAGE
  ];
  var MediaErrorDialog = class extends MediaChromeDialog {
    constructor() {
      super(...arguments);
      __privateAdd11(this, _mediaError, null);
    }
    static get observedAttributes() {
      return [...super.observedAttributes, ...observedAttributes];
    }
    formatErrorMessage(error) {
      return this.constructor.formatErrorMessage(error);
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      var _a3;
      super.attributeChangedCallback(attrName, oldValue, newValue);
      if (!observedAttributes.includes(attrName))
        return;
      const mediaError = (_a3 = this.mediaError) != null ? _a3 : {
        code: this.mediaErrorCode,
        message: this.mediaErrorMessage
      };
      this.open = shouldOpenErrorDialog(mediaError);
      if (this.open) {
        this.shadowRoot.querySelector("slot").name = `error-${this.mediaErrorCode}`;
        this.shadowRoot.querySelector("#content").innerHTML = this.formatErrorMessage(mediaError);
      }
    }
    get mediaError() {
      return __privateGet11(this, _mediaError);
    }
    set mediaError(value) {
      __privateSet11(this, _mediaError, value);
    }
    get mediaErrorCode() {
      return getNumericAttr(this, "mediaerrorcode");
    }
    set mediaErrorCode(value) {
      setNumericAttr(this, "mediaerrorcode", value);
    }
    get mediaErrorMessage() {
      return getStringAttr(this, "mediaerrormessage");
    }
    set mediaErrorMessage(value) {
      setStringAttr(this, "mediaerrormessage", value);
    }
  };
  _mediaError = /* @__PURE__ */ new WeakMap();
  MediaErrorDialog.getSlotTemplateHTML = getSlotTemplateHTML2;
  MediaErrorDialog.formatErrorMessage = formatErrorMessage;
  if (!GlobalThis.customElements.get("media-error-dialog")) {
    GlobalThis.customElements.define("media-error-dialog", MediaErrorDialog);
  }

  // ../../node_modules/media-chrome/dist/media-fullscreen-button.js
  var enterFullscreenIcon = `<svg aria-hidden="true" viewBox="0 0 26 24">
  <path d="M16 3v2.5h3.5V9H22V3h-6ZM4 9h2.5V5.5H10V3H4v6Zm15.5 9.5H16V21h6v-6h-2.5v3.5ZM6.5 15H4v6h6v-2.5H6.5V15Z"/>
</svg>`;
  var exitFullscreenIcon = `<svg aria-hidden="true" viewBox="0 0 26 24">
  <path d="M18.5 6.5V3H16v6h6V6.5h-3.5ZM16 21h2.5v-3.5H22V15h-6v6ZM4 17.5h3.5V21H10v-6H4v2.5Zm3.5-11H4V9h6V3H7.5v3.5Z"/>
</svg>`;
  var slotTemplate4 = Document2.createElement("template");
  slotTemplate4.innerHTML = /*html*/
  `
  <style>
    :host([${MediaUIAttributes.MEDIA_IS_FULLSCREEN}]) slot[name=icon] slot:not([name=exit]) {
      display: none !important;
    }

    ${/* Double negative, but safer if display doesn't equal 'block' */
  ""}
    :host(:not([${MediaUIAttributes.MEDIA_IS_FULLSCREEN}])) slot[name=icon] slot:not([name=enter]) {
      display: none !important;
    }

    :host([${MediaUIAttributes.MEDIA_IS_FULLSCREEN}]) slot[name=tooltip-enter],
    :host(:not([${MediaUIAttributes.MEDIA_IS_FULLSCREEN}])) slot[name=tooltip-exit] {
      display: none;
    }
  </style>

  <slot name="icon">
    <slot name="enter">${enterFullscreenIcon}</slot>
    <slot name="exit">${exitFullscreenIcon}</slot>
  </slot>
`;
  var tooltipContent4 = (
    /*html*/
    `
  <slot name="tooltip-enter">${t("Enter fullscreen mode")}</slot>
  <slot name="tooltip-exit">${t("Exit fullscreen mode")}</slot>
`
  );
  var updateAriaLabel3 = (el) => {
    const label = el.mediaIsFullscreen ? t("exit fullscreen mode") : t("enter fullscreen mode");
    el.setAttribute("aria-label", label);
  };
  var MediaFullscreenButton = class extends MediaChromeButton {
    static get observedAttributes() {
      return [
        ...super.observedAttributes,
        MediaUIAttributes.MEDIA_IS_FULLSCREEN,
        MediaUIAttributes.MEDIA_FULLSCREEN_UNAVAILABLE
      ];
    }
    constructor(options = {}) {
      super({ slotTemplate: slotTemplate4, tooltipContent: tooltipContent4, ...options });
    }
    connectedCallback() {
      super.connectedCallback();
      updateAriaLabel3(this);
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      super.attributeChangedCallback(attrName, oldValue, newValue);
      if (attrName === MediaUIAttributes.MEDIA_IS_FULLSCREEN) {
        updateAriaLabel3(this);
      }
    }
    /**
     * @type {string | undefined} Fullscreen unavailability state
     */
    get mediaFullscreenUnavailable() {
      return getStringAttr(this, MediaUIAttributes.MEDIA_FULLSCREEN_UNAVAILABLE);
    }
    set mediaFullscreenUnavailable(value) {
      setStringAttr(this, MediaUIAttributes.MEDIA_FULLSCREEN_UNAVAILABLE, value);
    }
    /**
     * @type {boolean} Whether fullscreen is available
     */
    get mediaIsFullscreen() {
      return getBooleanAttr(this, MediaUIAttributes.MEDIA_IS_FULLSCREEN);
    }
    set mediaIsFullscreen(value) {
      setBooleanAttr(this, MediaUIAttributes.MEDIA_IS_FULLSCREEN, value);
    }
    handleClick() {
      const eventName = this.mediaIsFullscreen ? MediaUIEvents.MEDIA_EXIT_FULLSCREEN_REQUEST : MediaUIEvents.MEDIA_ENTER_FULLSCREEN_REQUEST;
      this.dispatchEvent(
        new GlobalThis.CustomEvent(eventName, { composed: true, bubbles: true })
      );
    }
  };
  if (!GlobalThis.customElements.get("media-fullscreen-button")) {
    GlobalThis.customElements.define(
      "media-fullscreen-button",
      MediaFullscreenButton
    );
  }

  // ../../node_modules/media-chrome/dist/media-live-button.js
  var { MEDIA_TIME_IS_LIVE, MEDIA_PAUSED } = MediaUIAttributes;
  var { MEDIA_SEEK_TO_LIVE_REQUEST, MEDIA_PLAY_REQUEST } = MediaUIEvents;
  var indicatorSVG = '<svg viewBox="0 0 6 12"><circle cx="3" cy="6" r="2"></circle></svg>';
  var slotTemplate5 = Document2.createElement("template");
  slotTemplate5.innerHTML = /*html*/
  `
  <style>
  :host { --media-tooltip-display: none; }
  
  slot[name=indicator] > *,
  :host ::slotted([slot=indicator]) {
    ${/* Override styles for icon-only buttons */
  ""}
    min-width: auto;
    fill: var(--media-live-button-icon-color, rgb(140, 140, 140));
    color: var(--media-live-button-icon-color, rgb(140, 140, 140));
  }

  :host([${MEDIA_TIME_IS_LIVE}]:not([${MEDIA_PAUSED}])) slot[name=indicator] > *,
  :host([${MEDIA_TIME_IS_LIVE}]:not([${MEDIA_PAUSED}])) ::slotted([slot=indicator]) {
    fill: var(--media-live-button-indicator-color, rgb(255, 0, 0));
    color: var(--media-live-button-indicator-color, rgb(255, 0, 0));
  }

  :host([${MEDIA_TIME_IS_LIVE}]:not([${MEDIA_PAUSED}])) {
    cursor: var(--media-cursor, not-allowed);
  }

  slot[name=text]{
    text-transform: uppercase;
  }

  </style>

  <slot name="indicator">${indicatorSVG}</slot>
  ${/*
    A new line between spacer and text creates inconsistent spacing
    between slotted items and default slots.
  */
  ""}
  <slot name="spacer">&nbsp;</slot><slot name="text">${t("live")}</slot>
`;
  var updateAriaAttributes = (el) => {
    const isPausedOrNotLive = el.mediaPaused || !el.mediaTimeIsLive;
    const label = isPausedOrNotLive ? t("seek to live") : t("playing live");
    el.setAttribute("aria-label", label);
    isPausedOrNotLive ? el.removeAttribute("aria-disabled") : el.setAttribute("aria-disabled", "true");
  };
  var MediaLiveButton = class extends MediaChromeButton {
    static get observedAttributes() {
      return [...super.observedAttributes, MEDIA_PAUSED, MEDIA_TIME_IS_LIVE];
    }
    constructor(options = {}) {
      super({ slotTemplate: slotTemplate5, ...options });
    }
    connectedCallback() {
      updateAriaAttributes(this);
      super.connectedCallback();
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      super.attributeChangedCallback(attrName, oldValue, newValue);
      updateAriaAttributes(this);
    }
    /**
     * @type {boolean} Is the media paused
     */
    get mediaPaused() {
      return getBooleanAttr(this, MediaUIAttributes.MEDIA_PAUSED);
    }
    set mediaPaused(value) {
      setBooleanAttr(this, MediaUIAttributes.MEDIA_PAUSED, value);
    }
    /**
     * @type {boolean} Is the media playback currently live
     */
    get mediaTimeIsLive() {
      return getBooleanAttr(this, MediaUIAttributes.MEDIA_TIME_IS_LIVE);
    }
    set mediaTimeIsLive(value) {
      setBooleanAttr(this, MediaUIAttributes.MEDIA_TIME_IS_LIVE, value);
    }
    handleClick() {
      if (!this.mediaPaused && this.mediaTimeIsLive)
        return;
      this.dispatchEvent(
        new GlobalThis.CustomEvent(MEDIA_SEEK_TO_LIVE_REQUEST, {
          composed: true,
          bubbles: true
        })
      );
      if (this.hasAttribute(MEDIA_PAUSED)) {
        this.dispatchEvent(
          new GlobalThis.CustomEvent(MEDIA_PLAY_REQUEST, {
            composed: true,
            bubbles: true
          })
        );
      }
    }
  };
  if (!GlobalThis.customElements.get("media-live-button")) {
    GlobalThis.customElements.define("media-live-button", MediaLiveButton);
  }

  // ../../node_modules/media-chrome/dist/media-loading-indicator.js
  var __accessCheck12 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet12 = (obj, member, getter) => {
    __accessCheck12(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd12 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet12 = (obj, member, value, setter) => {
    __accessCheck12(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var _mediaController6;
  var _delay;
  var Attributes5 = {
    LOADING_DELAY: "loadingdelay",
    NO_AUTOHIDE: "noautohide"
  };
  var DEFAULT_LOADING_DELAY = 500;
  var template7 = Document2.createElement("template");
  var loadingIndicatorIcon = `
<svg aria-hidden="true" viewBox="0 0 100 100">
  <path d="M73,50c0-12.7-10.3-23-23-23S27,37.3,27,50 M30.9,50c0-10.5,8.5-19.1,19.1-19.1S69.1,39.5,69.1,50">
    <animateTransform
       attributeName="transform"
       attributeType="XML"
       type="rotate"
       dur="1s"
       from="0 50 50"
       to="360 50 50"
       repeatCount="indefinite" />
  </path>
</svg>
`;
  template7.innerHTML = /*html*/
  `
<style>
:host {
  display: var(--media-control-display, var(--media-loading-indicator-display, inline-block));
  vertical-align: middle;
  box-sizing: border-box;
  --_loading-indicator-delay: var(--media-loading-indicator-transition-delay, ${DEFAULT_LOADING_DELAY}ms);
}

#status {
  color: rgba(0,0,0,0);
  width: 0px;
  height: 0px;
}

:host slot[name=icon] > *,
:host ::slotted([slot=icon]) {
  opacity: var(--media-loading-indicator-opacity, 0);
  transition: opacity 0.15s;
}

:host([${MediaUIAttributes.MEDIA_LOADING}]:not([${MediaUIAttributes.MEDIA_PAUSED}])) slot[name=icon] > *,
:host([${MediaUIAttributes.MEDIA_LOADING}]:not([${MediaUIAttributes.MEDIA_PAUSED}])) ::slotted([slot=icon]) {
  opacity: var(--media-loading-indicator-opacity, 1);
  transition: opacity 0.15s var(--_loading-indicator-delay);
}

:host #status {
  visibility: var(--media-loading-indicator-opacity, hidden);
  transition: visibility 0.15s;
}

:host([${MediaUIAttributes.MEDIA_LOADING}]:not([${MediaUIAttributes.MEDIA_PAUSED}])) #status {
  visibility: var(--media-loading-indicator-opacity, visible);
  transition: visibility 0.15s var(--_loading-indicator-delay);
}

svg, img, ::slotted(svg), ::slotted(img) {
  width: var(--media-loading-indicator-icon-width);
  height: var(--media-loading-indicator-icon-height, 100px);
  fill: var(--media-icon-color, var(--media-primary-color, rgb(238 238 238)));
  vertical-align: middle;
}
</style>

<slot name="icon">${loadingIndicatorIcon}</slot>
<div id="status" role="status" aria-live="polite">${t("media loading")}</div>
`;
  var MediaLoadingIndicator = class extends GlobalThis.HTMLElement {
    constructor() {
      super();
      __privateAdd12(this, _mediaController6, void 0);
      __privateAdd12(this, _delay, DEFAULT_LOADING_DELAY);
      if (!this.shadowRoot) {
        const shadow = this.attachShadow({ mode: "open" });
        const indicatorHTML = template7.content.cloneNode(true);
        shadow.appendChild(indicatorHTML);
      }
    }
    static get observedAttributes() {
      return [
        MediaStateReceiverAttributes.MEDIA_CONTROLLER,
        MediaUIAttributes.MEDIA_PAUSED,
        MediaUIAttributes.MEDIA_LOADING,
        Attributes5.LOADING_DELAY
      ];
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      var _a3, _b2, _c, _d, _e;
      if (attrName === Attributes5.LOADING_DELAY && oldValue !== newValue) {
        this.loadingDelay = Number(newValue);
      } else if (attrName === MediaStateReceiverAttributes.MEDIA_CONTROLLER) {
        if (oldValue) {
          (_b2 = (_a3 = __privateGet12(this, _mediaController6)) == null ? void 0 : _a3.unassociateElement) == null ? void 0 : _b2.call(_a3, this);
          __privateSet12(this, _mediaController6, null);
        }
        if (newValue && this.isConnected) {
          __privateSet12(this, _mediaController6, (_c = this.getRootNode()) == null ? void 0 : _c.getElementById(newValue));
          (_e = (_d = __privateGet12(this, _mediaController6)) == null ? void 0 : _d.associateElement) == null ? void 0 : _e.call(_d, this);
        }
      }
    }
    connectedCallback() {
      var _a3, _b2, _c;
      const mediaControllerId = this.getAttribute(
        MediaStateReceiverAttributes.MEDIA_CONTROLLER
      );
      if (mediaControllerId) {
        __privateSet12(this, _mediaController6, (_a3 = this.getRootNode()) == null ? void 0 : _a3.getElementById(
          mediaControllerId
        ));
        (_c = (_b2 = __privateGet12(this, _mediaController6)) == null ? void 0 : _b2.associateElement) == null ? void 0 : _c.call(_b2, this);
      }
    }
    disconnectedCallback() {
      var _a3, _b2;
      (_b2 = (_a3 = __privateGet12(this, _mediaController6)) == null ? void 0 : _a3.unassociateElement) == null ? void 0 : _b2.call(_a3, this);
      __privateSet12(this, _mediaController6, null);
    }
    /**
     * Delay in ms
     */
    get loadingDelay() {
      return __privateGet12(this, _delay);
    }
    set loadingDelay(delay2) {
      __privateSet12(this, _delay, delay2);
      const { style } = getOrInsertCSSRule(this.shadowRoot, ":host");
      style.setProperty(
        "--_loading-indicator-delay",
        `var(--media-loading-indicator-transition-delay, ${delay2}ms)`
      );
    }
    /**
     * Is the media paused
     */
    get mediaPaused() {
      return getBooleanAttr(this, MediaUIAttributes.MEDIA_PAUSED);
    }
    set mediaPaused(value) {
      setBooleanAttr(this, MediaUIAttributes.MEDIA_PAUSED, value);
    }
    /**
     * Is the media loading
     */
    get mediaLoading() {
      return getBooleanAttr(this, MediaUIAttributes.MEDIA_LOADING);
    }
    set mediaLoading(value) {
      setBooleanAttr(this, MediaUIAttributes.MEDIA_LOADING, value);
    }
    get mediaController() {
      return getStringAttr(this, MediaStateReceiverAttributes.MEDIA_CONTROLLER);
    }
    set mediaController(value) {
      setStringAttr(this, MediaStateReceiverAttributes.MEDIA_CONTROLLER, value);
    }
    get noAutohide() {
      return getBooleanAttr(this, Attributes5.NO_AUTOHIDE);
    }
    set noAutohide(value) {
      setBooleanAttr(this, Attributes5.NO_AUTOHIDE, value);
    }
  };
  _mediaController6 = /* @__PURE__ */ new WeakMap();
  _delay = /* @__PURE__ */ new WeakMap();
  if (!GlobalThis.customElements.get("media-loading-indicator")) {
    GlobalThis.customElements.define(
      "media-loading-indicator",
      MediaLoadingIndicator
    );
  }

  // ../../node_modules/media-chrome/dist/media-mute-button.js
  var { MEDIA_VOLUME_LEVEL } = MediaUIAttributes;
  var offIcon = `<svg aria-hidden="true" viewBox="0 0 24 24">
  <path d="M16.5 12A4.5 4.5 0 0 0 14 8v2.18l2.45 2.45a4.22 4.22 0 0 0 .05-.63Zm2.5 0a6.84 6.84 0 0 1-.54 2.64L20 16.15A8.8 8.8 0 0 0 21 12a9 9 0 0 0-7-8.77v2.06A7 7 0 0 1 19 12ZM4.27 3 3 4.27 7.73 9H3v6h4l5 5v-6.73l4.25 4.25A6.92 6.92 0 0 1 14 18.7v2.06A9 9 0 0 0 17.69 19l2 2.05L21 19.73l-9-9L4.27 3ZM12 4 9.91 6.09 12 8.18V4Z"/>
</svg>`;
  var lowIcon = `<svg aria-hidden="true" viewBox="0 0 24 24">
  <path d="M3 9v6h4l5 5V4L7 9H3Zm13.5 3A4.5 4.5 0 0 0 14 8v8a4.47 4.47 0 0 0 2.5-4Z"/>
</svg>`;
  var highIcon = `<svg aria-hidden="true" viewBox="0 0 24 24">
  <path d="M3 9v6h4l5 5V4L7 9H3Zm13.5 3A4.5 4.5 0 0 0 14 8v8a4.47 4.47 0 0 0 2.5-4ZM14 3.23v2.06a7 7 0 0 1 0 13.42v2.06a9 9 0 0 0 0-17.54Z"/>
</svg>`;
  var slotTemplate6 = Document2.createElement("template");
  slotTemplate6.innerHTML = /*html*/
  `
  <style>
  ${/* Default to High slot/icon. */
  ""}
  :host(:not([${MEDIA_VOLUME_LEVEL}])) slot[name=icon] slot:not([name=high]), 
  :host([${MEDIA_VOLUME_LEVEL}=high]) slot[name=icon] slot:not([name=high]) {
    display: none !important;
  }

  :host([${MEDIA_VOLUME_LEVEL}=off]) slot[name=icon] slot:not([name=off]) {
    display: none !important;
  }

  :host([${MEDIA_VOLUME_LEVEL}=low]) slot[name=icon] slot:not([name=low]) {
    display: none !important;
  }

  :host([${MEDIA_VOLUME_LEVEL}=medium]) slot[name=icon] slot:not([name=medium]) {
    display: none !important;
  }

  :host(:not([${MEDIA_VOLUME_LEVEL}=off])) slot[name=tooltip-unmute],
  :host([${MEDIA_VOLUME_LEVEL}=off]) slot[name=tooltip-mute] {
    display: none;
  }
  </style>

  <slot name="icon">
    <slot name="off">${offIcon}</slot>
    <slot name="low">${lowIcon}</slot>
    <slot name="medium">${lowIcon}</slot>
    <slot name="high">${highIcon}</slot>
  </slot>
`;
  var tooltipContent5 = (
    /*html*/
    `
  <slot name="tooltip-mute">${t("Mute")}</slot>
  <slot name="tooltip-unmute">${t("Unmute")}</slot>
`
  );
  var updateAriaLabel4 = (el) => {
    const muted = el.mediaVolumeLevel === "off";
    const label = muted ? t("unmute") : t("mute");
    el.setAttribute("aria-label", label);
  };
  var MediaMuteButton = class extends MediaChromeButton {
    static get observedAttributes() {
      return [...super.observedAttributes, MediaUIAttributes.MEDIA_VOLUME_LEVEL];
    }
    constructor(options = {}) {
      super({ slotTemplate: slotTemplate6, tooltipContent: tooltipContent5, ...options });
    }
    connectedCallback() {
      updateAriaLabel4(this);
      super.connectedCallback();
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      if (attrName === MediaUIAttributes.MEDIA_VOLUME_LEVEL) {
        updateAriaLabel4(this);
      }
      super.attributeChangedCallback(attrName, oldValue, newValue);
    }
    /**
     * @type {string | undefined}
     */
    get mediaVolumeLevel() {
      return getStringAttr(this, MediaUIAttributes.MEDIA_VOLUME_LEVEL);
    }
    set mediaVolumeLevel(value) {
      setStringAttr(this, MediaUIAttributes.MEDIA_VOLUME_LEVEL, value);
    }
    handleClick() {
      const eventName = this.mediaVolumeLevel === "off" ? MediaUIEvents.MEDIA_UNMUTE_REQUEST : MediaUIEvents.MEDIA_MUTE_REQUEST;
      this.dispatchEvent(
        new GlobalThis.CustomEvent(eventName, { composed: true, bubbles: true })
      );
    }
  };
  if (!GlobalThis.customElements.get("media-mute-button")) {
    GlobalThis.customElements.define("media-mute-button", MediaMuteButton);
  }

  // ../../node_modules/media-chrome/dist/media-pip-button.js
  var pipIcon = `<svg aria-hidden="true" viewBox="0 0 28 24">
  <path d="M24 3H4a1 1 0 0 0-1 1v16a1 1 0 0 0 1 1h20a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1Zm-1 16H5V5h18v14Zm-3-8h-7v5h7v-5Z"/>
</svg>`;
  var slotTemplate7 = Document2.createElement("template");
  slotTemplate7.innerHTML = /*html*/
  `
  <style>
  :host([${MediaUIAttributes.MEDIA_IS_PIP}]) slot[name=icon] slot:not([name=exit]) {
    display: none !important;
  }

  ${/* Double negative, but safer if display doesn't equal 'block' */
  ""}
  :host(:not([${MediaUIAttributes.MEDIA_IS_PIP}])) slot[name=icon] slot:not([name=enter]) {
    display: none !important;
  }

  :host([${MediaUIAttributes.MEDIA_IS_PIP}]) slot[name=tooltip-enter],
  :host(:not([${MediaUIAttributes.MEDIA_IS_PIP}])) slot[name=tooltip-exit] {
    display: none;
  }
  </style>

  <slot name="icon">
    <slot name="enter">${pipIcon}</slot>
    <slot name="exit">${pipIcon}</slot>
  </slot>
`;
  var tooltipContent6 = (
    /*html*/
    `
  <slot name="tooltip-enter">${t("Enter picture in picture mode")}</slot>
  <slot name="tooltip-exit">${t("Exit picture in picture mode")}</slot>
`
  );
  var updateAriaLabel5 = (el) => {
    const label = el.mediaIsPip ? t("exit picture in picture mode") : t("enter picture in picture mode");
    el.setAttribute("aria-label", label);
  };
  var MediaPipButton = class extends MediaChromeButton {
    static get observedAttributes() {
      return [
        ...super.observedAttributes,
        MediaUIAttributes.MEDIA_IS_PIP,
        MediaUIAttributes.MEDIA_PIP_UNAVAILABLE
      ];
    }
    constructor(options = {}) {
      super({ slotTemplate: slotTemplate7, tooltipContent: tooltipContent6, ...options });
    }
    connectedCallback() {
      updateAriaLabel5(this);
      super.connectedCallback();
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      if (attrName === MediaUIAttributes.MEDIA_IS_PIP) {
        updateAriaLabel5(this);
      }
      super.attributeChangedCallback(attrName, oldValue, newValue);
    }
    /**
     * @type {string | undefined} Pip unavailability state
     */
    get mediaPipUnavailable() {
      return getStringAttr(this, MediaUIAttributes.MEDIA_PIP_UNAVAILABLE);
    }
    set mediaPipUnavailable(value) {
      setStringAttr(this, MediaUIAttributes.MEDIA_PIP_UNAVAILABLE, value);
    }
    /**
     * @type {boolean} Is the media currently playing picture-in-picture
     */
    get mediaIsPip() {
      return getBooleanAttr(this, MediaUIAttributes.MEDIA_IS_PIP);
    }
    set mediaIsPip(value) {
      setBooleanAttr(this, MediaUIAttributes.MEDIA_IS_PIP, value);
    }
    handleClick() {
      const eventName = this.mediaIsPip ? MediaUIEvents.MEDIA_EXIT_PIP_REQUEST : MediaUIEvents.MEDIA_ENTER_PIP_REQUEST;
      this.dispatchEvent(
        new GlobalThis.CustomEvent(eventName, { composed: true, bubbles: true })
      );
    }
  };
  if (!GlobalThis.customElements.get("media-pip-button")) {
    GlobalThis.customElements.define("media-pip-button", MediaPipButton);
  }

  // ../../node_modules/media-chrome/dist/media-playback-rate-button.js
  var __accessCheck13 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet13 = (obj, member, getter) => {
    __accessCheck13(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd13 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var _rates;
  var Attributes6 = {
    RATES: "rates"
  };
  var DEFAULT_RATES = [1, 1.2, 1.5, 1.7, 2];
  var DEFAULT_RATE = 1;
  var slotTemplate8 = Document2.createElement("template");
  slotTemplate8.innerHTML = /*html*/
  `
  <style>
    :host {
      min-width: 5ch;
      padding: var(--media-button-padding, var(--media-control-padding, 10px 5px));
    }
  </style>
  <slot name="icon"></slot>
`;
  var MediaPlaybackRateButton = class extends MediaChromeButton {
    constructor(options = {}) {
      super({
        slotTemplate: slotTemplate8,
        tooltipContent: t("Playback rate"),
        ...options
      });
      __privateAdd13(this, _rates, new AttributeTokenList(this, Attributes6.RATES, {
        defaultValue: DEFAULT_RATES
      }));
      this.container = this.shadowRoot.querySelector('slot[name="icon"]');
      this.container.innerHTML = `${DEFAULT_RATE}x`;
    }
    static get observedAttributes() {
      return [
        ...super.observedAttributes,
        MediaUIAttributes.MEDIA_PLAYBACK_RATE,
        Attributes6.RATES
      ];
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      super.attributeChangedCallback(attrName, oldValue, newValue);
      if (attrName === Attributes6.RATES) {
        __privateGet13(this, _rates).value = newValue;
      }
      if (attrName === MediaUIAttributes.MEDIA_PLAYBACK_RATE) {
        const newPlaybackRate = newValue ? +newValue : Number.NaN;
        const playbackRate = !Number.isNaN(newPlaybackRate) ? newPlaybackRate : DEFAULT_RATE;
        this.container.innerHTML = `${playbackRate}x`;
        this.setAttribute(
          "aria-label",
          t("Playback rate {playbackRate}", { playbackRate })
        );
      }
    }
    /**
     * @type { AttributeTokenList | Array<number> | undefined} Will return a DOMTokenList.
     * Setting a value will accept an array of numbers.
     */
    get rates() {
      return __privateGet13(this, _rates);
    }
    set rates(value) {
      if (!value) {
        __privateGet13(this, _rates).value = "";
      } else if (Array.isArray(value)) {
        __privateGet13(this, _rates).value = value.join(" ");
      }
    }
    /**
     * @type {number} The current playback rate
     */
    get mediaPlaybackRate() {
      return getNumericAttr(
        this,
        MediaUIAttributes.MEDIA_PLAYBACK_RATE,
        DEFAULT_RATE
      );
    }
    set mediaPlaybackRate(value) {
      setNumericAttr(this, MediaUIAttributes.MEDIA_PLAYBACK_RATE, value);
    }
    handleClick() {
      var _a3, _b2;
      const availableRates = Array.from(this.rates.values(), (str) => +str).sort(
        (a, b) => a - b
      );
      const detail = (_b2 = (_a3 = availableRates.find((r) => r > this.mediaPlaybackRate)) != null ? _a3 : availableRates[0]) != null ? _b2 : DEFAULT_RATE;
      const evt = new GlobalThis.CustomEvent(
        MediaUIEvents.MEDIA_PLAYBACK_RATE_REQUEST,
        { composed: true, bubbles: true, detail }
      );
      this.dispatchEvent(evt);
    }
  };
  _rates = /* @__PURE__ */ new WeakMap();
  if (!GlobalThis.customElements.get("media-playback-rate-button")) {
    GlobalThis.customElements.define(
      "media-playback-rate-button",
      MediaPlaybackRateButton
    );
  }

  // ../../node_modules/media-chrome/dist/media-play-button.js
  var playIcon = `<svg aria-hidden="true" viewBox="0 0 24 24">
  <path d="m6 21 15-9L6 3v18Z"/>
</svg>`;
  var pauseIcon = `<svg aria-hidden="true" viewBox="0 0 24 24">
  <path d="M6 20h4V4H6v16Zm8-16v16h4V4h-4Z"/>
</svg>`;
  var slotTemplate9 = Document2.createElement("template");
  slotTemplate9.innerHTML = /*html*/
  `
  <style>
    :host([${MediaUIAttributes.MEDIA_PAUSED}]) slot[name=pause],
    :host(:not([${MediaUIAttributes.MEDIA_PAUSED}])) slot[name=play] {
      display: none !important;
    }

    :host([${MediaUIAttributes.MEDIA_PAUSED}]) slot[name=tooltip-pause],
    :host(:not([${MediaUIAttributes.MEDIA_PAUSED}])) slot[name=tooltip-play] {
      display: none;
    }
  </style>

  <slot name="icon">
    <slot name="play">${playIcon}</slot>
    <slot name="pause">${pauseIcon}</slot>
  </slot>
`;
  var tooltipContent7 = (
    /*html*/
    `
  <slot name="tooltip-play">${t("Play")}</slot>
  <slot name="tooltip-pause">${t("Pause")}</slot>
`
  );
  var updateAriaLabel6 = (el) => {
    const label = el.mediaPaused ? t("play") : t("pause");
    el.setAttribute("aria-label", label);
  };
  var MediaPlayButton = class extends MediaChromeButton {
    static get observedAttributes() {
      return [
        ...super.observedAttributes,
        MediaUIAttributes.MEDIA_PAUSED,
        MediaUIAttributes.MEDIA_ENDED
      ];
    }
    constructor(options = {}) {
      super({ slotTemplate: slotTemplate9, tooltipContent: tooltipContent7, ...options });
    }
    connectedCallback() {
      updateAriaLabel6(this);
      super.connectedCallback();
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      if (attrName === MediaUIAttributes.MEDIA_PAUSED) {
        updateAriaLabel6(this);
      }
      super.attributeChangedCallback(attrName, oldValue, newValue);
    }
    /**
     * Is the media paused
     */
    get mediaPaused() {
      return getBooleanAttr(this, MediaUIAttributes.MEDIA_PAUSED);
    }
    set mediaPaused(value) {
      setBooleanAttr(this, MediaUIAttributes.MEDIA_PAUSED, value);
    }
    handleClick() {
      const eventName = this.mediaPaused ? MediaUIEvents.MEDIA_PLAY_REQUEST : MediaUIEvents.MEDIA_PAUSE_REQUEST;
      this.dispatchEvent(
        new GlobalThis.CustomEvent(eventName, { composed: true, bubbles: true })
      );
    }
  };
  if (!GlobalThis.customElements.get("media-play-button")) {
    GlobalThis.customElements.define("media-play-button", MediaPlayButton);
  }

  // ../../node_modules/media-chrome/dist/media-poster-image.js
  var Attributes7 = {
    PLACEHOLDER_SRC: "placeholdersrc",
    SRC: "src"
  };
  var template8 = Document2.createElement("template");
  template8.innerHTML = /*html*/
  `
  <style>
    :host {
      pointer-events: none;
      display: var(--media-poster-image-display, inline-block);
      box-sizing: border-box;
    }

    img {
      max-width: 100%;
      max-height: 100%;
      min-width: 100%;
      min-height: 100%;
      background-repeat: no-repeat;
      background-position: var(--media-poster-image-background-position, var(--media-object-position, center));
      background-size: var(--media-poster-image-background-size, var(--media-object-fit, contain));
      object-fit: var(--media-object-fit, contain);
      object-position: var(--media-object-position, center);
    }
  </style>

  <img part="poster img" aria-hidden="true" id="image"/>
`;
  var unsetBackgroundImage = (el) => {
    el.style.removeProperty("background-image");
  };
  var setBackgroundImage = (el, image) => {
    el.style["background-image"] = `url('${image}')`;
  };
  var MediaPosterImage = class extends GlobalThis.HTMLElement {
    static get observedAttributes() {
      return [Attributes7.PLACEHOLDER_SRC, Attributes7.SRC];
    }
    constructor() {
      super();
      if (!this.shadowRoot) {
        this.attachShadow({ mode: "open" });
        this.shadowRoot.appendChild(template8.content.cloneNode(true));
      }
      this.image = this.shadowRoot.querySelector("#image");
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      if (attrName === Attributes7.SRC) {
        if (newValue == null) {
          this.image.removeAttribute(Attributes7.SRC);
        } else {
          this.image.setAttribute(Attributes7.SRC, newValue);
        }
      }
      if (attrName === Attributes7.PLACEHOLDER_SRC) {
        if (newValue == null) {
          unsetBackgroundImage(this.image);
        } else {
          setBackgroundImage(this.image, newValue);
        }
      }
    }
    /**
     *
     */
    get placeholderSrc() {
      return getStringAttr(this, Attributes7.PLACEHOLDER_SRC);
    }
    set placeholderSrc(value) {
      setStringAttr(this, Attributes7.SRC, value);
    }
    /**
     *
     */
    get src() {
      return getStringAttr(this, Attributes7.SRC);
    }
    set src(value) {
      setStringAttr(this, Attributes7.SRC, value);
    }
  };
  if (!GlobalThis.customElements.get("media-poster-image")) {
    GlobalThis.customElements.define("media-poster-image", MediaPosterImage);
  }

  // ../../node_modules/media-chrome/dist/media-preview-chapter-display.js
  var __accessCheck14 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet14 = (obj, member, getter) => {
    __accessCheck14(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd14 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet13 = (obj, member, value, setter) => {
    __accessCheck14(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var _slot2;
  var MediaPreviewChapterDisplay = class extends MediaTextDisplay {
    constructor() {
      super();
      __privateAdd14(this, _slot2, void 0);
      __privateSet13(this, _slot2, this.shadowRoot.querySelector("slot"));
    }
    static get observedAttributes() {
      return [
        ...super.observedAttributes,
        MediaUIAttributes.MEDIA_PREVIEW_CHAPTER
      ];
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      super.attributeChangedCallback(attrName, oldValue, newValue);
      if (attrName === MediaUIAttributes.MEDIA_PREVIEW_CHAPTER) {
        if (newValue !== oldValue && newValue != null) {
          __privateGet14(this, _slot2).textContent = newValue;
          if (newValue !== "") {
            this.setAttribute("aria-valuetext", `chapter: ${newValue}`);
          } else {
            this.removeAttribute("aria-valuetext");
          }
        }
      }
    }
    /**
     * @type {string | undefined} Timeline preview chapter
     */
    get mediaPreviewChapter() {
      return getStringAttr(this, MediaUIAttributes.MEDIA_PREVIEW_CHAPTER);
    }
    set mediaPreviewChapter(value) {
      setStringAttr(this, MediaUIAttributes.MEDIA_PREVIEW_CHAPTER, value);
    }
  };
  _slot2 = /* @__PURE__ */ new WeakMap();
  if (!GlobalThis.customElements.get("media-preview-chapter-display")) {
    GlobalThis.customElements.define(
      "media-preview-chapter-display",
      MediaPreviewChapterDisplay
    );
  }

  // ../../node_modules/media-chrome/dist/media-preview-thumbnail.js
  var __accessCheck15 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet15 = (obj, member, getter) => {
    __accessCheck15(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd15 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet14 = (obj, member, value, setter) => {
    __accessCheck15(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var _mediaController7;
  var template9 = Document2.createElement("template");
  template9.innerHTML = /*html*/
  `
  <style>
    :host {
      box-sizing: border-box;
      display: var(--media-control-display, var(--media-preview-thumbnail-display, inline-block));
      overflow: hidden;
    }

    img {
      display: none;
      position: relative;
    }
  </style>
  <img crossorigin loading="eager" decoding="async">
`;
  var MediaPreviewThumbnail = class extends GlobalThis.HTMLElement {
    constructor() {
      super();
      __privateAdd15(this, _mediaController7, void 0);
      if (!this.shadowRoot) {
        this.attachShadow({ mode: "open" });
        this.shadowRoot.appendChild(template9.content.cloneNode(true));
      }
    }
    static get observedAttributes() {
      return [
        MediaStateReceiverAttributes.MEDIA_CONTROLLER,
        MediaUIAttributes.MEDIA_PREVIEW_IMAGE,
        MediaUIAttributes.MEDIA_PREVIEW_COORDS
      ];
    }
    connectedCallback() {
      var _a3, _b2, _c;
      const mediaControllerId = this.getAttribute(
        MediaStateReceiverAttributes.MEDIA_CONTROLLER
      );
      if (mediaControllerId) {
        __privateSet14(
          this,
          _mediaController7,
          // @ts-ignore
          (_a3 = this.getRootNode()) == null ? void 0 : _a3.getElementById(mediaControllerId)
        );
        (_c = (_b2 = __privateGet15(this, _mediaController7)) == null ? void 0 : _b2.associateElement) == null ? void 0 : _c.call(_b2, this);
      }
    }
    disconnectedCallback() {
      var _a3, _b2;
      (_b2 = (_a3 = __privateGet15(this, _mediaController7)) == null ? void 0 : _a3.unassociateElement) == null ? void 0 : _b2.call(_a3, this);
      __privateSet14(this, _mediaController7, null);
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      var _a3, _b2, _c, _d, _e;
      if ([
        MediaUIAttributes.MEDIA_PREVIEW_IMAGE,
        MediaUIAttributes.MEDIA_PREVIEW_COORDS
      ].includes(attrName)) {
        this.update();
      }
      if (attrName === MediaStateReceiverAttributes.MEDIA_CONTROLLER) {
        if (oldValue) {
          (_b2 = (_a3 = __privateGet15(this, _mediaController7)) == null ? void 0 : _a3.unassociateElement) == null ? void 0 : _b2.call(_a3, this);
          __privateSet14(this, _mediaController7, null);
        }
        if (newValue && this.isConnected) {
          __privateSet14(this, _mediaController7, (_c = this.getRootNode()) == null ? void 0 : _c.getElementById(newValue));
          (_e = (_d = __privateGet15(this, _mediaController7)) == null ? void 0 : _d.associateElement) == null ? void 0 : _e.call(_d, this);
        }
      }
    }
    /**
     * @type {string | undefined} The url of the preview image
     */
    get mediaPreviewImage() {
      return getStringAttr(this, MediaUIAttributes.MEDIA_PREVIEW_IMAGE);
    }
    set mediaPreviewImage(value) {
      setStringAttr(this, MediaUIAttributes.MEDIA_PREVIEW_IMAGE, value);
    }
    /**
     * @type {Array<number> | undefined} Fixed length array [x, y, width, height] or undefined
     */
    get mediaPreviewCoords() {
      const attrVal = this.getAttribute(MediaUIAttributes.MEDIA_PREVIEW_COORDS);
      if (!attrVal)
        return void 0;
      return attrVal.split(/\s+/).map((coord) => +coord);
    }
    set mediaPreviewCoords(value) {
      if (!value) {
        this.removeAttribute(MediaUIAttributes.MEDIA_PREVIEW_COORDS);
        return;
      }
      this.setAttribute(MediaUIAttributes.MEDIA_PREVIEW_COORDS, value.join(" "));
    }
    update() {
      const coords = this.mediaPreviewCoords;
      const previewImage = this.mediaPreviewImage;
      if (!(coords && previewImage))
        return;
      const [x, y, w, h] = coords;
      const src = previewImage.split("#")[0];
      const computedStyle = getComputedStyle(this);
      const { maxWidth, maxHeight, minWidth, minHeight } = computedStyle;
      const maxRatio = Math.min(parseInt(maxWidth) / w, parseInt(maxHeight) / h);
      const minRatio = Math.max(parseInt(minWidth) / w, parseInt(minHeight) / h);
      const isScalingDown = maxRatio < 1;
      const scale = isScalingDown ? maxRatio : minRatio > 1 ? minRatio : 1;
      const { style } = getOrInsertCSSRule(this.shadowRoot, ":host");
      const imgStyle = getOrInsertCSSRule(this.shadowRoot, "img").style;
      const img = this.shadowRoot.querySelector("img");
      const extremum = isScalingDown ? "min" : "max";
      style.setProperty(`${extremum}-width`, "initial", "important");
      style.setProperty(`${extremum}-height`, "initial", "important");
      style.width = `${w * scale}px`;
      style.height = `${h * scale}px`;
      const resize = () => {
        imgStyle.width = `${this.imgWidth * scale}px`;
        imgStyle.height = `${this.imgHeight * scale}px`;
        imgStyle.display = "block";
      };
      if (img.src !== src) {
        img.onload = () => {
          this.imgWidth = img.naturalWidth;
          this.imgHeight = img.naturalHeight;
          resize();
        };
        img.src = src;
        resize();
      }
      resize();
      imgStyle.transform = `translate(-${x * scale}px, -${y * scale}px)`;
    }
  };
  _mediaController7 = /* @__PURE__ */ new WeakMap();
  if (!GlobalThis.customElements.get("media-preview-thumbnail")) {
    GlobalThis.customElements.define(
      "media-preview-thumbnail",
      MediaPreviewThumbnail
    );
  }

  // ../../node_modules/media-chrome/dist/media-preview-time-display.js
  var __accessCheck16 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet16 = (obj, member, getter) => {
    __accessCheck16(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd16 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet15 = (obj, member, value, setter) => {
    __accessCheck16(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var _slot3;
  var MediaPreviewTimeDisplay = class extends MediaTextDisplay {
    constructor() {
      super();
      __privateAdd16(this, _slot3, void 0);
      __privateSet15(this, _slot3, this.shadowRoot.querySelector("slot"));
      __privateGet16(this, _slot3).textContent = formatTime(0);
    }
    static get observedAttributes() {
      return [...super.observedAttributes, MediaUIAttributes.MEDIA_PREVIEW_TIME];
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      super.attributeChangedCallback(attrName, oldValue, newValue);
      if (attrName === MediaUIAttributes.MEDIA_PREVIEW_TIME && newValue != null) {
        __privateGet16(this, _slot3).textContent = formatTime(parseFloat(newValue));
      }
    }
    /**
     * Timeline preview time
     */
    get mediaPreviewTime() {
      return getNumericAttr(this, MediaUIAttributes.MEDIA_PREVIEW_TIME);
    }
    set mediaPreviewTime(value) {
      setNumericAttr(this, MediaUIAttributes.MEDIA_PREVIEW_TIME, value);
    }
  };
  _slot3 = /* @__PURE__ */ new WeakMap();
  if (!GlobalThis.customElements.get("media-preview-time-display")) {
    GlobalThis.customElements.define(
      "media-preview-time-display",
      MediaPreviewTimeDisplay
    );
  }

  // ../../node_modules/media-chrome/dist/media-seek-backward-button.js
  var Attributes8 = {
    SEEK_OFFSET: "seekoffset"
  };
  var DEFAULT_SEEK_OFFSET2 = 30;
  var backwardIcon = `<svg aria-hidden="true" viewBox="0 0 20 24"><defs><style>.text{font-size:8px;font-family:Arial-BoldMT, Arial;font-weight:700;}</style></defs><text class="text value" transform="translate(2.18 19.87)">${DEFAULT_SEEK_OFFSET2}</text><path d="M10 6V3L4.37 7 10 10.94V8a5.54 5.54 0 0 1 1.9 10.48v2.12A7.5 7.5 0 0 0 10 6Z"/></svg>`;
  var slotTemplate10 = Document2.createElement("template");
  slotTemplate10.innerHTML = `
  <slot name="icon">${backwardIcon}</slot>
`;
  var DEFAULT_TIME = 0;
  var MediaSeekBackwardButton = class extends MediaChromeButton {
    static get observedAttributes() {
      return [
        ...super.observedAttributes,
        MediaUIAttributes.MEDIA_CURRENT_TIME,
        Attributes8.SEEK_OFFSET
      ];
    }
    constructor(options = {}) {
      super({
        slotTemplate: slotTemplate10,
        tooltipContent: t("Seek backward"),
        ...options
      });
    }
    connectedCallback() {
      this.seekOffset = getNumericAttr(
        this,
        Attributes8.SEEK_OFFSET,
        DEFAULT_SEEK_OFFSET2
      );
      super.connectedCallback();
    }
    attributeChangedCallback(attrName, _oldValue, newValue) {
      if (attrName === Attributes8.SEEK_OFFSET) {
        this.seekOffset = getNumericAttr(
          this,
          Attributes8.SEEK_OFFSET,
          DEFAULT_SEEK_OFFSET2
        );
      }
      super.attributeChangedCallback(attrName, _oldValue, newValue);
    }
    // Own props
    /**
     * Seek amount in seconds
     */
    get seekOffset() {
      return getNumericAttr(this, Attributes8.SEEK_OFFSET, DEFAULT_SEEK_OFFSET2);
    }
    set seekOffset(value) {
      setNumericAttr(this, Attributes8.SEEK_OFFSET, value);
      this.setAttribute(
        "aria-label",
        t("seek back {seekOffset} seconds", { seekOffset: this.seekOffset })
      );
      updateIconText(getSlotted(this, "icon"), this.seekOffset);
    }
    // Props derived from Media UI Attributes
    /**
     * The current time in seconds
     */
    get mediaCurrentTime() {
      return getNumericAttr(
        this,
        MediaUIAttributes.MEDIA_CURRENT_TIME,
        DEFAULT_TIME
      );
    }
    set mediaCurrentTime(time) {
      setNumericAttr(this, MediaUIAttributes.MEDIA_CURRENT_TIME, time);
    }
    handleClick() {
      const detail = Math.max(this.mediaCurrentTime - this.seekOffset, 0);
      const evt = new GlobalThis.CustomEvent(MediaUIEvents.MEDIA_SEEK_REQUEST, {
        composed: true,
        bubbles: true,
        detail
      });
      this.dispatchEvent(evt);
    }
  };
  if (!GlobalThis.customElements.get("media-seek-backward-button")) {
    GlobalThis.customElements.define(
      "media-seek-backward-button",
      MediaSeekBackwardButton
    );
  }

  // ../../node_modules/media-chrome/dist/media-seek-forward-button.js
  var Attributes9 = {
    SEEK_OFFSET: "seekoffset"
  };
  var DEFAULT_SEEK_OFFSET3 = 30;
  var forwardIcon = `<svg aria-hidden="true" viewBox="0 0 20 24"><defs><style>.text{font-size:8px;font-family:Arial-BoldMT, Arial;font-weight:700;}</style></defs><text class="text value" transform="translate(8.9 19.87)">${DEFAULT_SEEK_OFFSET3}</text><path d="M10 6V3l5.61 4L10 10.94V8a5.54 5.54 0 0 0-1.9 10.48v2.12A7.5 7.5 0 0 1 10 6Z"/></svg>`;
  var slotTemplate11 = Document2.createElement("template");
  slotTemplate11.innerHTML = `
  <slot name="icon">${forwardIcon}</slot>
`;
  var DEFAULT_TIME2 = 0;
  var MediaSeekForwardButton = class extends MediaChromeButton {
    static get observedAttributes() {
      return [
        ...super.observedAttributes,
        MediaUIAttributes.MEDIA_CURRENT_TIME,
        Attributes9.SEEK_OFFSET
      ];
    }
    constructor(options = {}) {
      super({
        slotTemplate: slotTemplate11,
        tooltipContent: t("Seek forward"),
        ...options
      });
    }
    connectedCallback() {
      this.seekOffset = getNumericAttr(
        this,
        Attributes9.SEEK_OFFSET,
        DEFAULT_SEEK_OFFSET3
      );
      super.connectedCallback();
    }
    attributeChangedCallback(attrName, _oldValue, newValue) {
      if (attrName === Attributes9.SEEK_OFFSET) {
        this.seekOffset = getNumericAttr(
          this,
          Attributes9.SEEK_OFFSET,
          DEFAULT_SEEK_OFFSET3
        );
      }
      super.attributeChangedCallback(attrName, _oldValue, newValue);
    }
    // Own props
    /**
     * Seek amount in seconds
     */
    get seekOffset() {
      return getNumericAttr(this, Attributes9.SEEK_OFFSET, DEFAULT_SEEK_OFFSET3);
    }
    set seekOffset(value) {
      setNumericAttr(this, Attributes9.SEEK_OFFSET, value);
      this.setAttribute(
        "aria-label",
        t("seek forward {seekOffset} seconds", { seekOffset: this.seekOffset })
      );
      updateIconText(getSlotted(this, "icon"), this.seekOffset);
    }
    // Props derived from Media UI Attributes
    /**
     * The current time in seconds
     */
    get mediaCurrentTime() {
      return getNumericAttr(
        this,
        MediaUIAttributes.MEDIA_CURRENT_TIME,
        DEFAULT_TIME2
      );
    }
    set mediaCurrentTime(time) {
      setNumericAttr(this, MediaUIAttributes.MEDIA_CURRENT_TIME, time);
    }
    handleClick() {
      const detail = this.mediaCurrentTime + this.seekOffset;
      const evt = new GlobalThis.CustomEvent(MediaUIEvents.MEDIA_SEEK_REQUEST, {
        composed: true,
        bubbles: true,
        detail
      });
      this.dispatchEvent(evt);
    }
  };
  if (!GlobalThis.customElements.get("media-seek-forward-button")) {
    GlobalThis.customElements.define(
      "media-seek-forward-button",
      MediaSeekForwardButton
    );
  }

  // ../../node_modules/media-chrome/dist/media-time-display.js
  var __accessCheck17 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet17 = (obj, member, getter) => {
    __accessCheck17(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd17 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet16 = (obj, member, value, setter) => {
    __accessCheck17(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var _slot4;
  var Attributes10 = {
    REMAINING: "remaining",
    SHOW_DURATION: "showduration",
    NO_TOGGLE: "notoggle"
  };
  var CombinedAttributes = [
    ...Object.values(Attributes10),
    MediaUIAttributes.MEDIA_CURRENT_TIME,
    MediaUIAttributes.MEDIA_DURATION,
    MediaUIAttributes.MEDIA_SEEKABLE
  ];
  var ButtonPressedKeys2 = ["Enter", " "];
  var DEFAULT_TIMES_SEP = "&nbsp;/&nbsp;";
  var formatTimesLabel = (el, { timesSep = DEFAULT_TIMES_SEP } = {}) => {
    var _a3, _b2;
    const showRemaining = el.hasAttribute(Attributes10.REMAINING);
    const showDuration = el.hasAttribute(Attributes10.SHOW_DURATION);
    const currentTime = (_a3 = el.mediaCurrentTime) != null ? _a3 : 0;
    const [, seekableEnd] = (_b2 = el.mediaSeekable) != null ? _b2 : [];
    let endTime = 0;
    if (Number.isFinite(el.mediaDuration)) {
      endTime = el.mediaDuration;
    } else if (Number.isFinite(seekableEnd)) {
      endTime = seekableEnd;
    }
    const timeLabel = showRemaining ? formatTime(0 - (endTime - currentTime)) : formatTime(currentTime);
    if (!showDuration)
      return timeLabel;
    return `${timeLabel}${timesSep}${formatTime(endTime)}`;
  };
  var DEFAULT_MISSING_TIME_PHRASE = "video not loaded, unknown time.";
  var updateAriaValueText = (el) => {
    var _a3;
    const currentTime = el.mediaCurrentTime;
    const [, seekableEnd] = (_a3 = el.mediaSeekable) != null ? _a3 : [];
    let endTime = null;
    if (Number.isFinite(el.mediaDuration)) {
      endTime = el.mediaDuration;
    } else if (Number.isFinite(seekableEnd)) {
      endTime = seekableEnd;
    }
    if (currentTime == null || endTime === null) {
      el.setAttribute("aria-valuetext", DEFAULT_MISSING_TIME_PHRASE);
      return;
    }
    const showRemaining = el.hasAttribute(Attributes10.REMAINING);
    const showDuration = el.hasAttribute(Attributes10.SHOW_DURATION);
    const currentTimePhrase = showRemaining ? formatAsTimePhrase(0 - (endTime - currentTime)) : formatAsTimePhrase(currentTime);
    if (!showDuration) {
      el.setAttribute("aria-valuetext", currentTimePhrase);
      return;
    }
    const totalTimePhrase = formatAsTimePhrase(endTime);
    const fullPhrase = `${currentTimePhrase} of ${totalTimePhrase}`;
    el.setAttribute("aria-valuetext", fullPhrase);
  };
  var MediaTimeDisplay = class extends MediaTextDisplay {
    constructor() {
      super();
      __privateAdd17(this, _slot4, void 0);
      __privateSet16(this, _slot4, this.shadowRoot.querySelector("slot"));
      __privateGet17(this, _slot4).innerHTML = `${formatTimesLabel(this)}`;
    }
    static get observedAttributes() {
      return [...super.observedAttributes, ...CombinedAttributes, "disabled"];
    }
    connectedCallback() {
      const { style } = getOrInsertCSSRule(
        this.shadowRoot,
        ":host(:hover:not([notoggle]))"
      );
      style.setProperty("cursor", "var(--media-cursor, pointer)");
      style.setProperty(
        "background",
        "var(--media-control-hover-background, rgba(50 50 70 / .7))"
      );
      if (!this.hasAttribute("disabled")) {
        this.enable();
      }
      this.setAttribute("role", "progressbar");
      this.setAttribute("aria-label", t("playback time"));
      const keyUpHandler = (evt) => {
        const { key } = evt;
        if (!ButtonPressedKeys2.includes(key)) {
          this.removeEventListener("keyup", keyUpHandler);
          return;
        }
        this.toggleTimeDisplay();
      };
      this.addEventListener("keydown", (evt) => {
        const { metaKey, altKey, key } = evt;
        if (metaKey || altKey || !ButtonPressedKeys2.includes(key)) {
          this.removeEventListener("keyup", keyUpHandler);
          return;
        }
        this.addEventListener("keyup", keyUpHandler);
      });
      this.addEventListener("click", this.toggleTimeDisplay);
      super.connectedCallback();
    }
    toggleTimeDisplay() {
      if (this.noToggle) {
        return;
      }
      if (this.hasAttribute("remaining")) {
        this.removeAttribute("remaining");
      } else {
        this.setAttribute("remaining", "");
      }
    }
    disconnectedCallback() {
      this.disable();
      super.disconnectedCallback();
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      if (CombinedAttributes.includes(attrName)) {
        this.update();
      } else if (attrName === "disabled" && newValue !== oldValue) {
        if (newValue == null) {
          this.enable();
        } else {
          this.disable();
        }
      }
      super.attributeChangedCallback(attrName, oldValue, newValue);
    }
    enable() {
      this.tabIndex = 0;
    }
    disable() {
      this.tabIndex = -1;
    }
    // Own props
    /**
     * Whether to show the remaining time
     */
    get remaining() {
      return getBooleanAttr(this, Attributes10.REMAINING);
    }
    set remaining(show) {
      setBooleanAttr(this, Attributes10.REMAINING, show);
    }
    /**
     * Whether to show the duration
     */
    get showDuration() {
      return getBooleanAttr(this, Attributes10.SHOW_DURATION);
    }
    set showDuration(show) {
      setBooleanAttr(this, Attributes10.SHOW_DURATION, show);
    }
    /**
     * Disable the default behavior that toggles between current and remaining time
     */
    get noToggle() {
      return getBooleanAttr(this, Attributes10.NO_TOGGLE);
    }
    set noToggle(noToggle) {
      setBooleanAttr(this, Attributes10.NO_TOGGLE, noToggle);
    }
    // Props derived from media UI attributes
    /**
     * Get the duration
     */
    get mediaDuration() {
      return getNumericAttr(this, MediaUIAttributes.MEDIA_DURATION);
    }
    set mediaDuration(time) {
      setNumericAttr(this, MediaUIAttributes.MEDIA_DURATION, time);
    }
    /**
     * The current time in seconds
     */
    get mediaCurrentTime() {
      return getNumericAttr(this, MediaUIAttributes.MEDIA_CURRENT_TIME);
    }
    set mediaCurrentTime(time) {
      setNumericAttr(this, MediaUIAttributes.MEDIA_CURRENT_TIME, time);
    }
    /**
     * Range of values that can be seeked to.
     * An array of two numbers [start, end]
     */
    get mediaSeekable() {
      const seekable = this.getAttribute(MediaUIAttributes.MEDIA_SEEKABLE);
      if (!seekable)
        return void 0;
      return seekable.split(":").map((time) => +time);
    }
    set mediaSeekable(range) {
      if (range == null) {
        this.removeAttribute(MediaUIAttributes.MEDIA_SEEKABLE);
        return;
      }
      this.setAttribute(MediaUIAttributes.MEDIA_SEEKABLE, range.join(":"));
    }
    update() {
      const timesLabel = formatTimesLabel(this);
      updateAriaValueText(this);
      if (timesLabel !== __privateGet17(this, _slot4).innerHTML) {
        __privateGet17(this, _slot4).innerHTML = timesLabel;
      }
    }
  };
  _slot4 = /* @__PURE__ */ new WeakMap();
  if (!GlobalThis.customElements.get("media-time-display")) {
    GlobalThis.customElements.define("media-time-display", MediaTimeDisplay);
  }

  // ../../node_modules/media-chrome/dist/utils/range-animation.js
  var __accessCheck18 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet18 = (obj, member, getter) => {
    __accessCheck18(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd18 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet17 = (obj, member, value, setter) => {
    __accessCheck18(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var __privateWrapper = (obj, member, setter, getter) => ({
    set _(value) {
      __privateSet17(obj, member, value, setter);
    },
    get _() {
      return __privateGet18(obj, member, getter);
    }
  });
  var _range;
  var _startTime;
  var _previousTime;
  var _deltaTime;
  var _frameCount;
  var _updateTimestamp;
  var _updateStartValue;
  var _lastRangeIncrease;
  var _id;
  var _animate;
  var RangeAnimation = class {
    constructor(range, callback, fps) {
      __privateAdd18(this, _range, void 0);
      __privateAdd18(this, _startTime, void 0);
      __privateAdd18(this, _previousTime, void 0);
      __privateAdd18(this, _deltaTime, void 0);
      __privateAdd18(this, _frameCount, void 0);
      __privateAdd18(this, _updateTimestamp, void 0);
      __privateAdd18(this, _updateStartValue, void 0);
      __privateAdd18(this, _lastRangeIncrease, void 0);
      __privateAdd18(this, _id, 0);
      __privateAdd18(this, _animate, (now2 = performance.now()) => {
        __privateSet17(this, _id, requestAnimationFrame(__privateGet18(this, _animate)));
        __privateSet17(this, _deltaTime, performance.now() - __privateGet18(this, _previousTime));
        const fpsInterval = 1e3 / this.fps;
        if (__privateGet18(this, _deltaTime) > fpsInterval) {
          __privateSet17(this, _previousTime, now2 - __privateGet18(this, _deltaTime) % fpsInterval);
          const fps2 = 1e3 / ((now2 - __privateGet18(this, _startTime)) / ++__privateWrapper(this, _frameCount)._);
          const delta = (now2 - __privateGet18(this, _updateTimestamp)) / 1e3 / this.duration;
          let value = __privateGet18(this, _updateStartValue) + delta * this.playbackRate;
          const increase = value - __privateGet18(this, _range).valueAsNumber;
          if (increase > 0) {
            __privateSet17(this, _lastRangeIncrease, this.playbackRate / this.duration / fps2);
          } else {
            __privateSet17(this, _lastRangeIncrease, 0.995 * __privateGet18(this, _lastRangeIncrease));
            value = __privateGet18(this, _range).valueAsNumber + __privateGet18(this, _lastRangeIncrease);
          }
          this.callback(value);
        }
      });
      __privateSet17(this, _range, range);
      this.callback = callback;
      this.fps = fps;
    }
    start() {
      if (__privateGet18(this, _id) !== 0)
        return;
      __privateSet17(this, _previousTime, performance.now());
      __privateSet17(this, _startTime, __privateGet18(this, _previousTime));
      __privateSet17(this, _frameCount, 0);
      __privateGet18(this, _animate).call(this);
    }
    stop() {
      if (__privateGet18(this, _id) === 0)
        return;
      cancelAnimationFrame(__privateGet18(this, _id));
      __privateSet17(this, _id, 0);
    }
    update({ start, duration, playbackRate }) {
      const increase = start - __privateGet18(this, _range).valueAsNumber;
      const durationDelta = Math.abs(duration - this.duration);
      if (increase > 0 || increase < -0.03 || durationDelta >= 0.5) {
        this.callback(start);
      }
      __privateSet17(this, _updateStartValue, start);
      __privateSet17(this, _updateTimestamp, performance.now());
      this.duration = duration;
      this.playbackRate = playbackRate;
    }
  };
  _range = /* @__PURE__ */ new WeakMap();
  _startTime = /* @__PURE__ */ new WeakMap();
  _previousTime = /* @__PURE__ */ new WeakMap();
  _deltaTime = /* @__PURE__ */ new WeakMap();
  _frameCount = /* @__PURE__ */ new WeakMap();
  _updateTimestamp = /* @__PURE__ */ new WeakMap();
  _updateStartValue = /* @__PURE__ */ new WeakMap();
  _lastRangeIncrease = /* @__PURE__ */ new WeakMap();
  _id = /* @__PURE__ */ new WeakMap();
  _animate = /* @__PURE__ */ new WeakMap();

  // ../../node_modules/media-chrome/dist/media-time-range.js
  var __accessCheck19 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet19 = (obj, member, getter) => {
    __accessCheck19(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd19 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet18 = (obj, member, value, setter) => {
    __accessCheck19(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var __privateMethod6 = (obj, member, method) => {
    __accessCheck19(obj, member, "access private method");
    return method;
  };
  var _rootNode;
  var _animation;
  var _boxes;
  var _previewTime;
  var _previewBox;
  var _currentBox;
  var _boxPaddingLeft;
  var _boxPaddingRight;
  var _mediaChaptersCues;
  var _toggleRangeAnimation;
  var toggleRangeAnimation_fn;
  var _shouldRangeAnimate;
  var shouldRangeAnimate_fn;
  var _updateRange;
  var _getElementRects;
  var getElementRects_fn;
  var _getBoxPosition;
  var getBoxPosition_fn;
  var _getBoxShiftPosition;
  var getBoxShiftPosition_fn;
  var _handlePointerMove3;
  var handlePointerMove_fn3;
  var _previewRequest;
  var previewRequest_fn;
  var _seekRequest;
  var seekRequest_fn;
  var DEFAULT_MISSING_TIME_PHRASE2 = "video not loaded, unknown time.";
  var updateAriaValueText2 = (el) => {
    const range = el.range;
    const currentTimePhrase = formatAsTimePhrase(+calcTimeFromRangeValue(el));
    const totalTimePhrase = formatAsTimePhrase(+el.mediaSeekableEnd);
    const fullPhrase = !(currentTimePhrase && totalTimePhrase) ? DEFAULT_MISSING_TIME_PHRASE2 : `${currentTimePhrase} of ${totalTimePhrase}`;
    range.setAttribute("aria-valuetext", fullPhrase);
  };
  var template10 = Document2.createElement("template");
  template10.innerHTML = /*html*/
  `
  <style>
    :host {
      --media-box-border-radius: 4px;
      --media-box-padding-left: 10px;
      --media-box-padding-right: 10px;
      --media-preview-border-radius: var(--media-box-border-radius);
      --media-box-arrow-offset: var(--media-box-border-radius);
      --_control-background: var(--media-control-background, var(--media-secondary-color, rgb(20 20 30 / .7)));
      --_preview-background: var(--media-preview-background, var(--_control-background));

      ${/* 1% rail width trick was off in Safari, contain: layout seems to
  prevent the horizontal overflow as well. */
  ""}
      contain: layout;
    }

    #buffered {
      background: var(--media-time-range-buffered-color, rgb(255 255 255 / .4));
      position: absolute;
      height: 100%;
      will-change: width;
    }

    #preview-rail,
    #current-rail {
      width: 100%;
      position: absolute;
      left: 0;
      bottom: 100%;
      pointer-events: none;
      will-change: transform;
    }

    [part~="box"] {
      width: min-content;
      ${/* absolute position is needed here so the box doesn't overflow the bounds */
  ""}
      position: absolute;
      bottom: 100%;
      flex-direction: column;
      align-items: center;
      transform: translateX(-50%);
    }

    [part~="current-box"] {
      display: var(--media-current-box-display, var(--media-box-display, flex));
      margin: var(--media-current-box-margin, var(--media-box-margin, 0 0 5px));
      visibility: hidden;
    }

    [part~="preview-box"] {
      display: var(--media-preview-box-display, var(--media-box-display, flex));
      margin: var(--media-preview-box-margin, var(--media-box-margin, 0 0 5px));
      transition-property: var(--media-preview-transition-property, visibility, opacity);
      transition-duration: var(--media-preview-transition-duration-out, .25s);
      transition-delay: var(--media-preview-transition-delay-out, 0s);
      visibility: hidden;
      opacity: 0;
    }

    :host(:is([${MediaUIAttributes.MEDIA_PREVIEW_IMAGE}], [${MediaUIAttributes.MEDIA_PREVIEW_TIME}])[dragging]) [part~="preview-box"] {
      transition-duration: var(--media-preview-transition-duration-in, .5s);
      transition-delay: var(--media-preview-transition-delay-in, .25s);
      visibility: visible;
      opacity: 1;
    }

    @media (hover: hover) {
      :host(:is([${MediaUIAttributes.MEDIA_PREVIEW_IMAGE}], [${MediaUIAttributes.MEDIA_PREVIEW_TIME}]):hover) [part~="preview-box"] {
        transition-duration: var(--media-preview-transition-duration-in, .5s);
        transition-delay: var(--media-preview-transition-delay-in, .25s);
        visibility: visible;
        opacity: 1;
      }
    }

    media-preview-thumbnail,
    ::slotted(media-preview-thumbnail) {
      visibility: hidden;
      ${/* delay changing these CSS props until the preview box transition is ended */
  ""}
      transition: visibility 0s .25s;
      transition-delay: calc(var(--media-preview-transition-delay-out, 0s) + var(--media-preview-transition-duration-out, .25s));
      background: var(--media-preview-thumbnail-background, var(--_preview-background));
      box-shadow: var(--media-preview-thumbnail-box-shadow, 0 0 4px rgb(0 0 0 / .2));
      max-width: var(--media-preview-thumbnail-max-width, 180px);
      max-height: var(--media-preview-thumbnail-max-height, 160px);
      min-width: var(--media-preview-thumbnail-min-width, 120px);
      min-height: var(--media-preview-thumbnail-min-height, 80px);
      border: var(--media-preview-thumbnail-border);
      border-radius: var(--media-preview-thumbnail-border-radius,
        var(--media-preview-border-radius) var(--media-preview-border-radius) 0 0);
    }

    :host([${MediaUIAttributes.MEDIA_PREVIEW_IMAGE}][dragging]) media-preview-thumbnail,
    :host([${MediaUIAttributes.MEDIA_PREVIEW_IMAGE}][dragging]) ::slotted(media-preview-thumbnail) {
      transition-delay: var(--media-preview-transition-delay-in, .25s);
      visibility: visible;
    }

    @media (hover: hover) {
      :host([${MediaUIAttributes.MEDIA_PREVIEW_IMAGE}]:hover) media-preview-thumbnail,
      :host([${MediaUIAttributes.MEDIA_PREVIEW_IMAGE}]:hover) ::slotted(media-preview-thumbnail) {
        transition-delay: var(--media-preview-transition-delay-in, .25s);
        visibility: visible;
      }

      :host([${MediaUIAttributes.MEDIA_PREVIEW_TIME}]:hover) {
        --media-time-range-hover-display: block;
      }
    }

    media-preview-chapter-display,
    ::slotted(media-preview-chapter-display) {
      font-size: var(--media-font-size, 13px);
      line-height: 17px;
      min-width: 0;
      visibility: hidden;
      ${/* delay changing these CSS props until the preview box transition is ended */
  ""}
      transition: min-width 0s, border-radius 0s, margin 0s, padding 0s, visibility 0s;
      transition-delay: calc(var(--media-preview-transition-delay-out, 0s) + var(--media-preview-transition-duration-out, .25s));
      background: var(--media-preview-chapter-background, var(--_preview-background));
      border-radius: var(--media-preview-chapter-border-radius,
        var(--media-preview-border-radius) var(--media-preview-border-radius)
        var(--media-preview-border-radius) var(--media-preview-border-radius));
      padding: var(--media-preview-chapter-padding, 3.5px 9px);
      margin: var(--media-preview-chapter-margin, 0 0 5px);
      text-shadow: var(--media-preview-chapter-text-shadow, 0 0 4px rgb(0 0 0 / .75));
    }

    :host([${MediaUIAttributes.MEDIA_PREVIEW_IMAGE}]) media-preview-chapter-display,
    :host([${MediaUIAttributes.MEDIA_PREVIEW_IMAGE}]) ::slotted(media-preview-chapter-display) {
      transition-delay: var(--media-preview-transition-delay-in, .25s);
      border-radius: var(--media-preview-chapter-border-radius, 0);
      padding: var(--media-preview-chapter-padding, 3.5px 9px 0);
      margin: var(--media-preview-chapter-margin, 0);
      min-width: 100%;
    }

    media-preview-chapter-display[${MediaUIAttributes.MEDIA_PREVIEW_CHAPTER}],
    ::slotted(media-preview-chapter-display[${MediaUIAttributes.MEDIA_PREVIEW_CHAPTER}]) {
      visibility: visible;
    }

    media-preview-chapter-display:not([aria-valuetext]),
    ::slotted(media-preview-chapter-display:not([aria-valuetext])) {
      display: none;
    }

    media-preview-time-display,
    ::slotted(media-preview-time-display),
    media-time-display,
    ::slotted(media-time-display) {
      font-size: var(--media-font-size, 13px);
      line-height: 17px;
      min-width: 0;
      ${/* delay changing these CSS props until the preview box transition is ended */
  ""}
      transition: min-width 0s, border-radius 0s;
      transition-delay: calc(var(--media-preview-transition-delay-out, 0s) + var(--media-preview-transition-duration-out, .25s));
      background: var(--media-preview-time-background, var(--_preview-background));
      border-radius: var(--media-preview-time-border-radius,
        var(--media-preview-border-radius) var(--media-preview-border-radius)
        var(--media-preview-border-radius) var(--media-preview-border-radius));
      padding: var(--media-preview-time-padding, 3.5px 9px);
      margin: var(--media-preview-time-margin, 0);
      text-shadow: var(--media-preview-time-text-shadow, 0 0 4px rgb(0 0 0 / .75));
      transform: translateX(min(
        max(calc(50% - var(--_box-width) / 2),
        calc(var(--_box-shift, 0))),
        calc(var(--_box-width) / 2 - 50%)
      ));
    }

    :host([${MediaUIAttributes.MEDIA_PREVIEW_IMAGE}]) media-preview-time-display,
    :host([${MediaUIAttributes.MEDIA_PREVIEW_IMAGE}]) ::slotted(media-preview-time-display) {
      transition-delay: var(--media-preview-transition-delay-in, .25s);
      border-radius: var(--media-preview-time-border-radius,
        0 0 var(--media-preview-border-radius) var(--media-preview-border-radius));
      min-width: 100%;
    }

    :host([${MediaUIAttributes.MEDIA_PREVIEW_TIME}]:hover) {
      --media-time-range-hover-display: block;
    }

    [part~="arrow"],
    ::slotted([part~="arrow"]) {
      display: var(--media-box-arrow-display, inline-block);
      transform: translateX(min(
        max(calc(50% - var(--_box-width) / 2 + var(--media-box-arrow-offset)),
        calc(var(--_box-shift, 0))),
        calc(var(--_box-width) / 2 - 50% - var(--media-box-arrow-offset))
      ));
      ${/* border-color has to come before border-top-color! */
  ""}
      border-color: transparent;
      border-top-color: var(--media-box-arrow-background, var(--_control-background));
      border-width: var(--media-box-arrow-border-width,
        var(--media-box-arrow-height, 5px) var(--media-box-arrow-width, 6px) 0);
      border-style: solid;
      justify-content: center;
      height: 0;
    }
  </style>
  <div id="preview-rail">
    <slot name="preview" part="box preview-box">
      <media-preview-thumbnail></media-preview-thumbnail>
      <media-preview-chapter-display></media-preview-chapter-display>
      <media-preview-time-display></media-preview-time-display>
      <slot name="preview-arrow"><div part="arrow"></div></slot>
    </slot>
  </div>
  <div id="current-rail">
    <slot name="current" part="box current-box">
      ${/* Example: add the current time w/ arrow to the playhead
  <media-time-display slot="current"></media-time-display>
  <div part="arrow" slot="current"></div> */
  ""}
    </slot>
  </div>
`;
  var calcRangeValueFromTime = (el, time = el.mediaCurrentTime) => {
    const startTime = Number.isFinite(el.mediaSeekableStart) ? el.mediaSeekableStart : 0;
    const endTime = Number.isFinite(el.mediaDuration) ? el.mediaDuration : el.mediaSeekableEnd;
    if (Number.isNaN(endTime))
      return 0;
    const value = (time - startTime) / (endTime - startTime);
    return Math.max(0, Math.min(value, 1));
  };
  var calcTimeFromRangeValue = (el, value = el.range.valueAsNumber) => {
    const startTime = Number.isFinite(el.mediaSeekableStart) ? el.mediaSeekableStart : 0;
    const endTime = Number.isFinite(el.mediaDuration) ? el.mediaDuration : el.mediaSeekableEnd;
    if (Number.isNaN(endTime))
      return 0;
    return value * (endTime - startTime) + startTime;
  };
  var MediaTimeRange = class extends MediaChromeRange {
    constructor() {
      super();
      __privateAdd19(this, _toggleRangeAnimation);
      __privateAdd19(this, _shouldRangeAnimate);
      __privateAdd19(this, _getElementRects);
      __privateAdd19(this, _getBoxPosition);
      __privateAdd19(this, _getBoxShiftPosition);
      __privateAdd19(this, _handlePointerMove3);
      __privateAdd19(this, _previewRequest);
      __privateAdd19(this, _seekRequest);
      __privateAdd19(this, _rootNode, void 0);
      __privateAdd19(this, _animation, void 0);
      __privateAdd19(this, _boxes, void 0);
      __privateAdd19(this, _previewTime, void 0);
      __privateAdd19(this, _previewBox, void 0);
      __privateAdd19(this, _currentBox, void 0);
      __privateAdd19(this, _boxPaddingLeft, void 0);
      __privateAdd19(this, _boxPaddingRight, void 0);
      __privateAdd19(this, _mediaChaptersCues, void 0);
      __privateAdd19(this, _updateRange, (value) => {
        if (this.dragging)
          return;
        if (isValidNumber(value)) {
          this.range.valueAsNumber = value;
        }
        this.updateBar();
      });
      this.container.appendChild(template10.content.cloneNode(true));
      const track = this.shadowRoot.querySelector("#track");
      track.insertAdjacentHTML(
        "afterbegin",
        '<div id="buffered" part="buffered"></div>'
      );
      __privateSet18(this, _boxes, this.shadowRoot.querySelectorAll('[part~="box"]'));
      __privateSet18(this, _previewBox, this.shadowRoot.querySelector('[part~="preview-box"]'));
      __privateSet18(this, _currentBox, this.shadowRoot.querySelector('[part~="current-box"]'));
      const computedStyle = getComputedStyle(this);
      __privateSet18(this, _boxPaddingLeft, parseInt(
        computedStyle.getPropertyValue("--media-box-padding-left")
      ));
      __privateSet18(this, _boxPaddingRight, parseInt(
        computedStyle.getPropertyValue("--media-box-padding-right")
      ));
      __privateSet18(this, _animation, new RangeAnimation(this.range, __privateGet19(this, _updateRange), 60));
    }
    static get observedAttributes() {
      return [
        ...super.observedAttributes,
        MediaUIAttributes.MEDIA_PAUSED,
        MediaUIAttributes.MEDIA_DURATION,
        MediaUIAttributes.MEDIA_SEEKABLE,
        MediaUIAttributes.MEDIA_CURRENT_TIME,
        MediaUIAttributes.MEDIA_PREVIEW_IMAGE,
        MediaUIAttributes.MEDIA_PREVIEW_TIME,
        MediaUIAttributes.MEDIA_PREVIEW_CHAPTER,
        MediaUIAttributes.MEDIA_BUFFERED,
        MediaUIAttributes.MEDIA_PLAYBACK_RATE,
        MediaUIAttributes.MEDIA_LOADING,
        MediaUIAttributes.MEDIA_ENDED
      ];
    }
    connectedCallback() {
      var _a3;
      super.connectedCallback();
      this.range.setAttribute("aria-label", t("seek"));
      __privateMethod6(this, _toggleRangeAnimation, toggleRangeAnimation_fn).call(this);
      __privateSet18(this, _rootNode, this.getRootNode());
      (_a3 = __privateGet19(this, _rootNode)) == null ? void 0 : _a3.addEventListener("transitionstart", this);
    }
    disconnectedCallback() {
      var _a3;
      super.disconnectedCallback();
      __privateMethod6(this, _toggleRangeAnimation, toggleRangeAnimation_fn).call(this);
      (_a3 = __privateGet19(this, _rootNode)) == null ? void 0 : _a3.removeEventListener("transitionstart", this);
      __privateSet18(this, _rootNode, null);
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      super.attributeChangedCallback(attrName, oldValue, newValue);
      if (oldValue == newValue)
        return;
      if (attrName === MediaUIAttributes.MEDIA_CURRENT_TIME || attrName === MediaUIAttributes.MEDIA_PAUSED || attrName === MediaUIAttributes.MEDIA_ENDED || attrName === MediaUIAttributes.MEDIA_LOADING || attrName === MediaUIAttributes.MEDIA_DURATION || attrName === MediaUIAttributes.MEDIA_SEEKABLE) {
        __privateGet19(this, _animation).update({
          start: calcRangeValueFromTime(this),
          duration: this.mediaSeekableEnd - this.mediaSeekableStart,
          playbackRate: this.mediaPlaybackRate
        });
        __privateMethod6(this, _toggleRangeAnimation, toggleRangeAnimation_fn).call(this);
        updateAriaValueText2(this);
      } else if (attrName === MediaUIAttributes.MEDIA_BUFFERED) {
        this.updateBufferedBar();
      }
      if (attrName === MediaUIAttributes.MEDIA_DURATION || attrName === MediaUIAttributes.MEDIA_SEEKABLE) {
        this.mediaChaptersCues = __privateGet19(this, _mediaChaptersCues);
        this.updateBar();
      }
    }
    get mediaChaptersCues() {
      return __privateGet19(this, _mediaChaptersCues);
    }
    set mediaChaptersCues(value) {
      var _a3;
      __privateSet18(this, _mediaChaptersCues, value);
      this.updateSegments(
        (_a3 = __privateGet19(this, _mediaChaptersCues)) == null ? void 0 : _a3.map((c) => ({
          start: calcRangeValueFromTime(this, c.startTime),
          end: calcRangeValueFromTime(this, c.endTime)
        }))
      );
    }
    /**
     * Is the media paused
     */
    get mediaPaused() {
      return getBooleanAttr(this, MediaUIAttributes.MEDIA_PAUSED);
    }
    set mediaPaused(value) {
      setBooleanAttr(this, MediaUIAttributes.MEDIA_PAUSED, value);
    }
    /**
     * Is the media loading
     */
    get mediaLoading() {
      return getBooleanAttr(this, MediaUIAttributes.MEDIA_LOADING);
    }
    set mediaLoading(value) {
      setBooleanAttr(this, MediaUIAttributes.MEDIA_LOADING, value);
    }
    /**
     *
     */
    get mediaDuration() {
      return getNumericAttr(this, MediaUIAttributes.MEDIA_DURATION);
    }
    set mediaDuration(value) {
      setNumericAttr(this, MediaUIAttributes.MEDIA_DURATION, value);
    }
    /**
     *
     */
    get mediaCurrentTime() {
      return getNumericAttr(this, MediaUIAttributes.MEDIA_CURRENT_TIME);
    }
    set mediaCurrentTime(value) {
      setNumericAttr(this, MediaUIAttributes.MEDIA_CURRENT_TIME, value);
    }
    /**
     *
     */
    get mediaPlaybackRate() {
      return getNumericAttr(this, MediaUIAttributes.MEDIA_PLAYBACK_RATE, 1);
    }
    set mediaPlaybackRate(value) {
      setNumericAttr(this, MediaUIAttributes.MEDIA_PLAYBACK_RATE, value);
    }
    /**
     * An array of ranges, each range being an array of two numbers.
     * e.g. [[1, 2], [3, 4]]
     */
    get mediaBuffered() {
      const buffered = this.getAttribute(MediaUIAttributes.MEDIA_BUFFERED);
      if (!buffered)
        return [];
      return buffered.split(" ").map((timePair) => timePair.split(":").map((timeStr) => +timeStr));
    }
    set mediaBuffered(list) {
      if (!list) {
        this.removeAttribute(MediaUIAttributes.MEDIA_BUFFERED);
        return;
      }
      const strVal = list.map((tuple) => tuple.join(":")).join(" ");
      this.setAttribute(MediaUIAttributes.MEDIA_BUFFERED, strVal);
    }
    /**
     * Range of values that can be seeked to
     * An array of two numbers [start, end]
     */
    get mediaSeekable() {
      const seekable = this.getAttribute(MediaUIAttributes.MEDIA_SEEKABLE);
      if (!seekable)
        return void 0;
      return seekable.split(":").map((time) => +time);
    }
    set mediaSeekable(range) {
      if (range == null) {
        this.removeAttribute(MediaUIAttributes.MEDIA_SEEKABLE);
        return;
      }
      this.setAttribute(MediaUIAttributes.MEDIA_SEEKABLE, range.join(":"));
    }
    /**
     *
     */
    get mediaSeekableEnd() {
      var _a3;
      const [, end = this.mediaDuration] = (_a3 = this.mediaSeekable) != null ? _a3 : [];
      return end;
    }
    get mediaSeekableStart() {
      var _a3;
      const [start = 0] = (_a3 = this.mediaSeekable) != null ? _a3 : [];
      return start;
    }
    /**
     * The url of the preview image
     */
    get mediaPreviewImage() {
      return getStringAttr(this, MediaUIAttributes.MEDIA_PREVIEW_IMAGE);
    }
    set mediaPreviewImage(value) {
      setStringAttr(this, MediaUIAttributes.MEDIA_PREVIEW_IMAGE, value);
    }
    /**
     *
     */
    get mediaPreviewTime() {
      return getNumericAttr(this, MediaUIAttributes.MEDIA_PREVIEW_TIME);
    }
    set mediaPreviewTime(value) {
      setNumericAttr(this, MediaUIAttributes.MEDIA_PREVIEW_TIME, value);
    }
    /**
     *
     */
    get mediaEnded() {
      return getBooleanAttr(this, MediaUIAttributes.MEDIA_ENDED);
    }
    set mediaEnded(value) {
      setBooleanAttr(this, MediaUIAttributes.MEDIA_ENDED, value);
    }
    /* Add a buffered progress bar */
    updateBar() {
      super.updateBar();
      this.updateBufferedBar();
      this.updateCurrentBox();
    }
    updateBufferedBar() {
      var _a3;
      const buffered = this.mediaBuffered;
      if (!buffered.length) {
        return;
      }
      let relativeBufferedEnd;
      if (!this.mediaEnded) {
        const currentTime = this.mediaCurrentTime;
        const [, bufferedEnd = this.mediaSeekableStart] = (_a3 = buffered.find(
          ([start, end]) => start <= currentTime && currentTime <= end
        )) != null ? _a3 : [];
        relativeBufferedEnd = calcRangeValueFromTime(this, bufferedEnd);
      } else {
        relativeBufferedEnd = 1;
      }
      const { style } = getOrInsertCSSRule(this.shadowRoot, "#buffered");
      style.setProperty("width", `${relativeBufferedEnd * 100}%`);
    }
    updateCurrentBox() {
      const currentSlot = this.shadowRoot.querySelector(
        'slot[name="current"]'
      );
      if (!currentSlot.assignedElements().length)
        return;
      const currentRailRule = getOrInsertCSSRule(
        this.shadowRoot,
        "#current-rail"
      );
      const currentBoxRule = getOrInsertCSSRule(
        this.shadowRoot,
        '[part~="current-box"]'
      );
      const rects = __privateMethod6(this, _getElementRects, getElementRects_fn).call(this, __privateGet19(this, _currentBox));
      const boxPos = __privateMethod6(this, _getBoxPosition, getBoxPosition_fn).call(this, rects, this.range.valueAsNumber);
      const boxShift = __privateMethod6(this, _getBoxShiftPosition, getBoxShiftPosition_fn).call(this, rects, this.range.valueAsNumber);
      currentRailRule.style.transform = `translateX(${boxPos})`;
      currentRailRule.style.setProperty("--_range-width", `${rects.range.width}`);
      currentBoxRule.style.setProperty("--_box-shift", `${boxShift}`);
      currentBoxRule.style.setProperty("--_box-width", `${rects.box.width}px`);
      currentBoxRule.style.setProperty("visibility", "initial");
    }
    handleEvent(evt) {
      super.handleEvent(evt);
      switch (evt.type) {
        case "input":
          __privateMethod6(this, _seekRequest, seekRequest_fn).call(this);
          break;
        case "pointermove":
          __privateMethod6(this, _handlePointerMove3, handlePointerMove_fn3).call(this, evt);
          break;
        case "pointerup":
        case "pointerleave":
          __privateMethod6(this, _previewRequest, previewRequest_fn).call(this, null);
          break;
        case "transitionstart":
          if (containsComposedNode(evt.target, this)) {
            setTimeout(() => __privateMethod6(this, _toggleRangeAnimation, toggleRangeAnimation_fn).call(this), 0);
          }
          break;
      }
    }
  };
  _rootNode = /* @__PURE__ */ new WeakMap();
  _animation = /* @__PURE__ */ new WeakMap();
  _boxes = /* @__PURE__ */ new WeakMap();
  _previewTime = /* @__PURE__ */ new WeakMap();
  _previewBox = /* @__PURE__ */ new WeakMap();
  _currentBox = /* @__PURE__ */ new WeakMap();
  _boxPaddingLeft = /* @__PURE__ */ new WeakMap();
  _boxPaddingRight = /* @__PURE__ */ new WeakMap();
  _mediaChaptersCues = /* @__PURE__ */ new WeakMap();
  _toggleRangeAnimation = /* @__PURE__ */ new WeakSet();
  toggleRangeAnimation_fn = function() {
    if (__privateMethod6(this, _shouldRangeAnimate, shouldRangeAnimate_fn).call(this)) {
      __privateGet19(this, _animation).start();
    } else {
      __privateGet19(this, _animation).stop();
    }
  };
  _shouldRangeAnimate = /* @__PURE__ */ new WeakSet();
  shouldRangeAnimate_fn = function() {
    return this.isConnected && !this.mediaPaused && !this.mediaLoading && !this.mediaEnded && this.mediaSeekableEnd > 0 && isElementVisible(this);
  };
  _updateRange = /* @__PURE__ */ new WeakMap();
  _getElementRects = /* @__PURE__ */ new WeakSet();
  getElementRects_fn = function(box) {
    var _a3;
    const bounds = (_a3 = this.getAttribute("bounds") ? closestComposedNode(this, `#${this.getAttribute("bounds")}`) : this.parentElement) != null ? _a3 : this;
    const boundsRect = bounds.getBoundingClientRect();
    const rangeRect = this.range.getBoundingClientRect();
    const width = box.offsetWidth;
    const min = -(rangeRect.left - boundsRect.left - width / 2);
    const max = boundsRect.right - rangeRect.left - width / 2;
    return {
      box: { width, min, max },
      bounds: boundsRect,
      range: rangeRect
    };
  };
  _getBoxPosition = /* @__PURE__ */ new WeakSet();
  getBoxPosition_fn = function(rects, ratio) {
    let position = `${ratio * 100}%`;
    const { width, min, max } = rects.box;
    if (!width)
      return position;
    if (!Number.isNaN(min)) {
      const pad = `var(--media-box-padding-left)`;
      const minPos = `calc(1 / var(--_range-width) * 100 * ${min}% + ${pad})`;
      position = `max(${minPos}, ${position})`;
    }
    if (!Number.isNaN(max)) {
      const pad = `var(--media-box-padding-right)`;
      const maxPos = `calc(1 / var(--_range-width) * 100 * ${max}% - ${pad})`;
      position = `min(${position}, ${maxPos})`;
    }
    return position;
  };
  _getBoxShiftPosition = /* @__PURE__ */ new WeakSet();
  getBoxShiftPosition_fn = function(rects, ratio) {
    const { width, min, max } = rects.box;
    const pointerX = ratio * rects.range.width;
    if (pointerX < min + __privateGet19(this, _boxPaddingLeft)) {
      const offset = rects.range.left - rects.bounds.left - __privateGet19(this, _boxPaddingLeft);
      return `${pointerX - width / 2 + offset}px`;
    }
    if (pointerX > max - __privateGet19(this, _boxPaddingRight)) {
      const offset = rects.bounds.right - rects.range.right - __privateGet19(this, _boxPaddingRight);
      return `${pointerX + width / 2 - offset - rects.range.width}px`;
    }
    return 0;
  };
  _handlePointerMove3 = /* @__PURE__ */ new WeakSet();
  handlePointerMove_fn3 = function(evt) {
    const isOverBoxes = [...__privateGet19(this, _boxes)].some(
      (b) => evt.composedPath().includes(b)
    );
    if (!this.dragging && (isOverBoxes || !evt.composedPath().includes(this))) {
      __privateMethod6(this, _previewRequest, previewRequest_fn).call(this, null);
      return;
    }
    const duration = this.mediaSeekableEnd;
    if (!duration)
      return;
    const previewRailRule = getOrInsertCSSRule(
      this.shadowRoot,
      "#preview-rail"
    );
    const previewBoxRule = getOrInsertCSSRule(
      this.shadowRoot,
      '[part~="preview-box"]'
    );
    const rects = __privateMethod6(this, _getElementRects, getElementRects_fn).call(this, __privateGet19(this, _previewBox));
    let pointerRatio = (evt.clientX - rects.range.left) / rects.range.width;
    pointerRatio = Math.max(0, Math.min(1, pointerRatio));
    const boxPos = __privateMethod6(this, _getBoxPosition, getBoxPosition_fn).call(this, rects, pointerRatio);
    const boxShift = __privateMethod6(this, _getBoxShiftPosition, getBoxShiftPosition_fn).call(this, rects, pointerRatio);
    previewRailRule.style.transform = `translateX(${boxPos})`;
    previewRailRule.style.setProperty("--_range-width", `${rects.range.width}`);
    previewBoxRule.style.setProperty("--_box-shift", `${boxShift}`);
    previewBoxRule.style.setProperty("--_box-width", `${rects.box.width}px`);
    const diff = Math.round(__privateGet19(this, _previewTime)) - Math.round(pointerRatio * duration);
    if (Math.abs(diff) < 1 && pointerRatio > 0.01 && pointerRatio < 0.99)
      return;
    __privateSet18(this, _previewTime, pointerRatio * duration);
    __privateMethod6(this, _previewRequest, previewRequest_fn).call(this, __privateGet19(this, _previewTime));
  };
  _previewRequest = /* @__PURE__ */ new WeakSet();
  previewRequest_fn = function(detail) {
    this.dispatchEvent(
      new GlobalThis.CustomEvent(MediaUIEvents.MEDIA_PREVIEW_REQUEST, {
        composed: true,
        bubbles: true,
        detail
      })
    );
  };
  _seekRequest = /* @__PURE__ */ new WeakSet();
  seekRequest_fn = function() {
    __privateGet19(this, _animation).stop();
    const detail = calcTimeFromRangeValue(this);
    this.dispatchEvent(
      new GlobalThis.CustomEvent(MediaUIEvents.MEDIA_SEEK_REQUEST, {
        composed: true,
        bubbles: true,
        detail
      })
    );
  };
  if (!GlobalThis.customElements.get("media-time-range")) {
    GlobalThis.customElements.define("media-time-range", MediaTimeRange);
  }

  // ../../node_modules/media-chrome/dist/media-tooltip.js
  var Attributes11 = {
    PLACEMENT: "placement",
    BOUNDS: "bounds"
  };
  var template11 = Document2.createElement("template");
  template11.innerHTML = /*html*/
  `
  <style>
    :host {
      --_tooltip-background-color: var(--media-tooltip-background-color, var(--media-secondary-color, rgba(20, 20, 30, .7)));
      --_tooltip-background: var(--media-tooltip-background, var(--_tooltip-background-color));
      --_tooltip-arrow-half-width: calc(var(--media-tooltip-arrow-width, 12px) / 2);
      --_tooltip-arrow-height: var(--media-tooltip-arrow-height, 5px);
      --_tooltip-arrow-background: var(--media-tooltip-arrow-color, var(--_tooltip-background-color));
      position: relative;
      pointer-events: none;
      display: var(--media-tooltip-display, inline-flex);
      justify-content: center;
      align-items: center;
      box-sizing: border-box;
      z-index: var(--media-tooltip-z-index, 1);
      background: var(--_tooltip-background);
      color: var(--media-text-color, var(--media-primary-color, rgb(238 238 238)));
      font: var(--media-font,
        var(--media-font-weight, 400)
        var(--media-font-size, 13px) /
        var(--media-text-content-height, var(--media-control-height, 18px))
        var(--media-font-family, helvetica neue, segoe ui, roboto, arial, sans-serif));
      padding: var(--media-tooltip-padding, .35em .7em);
      border: var(--media-tooltip-border, none);
      border-radius: var(--media-tooltip-border-radius, 5px);
      filter: var(--media-tooltip-filter, drop-shadow(0 0 4px rgba(0, 0, 0, .2)));
      white-space: var(--media-tooltip-white-space, nowrap);
    }

    :host([hidden]) {
      display: none;
    }

    img, svg {
      display: inline-block;
    }

    #arrow {
      position: absolute;
      width: 0px;
      height: 0px;
      border-style: solid;
      display: var(--media-tooltip-arrow-display, block);
    }

    :host(:not([placement])),
    :host([placement="top"]) {
      position: absolute;
      bottom: calc(100% + var(--media-tooltip-distance, 12px));
      left: 50%;
      transform: translate(calc(-50% - var(--media-tooltip-offset-x, 0px)), 0);
    }
    :host(:not([placement])) #arrow,
    :host([placement="top"]) #arrow {
      top: 100%;
      left: 50%;
      border-width: var(--_tooltip-arrow-height) var(--_tooltip-arrow-half-width) 0 var(--_tooltip-arrow-half-width);
      border-color: var(--_tooltip-arrow-background) transparent transparent transparent;
      transform: translate(calc(-50% + var(--media-tooltip-offset-x, 0px)), 0);
    }

    :host([placement="right"]) {
      position: absolute;
      left: calc(100% + var(--media-tooltip-distance, 12px));
      top: 50%;
      transform: translate(0, -50%);
    }
    :host([placement="right"]) #arrow {
      top: 50%;
      right: 100%;
      border-width: var(--_tooltip-arrow-half-width) var(--_tooltip-arrow-height) var(--_tooltip-arrow-half-width) 0;
      border-color: transparent var(--_tooltip-arrow-background) transparent transparent;
      transform: translate(0, -50%);
    }

    :host([placement="bottom"]) {
      position: absolute;
      top: calc(100% + var(--media-tooltip-distance, 12px));
      left: 50%;
      transform: translate(calc(-50% - var(--media-tooltip-offset-x, 0px)), 0);
    }
    :host([placement="bottom"]) #arrow {
      bottom: 100%;
      left: 50%;
      border-width: 0 var(--_tooltip-arrow-half-width) var(--_tooltip-arrow-height) var(--_tooltip-arrow-half-width);
      border-color: transparent transparent var(--_tooltip-arrow-background) transparent;
      transform: translate(calc(-50% + var(--media-tooltip-offset-x, 0px)), 0);
    }

    :host([placement="left"]) {
      position: absolute;
      right: calc(100% + var(--media-tooltip-distance, 12px));
      top: 50%;
      transform: translate(0, -50%);
    }
    :host([placement="left"]) #arrow {
      top: 50%;
      left: 100%;
      border-width: var(--_tooltip-arrow-half-width) 0 var(--_tooltip-arrow-half-width) var(--_tooltip-arrow-height);
      border-color: transparent transparent transparent var(--_tooltip-arrow-background);
      transform: translate(0, -50%);
    }
    
    :host([placement="none"]) #arrow {
      display: none;
    }

  </style>
  <slot></slot>
  <div id="arrow"></div>
`;
  var MediaTooltip = class extends GlobalThis.HTMLElement {
    constructor() {
      super();
      this.updateXOffset = () => {
        var _a3;
        if (!isElementVisible(this, { checkOpacity: false, checkVisibilityCSS: false }))
          return;
        const placement = this.placement;
        if (placement === "left" || placement === "right") {
          this.style.removeProperty("--media-tooltip-offset-x");
          return;
        }
        const tooltipStyle = getComputedStyle(this);
        const containingEl = (_a3 = closestComposedNode(this, "#" + this.bounds)) != null ? _a3 : getMediaController(this);
        if (!containingEl)
          return;
        const { x: containerX, width: containerWidth } = containingEl.getBoundingClientRect();
        const { x: tooltipX, width: tooltipWidth } = this.getBoundingClientRect();
        const tooltipRight = tooltipX + tooltipWidth;
        const containerRight = containerX + containerWidth;
        const offsetXVal = tooltipStyle.getPropertyValue(
          "--media-tooltip-offset-x"
        );
        const currOffsetX = offsetXVal ? parseFloat(offsetXVal.replace("px", "")) : 0;
        const marginVal = tooltipStyle.getPropertyValue(
          "--media-tooltip-container-margin"
        );
        const currMargin = marginVal ? parseFloat(marginVal.replace("px", "")) : 0;
        const leftDiff = tooltipX - containerX + currOffsetX - currMargin;
        const rightDiff = tooltipRight - containerRight + currOffsetX + currMargin;
        if (leftDiff < 0) {
          this.style.setProperty("--media-tooltip-offset-x", `${leftDiff}px`);
          return;
        }
        if (rightDiff > 0) {
          this.style.setProperty("--media-tooltip-offset-x", `${rightDiff}px`);
          return;
        }
        this.style.removeProperty("--media-tooltip-offset-x");
      };
      if (!this.shadowRoot) {
        this.attachShadow({ mode: "open" });
        this.shadowRoot.appendChild(template11.content.cloneNode(true));
      }
      this.arrowEl = this.shadowRoot.querySelector("#arrow");
      if (Object.prototype.hasOwnProperty.call(this, "placement")) {
        const placement = this.placement;
        delete this.placement;
        this.placement = placement;
      }
    }
    static get observedAttributes() {
      return [Attributes11.PLACEMENT, Attributes11.BOUNDS];
    }
    /**
     * Get or set tooltip placement
     */
    get placement() {
      return getStringAttr(this, Attributes11.PLACEMENT);
    }
    set placement(value) {
      setStringAttr(this, Attributes11.PLACEMENT, value);
    }
    /**
     * Get or set tooltip container ID selector that will constrain the tooltips
     * horizontal position.
     */
    get bounds() {
      return getStringAttr(this, Attributes11.BOUNDS);
    }
    set bounds(value) {
      setStringAttr(this, Attributes11.BOUNDS, value);
    }
  };
  if (!GlobalThis.customElements.get("media-tooltip")) {
    GlobalThis.customElements.define("media-tooltip", MediaTooltip);
  }

  // ../../node_modules/media-chrome/dist/media-volume-range.js
  var DEFAULT_VOLUME = 1;
  var toVolume = (el) => {
    if (el.mediaMuted)
      return 0;
    return el.mediaVolume;
  };
  var formatAsPercentString = (value) => `${Math.round(value * 100)}%`;
  var MediaVolumeRange = class extends MediaChromeRange {
    static get observedAttributes() {
      return [
        ...super.observedAttributes,
        MediaUIAttributes.MEDIA_VOLUME,
        MediaUIAttributes.MEDIA_MUTED,
        MediaUIAttributes.MEDIA_VOLUME_UNAVAILABLE
      ];
    }
    constructor() {
      super();
      this.range.addEventListener("input", () => {
        const detail = this.range.value;
        const evt = new GlobalThis.CustomEvent(
          MediaUIEvents.MEDIA_VOLUME_REQUEST,
          {
            composed: true,
            bubbles: true,
            detail
          }
        );
        this.dispatchEvent(evt);
      });
    }
    connectedCallback() {
      super.connectedCallback();
      this.range.setAttribute("aria-label", t("volume"));
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      super.attributeChangedCallback(attrName, oldValue, newValue);
      if (attrName === MediaUIAttributes.MEDIA_VOLUME || attrName === MediaUIAttributes.MEDIA_MUTED) {
        this.range.valueAsNumber = toVolume(this);
        this.range.setAttribute(
          "aria-valuetext",
          formatAsPercentString(this.range.valueAsNumber)
        );
        this.updateBar();
      }
    }
    /**
     *
     */
    get mediaVolume() {
      return getNumericAttr(this, MediaUIAttributes.MEDIA_VOLUME, DEFAULT_VOLUME);
    }
    set mediaVolume(value) {
      setNumericAttr(this, MediaUIAttributes.MEDIA_VOLUME, value);
    }
    /**
     * Is the media currently muted
     */
    get mediaMuted() {
      return getBooleanAttr(this, MediaUIAttributes.MEDIA_MUTED);
    }
    set mediaMuted(value) {
      setBooleanAttr(this, MediaUIAttributes.MEDIA_MUTED, value);
    }
    /**
     * The volume unavailability state
     */
    get mediaVolumeUnavailable() {
      return getStringAttr(this, MediaUIAttributes.MEDIA_VOLUME_UNAVAILABLE);
    }
    set mediaVolumeUnavailable(value) {
      setStringAttr(this, MediaUIAttributes.MEDIA_VOLUME_UNAVAILABLE, value);
    }
  };
  if (!GlobalThis.customElements.get("media-volume-range")) {
    GlobalThis.customElements.define("media-volume-range", MediaVolumeRange);
  }

  // ../../node_modules/media-chrome/dist/utils/template-parts.js
  var __accessCheck20 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet20 = (obj, member, getter) => {
    __accessCheck20(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd20 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet19 = (obj, member, value, setter) => {
    __accessCheck20(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var _parts;
  var _processor;
  var _items;
  var _value;
  var _element;
  var _attributeName;
  var _namespaceURI;
  var _list;
  var list_get;
  var _parentNode;
  var _nodes;
  var ELEMENT = 1;
  var STRING2 = 0;
  var PART = 1;
  var defaultProcessor = {
    processCallback(instance, parts, state) {
      if (!state)
        return;
      for (const [expression, part] of parts) {
        if (expression in state) {
          const value = state[expression];
          if (typeof value === "boolean" && part instanceof AttrPart && typeof part.element[part.attributeName] === "boolean") {
            part.booleanValue = value;
          } else if (typeof value === "function" && part instanceof AttrPart) {
            part.element[part.attributeName] = value;
          } else {
            part.value = value;
          }
        }
      }
    }
  };
  var TemplateInstance = class extends GlobalThis.DocumentFragment {
    constructor(template18, state, processor2 = defaultProcessor) {
      var _a3;
      super();
      __privateAdd20(this, _parts, void 0);
      __privateAdd20(this, _processor, void 0);
      this.append(template18.content.cloneNode(true));
      __privateSet19(this, _parts, parse(this));
      __privateSet19(this, _processor, processor2);
      (_a3 = processor2.createCallback) == null ? void 0 : _a3.call(processor2, this, __privateGet20(this, _parts), state);
      processor2.processCallback(this, __privateGet20(this, _parts), state);
    }
    update(state) {
      __privateGet20(this, _processor).processCallback(this, __privateGet20(this, _parts), state);
    }
  };
  _parts = /* @__PURE__ */ new WeakMap();
  _processor = /* @__PURE__ */ new WeakMap();
  var parse = (element, parts = []) => {
    let type, value;
    for (const attr of element.attributes || []) {
      if (attr.value.includes("{{")) {
        const list = new AttrPartList();
        for ([type, value] of tokenize(attr.value)) {
          if (!type)
            list.append(value);
          else {
            const part = new AttrPart(element, attr.name, attr.namespaceURI);
            list.append(part);
            parts.push([value, part]);
          }
        }
        attr.value = list.toString();
      }
    }
    for (const node of element.childNodes) {
      if (node.nodeType === ELEMENT && !(node instanceof HTMLTemplateElement)) {
        parse(node, parts);
      } else {
        const data = node.data;
        if (node.nodeType === ELEMENT || data.includes("{{")) {
          const items = [];
          if (data) {
            for ([type, value] of tokenize(data))
              if (!type)
                items.push(new Text(value));
              else {
                const part = new ChildNodePart(element);
                items.push(part);
                parts.push([value, part]);
              }
          } else if (node instanceof HTMLTemplateElement) {
            const part = new InnerTemplatePart(element, node);
            items.push(part);
            parts.push([part.expression, part]);
          }
          node.replaceWith(
            ...items.flatMap((part) => part.replacementNodes || [part])
          );
        }
      }
    }
    return parts;
  };
  var mem = {};
  var tokenize = (text) => {
    let value = "", open = 0, tokens = mem[text], i = 0, c;
    if (tokens)
      return tokens;
    else
      tokens = [];
    for (; c = text[i]; i++) {
      if (c === "{" && text[i + 1] === "{" && text[i - 1] !== "\\" && text[i + 2] && ++open == 1) {
        if (value)
          tokens.push([STRING2, value]);
        value = "";
        i++;
      } else if (c === "}" && text[i + 1] === "}" && text[i - 1] !== "\\" && !--open) {
        tokens.push([PART, value.trim()]);
        value = "";
        i++;
      } else
        value += c || "";
    }
    if (value)
      tokens.push([STRING2, (open > 0 ? "{{" : "") + value]);
    return mem[text] = tokens;
  };
  var FRAGMENT = 11;
  var Part2 = class {
    get value() {
      return "";
    }
    set value(val) {
    }
    toString() {
      return this.value;
    }
  };
  var attrPartToList = /* @__PURE__ */ new WeakMap();
  var AttrPartList = class {
    constructor() {
      __privateAdd20(this, _items, []);
    }
    [Symbol.iterator]() {
      return __privateGet20(this, _items).values();
    }
    get length() {
      return __privateGet20(this, _items).length;
    }
    item(index) {
      return __privateGet20(this, _items)[index];
    }
    append(...items) {
      for (const item of items) {
        if (item instanceof AttrPart) {
          attrPartToList.set(item, this);
        }
        __privateGet20(this, _items).push(item);
      }
    }
    toString() {
      return __privateGet20(this, _items).join("");
    }
  };
  _items = /* @__PURE__ */ new WeakMap();
  var AttrPart = class extends Part2 {
    constructor(element, attributeName, namespaceURI) {
      super();
      __privateAdd20(this, _list);
      __privateAdd20(this, _value, "");
      __privateAdd20(this, _element, void 0);
      __privateAdd20(this, _attributeName, void 0);
      __privateAdd20(this, _namespaceURI, void 0);
      __privateSet19(this, _element, element);
      __privateSet19(this, _attributeName, attributeName);
      __privateSet19(this, _namespaceURI, namespaceURI);
    }
    get attributeName() {
      return __privateGet20(this, _attributeName);
    }
    get attributeNamespace() {
      return __privateGet20(this, _namespaceURI);
    }
    get element() {
      return __privateGet20(this, _element);
    }
    get value() {
      return __privateGet20(this, _value);
    }
    set value(newValue) {
      if (__privateGet20(this, _value) === newValue)
        return;
      __privateSet19(this, _value, newValue);
      if (!__privateGet20(this, _list, list_get) || __privateGet20(this, _list, list_get).length === 1) {
        if (newValue == null) {
          __privateGet20(this, _element).removeAttributeNS(
            __privateGet20(this, _namespaceURI),
            __privateGet20(this, _attributeName)
          );
        } else {
          __privateGet20(this, _element).setAttributeNS(
            __privateGet20(this, _namespaceURI),
            __privateGet20(this, _attributeName),
            newValue
          );
        }
      } else {
        __privateGet20(this, _element).setAttributeNS(
          __privateGet20(this, _namespaceURI),
          __privateGet20(this, _attributeName),
          __privateGet20(this, _list, list_get).toString()
        );
      }
    }
    get booleanValue() {
      return __privateGet20(this, _element).hasAttributeNS(
        __privateGet20(this, _namespaceURI),
        __privateGet20(this, _attributeName)
      );
    }
    set booleanValue(value) {
      if (!__privateGet20(this, _list, list_get) || __privateGet20(this, _list, list_get).length === 1)
        this.value = value ? "" : null;
      else
        throw new DOMException("Value is not fully templatized");
    }
  };
  _value = /* @__PURE__ */ new WeakMap();
  _element = /* @__PURE__ */ new WeakMap();
  _attributeName = /* @__PURE__ */ new WeakMap();
  _namespaceURI = /* @__PURE__ */ new WeakMap();
  _list = /* @__PURE__ */ new WeakSet();
  list_get = function() {
    return attrPartToList.get(this);
  };
  var ChildNodePart = class extends Part2 {
    constructor(parentNode, nodes) {
      super();
      __privateAdd20(this, _parentNode, void 0);
      __privateAdd20(this, _nodes, void 0);
      __privateSet19(this, _parentNode, parentNode);
      __privateSet19(this, _nodes, nodes ? [...nodes] : [new Text()]);
    }
    get replacementNodes() {
      return __privateGet20(this, _nodes);
    }
    get parentNode() {
      return __privateGet20(this, _parentNode);
    }
    get nextSibling() {
      return __privateGet20(this, _nodes)[__privateGet20(this, _nodes).length - 1].nextSibling;
    }
    get previousSibling() {
      return __privateGet20(this, _nodes)[0].previousSibling;
    }
    // FIXME: not sure why do we need string serialization here? Just because parent class has type DOMString?
    get value() {
      return __privateGet20(this, _nodes).map((node) => node.textContent).join("");
    }
    set value(newValue) {
      this.replace(newValue);
    }
    replace(...nodes) {
      const normalisedNodes = nodes.flat().flatMap(
        (node) => node == null ? [new Text()] : node.forEach ? [...node] : node.nodeType === FRAGMENT ? [...node.childNodes] : node.nodeType ? [node] : [new Text(node)]
      );
      if (!normalisedNodes.length)
        normalisedNodes.push(new Text());
      __privateSet19(this, _nodes, swapdom(
        __privateGet20(this, _nodes)[0].parentNode,
        __privateGet20(this, _nodes),
        normalisedNodes,
        this.nextSibling
      ));
    }
  };
  _parentNode = /* @__PURE__ */ new WeakMap();
  _nodes = /* @__PURE__ */ new WeakMap();
  var InnerTemplatePart = class extends ChildNodePart {
    constructor(parentNode, template18) {
      const directive = template18.getAttribute("directive") || template18.getAttribute("type");
      let expression = template18.getAttribute("expression") || template18.getAttribute(directive) || "";
      if (expression.startsWith("{{"))
        expression = expression.trim().slice(2, -2).trim();
      super(parentNode);
      this.expression = expression;
      this.template = template18;
      this.directive = directive;
    }
  };
  function swapdom(parent, a, b, end = null) {
    let i = 0, cur, next, bi, n = b.length, m = a.length;
    while (i < n && i < m && a[i] == b[i])
      i++;
    while (i < n && i < m && b[n - 1] == a[m - 1])
      end = b[--m, --n];
    if (i == m)
      while (i < n)
        parent.insertBefore(b[i++], end);
    if (i == n)
      while (i < m)
        parent.removeChild(a[i++]);
    else {
      cur = a[i];
      while (i < n) {
        bi = b[i++], next = cur ? cur.nextSibling : end;
        if (cur == bi)
          cur = next;
        else if (i < n && b[i] == next)
          parent.replaceChild(bi, cur), cur = next;
        else
          parent.insertBefore(bi, cur);
      }
      while (cur != end)
        next = cur.nextSibling, parent.removeChild(cur), cur = next;
    }
    return b;
  }

  // ../../node_modules/media-chrome/dist/utils/template-processor.js
  var pipeModifiers = {
    string: (value) => String(value)
  };
  var PartialTemplate = class {
    constructor(template18) {
      this.template = template18;
      this.state = void 0;
    }
  };
  var templates = /* @__PURE__ */ new WeakMap();
  var templateInstances = /* @__PURE__ */ new WeakMap();
  var Directives = {
    partial: (part, state) => {
      state[part.expression] = new PartialTemplate(part.template);
    },
    if: (part, state) => {
      var _a3;
      if (evaluateExpression(part.expression, state)) {
        if (templates.get(part) !== part.template) {
          templates.set(part, part.template);
          const tpl = new TemplateInstance(part.template, state, processor);
          part.replace(tpl);
          templateInstances.set(part, tpl);
        } else {
          (_a3 = templateInstances.get(part)) == null ? void 0 : _a3.update(state);
        }
      } else {
        part.replace("");
        templates.delete(part);
        templateInstances.delete(part);
      }
    }
  };
  var DirectiveNames = Object.keys(Directives);
  var processor = {
    processCallback(instance, parts, state) {
      var _a3, _b2;
      if (!state)
        return;
      for (const [expression, part] of parts) {
        if (part instanceof InnerTemplatePart) {
          if (!part.directive) {
            const directive = DirectiveNames.find(
              (n) => part.template.hasAttribute(n)
            );
            if (directive) {
              part.directive = directive;
              part.expression = part.template.getAttribute(directive);
            }
          }
          (_a3 = Directives[part.directive]) == null ? void 0 : _a3.call(Directives, part, state);
          continue;
        }
        let value = evaluateExpression(expression, state);
        if (value instanceof PartialTemplate) {
          if (templates.get(part) !== value.template) {
            templates.set(part, value.template);
            value = new TemplateInstance(value.template, value.state, processor);
            part.value = value;
            templateInstances.set(part, value);
          } else {
            (_b2 = templateInstances.get(part)) == null ? void 0 : _b2.update(value.state);
          }
          continue;
        }
        if (value) {
          if (part instanceof AttrPart) {
            if (part.attributeName.startsWith("aria-")) {
              value = String(value);
            }
          }
          if (part instanceof AttrPart) {
            if (typeof value === "boolean") {
              part.booleanValue = value;
            } else if (typeof value === "function") {
              part.element[part.attributeName] = value;
            } else {
              part.value = value;
            }
          } else {
            part.value = value;
            templates.delete(part);
            templateInstances.delete(part);
          }
        } else {
          if (part instanceof AttrPart) {
            part.value = void 0;
          } else {
            part.value = void 0;
            templates.delete(part);
            templateInstances.delete(part);
          }
        }
      }
    }
  };
  var operators = {
    "!": (a) => !a,
    "!!": (a) => !!a,
    "==": (a, b) => a == b,
    "!=": (a, b) => a != b,
    ">": (a, b) => a > b,
    ">=": (a, b) => a >= b,
    "<": (a, b) => a < b,
    "<=": (a, b) => a <= b,
    "??": (a, b) => a != null ? a : b,
    "|": (a, b) => {
      var _a3;
      return (_a3 = pipeModifiers[b]) == null ? void 0 : _a3.call(pipeModifiers, a);
    }
  };
  function tokenizeExpression(expr) {
    return tokenize2(expr, {
      boolean: /true|false/,
      number: /-?\d+\.?\d*/,
      string: /(["'])((?:\\.|[^\\])*?)\1/,
      operator: /[!=><][=!]?|\?\?|\|/,
      ws: /\s+/,
      param: /[$a-z_][$\w]*/i
    }).filter(({ type }) => type !== "ws");
  }
  function evaluateExpression(expr, state = {}) {
    var _a3, _b2, _c, _d, _e, _f, _g;
    const tokens = tokenizeExpression(expr);
    if (tokens.length === 0 || tokens.some(({ type }) => !type)) {
      return invalidExpression(expr);
    }
    if (((_a3 = tokens[0]) == null ? void 0 : _a3.token) === ">") {
      const partial = state[(_b2 = tokens[1]) == null ? void 0 : _b2.token];
      if (!partial) {
        return invalidExpression(expr);
      }
      const partialState = { ...state };
      partial.state = partialState;
      const args = tokens.slice(2);
      for (let i = 0; i < args.length; i += 3) {
        const name = (_c = args[i]) == null ? void 0 : _c.token;
        const operator = (_d = args[i + 1]) == null ? void 0 : _d.token;
        const value = (_e = args[i + 2]) == null ? void 0 : _e.token;
        if (name && operator === "=") {
          partialState[name] = getParamValue(value, state);
        }
      }
      return partial;
    }
    if (tokens.length === 1) {
      if (!isValidParam(tokens[0])) {
        return invalidExpression(expr);
      }
      return getParamValue(tokens[0].token, state);
    }
    if (tokens.length === 2) {
      const operator = (_f = tokens[0]) == null ? void 0 : _f.token;
      const run = operators[operator];
      if (!run || !isValidParam(tokens[1])) {
        return invalidExpression(expr);
      }
      const a = getParamValue(tokens[1].token, state);
      return run(a);
    }
    if (tokens.length === 3) {
      const operator = (_g = tokens[1]) == null ? void 0 : _g.token;
      const run = operators[operator];
      if (!run || !isValidParam(tokens[0]) || !isValidParam(tokens[2])) {
        return invalidExpression(expr);
      }
      const a = getParamValue(tokens[0].token, state);
      if (operator === "|") {
        return run(a, tokens[2].token);
      }
      const b = getParamValue(tokens[2].token, state);
      return run(a, b);
    }
  }
  function invalidExpression(expr) {
    console.warn(`Warning: invalid expression \`${expr}\``);
    return false;
  }
  function isValidParam({ type }) {
    return ["number", "boolean", "string", "param"].includes(type);
  }
  function getParamValue(raw, state) {
    const firstChar = raw[0];
    const lastChar = raw.slice(-1);
    if (raw === "true" || raw === "false") {
      return raw === "true";
    }
    if (firstChar === lastChar && [`'`, `"`].includes(firstChar)) {
      return raw.slice(1, -1);
    }
    if (isNumericString(raw)) {
      return parseFloat(raw);
    }
    return state[raw];
  }
  function tokenize2(str, parsers) {
    let len, match, token;
    const tokens = [];
    while (str) {
      token = null;
      len = str.length;
      for (const key in parsers) {
        match = parsers[key].exec(str);
        if (match && match.index < len) {
          token = {
            token: match[0],
            type: key,
            matches: match.slice(1)
          };
          len = match.index;
        }
      }
      if (len) {
        tokens.push({
          token: str.substr(0, len),
          type: void 0
        });
      }
      if (token) {
        tokens.push(token);
      }
      str = str.substr(len + (token ? token.token.length : 0));
    }
    return tokens;
  }

  // ../../node_modules/media-chrome/dist/media-theme-element.js
  var __accessCheck21 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet21 = (obj, member, getter) => {
    __accessCheck21(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd21 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet20 = (obj, member, value, setter) => {
    __accessCheck21(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var __privateMethod7 = (obj, member, method) => {
    __accessCheck21(obj, member, "access private method");
    return method;
  };
  var _template;
  var _prevTemplate;
  var _prevTemplateId;
  var _upgradeProperty;
  var upgradeProperty_fn;
  var _updateTemplate;
  var updateTemplate_fn;
  var observedMediaAttributes = {
    mediatargetlivewindow: "targetlivewindow",
    mediastreamtype: "streamtype"
  };
  var prependTemplate = Document2.createElement("template");
  prependTemplate.innerHTML = /*html*/
  `
  <style>
    :host {
      display: inline-block;
      line-height: 0;
    }

    media-controller {
      width: 100%;
      height: 100%;
    }

    media-captions-button:not([mediasubtitleslist]),
    media-captions-menu:not([mediasubtitleslist]),
    media-captions-menu-button:not([mediasubtitleslist]),
    media-audio-track-menu[mediaaudiotrackunavailable],
    media-audio-track-menu-button[mediaaudiotrackunavailable],
    media-rendition-menu[mediarenditionunavailable],
    media-rendition-menu-button[mediarenditionunavailable],
    media-volume-range[mediavolumeunavailable],
    media-airplay-button[mediaairplayunavailable],
    media-fullscreen-button[mediafullscreenunavailable],
    media-cast-button[mediacastunavailable],
    media-pip-button[mediapipunavailable] {
      display: none;
    }
  </style>
`;
  var MediaThemeElement = class extends GlobalThis.HTMLElement {
    constructor() {
      super();
      __privateAdd21(this, _upgradeProperty);
      __privateAdd21(this, _updateTemplate);
      __privateAdd21(this, _template, void 0);
      __privateAdd21(this, _prevTemplate, void 0);
      __privateAdd21(this, _prevTemplateId, void 0);
      if (this.shadowRoot) {
        this.renderRoot = this.shadowRoot;
      } else {
        this.renderRoot = this.attachShadow({ mode: "open" });
        this.createRenderer();
      }
      const observer2 = new MutationObserver((mutationList) => {
        var _a3;
        if (this.mediaController && !((_a3 = this.mediaController) == null ? void 0 : _a3.breakpointsComputed))
          return;
        if (mutationList.some((mutation) => {
          const target = mutation.target;
          if (target === this)
            return true;
          if (target.localName !== "media-controller")
            return false;
          if (observedMediaAttributes[mutation.attributeName])
            return true;
          if (mutation.attributeName.startsWith("breakpoint"))
            return true;
          return false;
        })) {
          this.render();
        }
      });
      observer2.observe(this, { attributes: true });
      observer2.observe(this.renderRoot, {
        attributes: true,
        subtree: true
      });
      this.addEventListener(
        MediaStateChangeEvents.BREAKPOINTS_COMPUTED,
        this.render
      );
      __privateMethod7(this, _upgradeProperty, upgradeProperty_fn).call(this, "template");
    }
    /** @type {HTMLElement & { breakpointsComputed?: boolean }} */
    get mediaController() {
      return this.renderRoot.querySelector("media-controller");
    }
    get template() {
      var _a3;
      return (_a3 = __privateGet21(this, _template)) != null ? _a3 : this.constructor.template;
    }
    set template(element) {
      __privateSet20(this, _prevTemplateId, null);
      __privateSet20(this, _template, element);
      this.createRenderer();
    }
    get props() {
      var _a3, _b2, _c;
      const observedAttributes2 = [
        ...Array.from((_b2 = (_a3 = this.mediaController) == null ? void 0 : _a3.attributes) != null ? _b2 : []).filter(
          ({ name }) => {
            return observedMediaAttributes[name] || name.startsWith("breakpoint");
          }
        ),
        ...Array.from(this.attributes)
      ];
      const props = {};
      for (const attr of observedAttributes2) {
        const name = (_c = observedMediaAttributes[attr.name]) != null ? _c : camelCase(attr.name);
        let { value } = attr;
        if (value != null) {
          if (isNumericString(value)) {
            value = parseFloat(value);
          }
          props[name] = value === "" ? true : value;
        } else {
          props[name] = false;
        }
      }
      return props;
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      if (attrName === "template" && oldValue != newValue) {
        __privateMethod7(this, _updateTemplate, updateTemplate_fn).call(this);
      }
    }
    connectedCallback() {
      __privateMethod7(this, _updateTemplate, updateTemplate_fn).call(this);
    }
    createRenderer() {
      if (this.template && this.template !== __privateGet21(this, _prevTemplate)) {
        __privateSet20(this, _prevTemplate, this.template);
        this.renderer = new TemplateInstance(
          this.template,
          this.props,
          // @ts-ignore
          this.constructor.processor
        );
        this.renderRoot.textContent = "";
        this.renderRoot.append(
          prependTemplate.content.cloneNode(true),
          this.renderer
        );
      }
    }
    render() {
      var _a3;
      (_a3 = this.renderer) == null ? void 0 : _a3.update(this.props);
    }
  };
  _template = /* @__PURE__ */ new WeakMap();
  _prevTemplate = /* @__PURE__ */ new WeakMap();
  _prevTemplateId = /* @__PURE__ */ new WeakMap();
  _upgradeProperty = /* @__PURE__ */ new WeakSet();
  upgradeProperty_fn = function(prop) {
    if (Object.prototype.hasOwnProperty.call(this, prop)) {
      const value = this[prop];
      delete this[prop];
      this[prop] = value;
    }
  };
  _updateTemplate = /* @__PURE__ */ new WeakSet();
  updateTemplate_fn = function() {
    var _a3;
    const templateId = this.getAttribute("template");
    if (!templateId || templateId === __privateGet21(this, _prevTemplateId))
      return;
    const rootNode = this.getRootNode();
    const template18 = (_a3 = rootNode == null ? void 0 : rootNode.getElementById) == null ? void 0 : _a3.call(rootNode, templateId);
    if (template18) {
      __privateSet20(this, _prevTemplateId, templateId);
      __privateSet20(this, _template, template18);
      this.createRenderer();
      return;
    }
    if (isValidUrl(templateId)) {
      __privateSet20(this, _prevTemplateId, templateId);
      request(templateId).then((data) => {
        const template22 = Document2.createElement("template");
        template22.innerHTML = data;
        __privateSet20(this, _template, template22);
        this.createRenderer();
      }).catch(console.error);
    }
  };
  MediaThemeElement.observedAttributes = ["template"];
  MediaThemeElement.processor = processor;
  function isValidUrl(url) {
    if (!/^(\/|\.\/|https?:\/\/)/.test(url))
      return false;
    const base = /^https?:\/\//.test(url) ? void 0 : location.origin;
    try {
      new URL(url, base);
    } catch (e) {
      return false;
    }
    return true;
  }
  async function request(resource) {
    const response = await fetch(resource);
    if (response.status !== 200) {
      throw new Error(
        `Failed to load resource: the server responded with a status of ${response.status}`
      );
    }
    return response.text();
  }
  if (!GlobalThis.customElements.get("media-theme")) {
    GlobalThis.customElements.define("media-theme", MediaThemeElement);
  }

  // ../../node_modules/media-chrome/dist/utils/anchor-utils.js
  function computePosition({
    anchor,
    floating,
    placement
  }) {
    const rects = getElementRects({ anchor, floating });
    const { x, y } = computeCoordsFromPlacement(rects, placement);
    return { x, y };
  }
  function getElementRects({
    anchor,
    floating
  }) {
    return {
      anchor: getRectRelativeToOffsetParent(anchor, floating.offsetParent),
      floating: {
        x: 0,
        y: 0,
        width: floating.offsetWidth,
        height: floating.offsetHeight
      }
    };
  }
  function getRectRelativeToOffsetParent(element, offsetParent) {
    var _a3;
    const rect = element.getBoundingClientRect();
    const offsetRect = (_a3 = offsetParent == null ? void 0 : offsetParent.getBoundingClientRect()) != null ? _a3 : { x: 0, y: 0 };
    return {
      x: rect.x - offsetRect.x,
      y: rect.y - offsetRect.y,
      width: rect.width,
      height: rect.height
    };
  }
  function computeCoordsFromPlacement({ anchor, floating }, placement) {
    const alignmentAxis = getSideAxis(placement) === "x" ? "y" : "x";
    const alignLength = alignmentAxis === "y" ? "height" : "width";
    const side = getSide(placement);
    const commonX = anchor.x + anchor.width / 2 - floating.width / 2;
    const commonY = anchor.y + anchor.height / 2 - floating.height / 2;
    const commonAlign = anchor[alignLength] / 2 - floating[alignLength] / 2;
    let coords;
    switch (side) {
      case "top":
        coords = { x: commonX, y: anchor.y - floating.height };
        break;
      case "bottom":
        coords = { x: commonX, y: anchor.y + anchor.height };
        break;
      case "right":
        coords = { x: anchor.x + anchor.width, y: commonY };
        break;
      case "left":
        coords = { x: anchor.x - floating.width, y: commonY };
        break;
      default:
        coords = { x: anchor.x, y: anchor.y };
    }
    switch (placement.split("-")[1]) {
      case "start":
        coords[alignmentAxis] -= commonAlign;
        break;
      case "end":
        coords[alignmentAxis] += commonAlign;
        break;
    }
    return coords;
  }
  function getSide(placement) {
    return placement.split("-")[0];
  }
  function getSideAxis(placement) {
    return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
  }

  // ../../node_modules/media-chrome/dist/utils/events.js
  var InvokeEvent = class extends Event {
    /**
     * @param init - The event options.
     */
    constructor({ action = "auto", relatedTarget, ...options }) {
      super("invoke", options);
      this.action = action;
      this.relatedTarget = relatedTarget;
    }
  };
  var ToggleEvent = class extends Event {
    /**
     * @param init - The event options.
     */
    constructor({ newState, oldState, ...options }) {
      super("toggle", options);
      this.newState = newState;
      this.oldState = oldState;
    }
  };

  // ../../node_modules/media-chrome/dist/menu/media-chrome-menu.js
  var __accessCheck22 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet22 = (obj, member, getter) => {
    __accessCheck22(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd22 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet21 = (obj, member, value, setter) => {
    __accessCheck22(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var __privateMethod8 = (obj, member, method) => {
    __accessCheck22(obj, member, "access private method");
    return method;
  };
  var _mediaController8;
  var _previouslyFocused2;
  var _invokerElement2;
  var _previousItems;
  var _mutationObserver2;
  var _isPopover;
  var _cssRule;
  var _handleSlotChange;
  var handleSlotChange_fn;
  var _handleMenuItems;
  var _updateLayoutStyle;
  var updateLayoutStyle_fn;
  var _handleInvoke2;
  var handleInvoke_fn2;
  var _handleOpen2;
  var handleOpen_fn2;
  var _handleClosed2;
  var handleClosed_fn2;
  var _handleBoundsResize;
  var _handleMenuResize;
  var _positionMenu;
  var positionMenu_fn;
  var _resizeMenu;
  var resizeMenu_fn;
  var _handleClick;
  var handleClick_fn;
  var _backButtonElement;
  var backButtonElement_get;
  var _handleToggle;
  var handleToggle_fn;
  var _checkSubmenuHasExpanded;
  var checkSubmenuHasExpanded_fn;
  var _handleFocusOut2;
  var handleFocusOut_fn2;
  var _handleKeyDown2;
  var handleKeyDown_fn2;
  var _getItem;
  var getItem_fn;
  var _getTabItem;
  var getTabItem_fn;
  var _setTabItem;
  var setTabItem_fn;
  var _selectItem;
  var selectItem_fn;
  function createMenuItem({
    type,
    text,
    value,
    checked
  }) {
    const item = Document2.createElement(
      "media-chrome-menu-item"
    );
    item.type = type != null ? type : "";
    item.part.add("menu-item");
    if (type)
      item.part.add(type);
    item.value = value;
    item.checked = checked;
    const label = Document2.createElement("span");
    label.textContent = text;
    item.append(label);
    return item;
  }
  function createIndicator(el, name) {
    let customIndicator = el.querySelector(`:scope > [slot="${name}"]`);
    if ((customIndicator == null ? void 0 : customIndicator.nodeName) == "SLOT")
      customIndicator = customIndicator.assignedElements({ flatten: true })[0];
    if (customIndicator) {
      customIndicator = customIndicator.cloneNode(true);
      return customIndicator;
    }
    const fallbackIndicator = el.shadowRoot.querySelector(
      `[name="${name}"] > svg`
    );
    if (fallbackIndicator) {
      return fallbackIndicator.cloneNode(true);
    }
    return "";
  }
  var template12 = Document2.createElement("template");
  template12.innerHTML = /*html*/
  `
  <style>
    :host {
      font: var(--media-font,
        var(--media-font-weight, normal)
        var(--media-font-size, 14px) /
        var(--media-text-content-height, var(--media-control-height, 24px))
        var(--media-font-family, helvetica neue, segoe ui, roboto, arial, sans-serif));
      color: var(--media-text-color, var(--media-primary-color, rgb(238 238 238)));
      --_menu-bg: rgb(20 20 30 / .8);
      background: var(--media-menu-background, var(--media-control-background, var(--media-secondary-color, var(--_menu-bg))));
      border-radius: var(--media-menu-border-radius);
      border: var(--media-menu-border, none);
      display: var(--media-menu-display, inline-flex);
      transition: var(--media-menu-transition-in,
        visibility 0s,
        opacity .2s ease-out,
        transform .15s ease-out,
        left .2s ease-in-out,
        min-width .2s ease-in-out,
        min-height .2s ease-in-out
      ) !important;
      ${/* ^^Prevent transition override by media-container */
  ""}
      visibility: var(--media-menu-visibility, visible);
      opacity: var(--media-menu-opacity, 1);
      max-height: var(--media-menu-max-height, var(--_menu-max-height, 300px));
      transform: var(--media-menu-transform-in, translateY(0) scale(1));
      flex-direction: column;
      ${/* Prevent overflowing a flex container */
  ""}
      min-height: 0;
      position: relative;
      bottom: var(--_menu-bottom);
      box-sizing: border-box;
    } 

    @-moz-document url-prefix() {
      :host{
        --_menu-bg: rgb(20 20 30);
      }
    }

    :host([hidden]) {
      transition: var(--media-menu-transition-out,
        visibility .15s ease-in,
        opacity .15s ease-in,
        transform .15s ease-in
      ) !important;
      visibility: var(--media-menu-hidden-visibility, hidden);
      opacity: var(--media-menu-hidden-opacity, 0);
      max-height: var(--media-menu-hidden-max-height,
        var(--media-menu-max-height, var(--_menu-max-height, 300px)));
      transform: var(--media-menu-transform-out, translateY(2px) scale(.99));
      pointer-events: none;
    }

    :host([slot="submenu"]) {
      background: none;
      width: 100%;
      min-height: 100%;
      position: absolute;
      bottom: 0;
      right: -100%;
    }

    #container {
      display: flex;
      flex-direction: column;
      min-height: 0;
      transition: transform .2s ease-out;
      transform: translate(0, 0);
    }

    #container.has-expanded {
      transition: transform .2s ease-in;
      transform: translate(-100%, 0);
    }

    button {
      background: none;
      color: inherit;
      border: none;
      padding: 0;
      font: inherit;
      outline: inherit;
      display: inline-flex;
      align-items: center;
    }

    slot[name="header"][hidden] {
      display: none;
    }

    slot[name="header"] > *,
    slot[name="header"]::slotted(*) {
      padding: .4em .7em;
      border-bottom: 1px solid rgb(255 255 255 / .25);
      cursor: var(--media-cursor, default);
    }

    slot[name="header"] > button[part~="back"],
    slot[name="header"]::slotted(button[part~="back"]) {
      cursor: var(--media-cursor, pointer);
    }

    svg[part~="back"] {
      height: var(--media-menu-icon-height, var(--media-control-height, 24px));
      fill: var(--media-icon-color, var(--media-primary-color, rgb(238 238 238)));
      display: block;
      margin-right: .5ch;
    }

    slot:not([name]) {
      gap: var(--media-menu-gap);
      flex-direction: var(--media-menu-flex-direction, column);
      overflow: var(--media-menu-overflow, hidden auto);
      display: flex;
      min-height: 0;
    }

    :host([role="menu"]) slot:not([name]) {
      padding-block: .4em;
    }

    slot:not([name])::slotted([role="menu"]) {
      background: none;
    }

    media-chrome-menu-item > span {
      margin-right: .5ch;
      max-width: var(--media-menu-item-max-width);
      text-overflow: ellipsis;
      overflow: hidden;
    }
  </style>
  <style id="layout-row" media="width:0">

    slot[name="header"] > *,
    slot[name="header"]::slotted(*) {
      padding: .4em .5em;
    }

    slot:not([name]) {
      gap: var(--media-menu-gap, .25em);
      flex-direction: var(--media-menu-flex-direction, row);
      padding-inline: .5em;
    }

    media-chrome-menu-item {
      padding: .3em .5em;
    }

    media-chrome-menu-item[aria-checked="true"] {
      background: var(--media-menu-item-checked-background, rgb(255 255 255 / .2));
    }

    ${/* In row layout hide the checked indicator completely. */
  ""}
    media-chrome-menu-item::part(checked-indicator) {
      display: var(--media-menu-item-checked-indicator-display, none);
    }
  </style>
  <div id="container">
    <slot name="header" hidden>
      <button part="back button" aria-label="Back to previous menu">
        <slot name="back-icon">
          <svg aria-hidden="true" viewBox="0 0 20 24" part="back indicator">
            <path d="m11.88 17.585.742-.669-4.2-4.665 4.2-4.666-.743-.669-4.803 5.335 4.803 5.334Z"/>
          </svg>
        </slot>
        <slot name="title"></slot>
      </button>
    </slot>
    <slot></slot>
  </div>
  <slot name="checked-indicator" hidden></slot>
`;
  var Attributes12 = {
    STYLE: "style",
    HIDDEN: "hidden",
    DISABLED: "disabled",
    ANCHOR: "anchor"
  };
  var MediaChromeMenu = class extends GlobalThis.HTMLElement {
    constructor() {
      super();
      __privateAdd22(this, _handleSlotChange);
      __privateAdd22(this, _updateLayoutStyle);
      __privateAdd22(this, _handleInvoke2);
      __privateAdd22(this, _handleOpen2);
      __privateAdd22(this, _handleClosed2);
      __privateAdd22(this, _positionMenu);
      __privateAdd22(this, _resizeMenu);
      __privateAdd22(this, _handleClick);
      __privateAdd22(this, _backButtonElement);
      __privateAdd22(this, _handleToggle);
      __privateAdd22(this, _checkSubmenuHasExpanded);
      __privateAdd22(this, _handleFocusOut2);
      __privateAdd22(this, _handleKeyDown2);
      __privateAdd22(this, _getItem);
      __privateAdd22(this, _getTabItem);
      __privateAdd22(this, _setTabItem);
      __privateAdd22(this, _selectItem);
      __privateAdd22(this, _mediaController8, null);
      __privateAdd22(this, _previouslyFocused2, null);
      __privateAdd22(this, _invokerElement2, null);
      __privateAdd22(this, _previousItems, /* @__PURE__ */ new Set());
      __privateAdd22(this, _mutationObserver2, void 0);
      __privateAdd22(this, _isPopover, false);
      __privateAdd22(this, _cssRule, null);
      __privateAdd22(this, _handleMenuItems, () => {
        const previousItems = __privateGet22(this, _previousItems);
        const currentItems = new Set(this.items);
        for (const item of previousItems) {
          if (!currentItems.has(item)) {
            this.dispatchEvent(new CustomEvent("removemenuitem", { detail: item }));
          }
        }
        for (const item of currentItems) {
          if (!previousItems.has(item)) {
            this.dispatchEvent(new CustomEvent("addmenuitem", { detail: item }));
          }
        }
        __privateSet21(this, _previousItems, currentItems);
      });
      __privateAdd22(this, _handleBoundsResize, () => {
        __privateMethod8(this, _positionMenu, positionMenu_fn).call(this);
        __privateMethod8(this, _resizeMenu, resizeMenu_fn).call(this, false);
      });
      __privateAdd22(this, _handleMenuResize, () => {
        __privateMethod8(this, _positionMenu, positionMenu_fn).call(this);
      });
      if (!this.shadowRoot) {
        this.attachShadow({ mode: "open" });
        this.nativeEl = this.constructor.template.content.cloneNode(true);
        this.shadowRoot.append(this.nativeEl);
      }
      this.container = this.shadowRoot.querySelector("#container");
      this.defaultSlot = this.shadowRoot.querySelector(
        "slot:not([name])"
      );
      this.shadowRoot.addEventListener("slotchange", this);
      __privateSet21(this, _mutationObserver2, new MutationObserver(__privateGet22(this, _handleMenuItems)));
      __privateGet22(this, _mutationObserver2).observe(this.defaultSlot, { childList: true });
    }
    static get observedAttributes() {
      return [
        Attributes12.DISABLED,
        Attributes12.HIDDEN,
        Attributes12.STYLE,
        Attributes12.ANCHOR,
        MediaStateReceiverAttributes.MEDIA_CONTROLLER
      ];
    }
    static formatMenuItemText(text, _data) {
      return text;
    }
    enable() {
      this.addEventListener("click", this);
      this.addEventListener("focusout", this);
      this.addEventListener("keydown", this);
      this.addEventListener("invoke", this);
      this.addEventListener("toggle", this);
    }
    disable() {
      this.removeEventListener("click", this);
      this.removeEventListener("focusout", this);
      this.removeEventListener("keyup", this);
      this.removeEventListener("invoke", this);
      this.removeEventListener("toggle", this);
    }
    handleEvent(event) {
      switch (event.type) {
        case "slotchange":
          __privateMethod8(this, _handleSlotChange, handleSlotChange_fn).call(this, event);
          break;
        case "invoke":
          __privateMethod8(this, _handleInvoke2, handleInvoke_fn2).call(this, event);
          break;
        case "click":
          __privateMethod8(this, _handleClick, handleClick_fn).call(this, event);
          break;
        case "toggle":
          __privateMethod8(this, _handleToggle, handleToggle_fn).call(this, event);
          break;
        case "focusout":
          __privateMethod8(this, _handleFocusOut2, handleFocusOut_fn2).call(this, event);
          break;
        case "keydown":
          __privateMethod8(this, _handleKeyDown2, handleKeyDown_fn2).call(this, event);
          break;
      }
    }
    connectedCallback() {
      var _a3, _b2;
      __privateSet21(this, _cssRule, insertCSSRule(this.shadowRoot, ":host"));
      __privateMethod8(this, _updateLayoutStyle, updateLayoutStyle_fn).call(this);
      if (!this.hasAttribute("disabled")) {
        this.enable();
      }
      if (!this.role) {
        this.role = "menu";
      }
      __privateSet21(this, _mediaController8, getAttributeMediaController(this));
      (_b2 = (_a3 = __privateGet22(this, _mediaController8)) == null ? void 0 : _a3.associateElement) == null ? void 0 : _b2.call(_a3, this);
      if (!this.hidden) {
        observeResize(getBoundsElement(this), __privateGet22(this, _handleBoundsResize));
        observeResize(this, __privateGet22(this, _handleMenuResize));
      }
    }
    disconnectedCallback() {
      var _a3, _b2;
      unobserveResize(getBoundsElement(this), __privateGet22(this, _handleBoundsResize));
      unobserveResize(this, __privateGet22(this, _handleMenuResize));
      this.disable();
      (_b2 = (_a3 = __privateGet22(this, _mediaController8)) == null ? void 0 : _a3.unassociateElement) == null ? void 0 : _b2.call(_a3, this);
      __privateSet21(this, _mediaController8, null);
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      var _a3, _b2, _c, _d;
      if (attrName === Attributes12.HIDDEN && newValue !== oldValue) {
        if (!__privateGet22(this, _isPopover))
          __privateSet21(this, _isPopover, true);
        if (this.hidden) {
          __privateMethod8(this, _handleClosed2, handleClosed_fn2).call(this);
        } else {
          __privateMethod8(this, _handleOpen2, handleOpen_fn2).call(this);
        }
        this.dispatchEvent(
          new ToggleEvent({
            oldState: this.hidden ? "open" : "closed",
            newState: this.hidden ? "closed" : "open",
            bubbles: true
          })
        );
      } else if (attrName === MediaStateReceiverAttributes.MEDIA_CONTROLLER) {
        if (oldValue) {
          (_b2 = (_a3 = __privateGet22(this, _mediaController8)) == null ? void 0 : _a3.unassociateElement) == null ? void 0 : _b2.call(_a3, this);
          __privateSet21(this, _mediaController8, null);
        }
        if (newValue && this.isConnected) {
          __privateSet21(this, _mediaController8, getAttributeMediaController(this));
          (_d = (_c = __privateGet22(this, _mediaController8)) == null ? void 0 : _c.associateElement) == null ? void 0 : _d.call(_c, this);
        }
      } else if (attrName === Attributes12.DISABLED && newValue !== oldValue) {
        if (newValue == null) {
          this.enable();
        } else {
          this.disable();
        }
      } else if (attrName === Attributes12.STYLE && newValue !== oldValue) {
        __privateMethod8(this, _updateLayoutStyle, updateLayoutStyle_fn).call(this);
      }
    }
    formatMenuItemText(text, data) {
      return this.constructor.formatMenuItemText(
        text,
        data
      );
    }
    get anchor() {
      return this.getAttribute("anchor");
    }
    set anchor(value) {
      this.setAttribute("anchor", `${value}`);
    }
    /**
     * Returns the anchor element when it is a floating menu.
     */
    get anchorElement() {
      var _a3;
      if (this.anchor) {
        return (_a3 = getDocumentOrShadowRoot(this)) == null ? void 0 : _a3.querySelector(
          `#${this.anchor}`
        );
      }
      return null;
    }
    /**
     * Returns the menu items.
     */
    get items() {
      return this.defaultSlot.assignedElements({ flatten: true }).filter(isMenuItem);
    }
    get radioGroupItems() {
      return this.items.filter((item) => item.role === "menuitemradio");
    }
    get checkedItems() {
      return this.items.filter((item) => item.checked);
    }
    get value() {
      var _a3, _b2;
      return (_b2 = (_a3 = this.checkedItems[0]) == null ? void 0 : _a3.value) != null ? _b2 : "";
    }
    set value(newValue) {
      const item = this.items.find((item2) => item2.value === newValue);
      if (!item)
        return;
      __privateMethod8(this, _selectItem, selectItem_fn).call(this, item);
    }
    focus() {
      __privateSet21(this, _previouslyFocused2, getActiveElement());
      if (this.items.length) {
        __privateMethod8(this, _setTabItem, setTabItem_fn).call(this, this.items[0]);
        this.items[0].focus();
        return;
      }
      const focusable = this.querySelector(
        '[autofocus], [tabindex]:not([tabindex="-1"]), [role="menu"]'
      );
      focusable == null ? void 0 : focusable.focus();
    }
    handleSelect(event) {
      var _a3;
      const item = __privateMethod8(this, _getItem, getItem_fn).call(this, event);
      if (!item)
        return;
      __privateMethod8(this, _selectItem, selectItem_fn).call(this, item, item.type === "checkbox");
      if (__privateGet22(this, _invokerElement2) && !this.hidden) {
        (_a3 = __privateGet22(this, _previouslyFocused2)) == null ? void 0 : _a3.focus();
        this.hidden = true;
      }
    }
    get keysUsed() {
      return [
        "Enter",
        "Escape",
        "Tab",
        " ",
        "ArrowDown",
        "ArrowUp",
        "Home",
        "End"
      ];
    }
    handleMove(event) {
      var _a3, _b2;
      const { key } = event;
      const items = this.items;
      const currentItem = (_b2 = (_a3 = __privateMethod8(this, _getItem, getItem_fn).call(this, event)) != null ? _a3 : __privateMethod8(this, _getTabItem, getTabItem_fn).call(this)) != null ? _b2 : items[0];
      const currentIndex = items.indexOf(currentItem);
      let index = Math.max(0, currentIndex);
      if (key === "ArrowDown") {
        index++;
      } else if (key === "ArrowUp") {
        index--;
      } else if (event.key === "Home") {
        index = 0;
      } else if (event.key === "End") {
        index = items.length - 1;
      }
      if (index < 0) {
        index = items.length - 1;
      }
      if (index > items.length - 1) {
        index = 0;
      }
      __privateMethod8(this, _setTabItem, setTabItem_fn).call(this, items[index]);
      items[index].focus();
    }
  };
  _mediaController8 = /* @__PURE__ */ new WeakMap();
  _previouslyFocused2 = /* @__PURE__ */ new WeakMap();
  _invokerElement2 = /* @__PURE__ */ new WeakMap();
  _previousItems = /* @__PURE__ */ new WeakMap();
  _mutationObserver2 = /* @__PURE__ */ new WeakMap();
  _isPopover = /* @__PURE__ */ new WeakMap();
  _cssRule = /* @__PURE__ */ new WeakMap();
  _handleSlotChange = /* @__PURE__ */ new WeakSet();
  handleSlotChange_fn = function(event) {
    const slot = event.target;
    for (const node of slot.assignedNodes({ flatten: true })) {
      if (node.nodeType === 3 && node.textContent.trim() === "") {
        node.remove();
      }
    }
    if (["header", "title"].includes(slot.name)) {
      const header = this.shadowRoot.querySelector(
        'slot[name="header"]'
      );
      header.hidden = slot.assignedNodes().length === 0;
    }
    if (!slot.name) {
      __privateGet22(this, _handleMenuItems).call(this);
    }
  };
  _handleMenuItems = /* @__PURE__ */ new WeakMap();
  _updateLayoutStyle = /* @__PURE__ */ new WeakSet();
  updateLayoutStyle_fn = function() {
    var _a3;
    const layoutRowStyle = this.shadowRoot.querySelector("#layout-row");
    const menuLayout = (_a3 = getComputedStyle(this).getPropertyValue("--media-menu-layout")) == null ? void 0 : _a3.trim();
    layoutRowStyle.setAttribute("media", menuLayout === "row" ? "" : "width:0");
  };
  _handleInvoke2 = /* @__PURE__ */ new WeakSet();
  handleInvoke_fn2 = function(event) {
    __privateSet21(this, _invokerElement2, event.relatedTarget);
    if (!containsComposedNode(this, event.relatedTarget)) {
      this.hidden = !this.hidden;
    }
  };
  _handleOpen2 = /* @__PURE__ */ new WeakSet();
  handleOpen_fn2 = function() {
    var _a3;
    (_a3 = __privateGet22(this, _invokerElement2)) == null ? void 0 : _a3.setAttribute("aria-expanded", "true");
    this.addEventListener("transitionend", () => this.focus(), { once: true });
    observeResize(getBoundsElement(this), __privateGet22(this, _handleBoundsResize));
    observeResize(this, __privateGet22(this, _handleMenuResize));
  };
  _handleClosed2 = /* @__PURE__ */ new WeakSet();
  handleClosed_fn2 = function() {
    var _a3;
    (_a3 = __privateGet22(this, _invokerElement2)) == null ? void 0 : _a3.setAttribute("aria-expanded", "false");
    unobserveResize(getBoundsElement(this), __privateGet22(this, _handleBoundsResize));
    unobserveResize(this, __privateGet22(this, _handleMenuResize));
  };
  _handleBoundsResize = /* @__PURE__ */ new WeakMap();
  _handleMenuResize = /* @__PURE__ */ new WeakMap();
  _positionMenu = /* @__PURE__ */ new WeakSet();
  positionMenu_fn = function(menuWidth) {
    if (this.hasAttribute("mediacontroller") && !this.anchor)
      return;
    if (this.hidden || !this.anchorElement)
      return;
    const { x, y } = computePosition({
      anchor: this.anchorElement,
      floating: this,
      placement: "top-start"
    });
    menuWidth != null ? menuWidth : menuWidth = this.offsetWidth;
    const bounds = getBoundsElement(this);
    const boundsRect = bounds.getBoundingClientRect();
    const right = boundsRect.width - x - menuWidth;
    const bottom = boundsRect.height - y - this.offsetHeight;
    const { style } = __privateGet22(this, _cssRule);
    style.setProperty("position", "absolute");
    style.setProperty("right", `${Math.max(0, right)}px`);
    style.setProperty("--_menu-bottom", `${bottom}px`);
    const computedStyle = getComputedStyle(this);
    const isBottomCalc = style.getPropertyValue("--_menu-bottom") === computedStyle.bottom;
    const realBottom = isBottomCalc ? bottom : parseFloat(computedStyle.bottom);
    const maxHeight = boundsRect.height - realBottom - parseFloat(computedStyle.marginBottom);
    this.style.setProperty("--_menu-max-height", `${maxHeight}px`);
  };
  _resizeMenu = /* @__PURE__ */ new WeakSet();
  resizeMenu_fn = function(animate) {
    const expandedMenuItem = this.querySelector(
      '[role="menuitem"][aria-haspopup][aria-expanded="true"]'
    );
    const expandedSubmenu = expandedMenuItem == null ? void 0 : expandedMenuItem.querySelector(
      '[role="menu"]'
    );
    const { style } = __privateGet22(this, _cssRule);
    if (!animate) {
      style.setProperty("--media-menu-transition-in", "none");
    }
    if (expandedSubmenu) {
      const height = expandedSubmenu.offsetHeight;
      const width = Math.max(
        expandedSubmenu.offsetWidth,
        expandedMenuItem.offsetWidth
      );
      this.style.setProperty("min-width", `${width}px`);
      this.style.setProperty("min-height", `${height}px`);
      __privateMethod8(this, _positionMenu, positionMenu_fn).call(this, width);
    } else {
      this.style.removeProperty("min-width");
      this.style.removeProperty("min-height");
      __privateMethod8(this, _positionMenu, positionMenu_fn).call(this);
    }
    style.removeProperty("--media-menu-transition-in");
  };
  _handleClick = /* @__PURE__ */ new WeakSet();
  handleClick_fn = function(event) {
    var _a3;
    event.stopPropagation();
    if (event.composedPath().includes(__privateGet22(this, _backButtonElement, backButtonElement_get))) {
      (_a3 = __privateGet22(this, _previouslyFocused2)) == null ? void 0 : _a3.focus();
      this.hidden = true;
      return;
    }
    const item = __privateMethod8(this, _getItem, getItem_fn).call(this, event);
    if (!item || item.hasAttribute("disabled"))
      return;
    __privateMethod8(this, _setTabItem, setTabItem_fn).call(this, item);
    this.handleSelect(event);
  };
  _backButtonElement = /* @__PURE__ */ new WeakSet();
  backButtonElement_get = function() {
    var _a3;
    const headerSlot = this.shadowRoot.querySelector(
      'slot[name="header"]'
    );
    return (_a3 = headerSlot.assignedElements({ flatten: true })) == null ? void 0 : _a3.find((el) => el.matches('button[part~="back"]'));
  };
  _handleToggle = /* @__PURE__ */ new WeakSet();
  handleToggle_fn = function(event) {
    if (event.target === this)
      return;
    __privateMethod8(this, _checkSubmenuHasExpanded, checkSubmenuHasExpanded_fn).call(this);
    const menuItemsWithSubmenu = Array.from(
      this.querySelectorAll('[role="menuitem"][aria-haspopup]')
    );
    for (const item of menuItemsWithSubmenu) {
      if (item.invokeTargetElement == event.target)
        continue;
      if (event.newState == "open" && item.getAttribute("aria-expanded") == "true" && !item.invokeTargetElement.hidden) {
        item.invokeTargetElement.dispatchEvent(
          new InvokeEvent({ relatedTarget: item })
        );
      }
    }
    for (const item of menuItemsWithSubmenu) {
      item.setAttribute("aria-expanded", `${!item.submenuElement.hidden}`);
    }
    __privateMethod8(this, _resizeMenu, resizeMenu_fn).call(this, true);
  };
  _checkSubmenuHasExpanded = /* @__PURE__ */ new WeakSet();
  checkSubmenuHasExpanded_fn = function() {
    const selector = '[role="menuitem"] > [role="menu"]:not([hidden])';
    const expandedMenuItem = this.querySelector(selector);
    this.container.classList.toggle("has-expanded", !!expandedMenuItem);
  };
  _handleFocusOut2 = /* @__PURE__ */ new WeakSet();
  handleFocusOut_fn2 = function(event) {
    var _a3;
    if (!containsComposedNode(this, event.relatedTarget)) {
      if (__privateGet22(this, _isPopover)) {
        (_a3 = __privateGet22(this, _previouslyFocused2)) == null ? void 0 : _a3.focus();
      }
      if (__privateGet22(this, _invokerElement2) && __privateGet22(this, _invokerElement2) !== event.relatedTarget && !this.hidden) {
        this.hidden = true;
      }
    }
  };
  _handleKeyDown2 = /* @__PURE__ */ new WeakSet();
  handleKeyDown_fn2 = function(event) {
    var _a3, _b2, _c, _d, _e;
    const { key, ctrlKey, altKey, metaKey } = event;
    if (ctrlKey || altKey || metaKey) {
      return;
    }
    if (!this.keysUsed.includes(key)) {
      return;
    }
    event.preventDefault();
    event.stopPropagation();
    if (key === "Tab") {
      if (__privateGet22(this, _isPopover)) {
        this.hidden = true;
        return;
      }
      if (event.shiftKey) {
        (_b2 = (_a3 = this.previousElementSibling) == null ? void 0 : _a3.focus) == null ? void 0 : _b2.call(_a3);
      } else {
        (_d = (_c = this.nextElementSibling) == null ? void 0 : _c.focus) == null ? void 0 : _d.call(_c);
      }
      this.blur();
    } else if (key === "Escape") {
      (_e = __privateGet22(this, _previouslyFocused2)) == null ? void 0 : _e.focus();
      if (__privateGet22(this, _isPopover)) {
        this.hidden = true;
      }
    } else if (key === "Enter" || key === " ") {
      this.handleSelect(event);
    } else {
      this.handleMove(event);
    }
  };
  _getItem = /* @__PURE__ */ new WeakSet();
  getItem_fn = function(event) {
    return event.composedPath().find((el) => {
      return ["menuitemradio", "menuitemcheckbox"].includes(
        el.role
      );
    });
  };
  _getTabItem = /* @__PURE__ */ new WeakSet();
  getTabItem_fn = function() {
    return this.items.find((item) => item.tabIndex === 0);
  };
  _setTabItem = /* @__PURE__ */ new WeakSet();
  setTabItem_fn = function(tabItem) {
    for (const item of this.items) {
      item.tabIndex = item === tabItem ? 0 : -1;
    }
  };
  _selectItem = /* @__PURE__ */ new WeakSet();
  selectItem_fn = function(item, toggle) {
    const oldCheckedItems = [...this.checkedItems];
    if (item.type === "radio") {
      this.radioGroupItems.forEach((el) => el.checked = false);
    }
    if (toggle) {
      item.checked = !item.checked;
    } else {
      item.checked = true;
    }
    if (this.checkedItems.some((opt, i) => opt != oldCheckedItems[i])) {
      this.dispatchEvent(
        new Event("change", { bubbles: true, composed: true })
      );
    }
  };
  MediaChromeMenu.template = template12;
  function isMenuItem(element) {
    return ["menuitem", "menuitemradio", "menuitemcheckbox"].includes(
      element == null ? void 0 : element.role
    );
  }
  function getBoundsElement(host) {
    var _a3;
    return (_a3 = host.getAttribute("bounds") ? closestComposedNode(host, `#${host.getAttribute("bounds")}`) : getMediaController(host) || host.parentElement) != null ? _a3 : host;
  }
  if (!GlobalThis.customElements.get("media-chrome-menu")) {
    GlobalThis.customElements.define("media-chrome-menu", MediaChromeMenu);
  }

  // ../../node_modules/media-chrome/dist/menu/media-chrome-menu-item.js
  var __accessCheck23 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet23 = (obj, member, getter) => {
    __accessCheck23(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd23 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet22 = (obj, member, value, setter) => {
    __accessCheck23(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var __privateMethod9 = (obj, member, method) => {
    __accessCheck23(obj, member, "access private method");
    return method;
  };
  var _dirty;
  var _ownerElement;
  var _handleSlotChange2;
  var handleSlotChange_fn2;
  var _submenuConnected;
  var submenuConnected_fn;
  var _submenuDisconnected;
  var submenuDisconnected_fn;
  var _handleMenuItem;
  var _handleKeyUp;
  var handleKeyUp_fn;
  var _handleKeyDown3;
  var handleKeyDown_fn3;
  var _reset;
  var reset_fn;
  var template13 = Document2.createElement("template");
  template13.innerHTML = /*html*/
  `
  <style>
    :host {
      transition: var(--media-menu-item-transition,
        background .15s linear,
        opacity .2s ease-in-out
      );
      outline: var(--media-menu-item-outline, 0);
      outline-offset: var(--media-menu-item-outline-offset, -1px);
      cursor: var(--media-cursor, pointer);
      display: flex;
      align-items: center;
      align-self: stretch;
      justify-self: stretch;
      white-space: nowrap;
      white-space-collapse: collapse;
      text-wrap: nowrap;
      padding: .4em .8em .4em 1em;
    }

    :host(:focus-visible) {
      box-shadow: var(--media-menu-item-focus-shadow, inset 0 0 0 2px rgb(27 127 204 / .9));
      outline: var(--media-menu-item-hover-outline, 0);
      outline-offset: var(--media-menu-item-hover-outline-offset,  var(--media-menu-item-outline-offset, -1px));
    }

    :host(:hover) {
      cursor: var(--media-cursor, pointer);
      background: var(--media-menu-item-hover-background, rgb(92 92 102 / .5));
      outline: var(--media-menu-item-hover-outline);
      outline-offset: var(--media-menu-item-hover-outline-offset,  var(--media-menu-item-outline-offset, -1px));
    }

    :host([aria-checked="true"]) {
      background: var(--media-menu-item-checked-background);
    }

    :host([hidden]) {
      display: none;
    }

    :host([disabled]) {
      pointer-events: none;
      color: rgba(255, 255, 255, .3);
    }

    slot:not([name]) {
      width: 100%;
    }

    slot:not([name="submenu"]) {
      display: inline-flex;
      align-items: center;
      transition: inherit;
      opacity: var(--media-menu-item-opacity, 1);
    }

    slot[name="description"] {
      justify-content: end;
    }

    slot[name="description"] > span {
      display: inline-block;
      margin-inline: 1em .2em;
      max-width: var(--media-menu-item-description-max-width, 100px);
      text-overflow: ellipsis;
      overflow: hidden;
      font-size: .8em;
      font-weight: 400;
      text-align: right;
      position: relative;
      top: .04em;
    }

    slot[name="checked-indicator"] {
      display: none;
    }

    :host(:is([role="menuitemradio"],[role="menuitemcheckbox"])) slot[name="checked-indicator"] {
      display: var(--media-menu-item-checked-indicator-display, inline-block);
    }

    ${/* For all slotted icons in prefix and suffix. */
  ""}
    svg, img, ::slotted(svg), ::slotted(img) {
      height: var(--media-menu-item-icon-height, var(--media-control-height, 24px));
      fill: var(--media-icon-color, var(--media-primary-color, rgb(238 238 238)));
      display: block;
    }

    ${/* Only for indicator icons like checked-indicator or captions-indicator. */
  ""}
    [part~="indicator"],
    ::slotted([part~="indicator"]) {
      fill: var(--media-menu-item-indicator-fill,
        var(--media-icon-color, var(--media-primary-color, rgb(238 238 238))));
      height: var(--media-menu-item-indicator-height, 1.25em);
      margin-right: .5ch;
    }

    [part~="checked-indicator"] {
      visibility: hidden;
    }

    :host([aria-checked="true"]) [part~="checked-indicator"] {
      visibility: visible;
    }
  </style>
  <slot name="checked-indicator">
    <svg aria-hidden="true" viewBox="0 1 24 24" part="checked-indicator indicator">
      <path d="m10 15.17 9.193-9.191 1.414 1.414-10.606 10.606-6.364-6.364 1.414-1.414 4.95 4.95Z"/>
    </svg>
  </slot>
  <slot name="prefix"></slot>
  <slot></slot>
  <slot name="description"></slot>
  <slot name="suffix"></slot>
  <slot name="submenu"></slot>
`;
  var Attributes13 = {
    TYPE: "type",
    VALUE: "value",
    CHECKED: "checked",
    DISABLED: "disabled"
  };
  var MediaChromeMenuItem = class extends GlobalThis.HTMLElement {
    constructor() {
      super();
      __privateAdd23(this, _handleSlotChange2);
      __privateAdd23(this, _submenuConnected);
      __privateAdd23(this, _submenuDisconnected);
      __privateAdd23(this, _handleKeyUp);
      __privateAdd23(this, _handleKeyDown3);
      __privateAdd23(this, _reset);
      __privateAdd23(this, _dirty, false);
      __privateAdd23(this, _ownerElement, void 0);
      __privateAdd23(this, _handleMenuItem, () => {
        var _a3, _b2;
        this.setAttribute("submenusize", `${this.submenuElement.items.length}`);
        const descriptionSlot = this.shadowRoot.querySelector(
          'slot[name="description"]'
        );
        const checkedItem = (_a3 = this.submenuElement.checkedItems) == null ? void 0 : _a3[0];
        const description = (_b2 = checkedItem == null ? void 0 : checkedItem.dataset.description) != null ? _b2 : checkedItem == null ? void 0 : checkedItem.text;
        const span = Document2.createElement("span");
        span.textContent = description != null ? description : "";
        descriptionSlot.replaceChildren(span);
      });
      if (!this.shadowRoot) {
        this.attachShadow({ mode: "open" });
        this.shadowRoot.append(this.constructor.template.content.cloneNode(true));
      }
      this.shadowRoot.addEventListener("slotchange", this);
    }
    static get observedAttributes() {
      return [
        Attributes13.TYPE,
        Attributes13.DISABLED,
        Attributes13.CHECKED,
        Attributes13.VALUE
      ];
    }
    enable() {
      if (!this.hasAttribute("tabindex")) {
        this.setAttribute("tabindex", "-1");
      }
      if (isCheckable(this) && !this.hasAttribute("aria-checked")) {
        this.setAttribute("aria-checked", "false");
      }
      this.addEventListener("click", this);
      this.addEventListener("keydown", this);
    }
    disable() {
      this.removeAttribute("tabindex");
      this.removeEventListener("click", this);
      this.removeEventListener("keydown", this);
      this.removeEventListener("keyup", this);
    }
    handleEvent(event) {
      switch (event.type) {
        case "slotchange":
          __privateMethod9(this, _handleSlotChange2, handleSlotChange_fn2).call(this, event);
          break;
        case "click":
          this.handleClick(event);
          break;
        case "keydown":
          __privateMethod9(this, _handleKeyDown3, handleKeyDown_fn3).call(this, event);
          break;
        case "keyup":
          __privateMethod9(this, _handleKeyUp, handleKeyUp_fn).call(this, event);
          break;
      }
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      if (attrName === Attributes13.CHECKED && isCheckable(this) && !__privateGet23(this, _dirty)) {
        this.setAttribute("aria-checked", newValue != null ? "true" : "false");
      } else if (attrName === Attributes13.TYPE && newValue !== oldValue) {
        this.role = "menuitem" + newValue;
      } else if (attrName === Attributes13.DISABLED && newValue !== oldValue) {
        if (newValue == null) {
          this.enable();
        } else {
          this.disable();
        }
      }
    }
    connectedCallback() {
      if (!this.hasAttribute(Attributes13.DISABLED)) {
        this.enable();
      }
      this.role = "menuitem" + this.type;
      __privateSet22(this, _ownerElement, closestMenuItemsContainer(this, this.parentNode));
      __privateMethod9(this, _reset, reset_fn).call(this);
    }
    disconnectedCallback() {
      this.disable();
      __privateMethod9(this, _reset, reset_fn).call(this);
      __privateSet22(this, _ownerElement, null);
    }
    get invokeTarget() {
      return this.getAttribute("invoketarget");
    }
    set invokeTarget(value) {
      this.setAttribute("invoketarget", `${value}`);
    }
    /**
     * Returns the element with the id specified by the `invoketarget` attribute
     * or the slotted submenu element.
     */
    get invokeTargetElement() {
      var _a3;
      if (this.invokeTarget) {
        return (_a3 = getDocumentOrShadowRoot(this)) == null ? void 0 : _a3.querySelector(
          `#${this.invokeTarget}`
        );
      }
      return this.submenuElement;
    }
    /**
     * Returns the slotted submenu element.
     */
    get submenuElement() {
      const submenuSlot = this.shadowRoot.querySelector(
        'slot[name="submenu"]'
      );
      return submenuSlot.assignedElements({
        flatten: true
      })[0];
    }
    get type() {
      var _a3;
      return (_a3 = this.getAttribute(Attributes13.TYPE)) != null ? _a3 : "";
    }
    set type(val) {
      this.setAttribute(Attributes13.TYPE, `${val}`);
    }
    get value() {
      var _a3;
      return (_a3 = this.getAttribute(Attributes13.VALUE)) != null ? _a3 : this.text;
    }
    set value(val) {
      this.setAttribute(Attributes13.VALUE, val);
    }
    get text() {
      var _a3;
      return ((_a3 = this.textContent) != null ? _a3 : "").trim();
    }
    get checked() {
      if (!isCheckable(this))
        return void 0;
      return this.getAttribute("aria-checked") === "true";
    }
    set checked(value) {
      if (!isCheckable(this))
        return;
      __privateSet22(this, _dirty, true);
      this.setAttribute("aria-checked", value ? "true" : "false");
      if (value) {
        this.part.add("checked");
      } else {
        this.part.remove("checked");
      }
    }
    handleClick(event) {
      if (isCheckable(this))
        return;
      if (this.invokeTargetElement && containsComposedNode(this, event.target)) {
        this.invokeTargetElement.dispatchEvent(
          new InvokeEvent({ relatedTarget: this })
        );
      }
    }
    get keysUsed() {
      return ["Enter", " "];
    }
  };
  _dirty = /* @__PURE__ */ new WeakMap();
  _ownerElement = /* @__PURE__ */ new WeakMap();
  _handleSlotChange2 = /* @__PURE__ */ new WeakSet();
  handleSlotChange_fn2 = function(event) {
    const slot = event.target;
    const isDefaultSlot = !(slot == null ? void 0 : slot.name);
    if (isDefaultSlot) {
      for (const node of slot.assignedNodes({ flatten: true })) {
        if (node instanceof Text && node.textContent.trim() === "") {
          node.remove();
        }
      }
    }
    if (slot.name === "submenu") {
      if (this.submenuElement) {
        __privateMethod9(this, _submenuConnected, submenuConnected_fn).call(this);
      } else {
        __privateMethod9(this, _submenuDisconnected, submenuDisconnected_fn).call(this);
      }
    }
  };
  _submenuConnected = /* @__PURE__ */ new WeakSet();
  submenuConnected_fn = async function() {
    this.setAttribute("aria-haspopup", "menu");
    this.setAttribute("aria-expanded", `${!this.submenuElement.hidden}`);
    this.submenuElement.addEventListener("change", __privateGet23(this, _handleMenuItem));
    this.submenuElement.addEventListener("addmenuitem", __privateGet23(this, _handleMenuItem));
    this.submenuElement.addEventListener(
      "removemenuitem",
      __privateGet23(this, _handleMenuItem)
    );
    __privateGet23(this, _handleMenuItem).call(this);
  };
  _submenuDisconnected = /* @__PURE__ */ new WeakSet();
  submenuDisconnected_fn = function() {
    this.removeAttribute("aria-haspopup");
    this.removeAttribute("aria-expanded");
    this.submenuElement.removeEventListener("change", __privateGet23(this, _handleMenuItem));
    this.submenuElement.removeEventListener(
      "addmenuitem",
      __privateGet23(this, _handleMenuItem)
    );
    this.submenuElement.removeEventListener(
      "removemenuitem",
      __privateGet23(this, _handleMenuItem)
    );
    __privateGet23(this, _handleMenuItem).call(this);
  };
  _handleMenuItem = /* @__PURE__ */ new WeakMap();
  _handleKeyUp = /* @__PURE__ */ new WeakSet();
  handleKeyUp_fn = function(event) {
    const { key } = event;
    if (!this.keysUsed.includes(key)) {
      this.removeEventListener("keyup", __privateMethod9(this, _handleKeyUp, handleKeyUp_fn));
      return;
    }
    this.handleClick(event);
  };
  _handleKeyDown3 = /* @__PURE__ */ new WeakSet();
  handleKeyDown_fn3 = function(event) {
    const { metaKey, altKey, key } = event;
    if (metaKey || altKey || !this.keysUsed.includes(key)) {
      this.removeEventListener("keyup", __privateMethod9(this, _handleKeyUp, handleKeyUp_fn));
      return;
    }
    this.addEventListener("keyup", __privateMethod9(this, _handleKeyUp, handleKeyUp_fn), { once: true });
  };
  _reset = /* @__PURE__ */ new WeakSet();
  reset_fn = function() {
    var _a3;
    const items = (_a3 = __privateGet23(this, _ownerElement)) == null ? void 0 : _a3.radioGroupItems;
    if (!items)
      return;
    let checkedItem = items.filter((item) => item.getAttribute("aria-checked") === "true").pop();
    if (!checkedItem)
      checkedItem = items[0];
    for (const item of items) {
      item.setAttribute("aria-checked", "false");
    }
    checkedItem == null ? void 0 : checkedItem.setAttribute("aria-checked", "true");
  };
  MediaChromeMenuItem.template = template13;
  function isCheckable(item) {
    return item.type === "radio" || item.type === "checkbox";
  }
  function closestMenuItemsContainer(childNode, parentNode) {
    if (!childNode)
      return null;
    const { host } = childNode.getRootNode();
    if (!parentNode && host)
      return closestMenuItemsContainer(childNode, host);
    if (parentNode == null ? void 0 : parentNode.items)
      return parentNode;
    return closestMenuItemsContainer(parentNode, parentNode == null ? void 0 : parentNode.parentNode);
  }
  if (!GlobalThis.customElements.get("media-chrome-menu-item")) {
    GlobalThis.customElements.define(
      "media-chrome-menu-item",
      MediaChromeMenuItem
    );
  }

  // ../../node_modules/media-chrome/dist/menu/media-settings-menu.js
  var template14 = Document2.createElement("template");
  template14.innerHTML = MediaChromeMenu.template.innerHTML + /*html*/
  `
  <style>
    :host {
      --_menu-bg: rgb(20 20 30 / .8);
      background: var(--media-settings-menu-background,
          var(--media-menu-background,
            var(--media-control-background,
              var(--media-secondary-color, var(--_menu-bg)))));
      min-width: var(--media-settings-menu-min-width, 170px);
      border-radius: 2px 2px 0 0;
      overflow: hidden;
    }

    @-moz-document url-prefix() {
      :host{
        --_menu-bg: rgb(20 20 30);
      }
    }

    :host([role="menu"]) {
      ${/* Bottom fix setting menu items for animation when the height expands. */
  ""}
      justify-content: end;
    }

    slot:not([name]) {
      justify-content: var(--media-settings-menu-justify-content);
      flex-direction: var(--media-settings-menu-flex-direction, column);
      overflow: visible;
    }

    #container.has-expanded {
      --media-settings-menu-item-opacity: 0;
    }
  </style>
`;
  var MediaSettingsMenu = class extends MediaChromeMenu {
    /**
     * Returns the anchor element when it is a floating menu.
     */
    get anchorElement() {
      if (this.anchor !== "auto")
        return super.anchorElement;
      return getMediaController(this).querySelector(
        "media-settings-menu-button"
      );
    }
  };
  MediaSettingsMenu.template = template14;
  if (!GlobalThis.customElements.get("media-settings-menu")) {
    GlobalThis.customElements.define("media-settings-menu", MediaSettingsMenu);
  }

  // ../../node_modules/media-chrome/dist/menu/media-settings-menu-item.js
  var _a2;
  var template15 = Document2.createElement("template");
  template15.innerHTML = MediaChromeMenuItem.template.innerHTML + /*html*/
  `
  <style>
    slot:not([name="submenu"]) {
      opacity: var(--media-settings-menu-item-opacity, var(--media-menu-item-opacity));
    }

    :host([aria-expanded="true"]:hover) {
      background: transparent;
    }
  </style>
`;
  if ((_a2 = template15.content) == null ? void 0 : _a2.querySelector) {
    template15.content.querySelector('slot[name="suffix"]').innerHTML = /*html*/
    `
    <svg aria-hidden="true" viewBox="0 0 20 24">
      <path d="m8.12 17.585-.742-.669 4.2-4.665-4.2-4.666.743-.669 4.803 5.335-4.803 5.334Z"/>
    </svg>
  `;
  }
  var MediaSettingsMenuItem = class extends MediaChromeMenuItem {
  };
  MediaSettingsMenuItem.template = template15;
  if (!GlobalThis.customElements.get("media-settings-menu-item")) {
    GlobalThis.customElements.define(
      "media-settings-menu-item",
      MediaSettingsMenuItem
    );
  }

  // ../../node_modules/media-chrome/dist/menu/media-chrome-menu-button.js
  var MediaChromeMenuButton = class extends MediaChromeButton {
    connectedCallback() {
      super.connectedCallback();
      if (this.invokeTargetElement) {
        this.setAttribute("aria-haspopup", "menu");
      }
    }
    get invokeTarget() {
      return this.getAttribute("invoketarget");
    }
    set invokeTarget(value) {
      this.setAttribute("invoketarget", `${value}`);
    }
    /**
     * Returns the element with the id specified by the `invoketarget` attribute.
     * @return {HTMLElement | null}
     */
    get invokeTargetElement() {
      var _a3;
      if (this.invokeTarget) {
        return (_a3 = getDocumentOrShadowRoot(this)) == null ? void 0 : _a3.querySelector(
          `#${this.invokeTarget}`
        );
      }
      return null;
    }
    handleClick() {
      var _a3;
      (_a3 = this.invokeTargetElement) == null ? void 0 : _a3.dispatchEvent(
        new InvokeEvent({ relatedTarget: this })
      );
    }
  };
  if (!GlobalThis.customElements.get("media-chrome-menu-button")) {
    GlobalThis.customElements.define(
      "media-chrome-menu-button",
      MediaChromeMenuButton
    );
  }

  // ../../node_modules/media-chrome/dist/menu/media-settings-menu-button.js
  var slotTemplate12 = Document2.createElement("template");
  slotTemplate12.innerHTML = /*html*/
  `
  <style>
    :host([aria-expanded="true"]) slot[name=tooltip] {
      display: none;
    }
  </style>
  <slot name="icon">
    <svg aria-hidden="true" viewBox="0 0 24 24">
      <path d="M4.5 14.5a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5Zm7.5 0a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5Zm7.5 0a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5Z"/>
    </svg>
  </slot>
`;
  var MediaSettingsMenuButton = class extends MediaChromeMenuButton {
    static get observedAttributes() {
      return [...super.observedAttributes, "target"];
    }
    constructor() {
      super({ slotTemplate: slotTemplate12, tooltipContent: t("Settings") });
    }
    connectedCallback() {
      super.connectedCallback();
      this.setAttribute("aria-label", t("settings"));
    }
    /**
     * Returns the element with the id specified by the `invoketarget` attribute.
     * @return {HTMLElement | null}
     */
    get invokeTargetElement() {
      if (this.invokeTarget != void 0)
        return super.invokeTargetElement;
      return getMediaController(this).querySelector("media-settings-menu");
    }
  };
  if (!GlobalThis.customElements.get("media-settings-menu-button")) {
    GlobalThis.customElements.define(
      "media-settings-menu-button",
      MediaSettingsMenuButton
    );
  }

  // ../../node_modules/media-chrome/dist/menu/media-audio-track-menu.js
  var __accessCheck24 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet24 = (obj, member, getter) => {
    __accessCheck24(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd24 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet23 = (obj, member, value, setter) => {
    __accessCheck24(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var __privateMethod10 = (obj, member, method) => {
    __accessCheck24(obj, member, "access private method");
    return method;
  };
  var _audioTrackList;
  var _prevState;
  var _render;
  var render_fn;
  var _onChange;
  var onChange_fn;
  var MediaAudioTrackMenu = class extends MediaChromeMenu {
    constructor() {
      super(...arguments);
      __privateAdd24(this, _render);
      __privateAdd24(this, _onChange);
      __privateAdd24(this, _audioTrackList, []);
      __privateAdd24(this, _prevState, void 0);
    }
    static get observedAttributes() {
      return [
        ...super.observedAttributes,
        MediaUIAttributes.MEDIA_AUDIO_TRACK_LIST,
        MediaUIAttributes.MEDIA_AUDIO_TRACK_ENABLED,
        MediaUIAttributes.MEDIA_AUDIO_TRACK_UNAVAILABLE
      ];
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      super.attributeChangedCallback(attrName, oldValue, newValue);
      if (attrName === MediaUIAttributes.MEDIA_AUDIO_TRACK_ENABLED && oldValue !== newValue) {
        this.value = newValue;
      } else if (attrName === MediaUIAttributes.MEDIA_AUDIO_TRACK_LIST && oldValue !== newValue) {
        __privateSet23(this, _audioTrackList, parseAudioTrackList(newValue != null ? newValue : ""));
        __privateMethod10(this, _render, render_fn).call(this);
      }
    }
    connectedCallback() {
      super.connectedCallback();
      this.addEventListener("change", __privateMethod10(this, _onChange, onChange_fn));
    }
    disconnectedCallback() {
      super.disconnectedCallback();
      this.removeEventListener("change", __privateMethod10(this, _onChange, onChange_fn));
    }
    /**
     * Returns the anchor element when it is a floating menu.
     */
    get anchorElement() {
      var _a3;
      if (this.anchor !== "auto")
        return super.anchorElement;
      return (_a3 = getMediaController(this)) == null ? void 0 : _a3.querySelector(
        "media-audio-track-menu-button"
      );
    }
    get mediaAudioTrackList() {
      return __privateGet24(this, _audioTrackList);
    }
    set mediaAudioTrackList(list) {
      __privateSet23(this, _audioTrackList, list);
      __privateMethod10(this, _render, render_fn).call(this);
    }
    /**
     * Get enabled audio track id.
     */
    get mediaAudioTrackEnabled() {
      var _a3;
      return (_a3 = getStringAttr(this, MediaUIAttributes.MEDIA_AUDIO_TRACK_ENABLED)) != null ? _a3 : "";
    }
    set mediaAudioTrackEnabled(id) {
      setStringAttr(this, MediaUIAttributes.MEDIA_AUDIO_TRACK_ENABLED, id);
    }
  };
  _audioTrackList = /* @__PURE__ */ new WeakMap();
  _prevState = /* @__PURE__ */ new WeakMap();
  _render = /* @__PURE__ */ new WeakSet();
  render_fn = function() {
    if (__privateGet24(this, _prevState) === JSON.stringify(this.mediaAudioTrackList))
      return;
    __privateSet23(this, _prevState, JSON.stringify(this.mediaAudioTrackList));
    const audioTrackList = this.mediaAudioTrackList;
    this.defaultSlot.textContent = "";
    for (const audioTrack of audioTrackList) {
      const text = this.formatMenuItemText(audioTrack.label, audioTrack);
      const item = createMenuItem({
        type: "radio",
        text,
        value: `${audioTrack.id}`,
        checked: audioTrack.enabled
      });
      item.prepend(createIndicator(this, "checked-indicator"));
      this.defaultSlot.append(item);
    }
  };
  _onChange = /* @__PURE__ */ new WeakSet();
  onChange_fn = function() {
    if (this.value == null)
      return;
    const event = new GlobalThis.CustomEvent(
      MediaUIEvents.MEDIA_AUDIO_TRACK_REQUEST,
      {
        composed: true,
        bubbles: true,
        detail: this.value
      }
    );
    this.dispatchEvent(event);
  };
  if (!GlobalThis.customElements.get("media-audio-track-menu")) {
    GlobalThis.customElements.define(
      "media-audio-track-menu",
      MediaAudioTrackMenu
    );
  }

  // ../../node_modules/media-chrome/dist/menu/media-audio-track-menu-button.js
  var audioTrackIcon = (
    /*html*/
    `<svg aria-hidden="true" viewBox="0 0 24 24">
  <path d="M11 17H9.5V7H11v10Zm-3-3H6.5v-4H8v4Zm6-5h-1.5v6H14V9Zm3 7h-1.5V8H17v8Z"/>
  <path d="M22 12c0 5.523-4.477 10-10 10S2 17.523 2 12 6.477 2 12 2s10 4.477 10 10Zm-2 0a8 8 0 1 0-16 0 8 8 0 0 0 16 0Z"/>
</svg>`
  );
  var slotTemplate13 = Document2.createElement("template");
  slotTemplate13.innerHTML = /*html*/
  `
  <style>
    :host([aria-expanded="true"]) slot[name=tooltip] {
      display: none;
    }
  </style>
  <slot name="icon">${audioTrackIcon}</slot>
`;
  var MediaAudioTrackMenuButton = class extends MediaChromeMenuButton {
    static get observedAttributes() {
      return [
        ...super.observedAttributes,
        MediaUIAttributes.MEDIA_AUDIO_TRACK_ENABLED,
        MediaUIAttributes.MEDIA_AUDIO_TRACK_UNAVAILABLE
      ];
    }
    constructor() {
      super({ slotTemplate: slotTemplate13, tooltipContent: t("Audio") });
    }
    connectedCallback() {
      super.connectedCallback();
      this.setAttribute("aria-label", t("Audio"));
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      super.attributeChangedCallback(attrName, oldValue, newValue);
    }
    /**
     * Returns the element with the id specified by the `invoketarget` attribute.
     * @return {HTMLElement | null}
     */
    get invokeTargetElement() {
      var _a3;
      if (this.invokeTarget != void 0)
        return super.invokeTargetElement;
      return (_a3 = getMediaController(this)) == null ? void 0 : _a3.querySelector("media-audio-track-menu");
    }
    /**
     * Get enabled audio track id.
     * @return {string}
     */
    get mediaAudioTrackEnabled() {
      var _a3;
      return (_a3 = getStringAttr(this, MediaUIAttributes.MEDIA_AUDIO_TRACK_ENABLED)) != null ? _a3 : "";
    }
    set mediaAudioTrackEnabled(id) {
      setStringAttr(this, MediaUIAttributes.MEDIA_AUDIO_TRACK_ENABLED, id);
    }
  };
  if (!GlobalThis.customElements.get("media-audio-track-menu-button")) {
    GlobalThis.customElements.define(
      "media-audio-track-menu-button",
      MediaAudioTrackMenuButton
    );
  }

  // ../../node_modules/media-chrome/dist/menu/media-captions-menu.js
  var __accessCheck25 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet25 = (obj, member, getter) => {
    __accessCheck25(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd25 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet24 = (obj, member, value, setter) => {
    __accessCheck25(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var __privateMethod11 = (obj, member, method) => {
    __accessCheck25(obj, member, "access private method");
    return method;
  };
  var _prevState2;
  var _render2;
  var render_fn2;
  var _onChange2;
  var onChange_fn2;
  var ccIcon = (
    /*html*/
    `
  <svg aria-hidden="true" viewBox="0 0 26 24" part="captions-indicator indicator">
    <path d="M22.83 5.68a2.58 2.58 0 0 0-2.3-2.5c-3.62-.24-11.44-.24-15.06 0a2.58 2.58 0 0 0-2.3 2.5c-.23 4.21-.23 8.43 0 12.64a2.58 2.58 0 0 0 2.3 2.5c3.62.24 11.44.24 15.06 0a2.58 2.58 0 0 0 2.3-2.5c.23-4.21.23-8.43 0-12.64Zm-11.39 9.45a3.07 3.07 0 0 1-1.91.57 3.06 3.06 0 0 1-2.34-1 3.75 3.75 0 0 1-.92-2.67 3.92 3.92 0 0 1 .92-2.77 3.18 3.18 0 0 1 2.43-1 2.94 2.94 0 0 1 2.13.78c.364.359.62.813.74 1.31l-1.43.35a1.49 1.49 0 0 0-1.51-1.17 1.61 1.61 0 0 0-1.29.58 2.79 2.79 0 0 0-.5 1.89 3 3 0 0 0 .49 1.93 1.61 1.61 0 0 0 1.27.58 1.48 1.48 0 0 0 1-.37 2.1 2.1 0 0 0 .59-1.14l1.4.44a3.23 3.23 0 0 1-1.07 1.69Zm7.22 0a3.07 3.07 0 0 1-1.91.57 3.06 3.06 0 0 1-2.34-1 3.75 3.75 0 0 1-.92-2.67 3.88 3.88 0 0 1 .93-2.77 3.14 3.14 0 0 1 2.42-1 3 3 0 0 1 2.16.82 2.8 2.8 0 0 1 .73 1.31l-1.43.35a1.49 1.49 0 0 0-1.51-1.21 1.61 1.61 0 0 0-1.29.58A2.79 2.79 0 0 0 15 12a3 3 0 0 0 .49 1.93 1.61 1.61 0 0 0 1.27.58 1.44 1.44 0 0 0 1-.37 2.1 2.1 0 0 0 .6-1.15l1.4.44a3.17 3.17 0 0 1-1.1 1.7Z"/>
  </svg>`
  );
  var template16 = Document2.createElement("template");
  template16.innerHTML = MediaChromeMenu.template.innerHTML + /*html*/
  `
  <slot name="captions-indicator" hidden>${ccIcon}</slot>`;
  var MediaCaptionsMenu = class extends MediaChromeMenu {
    constructor() {
      super(...arguments);
      __privateAdd25(this, _render2);
      __privateAdd25(this, _onChange2);
      __privateAdd25(this, _prevState2, void 0);
    }
    static get observedAttributes() {
      return [
        ...super.observedAttributes,
        MediaUIAttributes.MEDIA_SUBTITLES_LIST,
        MediaUIAttributes.MEDIA_SUBTITLES_SHOWING
      ];
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      super.attributeChangedCallback(attrName, oldValue, newValue);
      if (attrName === MediaUIAttributes.MEDIA_SUBTITLES_LIST && oldValue !== newValue) {
        __privateMethod11(this, _render2, render_fn2).call(this);
      } else if (attrName === MediaUIAttributes.MEDIA_SUBTITLES_SHOWING && oldValue !== newValue) {
        this.value = newValue;
      }
    }
    connectedCallback() {
      super.connectedCallback();
      this.addEventListener("change", __privateMethod11(this, _onChange2, onChange_fn2));
    }
    disconnectedCallback() {
      super.disconnectedCallback();
      this.removeEventListener("change", __privateMethod11(this, _onChange2, onChange_fn2));
    }
    /**
     * Returns the anchor element when it is a floating menu.
     */
    get anchorElement() {
      if (this.anchor !== "auto")
        return super.anchorElement;
      return getMediaController(this).querySelector("media-captions-menu-button");
    }
    /**
     * @type {Array<object>} An array of TextTrack-like objects.
     * Objects must have the properties: kind, language, and label.
     */
    get mediaSubtitlesList() {
      return getSubtitlesListAttr2(this, MediaUIAttributes.MEDIA_SUBTITLES_LIST);
    }
    set mediaSubtitlesList(list) {
      setSubtitlesListAttr2(this, MediaUIAttributes.MEDIA_SUBTITLES_LIST, list);
    }
    /**
     * An array of TextTrack-like objects.
     * Objects must have the properties: kind, language, and label.
     */
    get mediaSubtitlesShowing() {
      return getSubtitlesListAttr2(
        this,
        MediaUIAttributes.MEDIA_SUBTITLES_SHOWING
      );
    }
    set mediaSubtitlesShowing(list) {
      setSubtitlesListAttr2(this, MediaUIAttributes.MEDIA_SUBTITLES_SHOWING, list);
    }
  };
  _prevState2 = /* @__PURE__ */ new WeakMap();
  _render2 = /* @__PURE__ */ new WeakSet();
  render_fn2 = function() {
    var _a3;
    if (__privateGet25(this, _prevState2) === JSON.stringify(this.mediaSubtitlesList))
      return;
    __privateSet24(this, _prevState2, JSON.stringify(this.mediaSubtitlesList));
    this.defaultSlot.textContent = "";
    const isOff = !this.value;
    const item = createMenuItem({
      type: "radio",
      text: this.formatMenuItemText("Off"),
      value: "off",
      checked: isOff
    });
    item.prepend(createIndicator(this, "checked-indicator"));
    this.defaultSlot.append(item);
    const subtitlesList = this.mediaSubtitlesList;
    for (const subs of subtitlesList) {
      const item2 = createMenuItem({
        type: "radio",
        text: this.formatMenuItemText(subs.label, subs),
        value: formatTextTrackObj(subs),
        checked: this.value == formatTextTrackObj(subs)
      });
      item2.prepend(createIndicator(this, "checked-indicator"));
      const type = (_a3 = subs.kind) != null ? _a3 : "subs";
      if (type === "captions") {
        item2.append(createIndicator(this, "captions-indicator"));
      }
      this.defaultSlot.append(item2);
    }
  };
  _onChange2 = /* @__PURE__ */ new WeakSet();
  onChange_fn2 = function() {
    const showingSubs = this.mediaSubtitlesShowing;
    const showingSubsStr = this.getAttribute(
      MediaUIAttributes.MEDIA_SUBTITLES_SHOWING
    );
    const localStateChange = this.value !== showingSubsStr;
    if ((showingSubs == null ? void 0 : showingSubs.length) && localStateChange) {
      this.dispatchEvent(
        new GlobalThis.CustomEvent(
          MediaUIEvents.MEDIA_DISABLE_SUBTITLES_REQUEST,
          {
            composed: true,
            bubbles: true,
            detail: showingSubs
          }
        )
      );
    }
    if (!this.value || !localStateChange)
      return;
    const event = new GlobalThis.CustomEvent(
      MediaUIEvents.MEDIA_SHOW_SUBTITLES_REQUEST,
      {
        composed: true,
        bubbles: true,
        detail: this.value
      }
    );
    this.dispatchEvent(event);
  };
  MediaCaptionsMenu.template = template16;
  var getSubtitlesListAttr2 = (el, attrName) => {
    const attrVal = el.getAttribute(attrName);
    return attrVal ? parseTextTracksStr(attrVal) : [];
  };
  var setSubtitlesListAttr2 = (el, attrName, list) => {
    if (!(list == null ? void 0 : list.length)) {
      el.removeAttribute(attrName);
      return;
    }
    const newValStr = stringifyTextTrackList(list);
    const oldVal = el.getAttribute(attrName);
    if (oldVal === newValStr)
      return;
    el.setAttribute(attrName, newValStr);
  };
  if (!GlobalThis.customElements.get("media-captions-menu")) {
    GlobalThis.customElements.define("media-captions-menu", MediaCaptionsMenu);
  }

  // ../../node_modules/media-chrome/dist/menu/media-captions-menu-button.js
  var __accessCheck26 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateAdd26 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet25 = (obj, member, value, setter) => {
    __accessCheck26(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var _captionsReady;
  var ccIconOn2 = `<svg aria-hidden="true" viewBox="0 0 26 24">
  <path d="M22.83 5.68a2.58 2.58 0 0 0-2.3-2.5c-3.62-.24-11.44-.24-15.06 0a2.58 2.58 0 0 0-2.3 2.5c-.23 4.21-.23 8.43 0 12.64a2.58 2.58 0 0 0 2.3 2.5c3.62.24 11.44.24 15.06 0a2.58 2.58 0 0 0 2.3-2.5c.23-4.21.23-8.43 0-12.64Zm-11.39 9.45a3.07 3.07 0 0 1-1.91.57 3.06 3.06 0 0 1-2.34-1 3.75 3.75 0 0 1-.92-2.67 3.92 3.92 0 0 1 .92-2.77 3.18 3.18 0 0 1 2.43-1 2.94 2.94 0 0 1 2.13.78c.364.359.62.813.74 1.31l-1.43.35a1.49 1.49 0 0 0-1.51-1.17 1.61 1.61 0 0 0-1.29.58 2.79 2.79 0 0 0-.5 1.89 3 3 0 0 0 .49 1.93 1.61 1.61 0 0 0 1.27.58 1.48 1.48 0 0 0 1-.37 2.1 2.1 0 0 0 .59-1.14l1.4.44a3.23 3.23 0 0 1-1.07 1.69Zm7.22 0a3.07 3.07 0 0 1-1.91.57 3.06 3.06 0 0 1-2.34-1 3.75 3.75 0 0 1-.92-2.67 3.88 3.88 0 0 1 .93-2.77 3.14 3.14 0 0 1 2.42-1 3 3 0 0 1 2.16.82 2.8 2.8 0 0 1 .73 1.31l-1.43.35a1.49 1.49 0 0 0-1.51-1.21 1.61 1.61 0 0 0-1.29.58A2.79 2.79 0 0 0 15 12a3 3 0 0 0 .49 1.93 1.61 1.61 0 0 0 1.27.58 1.44 1.44 0 0 0 1-.37 2.1 2.1 0 0 0 .6-1.15l1.4.44a3.17 3.17 0 0 1-1.1 1.7Z"/>
</svg>`;
  var ccIconOff2 = `<svg aria-hidden="true" viewBox="0 0 26 24">
  <path d="M17.73 14.09a1.4 1.4 0 0 1-1 .37 1.579 1.579 0 0 1-1.27-.58A3 3 0 0 1 15 12a2.8 2.8 0 0 1 .5-1.85 1.63 1.63 0 0 1 1.29-.57 1.47 1.47 0 0 1 1.51 1.2l1.43-.34A2.89 2.89 0 0 0 19 9.07a3 3 0 0 0-2.14-.78 3.14 3.14 0 0 0-2.42 1 3.91 3.91 0 0 0-.93 2.78 3.74 3.74 0 0 0 .92 2.66 3.07 3.07 0 0 0 2.34 1 3.07 3.07 0 0 0 1.91-.57 3.17 3.17 0 0 0 1.07-1.74l-1.4-.45c-.083.43-.3.822-.62 1.12Zm-7.22 0a1.43 1.43 0 0 1-1 .37 1.58 1.58 0 0 1-1.27-.58A3 3 0 0 1 7.76 12a2.8 2.8 0 0 1 .5-1.85 1.63 1.63 0 0 1 1.29-.57 1.47 1.47 0 0 1 1.51 1.2l1.43-.34a2.81 2.81 0 0 0-.74-1.32 2.94 2.94 0 0 0-2.13-.78 3.18 3.18 0 0 0-2.43 1 4 4 0 0 0-.92 2.78 3.74 3.74 0 0 0 .92 2.66 3.07 3.07 0 0 0 2.34 1 3.07 3.07 0 0 0 1.91-.57 3.23 3.23 0 0 0 1.07-1.74l-1.4-.45a2.06 2.06 0 0 1-.6 1.07Zm12.32-8.41a2.59 2.59 0 0 0-2.3-2.51C18.72 3.05 15.86 3 13 3c-2.86 0-5.72.05-7.53.17a2.59 2.59 0 0 0-2.3 2.51c-.23 4.207-.23 8.423 0 12.63a2.57 2.57 0 0 0 2.3 2.5c1.81.13 4.67.19 7.53.19 2.86 0 5.72-.06 7.53-.19a2.57 2.57 0 0 0 2.3-2.5c.23-4.207.23-8.423 0-12.63Zm-1.49 12.53a1.11 1.11 0 0 1-.91 1.11c-1.67.11-4.45.18-7.43.18-2.98 0-5.76-.07-7.43-.18a1.11 1.11 0 0 1-.91-1.11c-.21-4.14-.21-8.29 0-12.43a1.11 1.11 0 0 1 .91-1.11C7.24 4.56 10 4.49 13 4.49s5.76.07 7.43.18a1.11 1.11 0 0 1 .91 1.11c.21 4.14.21 8.29 0 12.43Z"/>
</svg>`;
  var slotTemplate14 = Document2.createElement("template");
  slotTemplate14.innerHTML = /*html*/
  `
  <style>
    :host([aria-checked="true"]) slot[name=off] {
      display: none !important;
    }

    ${/* Double negative, but safer if display doesn't equal 'block' */
  ""}
    :host(:not([aria-checked="true"])) slot[name=on] {
      display: none !important;
    }

    :host([aria-expanded="true"]) slot[name=tooltip] {
      display: none;
    }
  </style>

  <slot name="icon">
    <slot name="on">${ccIconOn2}</slot>
    <slot name="off">${ccIconOff2}</slot>
  </slot>
`;
  var updateAriaChecked2 = (el) => {
    el.setAttribute("aria-checked", areSubsOn(el).toString());
  };
  var MediaCaptionsMenuButton = class extends MediaChromeMenuButton {
    constructor(options = {}) {
      super({ slotTemplate: slotTemplate14, tooltipContent: t("Captions"), ...options });
      __privateAdd26(this, _captionsReady, void 0);
      __privateSet25(this, _captionsReady, false);
    }
    static get observedAttributes() {
      return [
        ...super.observedAttributes,
        MediaUIAttributes.MEDIA_SUBTITLES_LIST,
        MediaUIAttributes.MEDIA_SUBTITLES_SHOWING
      ];
    }
    connectedCallback() {
      super.connectedCallback();
      this.setAttribute("aria-label", t("closed captions"));
      updateAriaChecked2(this);
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      super.attributeChangedCallback(attrName, oldValue, newValue);
      if (attrName === MediaUIAttributes.MEDIA_SUBTITLES_SHOWING) {
        updateAriaChecked2(this);
      }
    }
    /**
     * Returns the element with the id specified by the `invoketarget` attribute.
     * @return {HTMLElement | null}
     */
    get invokeTargetElement() {
      var _a3;
      if (this.invokeTarget != void 0)
        return super.invokeTargetElement;
      return (_a3 = getMediaController(this)) == null ? void 0 : _a3.querySelector("media-captions-menu");
    }
    /**
     * An array of TextTrack-like objects.
     * Objects must have the properties: kind, language, and label.
     */
    get mediaSubtitlesList() {
      return getSubtitlesListAttr3(this, MediaUIAttributes.MEDIA_SUBTITLES_LIST);
    }
    set mediaSubtitlesList(list) {
      setSubtitlesListAttr3(this, MediaUIAttributes.MEDIA_SUBTITLES_LIST, list);
    }
    /**
     * An array of TextTrack-like objects.
     * Objects must have the properties: kind, language, and label.
     */
    get mediaSubtitlesShowing() {
      return getSubtitlesListAttr3(
        this,
        MediaUIAttributes.MEDIA_SUBTITLES_SHOWING
      );
    }
    set mediaSubtitlesShowing(list) {
      setSubtitlesListAttr3(this, MediaUIAttributes.MEDIA_SUBTITLES_SHOWING, list);
    }
  };
  _captionsReady = /* @__PURE__ */ new WeakMap();
  var getSubtitlesListAttr3 = (el, attrName) => {
    const attrVal = el.getAttribute(attrName);
    return attrVal ? parseTextTracksStr(attrVal) : [];
  };
  var setSubtitlesListAttr3 = (el, attrName, list) => {
    if (!(list == null ? void 0 : list.length)) {
      el.removeAttribute(attrName);
      return;
    }
    const newValStr = stringifyTextTrackList(list);
    const oldVal = el.getAttribute(attrName);
    if (oldVal === newValStr)
      return;
    el.setAttribute(attrName, newValStr);
  };
  if (!GlobalThis.customElements.get("media-captions-menu-button")) {
    GlobalThis.customElements.define(
      "media-captions-menu-button",
      MediaCaptionsMenuButton
    );
  }

  // ../../node_modules/media-chrome/dist/menu/media-playback-rate-menu.js
  var __accessCheck27 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet26 = (obj, member, getter) => {
    __accessCheck27(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd27 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateMethod12 = (obj, member, method) => {
    __accessCheck27(obj, member, "access private method");
    return method;
  };
  var _rates2;
  var _render3;
  var render_fn3;
  var _onChange3;
  var onChange_fn3;
  var Attributes14 = {
    RATES: "rates"
  };
  var MediaPlaybackRateMenu = class extends MediaChromeMenu {
    constructor() {
      super();
      __privateAdd27(this, _render3);
      __privateAdd27(this, _onChange3);
      __privateAdd27(this, _rates2, new AttributeTokenList(this, Attributes14.RATES, {
        defaultValue: DEFAULT_RATES
      }));
      __privateMethod12(this, _render3, render_fn3).call(this);
    }
    static get observedAttributes() {
      return [
        ...super.observedAttributes,
        MediaUIAttributes.MEDIA_PLAYBACK_RATE,
        Attributes14.RATES
      ];
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      super.attributeChangedCallback(attrName, oldValue, newValue);
      if (attrName === MediaUIAttributes.MEDIA_PLAYBACK_RATE && oldValue != newValue) {
        this.value = newValue;
      } else if (attrName === Attributes14.RATES && oldValue != newValue) {
        __privateGet26(this, _rates2).value = newValue;
        __privateMethod12(this, _render3, render_fn3).call(this);
      }
    }
    connectedCallback() {
      super.connectedCallback();
      this.addEventListener("change", __privateMethod12(this, _onChange3, onChange_fn3));
    }
    disconnectedCallback() {
      super.disconnectedCallback();
      this.removeEventListener("change", __privateMethod12(this, _onChange3, onChange_fn3));
    }
    /**
     * Returns the anchor element when it is a floating menu.
     */
    get anchorElement() {
      if (this.anchor !== "auto")
        return super.anchorElement;
      return getMediaController(this).querySelector(
        "media-playback-rate-menu-button"
      );
    }
    /**
     * Will return a DOMTokenList.
     * Setting a value will accept an array of numbers.
     */
    get rates() {
      return __privateGet26(this, _rates2);
    }
    set rates(value) {
      if (!value) {
        __privateGet26(this, _rates2).value = "";
      } else if (Array.isArray(value)) {
        __privateGet26(this, _rates2).value = value.join(" ");
      }
      __privateMethod12(this, _render3, render_fn3).call(this);
    }
    /**
     * The current playback rate
     */
    get mediaPlaybackRate() {
      return getNumericAttr(
        this,
        MediaUIAttributes.MEDIA_PLAYBACK_RATE,
        DEFAULT_RATE
      );
    }
    set mediaPlaybackRate(value) {
      setNumericAttr(this, MediaUIAttributes.MEDIA_PLAYBACK_RATE, value);
    }
  };
  _rates2 = /* @__PURE__ */ new WeakMap();
  _render3 = /* @__PURE__ */ new WeakSet();
  render_fn3 = function() {
    this.defaultSlot.textContent = "";
    for (const rate of this.rates) {
      const item = createMenuItem({
        type: "radio",
        text: this.formatMenuItemText(`${rate}x`, rate),
        value: rate,
        checked: this.mediaPlaybackRate == rate
      });
      item.prepend(createIndicator(this, "checked-indicator"));
      this.defaultSlot.append(item);
    }
  };
  _onChange3 = /* @__PURE__ */ new WeakSet();
  onChange_fn3 = function() {
    if (!this.value)
      return;
    const event = new GlobalThis.CustomEvent(
      MediaUIEvents.MEDIA_PLAYBACK_RATE_REQUEST,
      {
        composed: true,
        bubbles: true,
        detail: this.value
      }
    );
    this.dispatchEvent(event);
  };
  if (!GlobalThis.customElements.get("media-playback-rate-menu")) {
    GlobalThis.customElements.define(
      "media-playback-rate-menu",
      MediaPlaybackRateMenu
    );
  }

  // ../../node_modules/media-chrome/dist/menu/media-playback-rate-menu-button.js
  var __accessCheck28 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet27 = (obj, member, getter) => {
    __accessCheck28(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd28 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var _rates3;
  var Attributes15 = {
    RATES: "rates"
  };
  var DEFAULT_RATES2 = [1, 1.2, 1.5, 1.7, 2];
  var DEFAULT_RATE2 = 1;
  var slotTemplate15 = Document2.createElement("template");
  slotTemplate15.innerHTML = /*html*/
  `
  <style>
    :host {
      min-width: 5ch;
      padding: var(--media-button-padding, var(--media-control-padding, 10px 5px));
    }
    
    :host([aria-expanded="true"]) slot[name=tooltip] {
      display: none;
    }
  </style>
  <slot name="icon"></slot>
`;
  var MediaPlaybackRateMenuButton = class extends MediaChromeMenuButton {
    constructor(options = {}) {
      super({
        slotTemplate: slotTemplate15,
        tooltipContent: t("Playback rate"),
        ...options
      });
      __privateAdd28(this, _rates3, new AttributeTokenList(this, Attributes15.RATES, {
        defaultValue: DEFAULT_RATES2
      }));
      this.container = this.shadowRoot.querySelector('slot[name="icon"]');
      this.container.innerHTML = `${DEFAULT_RATE2}x`;
    }
    static get observedAttributes() {
      return [
        ...super.observedAttributes,
        MediaUIAttributes.MEDIA_PLAYBACK_RATE,
        Attributes15.RATES
      ];
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      super.attributeChangedCallback(attrName, oldValue, newValue);
      if (attrName === Attributes15.RATES) {
        __privateGet27(this, _rates3).value = newValue;
      }
      if (attrName === MediaUIAttributes.MEDIA_PLAYBACK_RATE) {
        const newPlaybackRate = newValue ? +newValue : Number.NaN;
        const playbackRate = !Number.isNaN(newPlaybackRate) ? newPlaybackRate : DEFAULT_RATE2;
        this.container.innerHTML = `${playbackRate}x`;
        this.setAttribute(
          "aria-label",
          t("Playback rate {playbackRate}", { playbackRate })
        );
      }
    }
    /**
     * Returns the element with the id specified by the `invoketarget` attribute.
     */
    get invokeTargetElement() {
      if (this.invokeTarget != void 0)
        return super.invokeTargetElement;
      return getMediaController(this).querySelector("media-playback-rate-menu");
    }
    /**
     * Will return a DOMTokenList.
     * Setting a value will accept an array of numbers.
     */
    get rates() {
      return __privateGet27(this, _rates3);
    }
    set rates(value) {
      if (!value) {
        __privateGet27(this, _rates3).value = "";
      } else if (Array.isArray(value)) {
        __privateGet27(this, _rates3).value = value.join(" ");
      }
    }
    /**
     * The current playback rate
     */
    get mediaPlaybackRate() {
      return getNumericAttr(
        this,
        MediaUIAttributes.MEDIA_PLAYBACK_RATE,
        DEFAULT_RATE2
      );
    }
    set mediaPlaybackRate(value) {
      setNumericAttr(this, MediaUIAttributes.MEDIA_PLAYBACK_RATE, value);
    }
  };
  _rates3 = /* @__PURE__ */ new WeakMap();
  if (!GlobalThis.customElements.get("media-playback-rate-menu-button")) {
    GlobalThis.customElements.define(
      "media-playback-rate-menu-button",
      MediaPlaybackRateMenuButton
    );
  }

  // ../../node_modules/media-chrome/dist/menu/media-rendition-menu.js
  var __accessCheck29 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet28 = (obj, member, getter) => {
    __accessCheck29(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd29 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet26 = (obj, member, value, setter) => {
    __accessCheck29(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var __privateMethod13 = (obj, member, method) => {
    __accessCheck29(obj, member, "access private method");
    return method;
  };
  var _renditionList;
  var _prevState3;
  var _render4;
  var render_fn4;
  var _onChange4;
  var onChange_fn4;
  var MediaRenditionMenu = class extends MediaChromeMenu {
    constructor() {
      super(...arguments);
      __privateAdd29(this, _render4);
      __privateAdd29(this, _onChange4);
      __privateAdd29(this, _renditionList, []);
      __privateAdd29(this, _prevState3, {});
    }
    static get observedAttributes() {
      return [
        ...super.observedAttributes,
        MediaUIAttributes.MEDIA_RENDITION_LIST,
        MediaUIAttributes.MEDIA_RENDITION_SELECTED,
        MediaUIAttributes.MEDIA_RENDITION_UNAVAILABLE,
        MediaUIAttributes.MEDIA_HEIGHT
      ];
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      super.attributeChangedCallback(attrName, oldValue, newValue);
      if (attrName === MediaUIAttributes.MEDIA_RENDITION_SELECTED && oldValue !== newValue) {
        this.value = newValue != null ? newValue : "auto";
        __privateMethod13(this, _render4, render_fn4).call(this);
      } else if (attrName === MediaUIAttributes.MEDIA_RENDITION_LIST && oldValue !== newValue) {
        __privateSet26(this, _renditionList, parseRenditionList(newValue));
        __privateMethod13(this, _render4, render_fn4).call(this);
      } else if (attrName === MediaUIAttributes.MEDIA_HEIGHT && oldValue !== newValue) {
        __privateMethod13(this, _render4, render_fn4).call(this);
      }
    }
    connectedCallback() {
      super.connectedCallback();
      this.addEventListener("change", __privateMethod13(this, _onChange4, onChange_fn4));
    }
    disconnectedCallback() {
      super.disconnectedCallback();
      this.removeEventListener("change", __privateMethod13(this, _onChange4, onChange_fn4));
    }
    /**
     * Returns the anchor element when it is a floating menu.
     */
    get anchorElement() {
      if (this.anchor !== "auto")
        return super.anchorElement;
      return getMediaController(this).querySelector(
        "media-rendition-menu-button"
      );
    }
    get mediaRenditionList() {
      return __privateGet28(this, _renditionList);
    }
    set mediaRenditionList(list) {
      __privateSet26(this, _renditionList, list);
      __privateMethod13(this, _render4, render_fn4).call(this);
    }
    /**
     * Get selected rendition id.
     */
    get mediaRenditionSelected() {
      return getStringAttr(this, MediaUIAttributes.MEDIA_RENDITION_SELECTED);
    }
    set mediaRenditionSelected(id) {
      setStringAttr(this, MediaUIAttributes.MEDIA_RENDITION_SELECTED, id);
    }
    get mediaHeight() {
      return getNumericAttr(this, MediaUIAttributes.MEDIA_HEIGHT);
    }
    set mediaHeight(height) {
      setNumericAttr(this, MediaUIAttributes.MEDIA_HEIGHT, height);
    }
  };
  _renditionList = /* @__PURE__ */ new WeakMap();
  _prevState3 = /* @__PURE__ */ new WeakMap();
  _render4 = /* @__PURE__ */ new WeakSet();
  render_fn4 = function() {
    if (__privateGet28(this, _prevState3).mediaRenditionList === JSON.stringify(this.mediaRenditionList) && __privateGet28(this, _prevState3).mediaHeight === this.mediaHeight)
      return;
    __privateGet28(this, _prevState3).mediaRenditionList = JSON.stringify(this.mediaRenditionList);
    __privateGet28(this, _prevState3).mediaHeight = this.mediaHeight;
    const renditionList = this.mediaRenditionList.sort(
      (a, b) => b.height - a.height
    );
    for (const rendition of renditionList) {
      rendition.selected = rendition.id === this.mediaRenditionSelected;
    }
    this.defaultSlot.textContent = "";
    const isAuto = !this.mediaRenditionSelected;
    for (const rendition of renditionList) {
      const text2 = this.formatMenuItemText(
        `${Math.min(rendition.width, rendition.height)}p`,
        rendition
      );
      const item2 = createMenuItem({
        type: "radio",
        text: text2,
        value: `${rendition.id}`,
        checked: rendition.selected && !isAuto
      });
      item2.prepend(createIndicator(this, "checked-indicator"));
      this.defaultSlot.append(item2);
    }
    const text = isAuto ? this.formatMenuItemText(`Auto (${this.mediaHeight}p)`) : this.formatMenuItemText("Auto");
    const item = createMenuItem({
      type: "radio",
      text,
      value: "auto",
      checked: isAuto
    });
    const autoDescription = this.mediaHeight > 0 ? `Auto (${this.mediaHeight}p)` : "Auto";
    item.dataset.description = autoDescription;
    item.prepend(createIndicator(this, "checked-indicator"));
    this.defaultSlot.append(item);
  };
  _onChange4 = /* @__PURE__ */ new WeakSet();
  onChange_fn4 = function() {
    if (this.value == null)
      return;
    const event = new GlobalThis.CustomEvent(
      MediaUIEvents.MEDIA_RENDITION_REQUEST,
      {
        composed: true,
        bubbles: true,
        detail: this.value
      }
    );
    this.dispatchEvent(event);
  };
  if (!GlobalThis.customElements.get("media-rendition-menu")) {
    GlobalThis.customElements.define("media-rendition-menu", MediaRenditionMenu);
  }

  // ../../node_modules/media-chrome/dist/menu/media-rendition-menu-button.js
  var renditionIcon = (
    /*html*/
    `<svg aria-hidden="true" viewBox="0 0 24 24">
  <path d="M13.5 2.5h2v6h-2v-2h-11v-2h11v-2Zm4 2h4v2h-4v-2Zm-12 4h2v6h-2v-2h-3v-2h3v-2Zm4 2h12v2h-12v-2Zm1 4h2v6h-2v-2h-8v-2h8v-2Zm4 2h7v2h-7v-2Z" />
</svg>`
  );
  var slotTemplate16 = Document2.createElement("template");
  slotTemplate16.innerHTML = /*html*/
  `
  <style>
    :host([aria-expanded="true"]) slot[name=tooltip] {
      display: none;
    }
  </style>
  <slot name="icon">${renditionIcon}</slot>
`;
  var MediaRenditionMenuButton = class extends MediaChromeMenuButton {
    static get observedAttributes() {
      return [
        ...super.observedAttributes,
        MediaUIAttributes.MEDIA_RENDITION_SELECTED,
        MediaUIAttributes.MEDIA_RENDITION_UNAVAILABLE,
        MediaUIAttributes.MEDIA_HEIGHT
      ];
    }
    constructor() {
      super({ slotTemplate: slotTemplate16, tooltipContent: t("Quality") });
    }
    connectedCallback() {
      super.connectedCallback();
      this.setAttribute("aria-label", t("quality"));
    }
    /**
     * Returns the element with the id specified by the `invoketarget` attribute.
     */
    get invokeTargetElement() {
      if (this.invokeTarget != void 0)
        return super.invokeTargetElement;
      return getMediaController(this).querySelector("media-rendition-menu");
    }
    /**
     * Get selected rendition id.
     */
    get mediaRenditionSelected() {
      return getStringAttr(this, MediaUIAttributes.MEDIA_RENDITION_SELECTED);
    }
    set mediaRenditionSelected(id) {
      setStringAttr(this, MediaUIAttributes.MEDIA_RENDITION_SELECTED, id);
    }
    get mediaHeight() {
      return getNumericAttr(this, MediaUIAttributes.MEDIA_HEIGHT);
    }
    set mediaHeight(height) {
      setNumericAttr(this, MediaUIAttributes.MEDIA_HEIGHT, height);
    }
  };
  if (!GlobalThis.customElements.get("media-rendition-menu-button")) {
    GlobalThis.customElements.define(
      "media-rendition-menu-button",
      MediaRenditionMenuButton
    );
  }

  // ../../themes/vimeonova/dist/media-theme.js
  var template17 = GlobalThis.document?.createElement?.("template");
  if (template17) {
    template17.innerHTML = /*html*/
    `
    <style>
      :host {
        --vimeonova-black: 23 35 34;
        --vimeonova-primary-color: var(--media-primary-color, rgb(253 244 255));
        --vimeonova-secondary-color: var(--media-secondary-color, rgb(--vimeonova-black / 0.75));
        --vimeonova-accent-color: var(--media-accent-color, rgb(0 186 115));
        --vimeonova-control-bar-height: 32px;
        --vimeonova-control-bar-border-radius: 0.125em;
        --vimeonova-play-button-border-radius: 0.25em;

        --media-control-background: var(--vimeonova-secondary-color);
        --media-control-hover-background: var(--vimeonova-secondary-color);
        --media-icon-color: var(--vimeonova-primary-color);
        --media-menu-border-radius: 0.25em;
        --media-tooltip-display: none;

        color: var(--vimeonova-primary-color);
      }

      @supports (color: color-mix(in srgb, red, blue)) {
        :host {
          --vimeonova-secondary-color: color-mix(
            in srgb,
            var(--media-secondary-color, rgb(23 35 34)) 75%,
            transparent
          );
        }
      }

      media-controller {
        display: block;
        container: media-theme-vimeonova / inline-size;
      }

      .hidden {
        display: none;
      }

      .header {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        row-gap: 1px;
        margin: 0.625em;
      }

      .title,
      .byline {
        display: inline-block;
        background: var(--vimeonova-secondary-color);
        margin: 0;
        padding: 0.18em 0.24em;
        line-height: 1;
        font-size: 0.8em;
        font-weight: normal;
      }

      .title {
        color: var(--vimeonova-accent-color);
        font-size: 1.3em;
        font-weight: bold;
      }

      .byline {
        color: var(--vimeonova-accent-color);
      }

      .control-bar-container {
        position: relative;
        overflow: visible;
        display: flex;
        align-items: end;
        padding: 0.35em;
        width: 100%;
        box-sizing: border-box;
      }

      @container (inline-size >=384px) {
        .control-bar-container {
          column-gap: 0.625em;
          padding: 0.625em;
        }
      }

      .control-bar-right {
        flex-grow: 1;
      }

      media-control-bar {
        background: var(--media-control-background);
        height: var(--vimeonova-control-bar-height);
        border-bottom-left-radius: var(--vimeonova-control-bar-border-radius);
        border-bottom-right-radius: var(--vimeonova-control-bar-border-radius);
        width: 100%;
      }

      media-control-bar [role='button'],
      media-control-bar [role='switch'] {
        --media-control-background: transparent;
        --media-control-hover-background: transparent;
        --media-button-icon-active-transform: scale(1.2);
        --media-button-icon-transition: transform 0.2s ease;
        color: var(--vimeonova-primary-color);
        padding: 0.3125em 0.35em;
      }

      media-control-bar svg {
        fill: none;
      }

      media-control-bar svg:active {
        transform: scale(1.2);
      }

      media-play-button {
        --media-control-background: var(--vimeonova-secondary-color);
        --media-control-hover-background: var(--vimeonova-accent-color);
        --media-button-icon-height: 100%;
        display: none;
        border-radius: var(--vimeonova-play-button-border-radius);
        color: var(--vimeonova-primary-color);
        width: 65px;
        height: 40px;
        padding: 0.3125em 0.625em;
      }

      [slot='centered-chrome'] media-play-button {
        display: block;
        position: relative;
        top: -30%;
      }

      media-play-button:active {
        --media-control-hover-background: var(--vimeonova-accent-color);
      }

      @supports (color: color-mix(in srgb, red, blue)) {
        media-play-button:active {
          --media-control-hover-background: color-mix(
            in srgb,
            var(--vimeonova-accent-color) 80%,
            transparent
          );
        }
      }

      media-time-range {
        --media-range-padding: 0;
        --media-control-background: transparent;
        --media-control-hover-background: transparent;
        --media-time-range-buffered-color: dimgray;
        --media-range-track-background: rgb(var(--vimeonova-black) / 0.5);
        --media-range-track-border-radius: 0;
        --media-range-bar-color: var(--vimeonova-accent-color);
        --media-range-thumb-background: none;
        --media-range-thumb-width: 0px;
        --media-range-thumb-height: 0px;
        --media-range-track-height: 10px;
        --media-preview-thumbnail-border-radius: 2px;
        --media-preview-thumbnail-border: 4px solid var(--vimeonova-secondary-color);
        --media-box-margin: 0;
        --media-preview-time-background: rgb(var(--vimeonova-black) / 1);
        padding-inline: 10px;
      }

      media-time-range.small {
        --media-box-padding-left: 2px;
        --media-box-padding-right: 2px;
        --media-range-track-height: 5px;
        --media-range-track-border-radius: var(--vimeonova-control-bar-border-radius)
          var(--vimeonova-control-bar-border-radius) 0 0;
        height: 5px;
        width: 100%;
        padding: 0;
      }

      @keyframes buffer {
        100% {
          --media-range-track-background: rgb(var(--vimeonova-black) / 0.5)
            url('data:image/svg+xml;charset=utf-8,<svg xmlns="http://www.w3.org/2000/svg" width="100%"><style>@keyframes buffer { 100% { transform: translateX(-10px); }}%3C/style><defs><pattern id="buffer-pattern" patternUnits="userSpaceOnUse" x="0" y="0" width="10" height="10" viewBox="0 0 10 10"><line x1="5" y1="-1" x2="-5" y2="10" stroke-width="2" stroke="dimgray" stroke-linecap="butt" /><line x1="10" y1="-1" x2="0" y2="10" stroke-width="2" stroke="dimgray" stroke-linecap="butt" /><line x1="15" y1="-1" x2="5" y2="10" stroke-width="2" stroke="dimgray" stroke-linecap="butt" /></pattern></defs><rect width="110%" height="100%" fill="url(%23buffer-pattern)" style="animation: buffer 250ms linear infinite;" /></svg>');
        }
      }

      [medialoading]:not([mediapaused]) media-time-range {
        animation: 1000000s 0.5s buffer reverse;
      }

      media-time-range.large {
        display: none;
        height: var(--vimeonova-control-bar-height);
        flex-grow: 10000;
      }

      media-time-range > * {
        position: relative;
        bottom: -11px;
      }

      media-time-range.small > * {
        bottom: 3px;
      }

      @container (inline-size >=384px) {
        [slot='centered-chrome'] media-play-button {
          display: none;
        }

        .control-bar-container media-play-button {
          display: block;
        }

        media-time-range.small {
          border-top-left-radius: var(--vimeonova-control-bar-border-radius);
          border-top-right-radius: var(--vimeonova-control-bar-border-radius);
        }
      }

      @container (inline-size >=484px) {
        media-control-bar {
          border-radius: var(--vimeonova-control-bar-border-radius);
        }

        media-time-range.small {
          display: none;
        }

        media-time-range.large {
          display: block;
        }
      }

      media-preview-time-display,
      media-time-display {
        --media-preview-time-background: var(--vimeonova-primary-color);
        padding: 2px 4px;
        border-radius: 0;
        line-height: normal;
        color: rgb(var(--vimeonova-black) / 1);
        font-family: Verdana, sans-serif;
        font-size: 10px;
        box-shadow: rgb(0 0 0 / 0.7) 1px 1px 0px 0px;
        text-shadow: none;
      }

      media-preview-thumbnail {
        max-width: 213px;
        max-height: 200px;
      }

      media-preview-time-display {
        margin-top: 5px;
        min-width: auto;
        --media-preview-time-background: rgb(var(--vimeonova-black) / 1);
        color: var(--vimeonova-primary-color);
      }

      [part='arrow'] {
        --media-box-arrow-background: rgb(var(--vimeonova-black) / 1);
        --media-box-arrow-height: 4px;
        --media-box-arrow-width: 4px;
        --media-box-arrow-offset: 0px;
        left: 1px;
      }

      [part='arrow'][slot='current']::before {
        --media-box-arrow-background: var(--vimeonova-primary-color);
      }

      [part='arrow']::before {
        content: '';
        border-color: transparent;
        border-top-color: var(--media-box-arrow-background, var(--_control-background));
        border-width: var(
          --media-box-arrow-border-width,
          var(--media-box-arrow-height, 5px) var(--media-box-arrow-width, 6px) 0
        );
        border-style: solid;
        position: absolute;
        bottom: 0.5px;
        margin-left: calc((var(--media-box-arrow-width) + 1px) * -1);
      }

      media-volume-range {
        --media-range-track-background-color: rgb(var(--vimeonova-black) / 0.8);
        --media-range-track-border-radius: 1px;
        --media-range-bar-color: var(--vimeonova-accent-color);
        --media-range-thumb-background: none;
        --media-range-thumb-width: 0px;
        --media-range-thumb-height: 0px;
        --media-range-track-height: 6px;
        height: var(--vimeonova-control-bar-height);
        background: var(--vimeonova-secondary-color);
        border-radius: var(--media-menu-border-radius);
      }

      .media-volume-wrapper {
        position: relative;
      }

      .media-volume-range-wrapper {
        width: 122px;
        height: 34px;
        overflow: hidden;
        opacity: 0;
        transform: rotate(-90deg);
        position: absolute;
        top: -80px;
        left: -52px;
        border-left: 16px solid transparent;
        visibility: hidden;
      }

      @container (inline-size >=484px) {
        .media-volume-range-wrapper {
          top: -77px;
        }
      }

      media-mute-button:hover + .media-volume-range-wrapper,
      media-mute-button:focus + .media-volume-range-wrapper,
      media-mute-button:focus-within + .media-volume-range-wrapper,
      .media-volume-range-wrapper:hover,
      .media-volume-range-wrapper:focus,
      .media-volume-range-wrapper:focus-within {
        opacity: 1;
        visibility: visible;
      }

      [role='menu'] {
        position: absolute;
        margin-bottom: 10px;
      }

      @container (inline-size >=484px) {
        [role='menu'] {
          margin-bottom: 7px;
        }
      }

      .spacer {
        flex-grow: 1;
        height: 100%;
      }
    </style>

    <media-controller
      defaultsubtitles="{{defaultsubtitles}}"
      defaultduration="{{defaultduration}}"
      gesturesdisabled="{{disabled}}"
      hotkeys="{{hotkeys}}"
      nohotkeys="{{nohotkeys}}"
      defaultstreamtype="on-demand"
    >
      <slot name="media" slot="media"></slot>
      <slot name="poster" slot="poster"></slot>
      <media-error-dialog slot="dialog"></media-error-dialog>

      <div slot="top-chrome" class="header">
        <template if="mediatitle">
          <h1 class="title">{{mediatitle}}</h1>
        </template>
        <template if="mediabyline">
          <h2 class="byline">{{mediabyline}}</h2>
        </template>
      </div>

      <div slot="centered-chrome">
        <media-play-button>
          <svg
            slot="play"
            aria-hidden="true"
            viewBox="0 0 24 24"
            stroke-width="1"
            stroke="currentColor"
            fill="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
            <path d="M7 4v16l13 -8z"></path>
          </svg>
          <svg
            slot="pause"
            aria-hidden="true"
            viewBox="0 0 24 24"
            stroke-width="1"
            stroke="currentColor"
            fill="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
            <rect x="6" y="5" width="4" height="14" rx="0"></rect>
            <rect x="14" y="5" width="4" height="14" rx="0"></rect>
          </svg>
        </media-play-button>
      </div>

      <div class="control-bar-container" id="vimeonova-bounds">
        <media-play-button>
          <svg
            slot="play"
            aria-hidden="true"
            viewBox="0 0 24 24"
            stroke-width="1"
            stroke="currentColor"
            fill="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
            <path d="M7 4v16l13 -8z"></path>
          </svg>
          <svg
            slot="pause"
            aria-hidden="true"
            viewBox="0 0 24 24"
            stroke-width="1"
            stroke="currentColor"
            fill="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
            <rect x="6" y="5" width="4" height="14" rx="0"></rect>
            <rect x="14" y="5" width="4" height="14" rx="0"></rect>
          </svg>
        </media-play-button>

        <div class="control-bar-right">
          <media-time-range class="small">
            <media-preview-time-display slot="preview"></media-preview-time-display>
            <div part="arrow" slot="preview"></div>
            <media-time-display slot="current"></media-time-display>
            <div part="arrow" slot="current"></div>
          </media-time-range>
          <media-control-bar>
            <media-time-range class="large" bounds="vimeonova-bounds">
              <media-preview-thumbnail slot="preview"></media-preview-thumbnail>
              <media-preview-time-display slot="preview"></media-preview-time-display>
              <div part="arrow" slot="preview"></div>
              <media-time-display slot="current"></media-time-display>
              <div part="arrow" slot="current"></div>
            </media-time-range>
            <div class="spacer"></div>
            <media-captions-menu-button>
              <svg slot="on" aria-hidden="true" fill="none" viewBox="0 0 24 24">
                <path
                  fill="currentColor"
                  fill-rule="evenodd"
                  d="M2 8a4 4 0 0 1 4-4h12a4 4 0 0 1 4 4v7a4 4 0 0 1-4 4h-.532l-2.2 2.64a1 1 0 0 1-1.536 0l-2.2-2.64H5.999A4 4 0 0 1 2 15V8Zm13.57.183a3.333 3.333 0 0 1 2.338.826.82.82 0 0 1-1.083 1.232 1.693 1.693 0 0 0-2.336.097 1.674 1.674 0 0 0 0 2.324 1.692 1.692 0 0 0 2.336.097.82.82 0 0 1 1.083 1.232 3.333 3.333 0 0 1-4.6-.191 3.314 3.314 0 0 1 0-4.6m2.261-1.017c-.856.035-1.666.4-2.261 1.017Zm-6.7-.005a3.338 3.338 0 0 1 2.342.828.825.825 0 0 1-1.089 1.239 1.688 1.688 0 0 0-2.33.097 1.669 1.669 0 0 0 0 2.316 1.688 1.688 0 0 0 2.33.097.825.825 0 1 1 1.09 1.24 3.338 3.338 0 0 1-4.608-.192 3.319 3.319 0 0 1 0-4.606m2.265-1.02a3.347 3.347 0 0 0-2.265 1.02Z"
                  clip-rule="evenodd"
                />
              </svg>
              <svg slot="off" aria-hidden="true" fill="none" viewBox="0 0 24 24">
                <path
                  stroke="currentColor"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="1.6"
                  d="M17.367 9.625a2.513 2.513 0 0 0-3.469.144 2.494 2.494 0 0 0 0 3.461 2.513 2.513 0 0 0 3.469.145m-6.7-3.75a2.513 2.513 0 0 0-3.469.144 2.494 2.494 0 0 0 0 3.461 2.512 2.512 0 0 0 3.469.145"
                />
                <path
                  fill="currentColor"
                  d="M17 18v-1h-.468l-.3.36L17 18Zm-5 0 .768-.64-.3-.36H12v1Zm2.5 3-.768.64a1 1 0 0 0 1.536 0L14.5 21ZM6 6h12V4H6v2Zm14 2v7h2V8h-2ZM4 15V8H2v7h2Zm14 2h-1v2h1v-2Zm-6 0H6v2h6v-2Zm4.232.36-2.5 3 1.536 1.28 2.5-3-1.536-1.28Zm-.964 3-2.5-3-1.536 1.28 2.5 3 1.536-1.28ZM2 15a4 4 0 0 0 4 4v-2a2 2 0 0 1-2-2H2Zm18 0a2 2 0 0 1-2 2v2a4 4 0 0 0 4-4h-2Zm-2-9a2 2 0 0 1 2 2h2a4 4 0 0 0-4-4v2ZM6 4a4 4 0 0 0-4 4h2a2 2 0 0 1 2-2V4Z"
                />
              </svg>
            </media-captions-menu-button>
            <media-playback-rate-menu-button></media-playback-rate-menu-button>
            <div class="media-volume-wrapper">
              <media-mute-button>
                <svg
                  slot="high"
                  aria-hidden="true"
                  viewBox="0 0 24 25"
                  stroke-width="1.8"
                  stroke="currentColor"
                  fill="none"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                >
                  <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                  <path d="M15 8a5 5 0 0 1 0 8"></path>
                  <path d="M17.7 5a9 9 0 0 1 0 14"></path>
                  <path
                    d="M6 15h-2a1 1 0 0 1 -1 -1v-4a1 1 0 0 1 1 -1h2l3.5 -4.5a0.8 .8 0 0 1 1.5 .5v14a0.8 .8 0 0 1 -1.5 .5l-3.5 -4.5"
                    fill="currentColor"
                  ></path>
                </svg>
                <svg
                  slot="medium"
                  aria-hidden="true"
                  viewBox="0 0 24 25"
                  stroke-width="1.8"
                  stroke="currentColor"
                  fill="none"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                >
                  <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                  <path d="M15 8a5 5 0 0 1 0 8"></path>
                  <path d="M17.7 5a9 9 0 0 1 0 14"></path>
                  <path
                    d="M6 15h-2a1 1 0 0 1 -1 -1v-4a1 1 0 0 1 1 -1h2l3.5 -4.5a0.8 .8 0 0 1 1.5 .5v14a0.8 .8 0 0 1 -1.5 .5l-3.5 -4.5"
                    fill="currentColor"
                  ></path>
                </svg>
                <svg
                  slot="low"
                  aria-hidden="true"
                  viewBox="0 0 24 25"
                  stroke-width="1.8"
                  stroke="currentColor"
                  fill="none"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                >
                  <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                  <path d="M15 8a5 5 0 0 1 0 8"></path>
                  <path
                    d="M6 15h-2a1 1 0 0 1 -1 -1v-4a1 1 0 0 1 1 -1h2l3.5 -4.5a0.8 .8 0 0 1 1.5 .5v14a0.8 .8 0 0 1 -1.5 .5l-3.5 -4.5"
                    fill="currentColor"
                  ></path>
                </svg>
                <svg
                  slot="off"
                  aria-hidden="true"
                  viewBox="0 0 24 25"
                  stroke-width="1.8"
                  stroke="currentColor"
                  fill="none"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                >
                  <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                  <path
                    d="M6 15h-2a1 1 0 0 1 -1 -1v-4a1 1 0 0 1 1 -1h2l3.5 -4.5a0.8 .8 0 0 1 1.5 .5v14a0.8 .8 0 0 1 -1.5 .5l-3.5 -4.5"
                  ></path>
                  <path d="M16 10l4 4m0 -4l-4 4"></path>
                </svg>
              </media-mute-button>
              <div class="media-volume-range-wrapper">
                <media-volume-range></media-volume-range>
              </div>
            </div>
            <media-rendition-menu-button>
              <svg slot="icon" class="media-hd-icon" aria-hidden="true" viewBox="0 0 28 24">
                <path
                  fill="currentColor"
                  d="M19.866 18.971h-5.458L16.728 5h5.239c1.437 0 2.638.289 3.602.866.964.578 1.648 1.403 2.053 2.477.405 1.073.485 2.351.239 3.834-.237 1.428-.716 2.649-1.44 3.663a7.076 7.076 0 0 1-2.756 2.326c-1.114.537-2.38.805-3.8.805Zm-1.133-3.22h1.378c.691 0 1.308-.12 1.849-.361.546-.246 1-.655 1.364-1.228.369-.578.635-1.367.798-2.367.155-.946.15-1.676-.013-2.19-.164-.519-.476-.878-.935-1.078-.46-.205-1.053-.307-1.78-.307h-1.406l-1.255 7.531ZM0 18.971 2.32 5h3.792l-.9 5.458h5.02L11.134 5h3.794l-2.32 13.971H8.814l.9-5.457h-5.02l-.901 5.457H0Z"
                />
              </svg>
              <svg slot="icon" class="media-sd-icon hidden" aria-hidden="true" viewBox="0 0 28 24">
                <path
                  fill="currentColor"
                  d="M19.857 18.967H14.41L16.725 5.02h5.23c1.434 0 2.633.288 3.595.864.962.577 1.646 1.401 2.05 2.472.404 1.072.483 2.347.238 3.827-.236 1.426-.715 2.645-1.437 3.657a7.062 7.062 0 0 1-2.75 2.322c-1.113.536-2.377.804-3.794.804Zm-1.13-3.214h1.375c.69 0 1.306-.12 1.846-.361.545-.246.999-.654 1.362-1.226.367-.577.633-1.364.797-2.363.154-.944.15-1.673-.014-2.186-.164-.517-.474-.876-.933-1.076-.459-.204-1.051-.306-1.777-.306H19.98l-1.253 7.518Zm-8.496-6.374c.041-.45-.068-.801-.327-1.056-.258-.258-.694-.388-1.307-.388-.39 0-.717.046-.98.136-.26.091-.461.216-.607.375-.14.159-.229.343-.265.551a.792.792 0 0 0 .007.45.85.85 0 0 0 .279.36c.14.11.324.207.551.294.232.086.507.163.824.231l1.09.245c.744.164 1.369.38 1.872.647.509.263.909.577 1.199.94.29.363.481.77.572 1.219.095.45.098.94.007 1.47-.155.918-.51 1.694-1.07 2.33-.558.635-1.286 1.119-2.185 1.45-.899.331-1.939.497-3.119.497-1.207 0-2.233-.18-3.078-.538-.84-.363-1.448-.917-1.825-1.662-.372-.748-.463-1.704-.272-2.866h3.595c-.054.426-.009.785.136 1.076.146.29.38.51.702.66.322.15.724.225 1.205.225.409 0 .758-.05 1.049-.15.29-.1.52-.238.688-.415.168-.177.27-.38.306-.606a.741.741 0 0 0-.109-.559c-.109-.163-.306-.31-.592-.442s-.68-.252-1.178-.361l-1.335-.3c-1.185-.272-2.08-.722-2.683-1.348-.604-.627-.817-1.485-.64-2.574.145-.89.51-1.666 1.096-2.329.59-.667 1.34-1.185 2.247-1.553.913-.372 1.923-.558 3.03-.558 1.126 0 2.068.188 2.826.565.763.377 1.31.906 1.642 1.587.336.68.426 1.48.272 2.397h-3.623Z"
                />
              </svg>
              <svg slot="icon" class="media-4k-icon hidden" aria-hidden="true" viewBox="0 0 28 24">
                <path
                  fill="currentColor"
                  d="M13.163 18.887 15.47 5h3.77l-.922 5.615h.19L23.606 5H28l-5.696 6.184 3.499 7.703H21.3l-2.224-5.207-1.546 1.654-.596 3.553h-3.77ZM0 16.717l.488-2.929L7.54 5h2.658l-.65 3.906h-1.52L4.232 13.68l-.027.108h8.246l-.489 2.93H0Zm6.401 2.17.516-3.065.298-1.274L8.788 5h3.526L10.01 18.887H6.4Z"
                />
              </svg>
            </media-rendition-menu-button>
            <media-pip-button>
              <svg
                slot="enter"
                aria-hidden="true"
                viewBox="0 0 24 24"
                stroke-width="2"
                stroke="currentColor"
                fill="none"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                <path d="M11 19h-6a2 2 0 0 1 -2 -2v-10a2 2 0 0 1 2 -2h14a2 2 0 0 1 2 2v4"></path>
                <rect x="14" y="14" width="7" height="5" rx="1" fill="currentColor"></rect>
                <line x1="7" y1="9" x2="11" y2="13"></line>
                <path d="M8 13h3v-3"></path>
              </svg>
              <svg
                slot="exit"
                aria-hidden="true"
                viewBox="0 0 24 24"
                stroke-width="2"
                stroke="currentColor"
                fill="none"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                <path d="M11 19h-6a2 2 0 0 1 -2 -2v-10a2 2 0 0 1 2 -2h14a2 2 0 0 1 2 2v4"></path>
                <rect x="14" y="14" width="7" height="5" rx="1" fill="currentColor"></rect>
                <line x1="7" y1="9" x2="11" y2="13"></line>
                <path d="M7 12v-3h3"></path>
              </svg>
            </media-pip-button>
            <media-airplay-button></media-airplay-button>
            <media-cast-button>
              <svg
                slot="enter"
                viewBox="0 0 24 24"
                stroke-width="2"
                stroke="currentColor"
                fill="none"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                <line x1="3" y1="19" x2="3.01" y2="19"></line>
                <path d="M7 19a4 4 0 0 0 -4 -4"></path>
                <path d="M11 19a8 8 0 0 0 -8 -8"></path>
                <path d="M15 19h3a3 3 0 0 0 3 -3v-8a3 3 0 0 0 -3 -3h-12a3 3 0 0 0 -2.8 2"></path>
              </svg>
              <svg
                slot="exit"
                viewBox="0 0 24 24"
                stroke-width="2"
                stroke="currentColor"
                fill="none"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                <path d="M3 19h.01"></path>
                <path d="M7 19a4 4 0 0 0 -4 -4"></path>
                <path d="M11 19a8 8 0 0 0 -8 -8"></path>
                <path
                  d="M15 19h3a3 3 0 0 0 .875 -.13m1.997 -2.002a3 3 0 0 0 .128 -.868v-8a3 3 0 0 0 -3 -3h-9m-3.865 .136a3 3 0 0 0 -1.935 1.864"
                ></path>
                <path d="M3 3l18 18"></path>
              </svg>
            </media-cast-button>
            <media-fullscreen-button>
              <svg slot="enter" aria-hidden="true" fill="none" viewBox="0 0 24 24">
                <path
                  stroke="currentColor"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M15 5h4v4M15 9l4-4M9 19H5v-4M5 19l4-4M15 19h4v-4M15 15l4 4M9 5H5v4M5 5l4 4"
                />
              </svg>
              <svg slot="exit" aria-hidden="true" fill="none" viewBox="0 0 24 24">
                <path
                  stroke="currentColor"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M5 9h4V5M4.5 4.5 9 9M5 15h4v4M4.5 19.5 9 15M19 9h-4V5M15 9l4.5-4.5M19 15h-4v4M15 15l4.5 4.5"
                />
              </svg>
            </media-fullscreen-button>
          </media-control-bar>
        </div>
      </div>

      <media-captions-menu anchor="auto" hidden></media-captions-menu>
      <media-playback-rate-menu anchor="auto" hidden></media-playback-rate-menu>
      <media-rendition-menu anchor="auto" hidden></media-rendition-menu>
    </media-controller>

  `;
  }
  var MediaThemeVimeonovaElement = class extends MediaThemeElement {
    static template = template17;
  };
  if (GlobalThis.customElements && !GlobalThis.customElements.get("media-theme-vimeonova")) {
    GlobalThis.customElements.define("media-theme-vimeonova", MediaThemeVimeonovaElement);
  }
})();
